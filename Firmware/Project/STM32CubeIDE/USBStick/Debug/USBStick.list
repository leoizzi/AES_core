
USBStick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017458  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005108c  08017604  08017604  00027604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08068690  08068690  0008030c  2**0
                  CONTENTS
  4 .ARM          00000000  08068690  08068690  0008030c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08068690  08068690  0008030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08068690  08068690  00078690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08068694  08068694  00078694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000030c  20000000  08068698  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d650  20000310  080689a4  00080310  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000d960  080689a4  0008d960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0008030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000581bd  00000000  00000000  0008033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b68e  00000000  00000000  000d84f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026b8  00000000  00000000  000e3b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002250  00000000  00000000  000e6240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029334  00000000  00000000  000e8490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048621  00000000  00000000  001117c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeed5  00000000  00000000  00159de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00208cba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cf0  00000000  00000000  00208d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000310 	.word	0x20000310
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080175ec 	.word	0x080175ec

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000314 	.word	0x20000314
 80001e8:	080175ec 	.word	0x080175ec

080001ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <HAL_Init+0x40>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <HAL_Init+0x40>)
 80001f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	4b0b      	ldr	r3, [pc, #44]	; (800022c <HAL_Init+0x40>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <HAL_Init+0x40>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000208:	4b08      	ldr	r3, [pc, #32]	; (800022c <HAL_Init+0x40>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <HAL_Init+0x40>)
 800020e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000214:	2003      	movs	r0, #3
 8000216:	f000 fb8f 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f808 	bl	8000230 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000220:	f00a fdc2 	bl	800ada8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000224:	2300      	movs	r3, #0
}
 8000226:	4618      	mov	r0, r3
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40023c00 	.word	0x40023c00

08000230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f003 f8be 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 800023c:	4603      	mov	r3, r0
 800023e:	4a09      	ldr	r2, [pc, #36]	; (8000264 <HAL_InitTick+0x34>)
 8000240:	fba2 2303 	umull	r2, r3, r2, r3
 8000244:	099b      	lsrs	r3, r3, #6
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fbab 	bl	80009a2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800024c:	2200      	movs	r2, #0
 800024e:	6879      	ldr	r1, [r7, #4]
 8000250:	f04f 30ff 	mov.w	r0, #4294967295
 8000254:	f000 fb7b 	bl	800094e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	10624dd3 	.word	0x10624dd3

08000268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  uwTick++;
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <HAL_IncTick+0x18>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	4a03      	ldr	r2, [pc, #12]	; (8000280 <HAL_IncTick+0x18>)
 8000274:	6013      	str	r3, [r2, #0]
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	20000438 	.word	0x20000438

08000284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  return uwTick;
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <HAL_GetTick+0x14>)
 800028a:	681b      	ldr	r3, [r3, #0]
}
 800028c:	4618      	mov	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	20000438 	.word	0x20000438

0800029c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80002a8:	f7ff ffec 	bl	8000284 <HAL_GetTick>
 80002ac:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80002ae:	bf00      	nop
 80002b0:	f7ff ffe8 	bl	8000284 <HAL_GetTick>
 80002b4:	4602      	mov	r2, r0
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	1ad2      	subs	r2, r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d3f7      	bcc.n	80002b0 <HAL_Delay+0x14>
  {
  }
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b084      	sub	sp, #16
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002d2:	2300      	movs	r3, #0
 80002d4:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d101      	bne.n	80002e0 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80002dc:	2301      	movs	r3, #1
 80002de:	e033      	b.n	8000348 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d109      	bne.n	80002fc <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2200      	movs	r2, #0
 80002f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f009 ff48 	bl	800a18c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	2b00      	cmp	r3, #0
 8000306:	d118      	bne.n	800033a <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000310:	f023 0302 	bic.w	r3, r3, #2
 8000314:	f043 0202 	orr.w	r2, r3, #2
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 f93b 	bl	8000598 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800032c:	f023 0303 	bic.w	r3, r3, #3
 8000330:	f043 0201 	orr.w	r2, r3, #1
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	641a      	str	r2, [r3, #64]	; 0x40
 8000338:	e001      	b.n	800033e <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800033a:	2301      	movs	r3, #1
 800033c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2200      	movs	r2, #0
 8000342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000346:	7bfb      	ldrb	r3, [r7, #15]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000364:	2b01      	cmp	r3, #1
 8000366:	d101      	bne.n	800036c <HAL_ADC_ConfigChannel+0x1c>
 8000368:	2302      	movs	r3, #2
 800036a:	e105      	b.n	8000578 <HAL_ADC_ConfigChannel+0x228>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2201      	movs	r2, #1
 8000370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b09      	cmp	r3, #9
 800037a:	d925      	bls.n	80003c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68d9      	ldr	r1, [r3, #12]
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	b29b      	uxth	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	4613      	mov	r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4413      	add	r3, r2
 8000390:	3b1e      	subs	r3, #30
 8000392:	2207      	movs	r2, #7
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	43da      	mvns	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	400a      	ands	r2, r1
 80003a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68d9      	ldr	r1, [r3, #12]
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	689a      	ldr	r2, [r3, #8]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	4618      	mov	r0, r3
 80003b4:	4603      	mov	r3, r0
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	4403      	add	r3, r0
 80003ba:	3b1e      	subs	r3, #30
 80003bc:	409a      	lsls	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	430a      	orrs	r2, r1
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	e022      	b.n	800040e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6919      	ldr	r1, [r3, #16]
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	461a      	mov	r2, r3
 80003d6:	4613      	mov	r3, r2
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4413      	add	r3, r2
 80003dc:	2207      	movs	r2, #7
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	43da      	mvns	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	400a      	ands	r2, r1
 80003ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	6919      	ldr	r1, [r3, #16]
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	4603      	mov	r3, r0
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	4403      	add	r3, r0
 8000404:	409a      	lsls	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	430a      	orrs	r2, r1
 800040c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	2b06      	cmp	r3, #6
 8000414:	d824      	bhi.n	8000460 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	685a      	ldr	r2, [r3, #4]
 8000420:	4613      	mov	r3, r2
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	4413      	add	r3, r2
 8000426:	3b05      	subs	r3, #5
 8000428:	221f      	movs	r2, #31
 800042a:	fa02 f303 	lsl.w	r3, r2, r3
 800042e:	43da      	mvns	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	400a      	ands	r2, r1
 8000436:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b29b      	uxth	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	685a      	ldr	r2, [r3, #4]
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	3b05      	subs	r3, #5
 8000452:	fa00 f203 	lsl.w	r2, r0, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	430a      	orrs	r2, r1
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
 800045e:	e04c      	b.n	80004fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	2b0c      	cmp	r3, #12
 8000466:	d824      	bhi.n	80004b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	685a      	ldr	r2, [r3, #4]
 8000472:	4613      	mov	r3, r2
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	4413      	add	r3, r2
 8000478:	3b23      	subs	r3, #35	; 0x23
 800047a:	221f      	movs	r2, #31
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	43da      	mvns	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	400a      	ands	r2, r1
 8000488:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	b29b      	uxth	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	4613      	mov	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	4413      	add	r3, r2
 80004a2:	3b23      	subs	r3, #35	; 0x23
 80004a4:	fa00 f203 	lsl.w	r2, r0, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	631a      	str	r2, [r3, #48]	; 0x30
 80004b0:	e023      	b.n	80004fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	4613      	mov	r3, r2
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	4413      	add	r3, r2
 80004c2:	3b41      	subs	r3, #65	; 0x41
 80004c4:	221f      	movs	r2, #31
 80004c6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ca:	43da      	mvns	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	400a      	ands	r2, r1
 80004d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	4618      	mov	r0, r3
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	685a      	ldr	r2, [r3, #4]
 80004e6:	4613      	mov	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	3b41      	subs	r3, #65	; 0x41
 80004ee:	fa00 f203 	lsl.w	r2, r0, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	430a      	orrs	r2, r1
 80004f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a21      	ldr	r2, [pc, #132]	; (8000584 <HAL_ADC_ConfigChannel+0x234>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d109      	bne.n	8000518 <HAL_ADC_ConfigChannel+0x1c8>
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b12      	cmp	r3, #18
 800050a:	d105      	bne.n	8000518 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <HAL_ADC_ConfigChannel+0x238>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a1d      	ldr	r2, [pc, #116]	; (8000588 <HAL_ADC_ConfigChannel+0x238>)
 8000512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000516:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a19      	ldr	r2, [pc, #100]	; (8000584 <HAL_ADC_ConfigChannel+0x234>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d125      	bne.n	800056e <HAL_ADC_ConfigChannel+0x21e>
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a19      	ldr	r2, [pc, #100]	; (800058c <HAL_ADC_ConfigChannel+0x23c>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d003      	beq.n	8000534 <HAL_ADC_ConfigChannel+0x1e4>
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b11      	cmp	r3, #17
 8000532:	d11c      	bne.n	800056e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_ADC_ConfigChannel+0x238>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <HAL_ADC_ConfigChannel+0x238>)
 800053a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800053e:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a11      	ldr	r2, [pc, #68]	; (800058c <HAL_ADC_ConfigChannel+0x23c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d111      	bne.n	800056e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <HAL_ADC_ConfigChannel+0x240>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a11      	ldr	r2, [pc, #68]	; (8000594 <HAL_ADC_ConfigChannel+0x244>)
 8000550:	fba2 2303 	umull	r2, r3, r2, r3
 8000554:	0c9a      	lsrs	r2, r3, #18
 8000556:	4613      	mov	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	4413      	add	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8000560:	e002      	b.n	8000568 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3b01      	subs	r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1f9      	bne.n	8000562 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2200      	movs	r2, #0
 8000572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	40012000 	.word	0x40012000
 8000588:	40012300 	.word	0x40012300
 800058c:	10000012 	.word	0x10000012
 8000590:	200000a4 	.word	0x200000a4
 8000594:	431bde83 	.word	0x431bde83

08000598 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80005a0:	4b7d      	ldr	r3, [pc, #500]	; (8000798 <ADC_Init+0x200>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4a7c      	ldr	r2, [pc, #496]	; (8000798 <ADC_Init+0x200>)
 80005a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80005aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80005ac:	4b7a      	ldr	r3, [pc, #488]	; (8000798 <ADC_Init+0x200>)
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	4978      	ldr	r1, [pc, #480]	; (8000798 <ADC_Init+0x200>)
 80005b6:	4313      	orrs	r3, r2
 80005b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6859      	ldr	r1, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	021a      	lsls	r2, r3, #8
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	430a      	orrs	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6859      	ldr	r1, [r3, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	430a      	orrs	r2, r1
 80005fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800060e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6899      	ldr	r1, [r3, #8]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	68da      	ldr	r2, [r3, #12]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	430a      	orrs	r2, r1
 8000620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000626:	4a5d      	ldr	r2, [pc, #372]	; (800079c <ADC_Init+0x204>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d022      	beq.n	8000672 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800063a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6899      	ldr	r1, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	430a      	orrs	r2, r1
 800064c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800065c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6899      	ldr	r1, [r3, #8]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	430a      	orrs	r2, r1
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	e00f      	b.n	8000692 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000690:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f022 0202 	bic.w	r2, r2, #2
 80006a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6899      	ldr	r1, [r3, #8]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	005a      	lsls	r2, r3, #1
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d026      	beq.n	800070c <ADC_Init+0x174>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006cc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	685a      	ldr	r2, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006dc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006e8:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	fa93 f3a3 	rbit	r3, r3
 80006f0:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	fab3 f383 	clz	r3, r3
 80006f8:	fa02 f103 	lsl.w	r1, r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	430a      	orrs	r2, r1
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	e007      	b.n	800071c <ADC_Init+0x184>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800071a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	3b01      	subs	r3, #1
 8000738:	051a      	lsls	r2, r3, #20
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	430a      	orrs	r2, r1
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6899      	ldr	r1, [r3, #8]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	025a      	lsls	r2, r3, #9
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	430a      	orrs	r2, r1
 8000764:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6899      	ldr	r1, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	029a      	lsls	r2, r3, #10
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	430a      	orrs	r2, r1
 8000788:	609a      	str	r2, [r3, #8]
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40012300 	.word	0x40012300
 800079c:	0f000001 	.word	0x0f000001

080007a0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4907      	ldr	r1, [pc, #28]	; (8000834 <NVIC_EnableIRQ+0x30>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100

08000838 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	da0b      	bge.n	8000864 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <NVIC_SetPriority+0x4c>)
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	3b04      	subs	r3, #4
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000862:	e009      	b.n	8000878 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4907      	ldr	r1, [pc, #28]	; (8000888 <NVIC_SetPriority+0x50>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00
 8000888:	e000e100 	.word	0xe000e100

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f7ff ff8e 	bl	8000838 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff2d 	bl	80007a0 <NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff42 	bl	80007e8 <NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff8e 	bl	800088c <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff35 	bl	8000804 <NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffa2 	bl	80008f4 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d106      	bne.n	80009d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80009d6:	e005      	b.n	80009e4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009de:	f023 0304 	bic.w	r3, r3, #4
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009f8:	f000 f802 	bl	8000a00 <HAL_SYSTICK_Callback>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <HAL_CRC_Init>:
  * @param  hcrc: pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d101      	bne.n	8000a20 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e011      	b.n	8000a44 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f009 fbe7 	bl	800a204 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2202      	movs	r2, #2
 8000a3a:	715a      	strb	r2, [r3, #5]
   
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d101      	bne.n	8000a62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e05a      	b.n	8000b18 <HAL_DMA_Init+0xcc>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2202      	movs	r2, #2
 8000a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <HAL_DMA_Init+0xd4>)
 8000a76:	4013      	ands	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d107      	bne.n	8000ac6 <HAL_DMA_Init+0x7a>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f023 0307 	bic.w	r3, r3, #7
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d104      	bne.n	8000afa <HAL_DMA_Init+0xae>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 fa28 	bl	8000f58 <DMA_CalcBaseAndBitshift>

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	f010803f 	.word	0xf010803f

08000b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <HAL_DMA_Start_IT+0x1c>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e02e      	b.n	8000b9e <HAL_DMA_Start_IT+0x7a>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2201      	movs	r2, #1
 8000b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]

  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f000 f9c8 	bl	8000efc <DMA_SetConfig>

  /* Enable all interrupts */
  hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f042 021e 	orr.w	r2, r2, #30
 8000b7a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR |= DMA_IT_FE;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b8a:	615a      	str	r2, [r3, #20]

   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0201 	orr.w	r2, r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
} 
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Disable the stream */
  __HAL_DMA_DISABLE(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0201 	bic.w	r2, r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bc2:	f7ff fb5f 	bl	8000284 <HAL_GetTick>
 8000bc6:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != 0U)
 8000bc8:	e017      	b.n	8000bfa <HAL_DMA_Abort+0x54>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bca:	f7ff fb5b 	bl	8000284 <HAL_GetTick>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bd8:	d90f      	bls.n	8000bfa <HAL_DMA_Abort+0x54>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f043 0220 	orr.w	r2, r3, #32
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e00f      	b.n	8000c1a <HAL_DMA_Abort+0x74>
  while((hdma->Instance->CR & DMA_SxCR_EN) != 0U)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e0      	bne.n	8000bca <HAL_DMA_Abort+0x24>
    }
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2201      	movs	r2, #1
 8000c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d02a      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x78>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d023      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x78>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0204 	bic.w	r2, r2, #4
 8000c62:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c68:	2208      	movs	r2, #8
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	f043 0201 	orr.w	r2, r3, #1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2204      	movs	r2, #4
 8000c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x78>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	4798      	blx	r3
      }
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((regs->ISR & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca4:	4993      	ldr	r1, [pc, #588]	; (8000ef4 <HAL_DMA_IRQHandler+0x2d0>)
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d02a      	beq.n	8000d06 <HAL_DMA_IRQHandler+0xe2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d023      	beq.n	8000d06 <HAL_DMA_IRQHandler+0xe2>
    {
      /* Disable the FIFO Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ccc:	615a      	str	r2, [r3, #20]

      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd2:	4a88      	ldr	r2, [pc, #544]	; (8000ef4 <HAL_DMA_IRQHandler+0x2d0>)
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f043 0202 	orr.w	r2, r3, #2
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2204      	movs	r2, #4
 8000cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_DMA_IRQHandler+0xe2>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	4798      	blx	r3
      }
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((regs->ISR & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d0e:	497a      	ldr	r1, [pc, #488]	; (8000ef8 <HAL_DMA_IRQHandler+0x2d4>)
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d02a      	beq.n	8000d70 <HAL_DMA_IRQHandler+0x14c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d023      	beq.n	8000d70 <HAL_DMA_IRQHandler+0x14c>
    {
      /* Disable the direct mode Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0202 	bic.w	r2, r2, #2
 8000d36:	601a      	str	r2, [r3, #0]

      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d3c:	4a6e      	ldr	r2, [pc, #440]	; (8000ef8 <HAL_DMA_IRQHandler+0x2d4>)
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	f043 0204 	orr.w	r2, r3, #4
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2204      	movs	r2, #4
 8000d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_DMA_IRQHandler+0x14c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	4798      	blx	r3
      }
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((regs->ISR & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d78:	2110      	movs	r1, #16
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d04c      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x1fa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d045      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x1fa>
    {
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d01d      	beq.n	8000ddc <HAL_DMA_IRQHandler+0x1b8>
      {
        /* Clear the half transfer complete flag */
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da4:	2210      	movs	r2, #16
 8000da6:	409a      	lsls	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0U)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d104      	bne.n	8000dc4 <HAL_DMA_IRQHandler+0x1a0>
        {
          /* Change DMA peripheral state */
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2231      	movs	r2, #49	; 0x31
 8000dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8000dc2:	e024      	b.n	8000e0e <HAL_DMA_IRQHandler+0x1ea>
        }
        /* Current memory buffer used is Memory 1 */
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0U)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d01d      	beq.n	8000e0e <HAL_DMA_IRQHandler+0x1ea>
        {
          /* Change DMA peripheral state */
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2241      	movs	r2, #65	; 0x41
 8000dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8000dda:	e018      	b.n	8000e0e <HAL_DMA_IRQHandler+0x1ea>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d107      	bne.n	8000dfa <HAL_DMA_IRQHandler+0x1d6>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0208 	bic.w	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
        }
        /* Clear the half transfer complete flag */
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dfe:	2210      	movs	r2, #16
 8000e00:	409a      	lsls	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2231      	movs	r2, #49	; 0x31
 8000e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      }

      if(hdma->XferHalfCpltCallback != NULL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x1fa>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	4798      	blx	r3
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((regs->ISR & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e26:	2120      	movs	r1, #32
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d05c      	beq.n	8000eec <HAL_DMA_IRQHandler+0x2c8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d055      	beq.n	8000eec <HAL_DMA_IRQHandler+0x2c8>
    {
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d025      	beq.n	8000e9a <HAL_DMA_IRQHandler+0x276>
      {
        /* Clear the transfer complete flag */
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e52:	2220      	movs	r2, #32
 8000e54:	409a      	lsls	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d108      	bne.n	8000e7a <HAL_DMA_IRQHandler+0x256>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d03d      	beq.n	8000eec <HAL_DMA_IRQHandler+0x2c8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	4798      	blx	r3
          hdma->XferCpltCallback(hdma);
        }
      }
    }
  }
}
 8000e78:	e038      	b.n	8000eec <HAL_DMA_IRQHandler+0x2c8>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d031      	beq.n	8000eec <HAL_DMA_IRQHandler+0x2c8>
          if(hdma->XferCpltCallback != NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d02d      	beq.n	8000eec <HAL_DMA_IRQHandler+0x2c8>
            hdma->XferCpltCallback(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	4798      	blx	r3
}
 8000e98:	e028      	b.n	8000eec <HAL_DMA_IRQHandler+0x2c8>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d107      	bne.n	8000eb8 <HAL_DMA_IRQHandler+0x294>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0210 	bic.w	r2, r2, #16
 8000eb6:	601a      	str	r2, [r3, #0]
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	609a      	str	r2, [r3, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	64da      	str	r2, [r3, #76]	; 0x4c
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2211      	movs	r2, #17
 8000ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_DMA_IRQHandler+0x2c8>
          hdma->XferCpltCallback(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	00800001 	.word	0x00800001
 8000ef8:	00800004 	.word	0x00800004

08000efc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b40      	cmp	r3, #64	; 0x40
 8000f28:	d108      	bne.n	8000f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000f3a:	e007      	b.n	8000f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3b10      	subs	r3, #16
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <DMA_CalcBaseAndBitshift+0x64>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	655a      	str	r2, [r3, #84]	; 0x54
  
  if (stream_number > 3U)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d909      	bls.n	8000f9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	1d1a      	adds	r2, r3, #4
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	651a      	str	r2, [r3, #80]	; 0x50
 8000f98:	e007      	b.n	8000faa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000fa2:	f023 0303 	bic.w	r3, r3, #3
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6513      	str	r3, [r2, #80]	; 0x50
  }
  
  return hdma->StreamBaseAddress;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	aaaaaaab 	.word	0xaaaaaaab
 8000fc0:	0801766c 	.word	0x0801766c

08000fc4 <HAL_FLASH_Program>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <HAL_FLASH_Program+0xa0>)
 8000fd8:	7e1b      	ldrb	r3, [r3, #24]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_FLASH_Program+0x1e>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e03b      	b.n	800105a <HAL_FLASH_Program+0x96>
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_FLASH_Program+0xa0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fec:	f000 f868 	bl	80010c0 <FLASH_WaitForLastOperation>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d12b      	bne.n	8001052 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d105      	bne.n	800100c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001000:	783b      	ldrb	r3, [r7, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	68b8      	ldr	r0, [r7, #8]
 8001006:	f000 f909 	bl	800121c <FLASH_Program_Byte>
 800100a:	e016      	b.n	800103a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d105      	bne.n	800101e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001012:	883b      	ldrh	r3, [r7, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f000 f8dc 	bl	80011d4 <FLASH_Program_HalfWord>
 800101c:	e00d      	b.n	800103a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d105      	bne.n	8001030 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	f000 f8b1 	bl	8001190 <FLASH_Program_Word>
 800102e:	e004      	b.n	800103a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f000 f885 	bl	8001144 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800103a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800103e:	f000 f83f 	bl	80010c0 <FLASH_WaitForLastOperation>
 8001042:	4603      	mov	r3, r0
 8001044:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_FLASH_Program+0xa4>)
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_FLASH_Program+0xa4>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_FLASH_Program+0xa0>)
 8001054:	2200      	movs	r2, #0
 8001056:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001058:	7dfb      	ldrb	r3, [r7, #23]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000043c 	.word	0x2000043c
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_FLASH_Unlock+0x28>)
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	da07      	bge.n	8001088 <HAL_FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_FLASH_Unlock+0x28>)
 800107a:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_FLASH_Unlock+0x2c>)
 800107c:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_FLASH_Unlock+0x28>)
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_FLASH_Unlock+0x30>)
 8001082:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8001084:	2300      	movs	r3, #0
 8001086:	e000      	b.n	800108a <HAL_FLASH_Unlock+0x1e>
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40023c00 	.word	0x40023c00
 8001098:	45670123 	.word	0x45670123
 800109c:	cdef89ab 	.word	0xcdef89ab

080010a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_FLASH_Lock+0x1c>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_FLASH_Lock+0x1c>)
 80010aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <FLASH_WaitForLastOperation+0x7c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80010d2:	f7ff f8d7 	bl	8000284 <HAL_GetTick>
 80010d6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010d8:	e010      	b.n	80010fc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d00c      	beq.n	80010fc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <FLASH_WaitForLastOperation+0x38>
 80010e8:	f7ff f8cc 	bl	8000284 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d201      	bcs.n	80010fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e01b      	b.n	8001134 <FLASH_WaitForLastOperation+0x74>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <FLASH_WaitForLastOperation+0x80>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001108:	d0e7      	beq.n	80010da <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <FLASH_WaitForLastOperation+0x80>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b01      	cmp	r3, #1
 8001114:	d102      	bne.n	800111c <FLASH_WaitForLastOperation+0x5c>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <FLASH_WaitForLastOperation+0x80>)
 8001118:	2201      	movs	r2, #1
 800111a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <FLASH_WaitForLastOperation+0x80>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001124:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001128:	d103      	bne.n	8001132 <FLASH_WaitForLastOperation+0x72>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800112a:	f000 f899 	bl	8001260 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <FLASH_WaitForLastOperation+0x74>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
  
}  
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000043c 	.word	0x2000043c
 8001140:	40023c00 	.word	0x40023c00

08001144 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <FLASH_Program_DoubleWord+0x48>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <FLASH_Program_DoubleWord+0x48>)
 8001156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800115a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <FLASH_Program_DoubleWord+0x48>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <FLASH_Program_DoubleWord+0x48>)
 8001162:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001166:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <FLASH_Program_DoubleWord+0x48>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <FLASH_Program_DoubleWord+0x48>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6113      	str	r3, [r2, #16]

  *(__IO uint64_t*)Address = Data;
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800117a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023c00 	.word	0x40023c00

08001190 <FLASH_Program_Word>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <FLASH_Program_Word+0x40>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <FLASH_Program_Word+0x40>)
 80011a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <FLASH_Program_Word+0x40>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <FLASH_Program_Word+0x40>)
 80011ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <FLASH_Program_Word+0x40>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <FLASH_Program_Word+0x40>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <FLASH_Program_HalfWord+0x44>)
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <FLASH_Program_HalfWord+0x44>)
 80011e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <FLASH_Program_HalfWord+0x44>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4a09      	ldr	r2, [pc, #36]	; (8001218 <FLASH_Program_HalfWord+0x44>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <FLASH_Program_HalfWord+0x44>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <FLASH_Program_HalfWord+0x44>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	801a      	strh	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00

0800121c <FLASH_Program_Byte>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <FLASH_Program_Byte+0x40>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a0b      	ldr	r2, [pc, #44]	; (800125c <FLASH_Program_Byte+0x40>)
 800122e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001232:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <FLASH_Program_Byte+0x40>)
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <FLASH_Program_Byte+0x40>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <FLASH_Program_Byte+0x40>)
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <FLASH_Program_Byte+0x40>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	701a      	strb	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b10      	cmp	r3, #16
 800126e:	d108      	bne.n	8001282 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001270:	4b2e      	ldr	r3, [pc, #184]	; (800132c <FLASH_SetErrorCode+0xcc>)
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	4a2c      	ldr	r2, [pc, #176]	; (800132c <FLASH_SetErrorCode+0xcc>)
 800127a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 800127e:	2210      	movs	r2, #16
 8001280:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	2b20      	cmp	r3, #32
 800128c:	d108      	bne.n	80012a0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <FLASH_SetErrorCode+0xcc>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	4a25      	ldr	r2, [pc, #148]	; (800132c <FLASH_SetErrorCode+0xcc>)
 8001298:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 800129c:	2220      	movs	r2, #32
 800129e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	d108      	bne.n	80012be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <FLASH_SetErrorCode+0xcc>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <FLASH_SetErrorCode+0xcc>)
 80012b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	2b80      	cmp	r3, #128	; 0x80
 80012c8:	d108      	bne.n	80012dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <FLASH_SetErrorCode+0xcc>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	4a16      	ldr	r2, [pc, #88]	; (800132c <FLASH_SetErrorCode+0xcc>)
 80012d4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e8:	d109      	bne.n	80012fe <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <FLASH_SetErrorCode+0xcc>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <FLASH_SetErrorCode+0xcc>)
 80012f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 80012f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b02      	cmp	r3, #2
 8001308:	d108      	bne.n	800131c <FLASH_SetErrorCode+0xbc>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <FLASH_SetErrorCode+0xcc>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <FLASH_SetErrorCode+0xcc>)
 8001314:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <FLASH_SetErrorCode+0xc8>)
 8001318:	2202      	movs	r2, #2
 800131a:	60da      	str	r2, [r3, #12]
  }
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00
 800132c:	2000043c 	.word	0x2000043c

08001330 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_FLASHEx_Erase+0xdc>)
 8001344:	7e1b      	ldrb	r3, [r3, #24]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_FLASHEx_Erase+0x1e>
 800134a:	2302      	movs	r3, #2
 800134c:	e05a      	b.n	8001404 <HAL_FLASHEx_Erase+0xd4>
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_FLASHEx_Erase+0xdc>)
 8001350:	2201      	movs	r2, #1
 8001352:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001354:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001358:	f7ff feb2 	bl	80010c0 <FLASH_WaitForLastOperation>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d14a      	bne.n	80013fc <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d117      	bne.n	80013a6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4619      	mov	r1, r3
 8001382:	4610      	mov	r0, r2
 8001384:	f000 f846 	bl	8001414 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001388:	f24c 3050 	movw	r0, #50000	; 0xc350
 800138c:	f7ff fe98 	bl	80010c0 <FLASH_WaitForLastOperation>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_FLASHEx_Erase+0xe0>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_FLASHEx_Erase+0xe0>)
 800139a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800139e:	f023 0304 	bic.w	r3, r3, #4
 80013a2:	6113      	str	r3, [r2, #16]
 80013a4:	e028      	b.n	80013f8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	e01c      	b.n	80013e8 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	68b8      	ldr	r0, [r7, #8]
 80013b8:	f000 f866 	bl	8001488 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013c0:	f7ff fe7e 	bl	80010c0 <FLASH_WaitForLastOperation>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_FLASHEx_Erase+0xe0>)
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_FLASHEx_Erase+0xe0>)
 80013ce:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80013d2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	601a      	str	r2, [r3, #0]
          break;
 80013e0:	e00a      	b.n	80013f8 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	4413      	add	r3, r2
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3da      	bcc.n	80013ae <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80013f8:	f000 f89e 	bl	8001538 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_FLASHEx_Erase+0xdc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	761a      	strb	r2, [r3, #24]

  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000043c 	.word	0x2000043c
 8001410:	40023c00 	.word	0x40023c00

08001414 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <FLASH_MassErase+0x70>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <FLASH_MassErase+0x70>)
 8001426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800142a:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d108      	bne.n	8001444 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <FLASH_MassErase+0x70>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <FLASH_MassErase+0x70>)
 8001438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6113      	str	r3, [r2, #16]
 8001442:	e00f      	b.n	8001464 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d106      	bne.n	8001458 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <FLASH_MassErase+0x70>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <FLASH_MassErase+0x70>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6113      	str	r3, [r2, #16]
 8001456:	e005      	b.n	8001464 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <FLASH_MassErase+0x70>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a09      	ldr	r2, [pc, #36]	; (8001484 <FLASH_MassErase+0x70>)
 800145e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001462:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <FLASH_MassErase+0x70>)
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	4313      	orrs	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <FLASH_MassErase+0x70>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6113      	str	r3, [r2, #16]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00

08001488 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e010      	b.n	80014c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d103      	bne.n	80014b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e009      	b.n	80014c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d103      	bne.n	80014c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80014b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e002      	b.n	80014c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80014c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c4:	617b      	str	r3, [r7, #20]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0b      	cmp	r3, #11
 80014ca:	d902      	bls.n	80014d2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3304      	adds	r3, #4
 80014d0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <FLASH_Erase_Sector+0xac>)
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <FLASH_Erase_Sector+0xac>)
 80014d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <FLASH_Erase_Sector+0xac>)
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	4914      	ldr	r1, [pc, #80]	; (8001534 <FLASH_Erase_Sector+0xac>)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <FLASH_Erase_Sector+0xac>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <FLASH_Erase_Sector+0xac>)
 80014f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014f4:	6113      	str	r3, [r2, #16]
 80014f6:	23f8      	movs	r3, #248	; 0xf8
 80014f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	60fb      	str	r3, [r7, #12]
  return(result);
 8001502:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	f043 0202 	orr.w	r2, r3, #2
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <FLASH_Erase_Sector+0xac>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	4907      	ldr	r1, [pc, #28]	; (8001534 <FLASH_Erase_Sector+0xac>)
 8001518:	4313      	orrs	r3, r2
 800151a:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <FLASH_Erase_Sector+0xac>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <FLASH_Erase_Sector+0xac>)
 8001522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001526:	6113      	str	r3, [r2, #16]
}
 8001528:	bf00      	nop
 800152a:	371c      	adds	r7, #28
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40023c00 	.word	0x40023c00

08001538 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <FLASH_FlushCaches+0x88>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001544:	2b00      	cmp	r3, #0
 8001546:	d017      	beq.n	8001578 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <FLASH_FlushCaches+0x88>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <FLASH_FlushCaches+0x88>)
 800154e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001552:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <FLASH_FlushCaches+0x88>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <FLASH_FlushCaches+0x88>)
 800155a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <FLASH_FlushCaches+0x88>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a16      	ldr	r2, [pc, #88]	; (80015c0 <FLASH_FlushCaches+0x88>)
 8001566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800156a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <FLASH_FlushCaches+0x88>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <FLASH_FlushCaches+0x88>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <FLASH_FlushCaches+0x88>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d017      	beq.n	80015b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <FLASH_FlushCaches+0x88>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <FLASH_FlushCaches+0x88>)
 800158a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800158e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <FLASH_FlushCaches+0x88>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <FLASH_FlushCaches+0x88>)
 8001596:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <FLASH_FlushCaches+0x88>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <FLASH_FlushCaches+0x88>)
 80015a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <FLASH_FlushCaches+0x88>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <FLASH_FlushCaches+0x88>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b2:	6013      	str	r3, [r2, #0]
  }
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e177      	b.n	80018d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8166 	bne.w	80018ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x4a>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b12      	cmp	r3, #18
 800160c:	d123      	bne.n	8001656 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	69b9      	ldr	r1, [r7, #24]
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0203 	and.w	r2, r3, #3
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d00b      	beq.n	80016aa <HAL_GPIO_Init+0xe6>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169e:	2b11      	cmp	r3, #17
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d130      	bne.n	800170c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 0201 	and.w	r2, r3, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80c0 	beq.w	80018ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_GPIO_Init+0x324>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_GPIO_Init+0x324>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_GPIO_Init+0x324>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001766:	4a61      	ldr	r2, [pc, #388]	; (80018ec <HAL_GPIO_Init+0x328>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_GPIO_Init+0x32c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d037      	beq.n	8001802 <HAL_GPIO_Init+0x23e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a57      	ldr	r2, [pc, #348]	; (80018f4 <HAL_GPIO_Init+0x330>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d031      	beq.n	80017fe <HAL_GPIO_Init+0x23a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x334>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d02b      	beq.n	80017fa <HAL_GPIO_Init+0x236>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a55      	ldr	r2, [pc, #340]	; (80018fc <HAL_GPIO_Init+0x338>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d025      	beq.n	80017f6 <HAL_GPIO_Init+0x232>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a54      	ldr	r2, [pc, #336]	; (8001900 <HAL_GPIO_Init+0x33c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01f      	beq.n	80017f2 <HAL_GPIO_Init+0x22e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a53      	ldr	r2, [pc, #332]	; (8001904 <HAL_GPIO_Init+0x340>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d019      	beq.n	80017ee <HAL_GPIO_Init+0x22a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_GPIO_Init+0x344>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0x226>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a51      	ldr	r2, [pc, #324]	; (800190c <HAL_GPIO_Init+0x348>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00d      	beq.n	80017e6 <HAL_GPIO_Init+0x222>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_GPIO_Init+0x34c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0x21e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4f      	ldr	r2, [pc, #316]	; (8001914 <HAL_GPIO_Init+0x350>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_GPIO_Init+0x21a>
 80017da:	2309      	movs	r3, #9
 80017dc:	e012      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017de:	230a      	movs	r3, #10
 80017e0:	e010      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017e2:	2308      	movs	r3, #8
 80017e4:	e00e      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017e6:	2307      	movs	r3, #7
 80017e8:	e00c      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017ea:	2306      	movs	r3, #6
 80017ec:	e00a      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017ee:	2305      	movs	r3, #5
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x240>
 8001802:	2300      	movs	r3, #0
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f002 0203 	and.w	r2, r2, #3
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001814:	4935      	ldr	r1, [pc, #212]	; (80018ec <HAL_GPIO_Init+0x328>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_GPIO_Init+0x354>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001846:	4a34      	ldr	r2, [pc, #208]	; (8001918 <HAL_GPIO_Init+0x354>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_GPIO_Init+0x354>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <HAL_GPIO_Init+0x354>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_GPIO_Init+0x354>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_GPIO_Init+0x354>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_GPIO_Init+0x354>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_GPIO_Init+0x354>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	f67f ae84 	bls.w	80015e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40021400 	.word	0x40021400
 8001908:	40021800 	.word	0x40021800
 800190c:	40021c00 	.word	0x40021c00
 8001910:	40022000 	.word	0x40022000
 8001914:	40022400 	.word	0x40022400
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	4613      	mov	r3, r2
 800195a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001968:	e003      	b.n	8001972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	041a      	lsls	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0c9      	b.n	8001b2e <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f008 fd96 	bl	800a4e0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019cc:	f001 fd1c 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80019d0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_I2C_Init+0x1b8>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9b      	lsrs	r3, r3, #18
 80019dc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a54      	ldr	r2, [pc, #336]	; (8001b3c <HAL_I2C_Init+0x1bc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d802      	bhi.n	80019f6 <HAL_I2C_Init+0x76>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	e009      	b.n	8001a0a <HAL_I2C_Init+0x8a>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a4f      	ldr	r2, [pc, #316]	; (8001b40 <HAL_I2C_Init+0x1c0>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	3301      	adds	r3, #1
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a49      	ldr	r2, [pc, #292]	; (8001b3c <HAL_I2C_Init+0x1bc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d813      	bhi.n	8001a42 <HAL_I2C_Init+0xc2>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a26:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_I2C_Init+0xbe>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	e045      	b.n	8001aca <HAL_I2C_Init+0x14a>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e043      	b.n	8001aca <HAL_I2C_Init+0x14a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_I2C_Init+0xea>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf0c      	ite	eq
 8001a62:	2301      	moveq	r3, #1
 8001a64:	2300      	movne	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	e010      	b.n	8001a8c <HAL_I2C_Init+0x10c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	009a      	lsls	r2, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bf0c      	ite	eq
 8001a86:	2301      	moveq	r3, #1
 8001a88:	2300      	movne	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_I2C_Init+0x114>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e01a      	b.n	8001aca <HAL_I2C_Init+0x14a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <HAL_I2C_Init+0x132>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab0:	e00b      	b.n	8001aca <HAL_I2C_Init+0x14a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009a      	lsls	r2, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69d9      	ldr	r1, [r3, #28]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6919      	ldr	r1, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6959      	ldr	r1, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	000186a0 	.word	0x000186a0
 8001b40:	10624dd3 	.word	0x10624dd3

08001b44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b08f      	sub	sp, #60	; 0x3c
 8001b48:	af0a      	add	r7, sp, #40	; 0x28
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0f7      	b.n	8001d4a <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f009 fb62 	bl	800b22c <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f004 fde5 	bl	800673c <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	687e      	ldr	r6, [r7, #4]
 8001b7a:	466d      	mov	r5, sp
 8001b7c:	f106 0410 	add.w	r4, r6, #16
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b90:	1d33      	adds	r3, r6, #4
 8001b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f004 fd6f 	bl	8006678 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 fddc 	bl	800675e <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e04c      	b.n	8001c46 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3339      	adds	r3, #57	; 0x39
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	b2d8      	uxtb	r0, r3
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3338      	adds	r3, #56	; 0x38
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	b298      	uxth	r0, r3
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	333e      	adds	r3, #62	; 0x3e
 8001bec:	4602      	mov	r2, r0
 8001bee:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	333b      	adds	r3, #59	; 0x3b
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3340      	adds	r3, #64	; 0x40
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	3344      	adds	r3, #68	; 0x44
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	334c      	adds	r3, #76	; 0x4c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b0e      	cmp	r3, #14
 8001c4a:	d9af      	bls.n	8001bac <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e05a      	b.n	8001d08 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f203 13dd 	addw	r3, r3, #477	; 0x1dd
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	b2d8      	uxtb	r0, r3
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8001c7e:	4602      	mov	r2, r0
 8001c80:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	b298      	uxth	r0, r3
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	333e      	adds	r3, #62	; 0x3e
 8001c96:	4602      	mov	r2, r0
 8001c98:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f203 13df 	addw	r3, r3, #479	; 0x1df
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3340      	adds	r3, #64	; 0x40
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b0e      	cmp	r3, #14
 8001d0c:	d9a1      	bls.n	8001c52 <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	687e      	ldr	r6, [r7, #4]
 8001d16:	466d      	mov	r5, sp
 8001d18:	f106 0410 	add.w	r4, r6, #16
 8001d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d2c:	1d33      	adds	r3, r6, #4
 8001d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f004 fd3b 	bl	80067ac <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 fcda 	bl	80076fc <USB_DevDisconnect>
 return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d52 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_Start+0x16>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e012      	b.n	8001d8e <HAL_PCD_Start+0x3c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_DevConnect (hpcd->Instance);  
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f005 fcab 	bl	80076d0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f004 fccb 	bl	800671a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b08a      	sub	sp, #40	; 0x28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	61bb      	str	r3, [r7, #24]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  USB_OTG_EPTypeDef *ep;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 fd3c 	bl	800783e <USB_GetMode>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 83ad 	bne.w	8002528 <HAL_PCD_IRQHandler+0x792>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f005 fca8 	bl	8007728 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 83a3 	beq.w	8002526 <HAL_PCD_IRQHandler+0x790>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 fc9f 	bl	8007728 <USB_ReadInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d107      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f002 0202 	and.w	r2, r2, #2
 8001e02:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f005 fc8d 	bl	8007728 <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e18:	f040 80b2 	bne.w	8001f80 <HAL_PCD_IRQHandler+0x1ea>
    {
      epnum = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 fc94 	bl	8007752 <USB_ReadDevAllOutEpInterrupt>
 8001e2a:	6238      	str	r0, [r7, #32]
      
      while ( ep_intr )
 8001e2c:	e0a4      	b.n	8001f78 <HAL_PCD_IRQHandler+0x1e2>
      {
        if (ep_intr & 0x1U)
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8099 	beq.w	8001f6c <HAL_PCD_IRQHandler+0x1d6>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 fcb4 	bl	80077b2 <USB_ReadDevOutEPInterrupt>
 8001e4a:	6178      	str	r0, [r7, #20]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d06b      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x198>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e62:	461a      	mov	r2, r3
 8001e64:	2301      	movs	r3, #1
 8001e66:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d13c      	bne.n	8001eea <HAL_PCD_IRQHandler+0x154>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	0159      	lsls	r1, r3, #5
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e96:	1ad1      	subs	r1, r2, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4403      	add	r3, r0
 8001ea6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001eaa:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4403      	add	r3, r0
 8001ece:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4419      	add	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4403      	add	r3, r0
 8001ee4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001ee8:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f009 fa2d 	bl	800b350 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d117      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x198>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d114      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x198>
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x198>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8001f26:	461a      	mov	r2, r3
 8001f28:	2101      	movs	r1, #1
 8001f2a:	f005 fcc9 	bl	80078c0 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <HAL_PCD_IRQHandler+0x1ba>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f009 f9f7 	bl	800b32c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f66:	461a      	mov	r2, r3
 8001f68:	2310      	movs	r3, #16
 8001f6a:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
        ep_intr >>= 1U;
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	623b      	str	r3, [r7, #32]
      while ( ep_intr )
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f af57 	bne.w	8001e2e <HAL_PCD_IRQHandler+0x98>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f005 fbcf 	bl	8007728 <USB_ReadInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f94:	f040 80c2 	bne.w	800211c <HAL_PCD_IRQHandler+0x386>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f005 fbf0 	bl	8007782 <USB_ReadDevAllInEpInterrupt>
 8001fa2:	6238      	str	r0, [r7, #32]
      
      epnum = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
      
      while ( ep_intr )
 8001fa8:	e0b4      	b.n	8002114 <HAL_PCD_IRQHandler+0x37e>
      {
        if (ep_intr & 0x1U) /* In ITR */
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a9 	beq.w	8002108 <HAL_PCD_IRQHandler+0x372>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f005 fc12 	bl	80077ea <USB_ReadDevInEPInterrupt>
 8001fc6:	6178      	str	r0, [r7, #20]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d059      	beq.n	8002086 <HAL_PCD_IRQHandler+0x2f0>
          {
            fifoemptymsk = 0x1U << epnum;
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	613b      	str	r3, [r7, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69b9      	ldr	r1, [r7, #24]
 8001fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fee:	4013      	ands	r3, r2
 8001ff0:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffe:	461a      	mov	r2, r3
 8002000:	2301      	movs	r3, #1
 8002002:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d11b      	bne.n	8002044 <HAL_PCD_IRQHandler+0x2ae>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3344      	adds	r3, #68	; 0x44
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4403      	add	r3, r0
 800202c:	3340      	adds	r3, #64	; 0x40
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4419      	add	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4403      	add	r3, r0
 8002040:	3344      	adds	r3, #68	; 0x44
 8002042:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4619      	mov	r1, r3
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f009 f99b 	bl	800b386 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d116      	bne.n	8002086 <HAL_PCD_IRQHandler+0x2f0>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d113      	bne.n	8002086 <HAL_PCD_IRQHandler+0x2f0>
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	334c      	adds	r3, #76	; 0x4c
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d108      	bne.n	8002086 <HAL_PCD_IRQHandler+0x2f0>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800207e:	461a      	mov	r2, r3
 8002080:	2101      	movs	r1, #1
 8002082:	f005 fc1d 	bl	80078c0 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800209c:	461a      	mov	r2, r3
 800209e:	2308      	movs	r3, #8
 80020a0:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b8:	461a      	mov	r2, r3
 80020ba:	2310      	movs	r3, #16
 80020bc:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d4:	461a      	mov	r2, r3
 80020d6:	2340      	movs	r3, #64	; 0x40
 80020d8:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f0:	461a      	mov	r2, r3
 80020f2:	2302      	movs	r3, #2
 80020f4:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_PCD_IRQHandler+0x372>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8002100:	69f9      	ldr	r1, [r7, #28]
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fc88 	bl	8002a18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3301      	adds	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
        ep_intr >>= 1U;
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	623b      	str	r3, [r7, #32]
      while ( ep_intr )
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f47f af47 	bne.w	8001faa <HAL_PCD_IRQHandler+0x214>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f005 fb01 	bl	8007728 <USB_ReadInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800212c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002130:	d114      	bne.n	800215c <HAL_PCD_IRQHandler+0x3c6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f009 f994 	bl	800b474 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800215a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f005 fae1 	bl	8007728 <USB_ReadInterrupts>
 8002166:	4603      	mov	r3, r0
 8002168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800216c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002170:	d112      	bne.n	8002198 <HAL_PCD_IRQHandler+0x402>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_PCD_IRQHandler+0x3f2>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f009 f950 	bl	800b428 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002196:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f005 fac3 	bl	8007728 <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ac:	f040 808a 	bne.w	80022c4 <HAL_PCD_IRQHandler+0x52e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 fc1e 	bl	8006a0c <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
 80021d4:	e014      	b.n	8002200 <HAL_PCD_IRQHandler+0x46a>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e2:	461a      	mov	r2, r3
 80021e4:	23ff      	movs	r3, #255	; 0xff
 80021e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f4:	461a      	mov	r2, r3
 80021f6:	23ff      	movs	r3, #255	; 0xff
 80021f8:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	3301      	adds	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002206:	429a      	cmp	r2, r3
 8002208:	d3e5      	bcc.n	80021d6 <HAL_PCD_IRQHandler+0x440>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002210:	461a      	mov	r2, r3
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002226:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800222a:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	2b00      	cmp	r3, #0
 8002232:	d016      	beq.n	8002262 <HAL_PCD_IRQHandler+0x4cc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002244:	f043 030b 	orr.w	r3, r3, #11
 8002248:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800225a:	f043 030b 	orr.w	r3, r3, #11
 800225e:	6453      	str	r3, [r2, #68]	; 0x44
 8002260:	e013      	b.n	800228a <HAL_PCD_IRQHandler+0x4f4>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002270:	f043 030b 	orr.w	r3, r3, #11
 8002274:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002284:	f043 030b 	orr.w	r3, r3, #11
 8002288:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002298:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800229c:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	b2d9      	uxtb	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80022ae:	461a      	mov	r2, r3
 80022b0:	f005 fb06 	bl	80078c0 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022c2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f005 fa2d 	bl	8007728 <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d8:	d13d      	bne.n	8002356 <HAL_PCD_IRQHandler+0x5c0>
    {
      USB_ActivateSetup(hpcd->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 fabb 	bl	800785a <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80022f2:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fbe6 	bl	8006aca <USB_GetDevSpeed>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10f      	bne.n	8002324 <HAL_PCD_IRQHandler+0x58e>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e00d      	b.n	8002340 <HAL_PCD_IRQHandler+0x5aa>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2203      	movs	r2, #3
 8002328:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2240      	movs	r2, #64	; 0x40
 800232e:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_FS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800233e:	60da      	str	r2, [r3, #12]
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f009 f848 	bl	800b3d6 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002354:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f005 f9e4 	bl	8007728 <USB_ReadInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b10      	cmp	r3, #16
 8002368:	d161      	bne.n	800242e <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0210 	bic.w	r2, r2, #16
 8002378:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	60fb      	str	r3, [r7, #12]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 020f 	and.w	r2, r3, #15
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	3304      	adds	r3, #4
 8002398:	60bb      	str	r3, [r7, #8]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0c5b      	lsrs	r3, r3, #17
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d124      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x65a>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d035      	beq.n	800241e <HAL_PCD_IRQHandler+0x688>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	68d9      	ldr	r1, [r3, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	69b8      	ldr	r0, [r7, #24]
 80023c6:	f005 f862 	bl	800748e <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d6:	441a      	add	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e8:	441a      	add	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	619a      	str	r2, [r3, #24]
 80023ee:	e016      	b.n	800241e <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	0c5b      	lsrs	r3, r3, #17
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d110      	bne.n	800241e <HAL_PCD_IRQHandler+0x688>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002402:	2208      	movs	r2, #8
 8002404:	4619      	mov	r1, r3
 8002406:	69b8      	ldr	r0, [r7, #24]
 8002408:	f005 f841 	bl	800748e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002418:	441a      	add	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0210 	orr.w	r2, r2, #16
 800242c:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f005 f978 	bl	8007728 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b08      	cmp	r3, #8
 8002440:	d10a      	bne.n	8002458 <HAL_PCD_IRQHandler+0x6c2>
    {
      HAL_PCD_SOFCallback(hpcd);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f008 ffb9 	bl	800b3ba <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f002 0208 	and.w	r2, r2, #8
 8002456:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f005 f963 	bl	8007728 <USB_ReadInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246c:	d10d      	bne.n	800248a <HAL_PCD_IRQHandler+0x6f4>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	4619      	mov	r1, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f009 f81d 	bl	800b4b4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002488:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f005 f94a 	bl	8007728 <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800249e:	d10d      	bne.n	80024bc <HAL_PCD_IRQHandler+0x726>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f008 fff2 	bl	800b490 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024ba:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f005 f931 	bl	8007728 <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d0:	d10a      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x752>
    {
      HAL_PCD_ConnectCallback(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f009 f800 	bl	800b4d8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024e6:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f005 f91b 	bl	8007728 <USB_ReadInterrupts>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d115      	bne.n	8002528 <HAL_PCD_IRQHandler+0x792>
    {
      temp = hpcd->Instance->GOTGINT;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_PCD_IRQHandler+0x77e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f008 fff0 	bl	800b4f4 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	e000      	b.n	8002528 <HAL_PCD_IRQHandler+0x792>
      return;
 8002526:	bf00      	nop
    }
  }
}
 8002528:	3728      	adds	r7, #40	; 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_PCD_SetAddress+0x1a>
 8002544:	2302      	movs	r3, #2
 8002546:	e00f      	b.n	8002568 <HAL_PCD_SetAddress+0x3a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_SetDevAddress(hpcd->Instance, address);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f005 f895 	bl	8007688 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	4608      	mov	r0, r1
 800257a:	4611      	mov	r1, r2
 800257c:	461a      	mov	r2, r3
 800257e:	4603      	mov	r3, r0
 8002580:	70fb      	strb	r3, [r7, #3]
 8002582:	460b      	mov	r3, r1
 8002584:	803b      	strh	r3, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800258e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002592:	2b00      	cmp	r3, #0
 8002594:	da0b      	bge.n	80025ae <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	3338      	adds	r3, #56	; 0x38
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e00c      	b.n	80025c8 <HAL_PCD_EP_Open+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80025d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	09db      	lsrs	r3, r3, #7
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80025e4:	883a      	ldrh	r2, [r7, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	78ba      	ldrb	r2, [r7, #2]
 80025ee:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_PCD_EP_Open+0x92>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8002602:	78bb      	ldrb	r3, [r7, #2]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d102      	bne.n	800260e <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_PCD_EP_Open+0xac>
 8002618:	2302      	movs	r3, #2
 800261a:	e00e      	b.n	800263a <HAL_PCD_EP_Open+0xca>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 fa82 	bl	8006b34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return ret;
 8002638:	7afb      	ldrb	r3, [r7, #11]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800264e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002652:	2b00      	cmp	r3, #0
 8002654:	da0b      	bge.n	800266e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	3338      	adds	r3, #56	; 0x38
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e00c      	b.n	8002688 <HAL_PCD_EP_Close+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	3304      	adds	r3, #4
 8002686:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800268e:	b2da      	uxtb	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	09db      	lsrs	r3, r3, #7
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_EP_Close+0x70>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e00e      	b.n	80026d0 <HAL_PCD_EP_Close+0x8e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f004 fabc 	bl	8006c3e <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2200      	movs	r2, #0
 8002718:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002720:	b2da      	uxtb	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	611a      	str	r2, [r3, #16]
  }
  
  __HAL_LOCK(hpcd); 
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_PCD_EP_Receive+0x6a>
 800273e:	2302      	movs	r3, #2
 8002740:	e020      	b.n	8002784 <HAL_PCD_EP_Receive+0xac>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  if ((ep_addr & 0x7FU) == 0U)
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_PCD_EP_Receive+0x90>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	f004 fd0f 	bl	8007184 <USB_EP0StartXfer>
 8002766:	e008      	b.n	800277a <HAL_PCD_EP_Receive+0xa2>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	6979      	ldr	r1, [r7, #20]
 8002776:	f004 fad7 	bl	8006d28 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd); 
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	460b      	mov	r3, r1
 80027cc:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80027ce:	7afb      	ldrb	r3, [r7, #11]
 80027d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	3338      	adds	r3, #56	; 0x38
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2201      	movs	r2, #1
 80027fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80027fc:	7afb      	ldrb	r3, [r7, #11]
 80027fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002802:	b2da      	uxtb	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d102      	bne.n	8002816 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	611a      	str	r2, [r3, #16]
  }
  
  __HAL_LOCK(hpcd); 
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_PCD_EP_Transmit+0x66>
 8002820:	2302      	movs	r3, #2
 8002822:	e020      	b.n	8002866 <HAL_PCD_EP_Transmit+0xa8>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  if ((ep_addr & 0x7FU) == 0U)
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_PCD_EP_Transmit+0x8c>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6979      	ldr	r1, [r7, #20]
 8002844:	f004 fc9e 	bl	8007184 <USB_EP0StartXfer>
 8002848:	e008      	b.n	800285c <HAL_PCD_EP_Transmit+0x9e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	6979      	ldr	r1, [r7, #20]
 8002858:	f004 fa66 	bl	8006d28 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
     
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 800287a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800287e:	2b00      	cmp	r3, #0
 8002880:	da0b      	bge.n	800289a <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	3338      	adds	r3, #56	; 0x38
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e00a      	b.n	80028b0 <HAL_PCD_EP_SetStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80028c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	09db      	lsrs	r3, r3, #7
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_PCD_EP_SetStall+0x72>
 80028dc:	2302      	movs	r3, #2
 80028de:	e01e      	b.n	800291e <HAL_PCD_EP_SetStall+0xb0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_EPSetStall(hpcd->Instance , ep);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68f9      	ldr	r1, [r7, #12]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fdf4 	bl	80074dc <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <HAL_PCD_EP_SetStall+0xa6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	b2d9      	uxtb	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800290e:	461a      	mov	r2, r3
 8002910:	f004 ffd6 	bl	80078c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8002932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002936:	2b00      	cmp	r3, #0
 8002938:	da0b      	bge.n	8002952 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	3338      	adds	r3, #56	; 0x38
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e00a      	b.n	8002968 <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	3304      	adds	r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800297a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	09db      	lsrs	r3, r3, #7
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_PCD_EP_ClrStall+0x72>
 8002994:	2302      	movs	r3, #2
 8002996:	e00e      	b.n	80029b6 <HAL_PCD_EP_ClrStall+0x90>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_EPClearStall(hpcd->Instance , ep);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 fe05 	bl	80075b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
    
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_PCD_EP_Flush>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_PCD_EP_Flush+0x1a>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e01b      	b.n	8002a10 <HAL_PCD_EP_Flush+0x52>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  if ((ep_addr & 0x80U) == 0x80U)
 80029e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	da09      	bge.n	80029fc <HAL_PCD_EP_Flush+0x3e>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f004 f809 	bl	8006a0c <USB_FlushTxFifo>
 80029fa:	e004      	b.n	8002a06 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 f829 	bl	8006a58 <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
    
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd: PCD handle
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3338      	adds	r3, #56	; 0x38
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d202      	bcs.n	8002a5e <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3303      	adds	r3, #3
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	61bb      	str	r3, [r7, #24]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002a66:	e02b      	b.n	8002ac0 <PCD_WriteEmptyTxFifo+0xa8>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0U)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d202      	bcs.n	8002a84 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	3303      	adds	r3, #3
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68d9      	ldr	r1, [r3, #12]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	b298      	uxth	r0, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f004 fcbe 	bl	8007424 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	441a      	add	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	441a      	add	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d209      	bcs.n	8002aea <PCD_WriteEmptyTxFifo+0xd2>
          ep->xfer_count < ep->xfer_len &&
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d203      	bcs.n	8002aea <PCD_WriteEmptyTxFifo+0xd2>
            ep->xfer_len != 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1be      	bne.n	8002a68 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10f      	bne.n	8002b10 <PCD_WriteEmptyTxFifo+0xf8>
  {
    fifoemptymsk = 0x1U << epnum;
 8002af0:	2201      	movs	r2, #1
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
 8002b26:	4613      	mov	r3, r2
 8002b28:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0U)
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8002b40:	883b      	ldrh	r3, [r7, #0]
 8002b42:	0419      	lsls	r1, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b4e:	e028      	b.n	8002ba2 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	e00d      	b.n	8002b80 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	3340      	adds	r3, #64	; 0x40
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4413      	add	r3, r2
 8002b78:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3ec      	bcc.n	8002b64 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8002b8a:	883b      	ldrh	r3, [r7, #0]
 8002b8c:	0418      	lsls	r0, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6819      	ldr	r1, [r3, #0]
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	4302      	orrs	r2, r0
 8002b9a:	3340      	adds	r3, #64	; 0x40
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd: PCD handle
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	887a      	ldrh	r2, [r7, #2]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_RCC_OscConfig>:
  *         first and then HSE On or HSE Bypass.
  
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0U;  
 8002bdc:	2300      	movs	r3, #0
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d050      	beq.n	8002c8e <HAL_RCC_OscConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bec:	4ba5      	ldr	r3, [pc, #660]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d00c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf8:	4ba2      	ldr	r3, [pc, #648]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d112      	bne.n	8002c2a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c04:	4b9f      	ldr	r3, [pc, #636]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c10:	d10b      	bne.n	8002c2a <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c12:	4b9c      	ldr	r3, [pc, #624]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d036      	beq.n	8002c8c <HAL_RCC_OscConfig+0xb8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d132      	bne.n	8002c8c <HAL_RCC_OscConfig+0xb8>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1e0      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4b96      	ldr	r3, [pc, #600]	; (8002e88 <HAL_RCC_OscConfig+0x2b4>)
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_OscConfig+0x90>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fd fb22 	bl	8000284 <HAL_GetTick>
 8002c40:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fd fb1e 	bl	8000284 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1ca      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b8b      	ldr	r3, [pc, #556]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x70>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0xba>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fd fb0e 	bl	8000284 <HAL_GetTick>
 8002c68:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xaa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fd fb0a 	bl	8000284 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1b6      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	4b81      	ldr	r3, [pc, #516]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d077      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1b6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9a:	4b7a      	ldr	r3, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca6:	4b77      	ldr	r3, [pc, #476]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d126      	bne.n	8002d00 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b74      	ldr	r3, [pc, #464]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d120      	bne.n	8002d00 <HAL_RCC_OscConfig+0x12c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	4b71      	ldr	r3, [pc, #452]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x102>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e18a      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b6b      	ldr	r3, [pc, #428]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6919      	ldr	r1, [r3, #16]
 8002ce2:	23f8      	movs	r3, #248	; 0xf8
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	4962      	ldr	r1, [pc, #392]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e044      	b.n	8002d8a <HAL_RCC_OscConfig+0x1b6>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d02a      	beq.n	8002d5e <HAL_RCC_OscConfig+0x18a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_RCC_OscConfig+0x2b8>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fd fab9 	bl	8000284 <HAL_GetTick>
 8002d12:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fd fab5 	bl	8000284 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e161      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b56      	ldr	r3, [pc, #344]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x142>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6919      	ldr	r1, [r3, #16]
 8002d40:	23f8      	movs	r3, #248	; 0xf8
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	494b      	ldr	r1, [pc, #300]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x1b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_RCC_OscConfig+0x2b8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fd fa8e 	bl	8000284 <HAL_GetTick>
 8002d68:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fd fa8a 	bl	8000284 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e136      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x198>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d030      	beq.n	8002df8 <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1f8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_RCC_OscConfig+0x2bc>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fd fa6e 	bl	8000284 <HAL_GetTick>
 8002da8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fd fa6a 	bl	8000284 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e116      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x1d8>
 8002dca:	e015      	b.n	8002df8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dcc:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_RCC_OscConfig+0x2bc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fd fa57 	bl	8000284 <HAL_GetTick>
 8002dd6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x218>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fd fa53 	bl	8000284 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0ff      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x206>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d067      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x300>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_RCC_OscConfig+0x2c0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x2c0>)
 8002e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2a:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8002e2c:	f7fd fa2a 	bl	8000284 <HAL_GetTick>
 8002e30:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x272>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e34:	f7fd fa26 	bl	8000284 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0d2      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <HAL_RCC_OscConfig+0x2c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x260>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_OscConfig+0x2c4>)
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d022      	beq.n	8002eaa <HAL_RCC_OscConfig+0x2d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fd fa0e 	bl	8000284 <HAL_GetTick>
 8002e68:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	e017      	b.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fd fa0a 	bl	8000284 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d90e      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0b4      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40023802 	.word	0x40023802
 8002e8c:	42470000 	.word	0x42470000
 8002e90:	42470e80 	.word	0x42470e80
 8002e94:	40007000 	.word	0x40007000
 8002e98:	40023870 	.word	0x40023870
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <HAL_RCC_OscConfig+0x420>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0e1      	beq.n	8002e6c <HAL_RCC_OscConfig+0x298>
 8002ea8:	e014      	b.n	8002ed4 <HAL_RCC_OscConfig+0x300>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fd f9eb 	bl	8000284 <HAL_GetTick>
 8002eae:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fd f9e7 	bl	8000284 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e091      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <HAL_RCC_OscConfig+0x420>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ee      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8086 	beq.w	8002fea <HAL_RCC_OscConfig+0x416>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ede:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <HAL_RCC_OscConfig+0x420>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d07d      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d162      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x3e4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_OscConfig+0x424>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fd f9c4 	bl	8000284 <HAL_GetTick>
 8002efc:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x33e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fd f9c0 	bl	8000284 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x33e>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e06c      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_RCC_OscConfig+0x420>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x32c>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	1e59      	subs	r1, r3, #1
 8002f4e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	617b      	str	r3, [r7, #20]
  return(result);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f6c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8002f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	491b      	ldr	r1, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x420>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x424>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fd f978 	bl	8000284 <HAL_GetTick>
 8002f94:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fd f974 	bl	8000284 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e020      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_OscConfig+0x420>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x3c4>
 8002fb6:	e018      	b.n	8002fea <HAL_RCC_OscConfig+0x416>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <HAL_RCC_OscConfig+0x424>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7fd f961 	bl	8000284 <HAL_GetTick>
 8002fc2:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fd f95d 	bl	8000284 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x404>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e009      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_OscConfig+0x420>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3f2>
 8002fe4:	e001      	b.n	8002fea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_RCC_OscConfig+0x418>
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3738      	adds	r7, #56	; 0x38
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	42470060 	.word	0x42470060

08002ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800300a:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <HAL_RCC_ClockConfig+0x1e4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d90c      	bls.n	8003032 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003018:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <HAL_RCC_ClockConfig+0x1e4>)
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003020:	4b6f      	ldr	r3, [pc, #444]	; (80031e0 <HAL_RCC_ClockConfig+0x1e4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0d2      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303e:	4b69      	ldr	r3, [pc, #420]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4966      	ldr	r1, [pc, #408]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8086 	beq.w	800316a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0b0      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0a0      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e098      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b4f      	ldr	r3, [pc, #316]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	494c      	ldr	r1, [pc, #304]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b8:	f7fd f8e4 	bl	8000284 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d112      	bne.n	80030ec <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fd f8dc 	bl	8000284 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e07c      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d1ee      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xcc>
 80030ea:	e03e      	b.n	800316a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d112      	bne.n	800311a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f6:	f7fd f8c5 	bl	8000284 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e065      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800310c:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xfa>
 8003118:	e027      	b.n	800316a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d11d      	bne.n	800315e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fd f8ae 	bl	8000284 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04e      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b03      	cmp	r3, #3
 8003144:	d1ee      	bne.n	8003124 <HAL_RCC_ClockConfig+0x128>
 8003146:	e010      	b.n	800316a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003148:	f7fd f89c 	bl	8000284 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e03c      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800315e:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ee      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_ClockConfig+0x1e4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d20c      	bcs.n	8003192 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_ClockConfig+0x1e4>)
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_RCC_ClockConfig+0x1e4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d001      	beq.n	8003192 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e022      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1dc>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4906      	ldr	r1, [pc, #24]	; (80031e4 <HAL_RCC_ClockConfig+0x1e8>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fd f82d 	bl	8000230 <HAL_InitTick>
  
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023c00 	.word	0x40023c00
 80031e4:	40023800 	.word	0x40023800

080031e8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d129      	bne.n	800324e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	69bb      	ldr	r3, [r7, #24]
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003220:	2303      	movs	r3, #3
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	4619      	mov	r1, r3
 8003232:	481f      	ldr	r0, [pc, #124]	; (80032b0 <HAL_RCC_MCOConfig+0xc8>)
 8003234:	f7fe f9c6 	bl	80015c4 <HAL_GPIO_Init>
    
    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	430b      	orrs	r3, r1
 8003246:	4919      	ldr	r1, [pc, #100]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800324c:	e029      	b.n	80032a2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800326a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003274:	2303      	movs	r3, #3
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003280:	f107 031c 	add.w	r3, r7, #28
 8003284:	4619      	mov	r1, r3
 8003286:	480b      	ldr	r0, [pc, #44]	; (80032b4 <HAL_RCC_MCOConfig+0xcc>)
 8003288:	f7fe f99c 	bl	80015c4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	00d9      	lsls	r1, r3, #3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	430b      	orrs	r3, r1
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCC_MCOConfig+0xc4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
}
 80032a2:	bf00      	nop
 80032a4:	3730      	adds	r7, #48	; 0x30
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020800 	.word	0x40020800

080032b8 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b08b      	sub	sp, #44	; 0x2c
 80032bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d00c      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x3c>
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d85d      	bhi.n	800339a <HAL_RCC_GetSysClockFreq+0xe2>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x30>
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x36>
 80032e6:	e058      	b.n	800339a <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032ea:	623b      	str	r3, [r7, #32]
       break;
 80032ec:	e058      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032f0:	623b      	str	r3, [r7, #32]
      break;
 80032f2:	e055      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f4:	4b2e      	ldr	r3, [pc, #184]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032fc:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d017      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800330a:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003312:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800331a:	400b      	ands	r3, r1
 800331c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003320:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	6979      	ldr	r1, [r7, #20]
 8003324:	fa91 f1a1 	rbit	r1, r1
 8003328:	6139      	str	r1, [r7, #16]
  return(result);
 800332a:	6939      	ldr	r1, [r7, #16]
 800332c:	fab1 f181 	clz	r1, r1
 8003330:	40cb      	lsrs	r3, r1
 8003332:	fb03 f302 	mul.w	r3, r3, r2
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
 8003338:	e016      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800334a:	400b      	ands	r3, r1
 800334c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003350:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	68f9      	ldr	r1, [r7, #12]
 8003354:	fa91 f1a1 	rbit	r1, r1
 8003358:	60b9      	str	r1, [r7, #8]
  return(result);
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	fab1 f181 	clz	r1, r1
 8003360:	40cb      	lsrs	r3, r1
 8003362:	fb03 f302 	mul.w	r3, r3, r2
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003370:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003374:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	603b      	str	r3, [r7, #0]
  return(result);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
 8003388:	3301      	adds	r3, #1
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	623b      	str	r3, [r7, #32]
      break;
 8003398:	e002      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800339c:	623b      	str	r3, [r7, #32]
      break;
 800339e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a0:	6a3b      	ldr	r3, [r7, #32]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	372c      	adds	r7, #44	; 0x2c
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400

080033b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80033be:	f7ff ff7b 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80033c2:	4601      	mov	r1, r0
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RCC_GetHCLKFreq+0x44>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033cc:	23f0      	movs	r3, #240	; 0xf0
 80033ce:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	603b      	str	r3, [r7, #0]
  return(result);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	4a07      	ldr	r2, [pc, #28]	; (8003400 <HAL_RCC_GetHCLKFreq+0x48>)
 80033e4:	5cd3      	ldrb	r3, [r2, r3]
 80033e6:	fa21 f303 	lsr.w	r3, r1, r3
 80033ea:	4a06      	ldr	r2, [pc, #24]	; (8003404 <HAL_RCC_GetHCLKFreq+0x4c>)
 80033ec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetHCLKFreq+0x4c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	08017674 	.word	0x08017674
 8003404:	200000a4 	.word	0x200000a4

08003408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800340e:	f7ff ffd3 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003412:	4601      	mov	r1, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800341c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003420:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	603b      	str	r3, [r7, #0]
  return(result);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	08017674 	.word	0x08017674

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003452:	f7ff ffb1 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003456:	4601      	mov	r1, r0
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8003460:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003464:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	603b      	str	r3, [r7, #0]
  return(result);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <HAL_RCC_GetPCLK2Freq+0x40>)
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08017674 	.word	0x08017674

08003490 <HAL_RNG_Init>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e025      	b.n	80034ee <HAL_RNG_Init+0x5e>
  }
  
  __HAL_LOCK(hrng);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	791b      	ldrb	r3, [r3, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_RNG_Init+0x1e>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e01f      	b.n	80034ee <HAL_RNG_Init+0x5e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	711a      	strb	r2, [r3, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	795b      	ldrb	r3, [r3, #5]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_RNG_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f007 f94f 	bl	800a768 <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	715a      	strb	r2, [r3, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0204 	orr.w	r2, r2, #4
 80034de:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	715a      	strb	r2, [r3, #5]
  
  __HAL_UNLOCK(hrng);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit: pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;    
 8003500:	2300      	movs	r3, #0
 8003502:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng); 
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	791b      	ldrb	r3, [r3, #4]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_RNG_GenerateRandomNumber+0x1e>
 8003510:	2302      	movs	r3, #2
 8003512:	e037      	b.n	8003584 <HAL_RNG_GenerateRandomNumber+0x8e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	711a      	strb	r2, [r3, #4]
  
  /* Check RNG peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	795b      	ldrb	r3, [r3, #5]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d129      	bne.n	8003578 <HAL_RNG_GenerateRandomNumber+0x82>
  {
    /* Change RNG peripheral state */  
    hrng->State = HAL_RNG_STATE_BUSY;  
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800352a:	f7fc feab 	bl	8000284 <HAL_GetTick>
 800352e:	60b8      	str	r0, [r7, #8]
  
    /* Check if data register contains valid random data */
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003530:	e00e      	b.n	8003550 <HAL_RNG_GenerateRandomNumber+0x5a>
    {
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 8003532:	f7fc fea7 	bl	8000284 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d907      	bls.n	8003550 <HAL_RNG_GenerateRandomNumber+0x5a>
      {    
        hrng->State = HAL_RNG_STATE_ERROR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2204      	movs	r2, #4
 8003544:	715a      	strb	r2, [r3, #5]

        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	711a      	strb	r2, [r3, #4]
      
        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e019      	b.n	8003584 <HAL_RNG_GenerateRandomNumber+0x8e>
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d1e9      	bne.n	8003532 <HAL_RNG_GenerateRandomNumber+0x3c>
      } 
    }
  
    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	609a      	str	r2, [r3, #8]
    *random32bit = hrng->RandomNumber;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	601a      	str	r2, [r3, #0]
  
    hrng->State = HAL_RNG_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	715a      	strb	r2, [r3, #5]
 8003576:	e001      	b.n	800357c <HAL_RNG_GenerateRandomNumber+0x86>
  }
  else
  {
    status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	711a      	strb	r2, [r3, #4]
  
  return status;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_SD_Init>:
  * @param  hsd: SD handle
  * @param  SDCardInfo: HAL_SD_CardInfoTypedef structure for SD card information   
  * @retval HAL SD error state
  */
HAL_SD_ErrorTypedef HAL_SD_Init(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *SDCardInfo)
{ 
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b08e      	sub	sp, #56	; 0x38
 8003590:	af04      	add	r7, sp, #16
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SD_InitTypeDef tmpinit;
  
  /* Allocate lock resource and initialize it */
  hsd->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	771a      	strb	r2, [r3, #28]
  /* Initialize the low level hardware (MSP) */
  HAL_SD_MspInit(hsd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f007 f92a 	bl	800a7fc <HAL_SD_MspInit>
  
  /* Default SDIO peripheral configuration for SD card initialization */
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
 80035bc:	2376      	movs	r3, #118	; 0x76
 80035be:	623b      	str	r3, [r7, #32]
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681d      	ldr	r5, [r3, #0]
 80035c4:	466c      	mov	r4, sp
 80035c6:	f107 0318 	add.w	r3, r7, #24
 80035ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035d2:	f107 030c 	add.w	r3, r7, #12
 80035d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d8:	4628      	mov	r0, r5
 80035da:	f002 ff81 	bl	80064e0 <SDIO_Init>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd); 
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 f870 	bl	80046c4 <SD_PowerON>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)     
 80035ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_SD_Init+0x70>
  {
    return errorstate;
 80035f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e038      	b.n	800366e <HAL_SD_Init+0xe2>
  }
  
  /* Initialize the present SDIO card(s) and put them in idle state */
  errorstate = SD_Initialize_Cards(hsd);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 ff74 	bl	80044ea <SD_Initialize_Cards>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (errorstate != SD_OK)
 8003608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_SD_Init+0x8e>
  {
    return errorstate;
 8003612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e029      	b.n	800366e <HAL_SD_Init+0xe2>
  }
  
  /* Read CSD/CID MSD registers */
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fb3e 	bl	8003c9e <HAL_SD_Get_CardInfo>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (errorstate == SD_OK)
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_SD_Init+0xc0>
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16U));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	461a      	mov	r2, r3
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f001 f815 	bl	8004670 <SD_Select_Deselect>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Configure SDIO peripheral interface */
  SDIO_Init(hsd->Instance, hsd->Init);   
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681d      	ldr	r5, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	466c      	mov	r4, sp
 8003654:	f103 0210 	add.w	r2, r3, #16
 8003658:	ca07      	ldmia	r2, {r0, r1, r2}
 800365a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800365e:	3304      	adds	r3, #4
 8003660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003662:	4628      	mov	r0, r5
 8003664:	f002 ff3c 	bl	80064e0 <SDIO_Init>
  
  return errorstate;
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800366c:	b2db      	uxtb	r3, r3
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003678 <HAL_SD_ReadBlocks_DMA>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b091      	sub	sp, #68	; 0x44
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2200      	movs	r2, #0
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Initialize handle flags */
  hsd->SdTransferCplt  = 0U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	649a      	str	r2, [r3, #72]	; 0x48
  hsd->DmaTransferCplt = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	651a      	str	r2, [r3, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize SD Read operation */
  if(NumberOfBlocks > 1U)
 80036a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d903      	bls.n	80036b4 <HAL_SD_ReadBlocks_DMA+0x3c>
  {
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
 80036b2:	e002      	b.n	80036ba <HAL_SD_ReadBlocks_DMA+0x42>
  }
  else
  {
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Enable transfer interrupts */
#ifdef SDIO_STA_STBITERR
  __HAL_SD_SDIO_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL |\
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	63d3      	str	r3, [r2, #60]	; 0x3c
                                SDIO_IT_DATAEND  |\
                                SDIO_IT_RXOVERR));
#endif /* SDIO_STA_STBITERR */
  
  /* Enable SDIO DMA transfer */
  __HAL_SD_SDIO_DMA_ENABLE();
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_SD_ReadBlocks_DMA+0x180>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  
  /* Configure DMA user callbacks */
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4a48      	ldr	r2, [pc, #288]	; (80037fc <HAL_SD_ReadBlocks_DMA+0x184>)
 80036da:	63da      	str	r2, [r3, #60]	; 0x3c
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a47      	ldr	r2, [pc, #284]	; (8003800 <HAL_SD_ReadBlocks_DMA+0x188>)
 80036e2:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3380      	adds	r3, #128	; 0x80
 80036ee:	461c      	mov	r4, r3
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	460a      	mov	r2, r1
 80036fe:	4621      	mov	r1, r4
 8003700:	f7fd fa10 	bl	8000b24 <HAL_DMA_Start_IT>
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d10e      	bne.n	800372a <HAL_SD_ReadBlocks_DMA+0xb2>
  {
    BlockSize = 512U;
 800370c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
    ReadAddr /= 512U;
 8003712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	0a42      	lsrs	r2, r0, #9
 8003720:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8003724:	0a4b      	lsrs	r3, r1, #9
 8003726:	e9c7 2300 	strd	r2, r3, [r7]
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800372e:	2310      	movs	r3, #16
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8003732:	2340      	movs	r3, #64	; 0x40
 8003734:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003736:	2300      	movs	r3, #0
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800373a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f002 ff1c 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8003750:	2110      	movs	r1, #16
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f001 f968 	bl	8004a28 <SD_CmdResp1Error>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  if (errorstate != SD_OK)
 800375e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_SD_ReadBlocks_DMA+0xf4>
  {
    return errorstate;
 8003766:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800376a:	e041      	b.n	80037f0 <HAL_SD_ReadBlocks_DMA+0x178>
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
 8003770:	613b      	str	r3, [r7, #16]
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8003772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800377c:	2390      	movs	r3, #144	; 0x90
 800377e:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003780:	2302      	movs	r3, #2
 8003782:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003784:	2300      	movs	r3, #0
 8003786:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8003788:	2301      	movs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f107 0210 	add.w	r2, r7, #16
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f002 ff42 	bl	8006620 <SDIO_DataConfig>
  
  /* Check number of blocks command */
  if(NumberOfBlocks > 1U)
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d902      	bls.n	80037a8 <HAL_SD_ReadBlocks_DMA+0x130>
  {
    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 80037a2:	2312      	movs	r3, #18
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a6:	e001      	b.n	80037ac <HAL_SD_ReadBlocks_DMA+0x134>
  }
  else
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 80037a8:	2311      	movs	r3, #17
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  sdio_cmdinitstructure.Argument = (uint32_t)ReadAddr;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f002 fee4 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  if(NumberOfBlocks > 1U)
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d907      	bls.n	80037d6 <HAL_SD_ReadBlocks_DMA+0x15e>
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 80037c6:	2112      	movs	r1, #18
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f001 f92d 	bl	8004a28 <SD_CmdResp1Error>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80037d4:	e006      	b.n	80037e4 <HAL_SD_ReadBlocks_DMA+0x16c>
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 80037d6:	2111      	movs	r1, #17
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f001 f925 	bl	8004a28 <SD_CmdResp1Error>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  /* Update the SD transfer error in SD handle */
  hsd->SdTransferErr = errorstate;
 80037e4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	64da      	str	r2, [r3, #76]	; 0x4c
  
  return errorstate;
 80037ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3744      	adds	r7, #68	; 0x44
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}
 80037f8:	4225858c 	.word	0x4225858c
 80037fc:	08004409 	.word	0x08004409
 8003800:	0800443f 	.word	0x0800443f

08003804 <HAL_SD_WriteBlocks_DMA>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b091      	sub	sp, #68	; 0x44
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Initialize handle flags */
  hsd->SdTransferCplt  = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	649a      	str	r2, [r3, #72]	; 0x48
  hsd->DmaTransferCplt = 0U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	651a      	str	r2, [r3, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize SD Write operation */
  if(NumberOfBlocks > 1U)
 8003832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003834:	2b01      	cmp	r3, #1
 8003836:	d903      	bls.n	8003840 <HAL_SD_WriteBlocks_DMA+0x3c>
  {
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2203      	movs	r2, #3
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
 800383e:	e002      	b.n	8003846 <HAL_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2202      	movs	r2, #2
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
  }  
  
  /* Enable transfer interrupts */
#ifdef SDIO_STA_STBITERR
  __HAL_SD_SDIO_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL |\
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	f443 7346 	orr.w	r3, r3, #792	; 0x318
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	63d3      	str	r3, [r2, #60]	; 0x3c
                                SDIO_IT_DATAEND  |\
                                SDIO_IT_TXUNDERR));
#endif /* SDIO_STA_STBITERR */
  
  /* Configure DMA user callbacks */
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	4a4c      	ldr	r2, [pc, #304]	; (8003990 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003860:	63da      	str	r2, [r3, #60]	; 0x3c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	4a4b      	ldr	r2, [pc, #300]	; (8003994 <HAL_SD_WriteBlocks_DMA+0x190>)
 8003868:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3380      	adds	r3, #128	; 0x80
 8003876:	461c      	mov	r4, r3
 8003878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	4622      	mov	r2, r4
 8003884:	f7fd f94e 	bl	8000b24 <HAL_DMA_Start_IT>

  /* Enable SDIO DMA transfer */
  __HAL_SD_SDIO_DMA_ENABLE();
 8003888:	4b43      	ldr	r3, [pc, #268]	; (8003998 <HAL_SD_WriteBlocks_DMA+0x194>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d10e      	bne.n	80038b4 <HAL_SD_WriteBlocks_DMA+0xb0>
  {
    BlockSize = 512U;
 8003896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
    WriteAddr /= 512U;
 800389c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	0a42      	lsrs	r2, r0, #9
 80038aa:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80038ae:	0a4b      	lsrs	r3, r1, #9
 80038b0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 80038b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80038b8:	2310      	movs	r3, #16
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80038bc:	2340      	movs	r3, #64	; 0x40
 80038be:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80038c0:	2300      	movs	r3, #0
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80038c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038c8:	63bb      	str	r3, [r7, #56]	; 0x38
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 fe57 	bl	8006588 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 80038da:	2110      	movs	r1, #16
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f001 f8a3 	bl	8004a28 <SD_CmdResp1Error>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (errorstate != SD_OK)
 80038e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_SD_WriteBlocks_DMA+0xf2>
  {
    return errorstate;
 80038f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038f4:	e048      	b.n	8003988 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  /* Check number of blocks command */
  if(NumberOfBlocks <= 1U)
 80038f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d802      	bhi.n	8003902 <HAL_SD_WriteBlocks_DMA+0xfe>
  {
    /* Send CMD24 WRITE_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 80038fc:	2318      	movs	r3, #24
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003900:	e001      	b.n	8003906 <HAL_SD_WriteBlocks_DMA+0x102>
  }
  else
  {
    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8003902:	2319      	movs	r3, #25
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f002 fe37 	bl	8006588 <SDIO_SendCommand>

  /* Check for error conditions */
  if(NumberOfBlocks > 1U)
 800391a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391c:	2b01      	cmp	r3, #1
 800391e:	d907      	bls.n	8003930 <HAL_SD_WriteBlocks_DMA+0x12c>
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8003920:	2119      	movs	r1, #25
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f001 f880 	bl	8004a28 <SD_CmdResp1Error>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800392e:	e006      	b.n	800393e <HAL_SD_WriteBlocks_DMA+0x13a>
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8003930:	2118      	movs	r1, #24
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f001 f878 	bl	8004a28 <SD_CmdResp1Error>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  if (errorstate != SD_OK)
 800393e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_SD_WriteBlocks_DMA+0x148>
  {
    return errorstate;
 8003946:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800394a:	e01d      	b.n	8003988 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	613b      	str	r3, [r7, #16]
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8003952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800395c:	2390      	movs	r3, #144	; 0x90
 800395e:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003964:	2300      	movs	r3, #0
 8003966:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8003968:	2301      	movs	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f107 0210 	add.w	r2, r7, #16
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f002 fe52 	bl	8006620 <SDIO_DataConfig>
  
  hsd->SdTransferErr = errorstate;
 800397c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	64da      	str	r2, [r3, #76]	; 0x4c
  
  return errorstate;
 8003984:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003988:	4618      	mov	r0, r3
 800398a:	3744      	adds	r7, #68	; 0x44
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	0800445f 	.word	0x0800445f
 8003994:	08004495 	.word	0x08004495
 8003998:	4225858c 	.word	0x4225858c

0800399c <HAL_SD_CheckReadOperation>:
  * @param  hsd: SD handle
  * @param  Timeout: Timeout duration  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckReadOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout = Timeout;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1, tmp2;
  HAL_SD_ErrorTypedef tmp3;
  
  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	617b      	str	r3, [r7, #20]
  tmp2 = hsd->SdTransferCplt;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	613b      	str	r3, [r7, #16]
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	73fb      	strb	r3, [r7, #15]
    
  while ((tmp1 == 0U) && (tmp2 == 0U) && (tmp3 == SD_OK) && (timeout > 0U))
 80039c0:	e00b      	b.n	80039da <HAL_SD_CheckReadOperation+0x3e>
  {
    tmp1 = hsd->DmaTransferCplt; 
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	617b      	str	r3, [r7, #20]
    tmp2 = hsd->SdTransferCplt;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	613b      	str	r3, [r7, #16]
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	73fb      	strb	r3, [r7, #15]
    timeout--;
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	61bb      	str	r3, [r7, #24]
  while ((tmp1 == 0U) && (tmp2 == 0U) && (tmp3 == SD_OK) && (timeout > 0U))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d108      	bne.n	80039f2 <HAL_SD_CheckReadOperation+0x56>
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <HAL_SD_CheckReadOperation+0x56>
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_SD_CheckReadOperation+0x56>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e7      	bne.n	80039c2 <HAL_SD_CheckReadOperation+0x26>
  }
  
  timeout = Timeout;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	61bb      	str	r3, [r7, #24]
  
  /* Wait until the Rx transfer is no longer active */
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXACT)) && (timeout > 0U))
 80039f6:	e002      	b.n	80039fe <HAL_SD_CheckReadOperation+0x62>
  {
    timeout--;  
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	61bb      	str	r3, [r7, #24]
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXACT)) && (timeout > 0U))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SD_CheckReadOperation+0x76>
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f2      	bne.n	80039f8 <HAL_SD_CheckReadOperation+0x5c>
  }
  
  /* Send stop command in multiblock read */
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d104      	bne.n	8003a24 <HAL_SD_CheckReadOperation+0x88>
  {
    errorstate = HAL_SD_StopTransfer(hsd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fcb6 	bl	800438c <HAL_SD_StopTransfer>
 8003a20:	4603      	mov	r3, r0
 8003a22:	77fb      	strb	r3, [r7, #31]
  }
  
  if ((timeout == 0U) && (errorstate == SD_OK))
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_SD_CheckReadOperation+0x98>
 8003a2a:	7ffb      	ldrb	r3, [r7, #31]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_SD_CheckReadOperation+0x98>
  {
    errorstate = SD_DATA_TIMEOUT;
 8003a30:	2304      	movs	r3, #4
 8003a32:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Return error state */
  if (hsd->SdTransferErr != SD_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_SD_CheckReadOperation+0xb2>
  {
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	e000      	b.n	8003a50 <HAL_SD_CheckReadOperation+0xb4>
  }
  
  return errorstate;
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_SD_CheckWriteOperation>:
  * @param  hsd: SD handle
  * @param  Timeout: Timeout duration  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckWriteOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout = Timeout;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1, tmp2;
  HAL_SD_ErrorTypedef tmp3;

  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	617b      	str	r3, [r7, #20]
  tmp2 = hsd->SdTransferCplt;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a74:	613b      	str	r3, [r7, #16]
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	73fb      	strb	r3, [r7, #15]
    
  while ((tmp1 == 0U) && (tmp2 == 0U) && (tmp3 == SD_OK) && (timeout > 0U))
 8003a7c:	e00b      	b.n	8003a96 <HAL_SD_CheckWriteOperation+0x3e>
  {
    tmp1 = hsd->DmaTransferCplt; 
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a82:	617b      	str	r3, [r7, #20]
    tmp2 = hsd->SdTransferCplt;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	613b      	str	r3, [r7, #16]
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	73fb      	strb	r3, [r7, #15]
    timeout--;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
  while ((tmp1 == 0U) && (tmp2 == 0U) && (tmp3 == SD_OK) && (timeout > 0U))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <HAL_SD_CheckWriteOperation+0x56>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <HAL_SD_CheckWriteOperation+0x56>
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <HAL_SD_CheckWriteOperation+0x56>
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e7      	bne.n	8003a7e <HAL_SD_CheckWriteOperation+0x26>
  }
  
  timeout = Timeout;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	61bb      	str	r3, [r7, #24]
  
  /* Wait until the Tx transfer is no longer active */
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXACT))  && (timeout > 0U))
 8003ab2:	e002      	b.n	8003aba <HAL_SD_CheckWriteOperation+0x62>
  {
    timeout--;  
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXACT))  && (timeout > 0U))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_SD_CheckWriteOperation+0x76>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f2      	bne.n	8003ab4 <HAL_SD_CheckWriteOperation+0x5c>
  }

  /* Send stop command in multiblock write */
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d104      	bne.n	8003ae0 <HAL_SD_CheckWriteOperation+0x88>
  {
    errorstate = HAL_SD_StopTransfer(hsd);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fc58 	bl	800438c <HAL_SD_StopTransfer>
 8003adc:	4603      	mov	r3, r0
 8003ade:	77fb      	strb	r3, [r7, #31]
  }
  
  if ((timeout == 0U) && (errorstate == SD_OK))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <HAL_SD_CheckWriteOperation+0x98>
 8003ae6:	7ffb      	ldrb	r3, [r7, #31]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_SD_CheckWriteOperation+0x98>
  {
    errorstate = SD_DATA_TIMEOUT;
 8003aec:	2304      	movs	r3, #4
 8003aee:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Return error state */
  if (hsd->SdTransferErr != SD_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_SD_CheckWriteOperation+0xb2>
  {
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	e007      	b.n	8003b1a <HAL_SD_CheckWriteOperation+0xc2>
  }
  
  /* Wait until write is complete */
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 8003b0a:	bf00      	nop
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fc61 	bl	80043d4 <HAL_SD_GetStatus>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <HAL_SD_CheckWriteOperation+0xb4>
  {    
  }

  return errorstate; 
 8003b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{  
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Check for SDIO interrupt flags */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DATAEND))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <HAL_SD_IRQHandler+0x34>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_IT_DATAEND);  
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
      
    /* SD transfer is complete */
    hsd->SdTransferCplt = 1U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	649a      	str	r2, [r3, #72]	; 0x48

    /* No transfer error */ 
    hsd->SdTransferErr  = SD_OK;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	64da      	str	r2, [r3, #76]	; 0x4c

    HAL_SD_XferCpltCallback(hsd);  
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f869 	bl	8003c26 <HAL_SD_XferCpltCallback>
 8003b54:	e059      	b.n	8003c0a <HAL_SD_IRQHandler+0xe8>
  }  
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DCRCFAIL))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_SD_IRQHandler+0x58>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f861 	bl	8003c3a <HAL_SD_XferErrorCallback>
 8003b78:	e047      	b.n	8003c0a <HAL_SD_IRQHandler+0xe8>
    
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DTIMEOUT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_SD_IRQHandler+0x7c>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f84f 	bl	8003c3a <HAL_SD_XferErrorCallback>
 8003b9c:	e035      	b.n	8003c0a <HAL_SD_IRQHandler+0xe8>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_RXOVERR))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_SD_IRQHandler+0xa0>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2206      	movs	r2, #6
 8003bb8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f83d 	bl	8003c3a <HAL_SD_XferErrorCallback>
 8003bc0:	e023      	b.n	8003c0a <HAL_SD_IRQHandler+0xe8>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_TXUNDERR))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_SD_IRQHandler+0xc4>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_TXUNDERR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2205      	movs	r2, #5
 8003bdc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f82b 	bl	8003c3a <HAL_SD_XferErrorCallback>
 8003be4:	e011      	b.n	8003c0a <HAL_SD_IRQHandler+0xe8>
  }
#ifdef SDIO_STA_STBITERR
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_STBITERR))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_SD_IRQHandler+0xe8>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_START_BIT_ERR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2207      	movs	r2, #7
 8003c02:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f818 	bl	8003c3a <HAL_SD_XferErrorCallback>
    /* No error flag set */
  }

  /* Disable all SDIO peripheral interrupt sources */
#ifdef SDIO_STA_STBITERR
  __HAL_SD_SDIO_DISABLE_IT(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND  |\
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003c18:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c1c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
  __HAL_SD_SDIO_DISABLE_IT(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND  |\
                                SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |\
                                SDIO_IT_RXOVERR);
#endif /* SDIO_STA_STBITERR */
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_SD_XferCpltCallback>:
  * @brief  SD end of transfer callback.
  * @param  hsd: SD handle 
  * @retval None
  */
__weak void HAL_SD_XferCpltCallback(SD_HandleTypeDef *hsd)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_XferCpltCallback could be implemented in the user file
   */ 
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_SD_XferErrorCallback>:
  * @brief  SD Transfer Error callback.
  * @param  hsd: SD handle
  * @retval None
  */
__weak void HAL_SD_XferErrorCallback(SD_HandleTypeDef *hsd)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_XferErrorCallback could be implemented in the user file
   */ 
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_SD_DMA_RxCpltCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_RxCpltCallback(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_DMA_RxCpltCallback could be implemented in the user file
   */ 
}  
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_SD_DMA_RxErrorCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_RxErrorCallback(DMA_HandleTypeDef *hdma)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_DMA_RxErrorCallback could be implemented in the user file
   */ 
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_SD_DMA_TxCpltCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_DMA_TxCpltCallback could be implemented in the user file
   */ 
}  
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_SD_DMA_TxErrorCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_TxErrorCallback(DMA_HandleTypeDef *hdma)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_DMA_TxErrorCallback could be implemented in the user file
   */ 
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_SD_Get_CardInfo>:
  * @param  pCardInfo: Pointer to a HAL_SD_CardInfoTypedef structure that  
  *         contains all SD cardinformation  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
 8003c9e:	b4b0      	push	{r4, r5, r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
  
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	0e1b      	lsrs	r3, r3, #24
 8003cce:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	701a      	strb	r2, [r3, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	705a      	strb	r2, [r3, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03U;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	0c1b      	lsrs	r3, r3, #16
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	0e1b      	lsrs	r3, r3, #24
 8003d38:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4U);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	88db      	ldrh	r3, [r3, #6]
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	80da      	strh	r2, [r3, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	09db      	lsrs	r3, r3, #7
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	725a      	strb	r2, [r3, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	729a      	strb	r2, [r3, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	72da      	strb	r2, [r3, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	731a      	strb	r2, [r3, #12]
  pCardInfo->SD_csd.Reserved2       = 0U; /*!< Reserved */
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	735a      	strb	r2, [r3, #13]
  
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <HAL_SD_Get_CardInfo+0x13c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	f040 809e 	bne.w	8003f16 <HAL_SD_Get_CardInfo+0x278>
  {
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03U) << 10U;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	029b      	lsls	r3, r3, #10
 8003dde:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2U;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	431a      	orrs	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	0e1b      	lsrs	r3, r3, #24
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0U) >> 6U;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	431a      	orrs	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	611a      	str	r2, [r3, #16]
    
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	751a      	strb	r2, [r3, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07U);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	759a      	strb	r2, [r3, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	75da      	strb	r2, [r3, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f003 0306 	and.w	r3, r3, #6
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	7e1b      	ldrb	r3, [r3, #24]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	09db      	lsrs	r3, r3, #7
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	761a      	strb	r2, [r3, #24]
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1U) ;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	6839      	ldr	r1, [r7, #0]
 8003ea4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    pCardInfo->CardCapacity *= (1U << (pCardInfo->SD_csd.DeviceSizeMul + 2U));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	7e1b      	ldrb	r3, [r3, #24]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	3302      	adds	r3, #2
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	e9d2 0112 	ldrd	r0, r1, [r2, #72]	; 0x48
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	fb02 f501 	mul.w	r5, r2, r1
 8003ec6:	fb00 f403 	mul.w	r4, r0, r3
 8003eca:	442c      	add	r4, r5
 8003ecc:	fba0 2302 	umull	r2, r3, r0, r2
 8003ed0:	18e1      	adds	r1, r4, r3
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	6839      	ldr	r1, [r7, #0]
 8003ed6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 1U << (pCardInfo->SD_csd.RdBlockLen);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	7a1b      	ldrb	r3, [r3, #8]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	fa03 f202 	lsl.w	r2, r3, r2
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	651a      	str	r2, [r3, #80]	; 0x50
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	fb02 f501 	mul.w	r5, r2, r1
 8003f00:	fb00 f403 	mul.w	r4, r0, r3
 8003f04:	442c      	add	r4, r5
 8003f06:	fba0 2302 	umull	r2, r3, r0, r2
 8003f0a:	18e1      	adds	r1, r4, r3
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8003f14:	e043      	b.n	8003f9e <HAL_SD_Get_CardInfo+0x300>
  }
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d13d      	bne.n	8003f9a <HAL_SD_Get_CardInfo+0x2fc>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3FU) << 16U;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	0e1b      	lsrs	r3, r3, #24
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	60bb      	str	r3, [r7, #8]
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	431a      	orrs	r2, r3
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	60bb      	str	r3, [r7, #8]
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	0a1b      	lsrs	r3, r3, #8
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	60bb      	str	r3, [r7, #8]
    
    pCardInfo->CardCapacity = (uint64_t)((((uint64_t)pCardInfo->SD_csd.DeviceSize + 1U)) * 512U * 1024U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	1c54      	adds	r4, r2, #1
 8003f76:	f143 0500 	adc.w	r5, r3, #0
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	04eb      	lsls	r3, r5, #19
 8003f84:	ea43 3354 	orr.w	r3, r3, r4, lsr #13
 8003f88:	04e2      	lsls	r2, r4, #19
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512U;    
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f96:	651a      	str	r2, [r3, #80]	; 0x50
 8003f98:	e001      	b.n	8003f9e <HAL_SD_Get_CardInfo+0x300>
  }
  else
  {
    /* Not supported card type */
    errorstate = SD_ERROR;
 8003f9a:	2329      	movs	r3, #41	; 0x29
 8003f9c:	73fb      	strb	r3, [r7, #15]
  }
    
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40U) >> 6U;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	765a      	strb	r2, [r3, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	7e9b      	ldrb	r3, [r3, #26]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	09db      	lsrs	r3, r3, #7
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	769a      	strb	r2, [r3, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7FU);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	0e1b      	lsrs	r3, r3, #24
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	09db      	lsrs	r3, r3, #7
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	771a      	strb	r2, [r3, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60U) >> 5U;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	b2da      	uxtb	r2, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	775a      	strb	r2, [r3, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	b2da      	uxtb	r2, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	779a      	strb	r2, [r3, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	b2da      	uxtb	r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	b2db      	uxtb	r3, r3
 8004044:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	7fdb      	ldrb	r3, [r3, #31]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	099b      	lsrs	r3, r3, #6
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	4313      	orrs	r3, r2
 800405a:	b2da      	uxtb	r2, r3
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	77da      	strb	r2, [r3, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	b2da      	uxtb	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f883 2020 	strb.w	r2, [r3, #32]
  pCardInfo->SD_csd.Reserved3           = 0U;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01U);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	b2db      	uxtb	r3, r3
 8004092:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	09db      	lsrs	r3, r3, #7
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40U) >> 6U;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20U) >> 5U;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10U) >> 4U;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0CU) >> 2U;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03U);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	b2db      	uxtb	r3, r3
 8004104:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004110:	b2da      	uxtb	r2, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1U;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* Byte 0 */
  tmp = (uint8_t)((hsd->CID[0U] & 0xFF000000U) >> 24U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	0e1b      	lsrs	r3, r3, #24
 8004126:	b2db      	uxtb	r3, r3
 8004128:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ManufacturerID = tmp;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Byte 1 */
  tmp = (uint8_t)((hsd->CID[0U] & 0x00FF0000U) >> 16U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	b2db      	uxtb	r3, r3
 800413c:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8U;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	b29b      	uxth	r3, r3
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	b29a      	uxth	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0U] & 0x0000FF00U) >> 8U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	b2db      	uxtb	r3, r3
 8004152:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004158:	b29a      	uxth	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	b29b      	uxth	r3, r3
 800415e:	4313      	orrs	r3, r2
 8004160:	b29a      	uxth	r2, r3
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0U] & 0x000000FFU);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	b2db      	uxtb	r3, r3
 800416c:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 = tmp << 24U;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	061a      	lsls	r2, r3, #24
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1U] & 0xFF000000U) >> 24U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	0e1b      	lsrs	r3, r3, #24
 800417c:	b2db      	uxtb	r3, r3
 800417e:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp << 16U;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1U] & 0x00FF0000U) >> 16U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	0c1b      	lsrs	r3, r3, #16
 8004194:	b2db      	uxtb	r3, r3
 8004196:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp << 8U;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	431a      	orrs	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1U] & 0x0000FF00U) >> 8U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 7 */
  tmp = (uint8_t)(hsd->CID[1U] & 0x000000FFU);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName2 = tmp;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Byte 8 */
  tmp = (uint8_t)((hsd->CID[2U] & 0xFF000000U) >> 24U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	0e1b      	lsrs	r3, r3, #24
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdRev = tmp;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Byte 9 */
  tmp = (uint8_t)((hsd->CID[2U] & 0x00FF0000U) >> 16U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN = tmp << 24U;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	061a      	lsls	r2, r3, #24
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2U] & 0x0000FF00U) >> 8U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp << 16U;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	431a      	orrs	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2U] & 0x000000FFU);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	b2db      	uxtb	r3, r3
 8004212:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp << 8U;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	431a      	orrs	r2, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3U] & 0xFF000000U) >> 24U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	0e1b      	lsrs	r3, r3, #24
 8004228:	b2db      	uxtb	r3, r3
 800422a:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	431a      	orrs	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3U] & 0x00FF0000U) >> 16U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	b2db      	uxtb	r3, r3
 8004240:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0U) >> 4U;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	b2db      	uxtb	r3, r3
 8004256:	4313      	orrs	r3, r2
 8004258:	b2da      	uxtb	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0FU) << 8U;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	b29b      	uxth	r3, r3
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	b29b      	uxth	r3, r3
 8004268:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800426c:	b29a      	uxth	r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3U] & 0x0000FF00U) >> 8U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	b2db      	uxtb	r3, r3
 800427a:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004280:	b29a      	uxth	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	b29b      	uxth	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b29a      	uxth	r2, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CID[3U] & 0x000000FFU);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	b2db      	uxtb	r3, r3
 8004294:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFEU) >> 1U;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1U;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  
  return errorstate;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bcb0      	pop	{r4, r5, r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_SD_WideBusOperation_Config>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80042bc:	b5b0      	push	{r4, r5, r7, lr}
 80042be:	b08e      	sub	sp, #56	; 0x38
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SDIO_InitTypeDef tmpinit;
  
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d105      	bne.n	80042e0 <HAL_SD_WideBusOperation_Config+0x24>
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
 80042d4:	2327      	movs	r3, #39	; 0x27
 80042d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 80042da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042de:	e051      	b.n	8004384 <HAL_SD_WideBusOperation_Config+0xc8>
  }
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <HAL_SD_WideBusOperation_Config+0x3c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d003      	beq.n	80042f8 <HAL_SD_WideBusOperation_Config+0x3c>
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d143      	bne.n	8004380 <HAL_SD_WideBusOperation_Config+0xc4>
  {
    if (WideMode == SDIO_BUS_WIDE_8B)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	d103      	bne.n	8004308 <HAL_SD_WideBusOperation_Config+0x4c>
    {
      errorstate = SD_UNSUPPORTED_FEATURE;
 8004300:	2327      	movs	r3, #39	; 0x27
 8004302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004306:	e017      	b.n	8004338 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else if (WideMode == SDIO_BUS_WIDE_4B)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430e:	d106      	bne.n	800431e <HAL_SD_WideBusOperation_Config+0x62>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fd2c 	bl	8004d6e <SD_WideBus_Enable>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800431c:	e00c      	b.n	8004338 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else if (WideMode == SDIO_BUS_WIDE_1B)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <HAL_SD_WideBusOperation_Config+0x76>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fd9a 	bl	8004e5e <SD_WideBus_Disable>
 800432a:	4603      	mov	r3, r0
 800432c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004330:	e002      	b.n	8004338 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = SD_INVALID_PARAMETER;
 8004332:	2326      	movs	r3, #38	; 0x26
 8004334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
      
    if (errorstate == SD_OK)
 8004338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11f      	bne.n	8004380 <HAL_SD_WideBusOperation_Config+0xc4>
    {
      /* Configure the SDIO peripheral */
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	613b      	str	r3, [r7, #16]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	617b      	str	r3, [r7, #20]
      tmpinit.BusWide             = WideMode;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	61bb      	str	r3, [r7, #24]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	61fb      	str	r3, [r7, #28]
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	623b      	str	r3, [r7, #32]
      SDIO_Init(hsd->Instance, tmpinit);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681d      	ldr	r5, [r3, #0]
 8004366:	466c      	mov	r4, sp
 8004368:	f107 0318 	add.w	r3, r7, #24
 800436c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004374:	f107 030c 	add.w	r3, r7, #12
 8004378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800437a:	4628      	mov	r0, r5
 800437c:	f002 f8b0 	bl	80064e0 <SDIO_Init>
    }
  }
  
  return errorstate;
 8004380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004384:	4618      	mov	r0, r3
 8004386:	3728      	adds	r7, #40	; 0x28
 8004388:	46bd      	mov	sp, r7
 800438a:	bdb0      	pop	{r4, r5, r7, pc}

0800438c <HAL_SD_StopTransfer>:
  * @brief  Aborts an ongoing data transfer.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_StopTransfer(SD_HandleTypeDef *hsd)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	77fb      	strb	r3, [r7, #31]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 800439c:	230c      	movs	r3, #12
 800439e:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80043a0:	2340      	movs	r3, #64	; 0x40
 80043a2:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80043a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f107 0208 	add.w	r2, r7, #8
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f002 f8e5 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 80043be:	210c      	movs	r1, #12
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fb31 	bl	8004a28 <SD_CmdResp1Error>
 80043c6:	4603      	mov	r3, r0
 80043c8:	77fb      	strb	r3, [r7, #31]
  
  return errorstate;
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_SD_GetStatus>:
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypedef cardstate =  SD_CARD_TRANSFER;
 80043dc:	2304      	movs	r3, #4
 80043de:	73fb      	strb	r3, [r7, #15]

  /* Get SD card state */
  cardstate = SD_GetState(hsd);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f867 	bl	80044b4 <SD_GetState>
 80043e6:	4603      	mov	r3, r0
 80043e8:	73fb      	strb	r3, [r7, #15]
  
  /* Find SD status according to card state*/
  if (cardstate == SD_CARD_TRANSFER)
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d101      	bne.n	80043f4 <HAL_SD_GetStatus+0x20>
  {
    return SD_TRANSFER_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e005      	b.n	8004400 <HAL_SD_GetStatus+0x2c>
  }
  else if(cardstate == SD_CARD_ERROR)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2bff      	cmp	r3, #255	; 0xff
 80043f8:	d101      	bne.n	80043fe <HAL_SD_GetStatus+0x2a>
  {
    return SD_TRANSFER_ERROR;
 80043fa:	2302      	movs	r3, #2
 80043fc:	e000      	b.n	8004400 <HAL_SD_GetStatus+0x2c>
  }
  else
  {
    return SD_TRANSFER_BUSY;
 80043fe:	2301      	movs	r3, #1
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <SD_DMA_RxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_RxCplt(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	60fb      	str	r3, [r7, #12]
  
  /* DMA transfer is complete */
  hsd->DmaTransferCplt = 1U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Wait until SD transfer is complete */
  while(hsd->SdTransferCplt == 0U)
 800441c:	bf00      	nop
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0fb      	beq.n	800441e <SD_DMA_RxCplt+0x16>
  {
  }
  
  /* Disable the DMA channel */
  HAL_DMA_Abort(hdma);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fc fbbd 	bl	8000ba6 <HAL_DMA_Abort>

  /* Transfer complete user callback */
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fc0c 	bl	8003c4e <HAL_SD_DMA_RxCpltCallback>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <SD_DMA_RxError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_RxError(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	60fb      	str	r3, [r7, #12]
  
  /* Transfer complete user callback */
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fc06 	bl	8003c62 <HAL_SD_DMA_RxErrorCallback>
}
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <SD_DMA_TxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_TxCplt(DMA_HandleTypeDef *hdma)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	60fb      	str	r3, [r7, #12]
  
  /* DMA transfer is complete */
  hsd->DmaTransferCplt = 1U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Wait until SD transfer is complete */
  while(hsd->SdTransferCplt == 0U)
 8004472:	bf00      	nop
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0fb      	beq.n	8004474 <SD_DMA_TxCplt+0x16>
  {
  }
 
  /* Disable the DMA channel */
  HAL_DMA_Abort(hdma);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fc fb92 	bl	8000ba6 <HAL_DMA_Abort>

  /* Transfer complete user callback */
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fbf5 	bl	8003c76 <HAL_SD_DMA_TxCpltCallback>
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <SD_DMA_TxError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_TxError(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef *hsd = ( SD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	60fb      	str	r3, [r7, #12]
  
  /* Transfer complete user callback */
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fbef 	bl	8003c8a <HAL_SD_DMA_TxErrorCallback>
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <SD_GetState>:
  * @brief  Returns the SD current state.
  * @param  hsd: SD handle
  * @retval SD card current state
  */
static HAL_SD_CardStateTypedef SD_GetState(SD_HandleTypeDef *hsd)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t resp1 = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  
  if (SD_SendStatus(hsd, &resp1) != SD_OK)
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f9e0 	bl	800488c <SD_SendStatus>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <SD_GetState+0x22>
  {
    return SD_CARD_ERROR;
 80044d2:	23ff      	movs	r3, #255	; 0xff
 80044d4:	e005      	b.n	80044e2 <SD_GetState+0x2e>
  }
  else
  {
    return (HAL_SD_CardStateTypedef)((resp1 >> 9U) & 0x0FU);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	0a5b      	lsrs	r3, r3, #9
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	b2db      	uxtb	r3, r3
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <SD_Initialize_Cards>:
  *         into standby state.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_Initialize_Cards(SD_HandleTypeDef *hsd)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b08a      	sub	sp, #40	; 0x28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t sd_rca = 1U;
 80044f8:	2301      	movs	r3, #1
 80044fa:	81fb      	strh	r3, [r7, #14]
  
  if(SDIO_GetPowerState(hsd->Instance) == 0U) /* Power off */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f002 f833 	bl	800656c <SDIO_GetPowerState>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <SD_Initialize_Cards+0x2e>
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 800450c:	2325      	movs	r3, #37	; 0x25
 800450e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8004512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004516:	e0a7      	b.n	8004668 <SD_Initialize_Cards+0x17e>
  }
  
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d037      	beq.n	8004590 <SD_Initialize_Cards+0xa6>
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 8004524:	2302      	movs	r3, #2
 8004526:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8004528:	23c0      	movs	r3, #192	; 0xc0
 800452a:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800452c:	2300      	movs	r3, #0
 800452e:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004534:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f107 0210 	add.w	r2, r7, #16
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f002 f821 	bl	8006588 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fb6d 	bl	8004c26 <SD_CmdResp2Error>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8004552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <SD_Initialize_Cards+0x76>
    {
      return errorstate;
 800455a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800455e:	e083      	b.n	8004668 <SD_Initialize_Cards+0x17e>
    }
    
    /* Get Card identification number data */
    hsd->CID[0U] = SDIO_GetResponse(SDIO_RESP1);
 8004560:	2000      	movs	r0, #0
 8004562:	f002 f849 	bl	80065f8 <SDIO_GetResponse>
 8004566:	4602      	mov	r2, r0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->CID[1U] = SDIO_GetResponse(SDIO_RESP2);
 800456c:	2004      	movs	r0, #4
 800456e:	f002 f843 	bl	80065f8 <SDIO_GetResponse>
 8004572:	4602      	mov	r2, r0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->CID[2U] = SDIO_GetResponse(SDIO_RESP3);
 8004578:	2008      	movs	r0, #8
 800457a:	f002 f83d 	bl	80065f8 <SDIO_GetResponse>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
    hsd->CID[3U] = SDIO_GetResponse(SDIO_RESP4);
 8004584:	200c      	movs	r0, #12
 8004586:	f002 f837 	bl	80065f8 <SDIO_GetResponse>
 800458a:	4602      	mov	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <SD_Initialize_Cards+0xc6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d007      	beq.n	80045b0 <SD_Initialize_Cards+0xc6>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80045a4:	2b06      	cmp	r3, #6
 80045a6:	d003      	beq.n	80045b0 <SD_Initialize_Cards+0xc6>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d11c      	bne.n	80045ea <SD_Initialize_Cards+0x100>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 80045b0:	2303      	movs	r3, #3
 80045b2:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80045b4:	2340      	movs	r3, #64	; 0x40
 80045b6:	61bb      	str	r3, [r7, #24]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f107 0210 	add.w	r2, r7, #16
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 ffe0 	bl	8006588 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp6Error(hsd, SD_CMD_SET_REL_ADDR, &sd_rca);
 80045c8:	f107 030e 	add.w	r3, r7, #14
 80045cc:	461a      	mov	r2, r3
 80045ce:	2103      	movs	r1, #3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fb60 	bl	8004c96 <SD_CmdResp6Error>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 80045dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <SD_Initialize_Cards+0x100>
    {
      return errorstate;
 80045e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045e8:	e03e      	b.n	8004668 <SD_Initialize_Cards+0x17e>
    }
  }
  
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d038      	beq.n	8004664 <SD_Initialize_Cards+0x17a>
  {
    /* Get the SD card RCA */
    hsd->RCA = sd_rca;
 80045f2:	89fb      	ldrh	r3, [r7, #14]
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	041b      	lsls	r3, r3, #16
 8004600:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8004602:	2309      	movs	r3, #9
 8004604:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8004606:	23c0      	movs	r3, #192	; 0xc0
 8004608:	61bb      	str	r3, [r7, #24]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f107 0210 	add.w	r2, r7, #16
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f001 ffb7 	bl	8006588 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fb03 	bl	8004c26 <SD_CmdResp2Error>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8004626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <SD_Initialize_Cards+0x14a>
    {
      return errorstate;
 800462e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004632:	e019      	b.n	8004668 <SD_Initialize_Cards+0x17e>
    }
    
    /* Get Card Specific Data */
    hsd->CSD[0U] = SDIO_GetResponse(SDIO_RESP1);
 8004634:	2000      	movs	r0, #0
 8004636:	f001 ffdf 	bl	80065f8 <SDIO_GetResponse>
 800463a:	4602      	mov	r2, r0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->CSD[1U] = SDIO_GetResponse(SDIO_RESP2);
 8004640:	2004      	movs	r0, #4
 8004642:	f001 ffd9 	bl	80065f8 <SDIO_GetResponse>
 8004646:	4602      	mov	r2, r0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->CSD[2U] = SDIO_GetResponse(SDIO_RESP3);
 800464c:	2008      	movs	r0, #8
 800464e:	f001 ffd3 	bl	80065f8 <SDIO_GetResponse>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
    hsd->CSD[3U] = SDIO_GetResponse(SDIO_RESP4);
 8004658:	200c      	movs	r0, #12
 800465a:	f001 ffcd 	bl	80065f8 <SDIO_GetResponse>
 800465e:	4602      	mov	r2, r0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	635a      	str	r2, [r3, #52]	; 0x34
  }
  
  /* All cards are initialized */
  return errorstate;
 8004664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004668:	4618      	mov	r0, r3
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <SD_Select_Deselect>:
  * @param  hsd: SD handle
  * @param  addr: Address of the card to be selected  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_Select_Deselect(SD_HandleTypeDef *hsd, uint64_t addr)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8004686:	2307      	movs	r3, #7
 8004688:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800468a:	2340      	movs	r3, #64	; 0x40
 800468c:	61bb      	str	r3, [r7, #24]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004696:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f107 0210 	add.w	r2, r7, #16
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 ff70 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 80046a8:	2107      	movs	r1, #7
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f9bc 	bl	8004a28 <SD_CmdResp1Error>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  return errorstate;
 80046b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_PowerON(SD_HandleTypeDef *hsd)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80046cc:	2300      	movs	r3, #0
 80046ce:	72fb      	strb	r3, [r7, #11]
  uint32_t response = 0U, count = 0U, validvoltage = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d4:	2300      	movs	r3, #0
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d8:	2300      	movs	r3, #0
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sdtype = SD_STD_CAPACITY;
 80046dc:	2300      	movs	r3, #0
 80046de:	623b      	str	r3, [r7, #32]
  
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
 80046e0:	4b69      	ldr	r3, [pc, #420]	; (8004888 <SD_PowerON+0x1c4>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 ff30 	bl	8006550 <SDIO_PowerState_ON>
  
  /* 1ms: required power up waiting time before starting the SD initialization 
     sequence */
  HAL_Delay(1);
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7fb fdd3 	bl	800029c <HAL_Delay>
  
  /* Enable SDIO Clock */
  __HAL_SD_SDIO_ENABLE();
 80046f6:	4b64      	ldr	r3, [pc, #400]	; (8004888 <SD_PowerON+0x1c4>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
  
  /* CMD0: GO_IDLE_STATE -----------------------------------------------------*/
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004708:	2300      	movs	r3, #0
 800470a:	61bb      	str	r3, [r7, #24]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800470c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004710:	61fb      	str	r3, [r7, #28]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f107 020c 	add.w	r2, r7, #12
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f001 ff33 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdError(hsd);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8eb 	bl	80048fe <SD_CmdError>
 8004728:	4603      	mov	r3, r0
 800472a:	72fb      	strb	r3, [r7, #11]
  
  if(errorstate != SD_OK)
 800472c:	7afb      	ldrb	r3, [r7, #11]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <SD_PowerON+0x76>
  {
    /* CMD Response Timeout (wait for CMDSENT flag) */
    return errorstate;
 8004734:	7afb      	ldrb	r3, [r7, #11]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	e0a2      	b.n	8004880 <SD_PowerON+0x1bc>
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 800473a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800473e:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 8004740:	2308      	movs	r3, #8
 8004742:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004744:	2340      	movs	r3, #64	; 0x40
 8004746:	617b      	str	r3, [r7, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f107 020c 	add.w	r2, r7, #12
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f001 ff18 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */ 
  errorstate = SD_CmdResp7Error(hsd);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f90c 	bl	8004976 <SD_CmdResp7Error>
 800475e:	4603      	mov	r3, r0
 8004760:	72fb      	strb	r3, [r7, #11]
  
  if (errorstate == SD_OK)
 8004762:	7afb      	ldrb	r3, [r7, #11]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d105      	bne.n	8004776 <SD_PowerON+0xb2>
  {
    /* SD Card 2.0 */
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	621a      	str	r2, [r3, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8004770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004774:	623b      	str	r3, [r7, #32]
  }
  
  /* Send CMD55 */
  sdio_cmdinitstructure.Argument         = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800477a:	2337      	movs	r3, #55	; 0x37
 800477c:	613b      	str	r3, [r7, #16]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f107 020c 	add.w	r2, r7, #12
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fefd 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800478e:	2137      	movs	r1, #55	; 0x37
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f949 	bl	8004a28 <SD_CmdResp1Error>
 8004796:	4603      	mov	r3, r0
 8004798:	72fb      	strb	r3, [r7, #11]
  
  /* If errorstate is Command Timeout, it is a MMC card */
  /* If errorstate is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if(errorstate == SD_OK)
 800479a:	7afb      	ldrb	r3, [r7, #11]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d16c      	bne.n	800487c <SD_PowerON+0x1b8>
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 80047a2:	e051      	b.n	8004848 <SD_PowerON+0x184>
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80047a8:	2337      	movs	r3, #55	; 0x37
 80047aa:	613b      	str	r3, [r7, #16]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80047ac:	2340      	movs	r3, #64	; 0x40
 80047ae:	617b      	str	r3, [r7, #20]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80047b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b8:	61fb      	str	r3, [r7, #28]
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f107 020c 	add.w	r2, r7, #12
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 fedf 	bl	8006588 <SDIO_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80047ca:	2137      	movs	r1, #55	; 0x37
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f92b 	bl	8004a28 <SD_CmdResp1Error>
 80047d2:	4603      	mov	r3, r0
 80047d4:	72fb      	strb	r3, [r7, #11]
      
      if(errorstate != SD_OK)
 80047d6:	7afb      	ldrb	r3, [r7, #11]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <SD_PowerON+0x120>
      {
        return errorstate;
 80047de:	7afb      	ldrb	r3, [r7, #11]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e04d      	b.n	8004880 <SD_PowerON+0x1bc>
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ee:	60fb      	str	r3, [r7, #12]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 80047f0:	2329      	movs	r3, #41	; 0x29
 80047f2:	613b      	str	r3, [r7, #16]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80047f4:	2340      	movs	r3, #64	; 0x40
 80047f6:	617b      	str	r3, [r7, #20]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80047fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004800:	61fb      	str	r3, [r7, #28]
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f107 020c 	add.w	r2, r7, #12
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f001 febb 	bl	8006588 <SDIO_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp3Error(hsd);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f9de 	bl	8004bd4 <SD_CmdResp3Error>
 8004818:	4603      	mov	r3, r0
 800481a:	72fb      	strb	r3, [r7, #11]
      
      if(errorstate != SD_OK)
 800481c:	7afb      	ldrb	r3, [r7, #11]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <SD_PowerON+0x166>
      {
        return errorstate;
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	e02a      	b.n	8004880 <SD_PowerON+0x1bc>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(SDIO_RESP1);
 800482a:	2000      	movs	r0, #0
 800482c:	f001 fee4 	bl	80065f8 <SDIO_GetResponse>
 8004830:	62f8      	str	r0, [r7, #44]	; 0x2c
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	0fdb      	lsrs	r3, r3, #31
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <SD_PowerON+0x17a>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <SD_PowerON+0x17c>
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
      
      count++;
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	3301      	adds	r3, #1
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <SD_PowerON+0x194>
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004854:	4293      	cmp	r3, r2
 8004856:	d9a5      	bls.n	80047a4 <SD_PowerON+0xe0>
    }
    
    if(count >= SD_MAX_VOLT_TRIAL)
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800485e:	4293      	cmp	r3, r2
 8004860:	d904      	bls.n	800486c <SD_PowerON+0x1a8>
    {
      errorstate = SD_INVALID_VOLTRANGE;
 8004862:	231b      	movs	r3, #27
 8004864:	72fb      	strb	r3, [r7, #11]
      
      return errorstate;
 8004866:	7afb      	ldrb	r3, [r7, #11]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e009      	b.n	8004880 <SD_PowerON+0x1bc>
    }
    
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <SD_PowerON+0x1b8>
    {
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	621a      	str	r2, [r3, #32]
    }
    
  } /* else MMC Card */
  
  return errorstate;
 800487c:	7afb      	ldrb	r3, [r7, #11]
 800487e:	b2db      	uxtb	r3, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	3730      	adds	r7, #48	; 0x30
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	422580a0 	.word	0x422580a0

0800488c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	77fb      	strb	r3, [r7, #31]
  
  if(pCardStatus == NULL)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <SD_SendStatus+0x1c>
  {
    errorstate = SD_INVALID_PARAMETER;
 80048a0:	2326      	movs	r3, #38	; 0x26
 80048a2:	77fb      	strb	r3, [r7, #31]
    
    return errorstate;
 80048a4:	7ffb      	ldrb	r3, [r7, #31]
 80048a6:	e026      	b.n	80048f6 <SD_SendStatus+0x6a>
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	60bb      	str	r3, [r7, #8]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 80048b0:	230d      	movs	r3, #13
 80048b2:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80048b4:	2340      	movs	r3, #64	; 0x40
 80048b6:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80048bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048c0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f107 0208 	add.w	r2, r7, #8
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 fe5b 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 80048d2:	210d      	movs	r1, #13
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f8a7 	bl	8004a28 <SD_CmdResp1Error>
 80048da:	4603      	mov	r3, r0
 80048dc:	77fb      	strb	r3, [r7, #31]
  
  if(errorstate != SD_OK)
 80048de:	7ffb      	ldrb	r3, [r7, #31]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <SD_SendStatus+0x5c>
  {
    return errorstate;
 80048e4:	7ffb      	ldrb	r3, [r7, #31]
 80048e6:	e006      	b.n	80048f6 <SD_SendStatus+0x6a>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(SDIO_RESP1);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f001 fe85 	bl	80065f8 <SDIO_GetResponse>
 80048ee:	4602      	mov	r2, r0
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	601a      	str	r2, [r3, #0]
  
  return errorstate;
 80048f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <SD_CmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdError(SD_HandleTypeDef *hsd)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout, tmp;
  
  timeout = SDIO_CMD0TIMEOUT;
 800490a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800490e:	617b      	str	r3, [r7, #20]
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	613b      	str	r3, [r7, #16]
    
  while((timeout > 0U) && (!tmp))
 8004926:	e00d      	b.n	8004944 <SD_CmdError+0x46>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	613b      	str	r3, [r7, #16]
    timeout--;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	3b01      	subs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
  while((timeout > 0U) && (!tmp))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <SD_CmdError+0x52>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0eb      	beq.n	8004928 <SD_CmdError+0x2a>
  }
  
  if(timeout == 0U)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <SD_CmdError+0x60>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	73fb      	strb	r3, [r7, #15]
    return errorstate;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	e005      	b.n	800496a <SD_CmdError+0x6c>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <SD_CmdResp7Error>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
 8004976:	b480      	push	{r7}
 8004978:	b087      	sub	sp, #28
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
 800497e:	2329      	movs	r3, #41	; 0x29
 8004980:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
 8004982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004986:	617b      	str	r3, [r7, #20]
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	613b      	str	r3, [r7, #16]
  
  while((!tmp) && (timeout > 0U))
 800499e:	e00d      	b.n	80049bc <SD_CmdResp7Error+0x46>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf14      	ite	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	2300      	moveq	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	613b      	str	r3, [r7, #16]
    timeout--;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
  while((!tmp) && (timeout > 0U))
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <SD_CmdResp7Error+0x52>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1eb      	bne.n	80049a0 <SD_CmdResp7Error+0x2a>
  }
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT); 
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf14      	ite	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	2300      	moveq	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	613b      	str	r3, [r7, #16]
  
  if((timeout == 0U) || tmp)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <SD_CmdResp7Error+0x74>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <SD_CmdResp7Error+0x84>
  {
    /* Card is not V2.0 compliant or card does not support the set voltage range */
    errorstate = SD_CMD_RSP_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2204      	movs	r2, #4
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	e00f      	b.n	8004a1a <SD_CmdResp7Error+0xa4>
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDREND))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <SD_CmdResp7Error+0xa2>
  {
    /* Card is SD V2.0 compliant */
    errorstate = SD_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CMDREND);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2240      	movs	r2, #64	; 0x40
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	e000      	b.n	8004a1a <SD_CmdResp7Error+0xa4>
  }
  
  return errorstate;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <SD_CmdResp1Error>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp1Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004a38:	bf00      	nop
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a40:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f8      	beq.n	8004a3a <SD_CmdResp1Error+0x12>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <SD_CmdResp1Error+0x3e>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	e0b0      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <SD_CmdResp1Error+0x5c>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	e0a1      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fda7 	bl	80065dc <SDIO_GetCommandResponse>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	461a      	mov	r2, r3
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <SD_CmdResp1Error+0x78>
  {
    errorstate = SD_ILLEGAL_CMD;
 8004a98:	2310      	movs	r3, #16
 8004a9a:	73fb      	strb	r3, [r7, #15]
    
    return errorstate;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	e093      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8004aaa:	2000      	movs	r0, #0
 8004aac:	f001 fda4 	bl	80065f8 <SDIO_GetResponse>
 8004ab0:	60b8      	str	r0, [r7, #8]
  
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <SD_CmdResp1Error+0x1a8>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <SD_CmdResp1Error+0x98>
  {
    return errorstate;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	e083      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da01      	bge.n	8004aca <SD_CmdResp1Error+0xa2>
  {
    return(SD_ADDR_OUT_OF_RANGE);
 8004ac6:	231c      	movs	r3, #28
 8004ac8:	e07e      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <SD_CmdResp1Error+0xb0>
  {
    return(SD_ADDR_MISALIGNED);
 8004ad4:	2309      	movs	r3, #9
 8004ad6:	e077      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <SD_CmdResp1Error+0xbe>
  {
    return(SD_BLOCK_LEN_ERR);
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	e070      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <SD_CmdResp1Error+0xcc>
  {
    return(SD_ERASE_SEQ_ERR);
 8004af0:	230b      	movs	r3, #11
 8004af2:	e069      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <SD_CmdResp1Error+0xda>
  {
    return(SD_BAD_ERASE_PARAM);
 8004afe:	230c      	movs	r3, #12
 8004b00:	e062      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <SD_CmdResp1Error+0xe8>
  {
    return(SD_WRITE_PROT_VIOLATION);
 8004b0c:	230d      	movs	r3, #13
 8004b0e:	e05b      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <SD_CmdResp1Error+0xf6>
  {
    return(SD_LOCK_UNLOCK_FAILED);
 8004b1a:	230e      	movs	r3, #14
 8004b1c:	e054      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <SD_CmdResp1Error+0x104>
  {
    return(SD_COM_CRC_FAILED);
 8004b28:	230f      	movs	r3, #15
 8004b2a:	e04d      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <SD_CmdResp1Error+0x112>
  {
    return(SD_ILLEGAL_CMD);
 8004b36:	2310      	movs	r3, #16
 8004b38:	e046      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <SD_CmdResp1Error+0x120>
  {
    return(SD_CARD_ECC_FAILED);
 8004b44:	2311      	movs	r3, #17
 8004b46:	e03f      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <SD_CmdResp1Error+0x12e>
  {
    return(SD_CC_ERROR);
 8004b52:	2312      	movs	r3, #18
 8004b54:	e038      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <SD_CmdResp1Error+0x13c>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8004b60:	2313      	movs	r3, #19
 8004b62:	e031      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <SD_CmdResp1Error+0x14a>
  {
    return(SD_STREAM_READ_UNDERRUN);
 8004b6e:	2314      	movs	r3, #20
 8004b70:	e02a      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <SD_CmdResp1Error+0x158>
  {
    return(SD_STREAM_WRITE_OVERRUN);
 8004b7c:	2315      	movs	r3, #21
 8004b7e:	e023      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <SD_CmdResp1Error+0x166>
  {
    return(SD_CID_CSD_OVERWRITE);
 8004b8a:	2316      	movs	r3, #22
 8004b8c:	e01c      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <SD_CmdResp1Error+0x174>
  {
    return(SD_WP_ERASE_SKIP);
 8004b98:	2317      	movs	r3, #23
 8004b9a:	e015      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <SD_CmdResp1Error+0x182>
  {
    return(SD_CARD_ECC_DISABLED);
 8004ba6:	2318      	movs	r3, #24
 8004ba8:	e00e      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <SD_CmdResp1Error+0x190>
  {
    return(SD_ERASE_RESET);
 8004bb4:	2319      	movs	r3, #25
 8004bb6:	e007      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <SD_CmdResp1Error+0x19e>
  {
    return(SD_AKE_SEQ_ERROR);
 8004bc2:	231a      	movs	r3, #26
 8004bc4:	e000      	b.n	8004bc8 <SD_CmdResp1Error+0x1a0>
  }
  
  return errorstate;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	fdffe008 	.word	0xfdffe008

08004bd4 <SD_CmdResp3Error>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp3Error(SD_HandleTypeDef *hsd)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004be0:	bf00      	nop
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f8      	beq.n	8004be2 <SD_CmdResp3Error+0xe>
  {
  }
  
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <SD_CmdResp3Error+0x3a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2204      	movs	r2, #4
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	e005      	b.n	8004c1a <SD_CmdResp3Error+0x46>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <SD_CmdResp2Error>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004c32:	bf00      	nop
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f8      	beq.n	8004c34 <SD_CmdResp2Error+0xe>
  {
  }
    
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <SD_CmdResp2Error+0x3a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	e014      	b.n	8004c8a <SD_CmdResp2Error+0x64>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <SD_CmdResp2Error+0x58>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2201      	movs	r2, #1
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	e005      	b.n	8004c8a <SD_CmdResp2Error+0x64>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <SD_CmdResp6Error>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	72fb      	strb	r3, [r7, #11]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004ca8:	bf00      	nop
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f8      	beq.n	8004caa <SD_CmdResp6Error+0x14>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <SD_CmdResp6Error+0x40>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	75fb      	strb	r3, [r7, #23]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	e047      	b.n	8004d66 <SD_CmdResp6Error+0xd0>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <SD_CmdResp6Error+0x5e>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2201      	movs	r2, #1
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
 8004cf2:	e038      	b.n	8004d66 <SD_CmdResp6Error+0xd0>
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 fc6f 	bl	80065dc <SDIO_GetCommandResponse>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	7afb      	ldrb	r3, [r7, #11]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <SD_CmdResp6Error+0x7a>
  {
    errorstate = SD_ILLEGAL_CMD;
 8004d08:	2310      	movs	r3, #16
 8004d0a:	75fb      	strb	r3, [r7, #23]
    
    return errorstate;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	e02a      	b.n	8004d66 <SD_CmdResp6Error+0xd0>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f001 fc6c 	bl	80065f8 <SDIO_GetResponse>
 8004d20:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <SD_CmdResp6Error+0xa4>
  {
    *pRCA = (uint16_t) (response_r1 >> 16U);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	0c1b      	lsrs	r3, r3, #16
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	801a      	strh	r2, [r3, #0]
    
    return errorstate;
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	e015      	b.n	8004d66 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <SD_CmdResp6Error+0xb2>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8004d44:	2313      	movs	r3, #19
 8004d46:	e00e      	b.n	8004d66 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <SD_CmdResp6Error+0xc0>
  {
    return(SD_ILLEGAL_CMD);
 8004d52:	2310      	movs	r3, #16
 8004d54:	e007      	b.n	8004d66 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <SD_CmdResp6Error+0xce>
  {
    return(SD_COM_CRC_FAILED);
 8004d60:	230f      	movs	r3, #15
 8004d62:	e000      	b.n	8004d66 <SD_CmdResp6Error+0xd0>
  }
  
  return errorstate;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b08a      	sub	sp, #40	; 0x28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  uint32_t scr[2U] = {0U, 0U};
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8004d84:	2000      	movs	r0, #0
 8004d86:	f001 fc37 	bl	80065f8 <SDIO_GetResponse>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d94:	d105      	bne.n	8004da2 <SD_WideBus_Enable+0x34>
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
 8004d96:	230e      	movs	r3, #14
 8004d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8004d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004da0:	e059      	b.n	8004e56 <SD_WideBus_Enable+0xe8>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004da2:	f107 0308 	add.w	r3, r7, #8
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8d0 	bl	8004f4e <SD_FindSCR>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)
 8004db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <SD_WideBus_Enable+0x54>
  {
    return errorstate;
 8004dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dc0:	e049      	b.n	8004e56 <SD_WideBus_Enable+0xe8>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03f      	beq.n	8004e4c <SD_WideBus_Enable+0xde>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004dd4:	2337      	movs	r3, #55	; 0x37
 8004dd6:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de4:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f107 0210 	add.w	r2, r7, #16
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fbc9 	bl	8006588 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004df6:	2137      	movs	r1, #55	; 0x37
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fe15 	bl	8004a28 <SD_CmdResp1Error>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8004e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <SD_WideBus_Enable+0xa4>
    {
      return errorstate;
 8004e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e10:	e021      	b.n	8004e56 <SD_WideBus_Enable+0xe8>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    sdio_cmdinitstructure.Argument         = 2U;
 8004e12:	2302      	movs	r3, #2
 8004e14:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8004e16:	2306      	movs	r3, #6
 8004e18:	617b      	str	r3, [r7, #20]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f107 0210 	add.w	r2, r7, #16
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fbaf 	bl	8006588 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8004e2a:	2106      	movs	r1, #6
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fdfb 	bl	8004a28 <SD_CmdResp1Error>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8004e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <SD_WideBus_Enable+0xd8>
    {
      return errorstate;
 8004e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e44:	e007      	b.n	8004e56 <SD_WideBus_Enable+0xe8>
    }
    
    return errorstate;
 8004e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e4a:	e004      	b.n	8004e56 <SD_WideBus_Enable+0xe8>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 8004e4c:	2325      	movs	r3, #37	; 0x25
 8004e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8004e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
}   
 8004e56:	4618      	mov	r0, r3
 8004e58:	3728      	adds	r7, #40	; 0x28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b08a      	sub	sp, #40	; 0x28
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  uint32_t scr[2U] = {0U, 0U};
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8004e74:	2000      	movs	r0, #0
 8004e76:	f001 fbbf 	bl	80065f8 <SDIO_GetResponse>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e84:	d105      	bne.n	8004e92 <SD_WideBus_Disable+0x34>
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
 8004e86:	230e      	movs	r3, #14
 8004e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8004e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e90:	e059      	b.n	8004f46 <SD_WideBus_Disable+0xe8>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004e92:	f107 0308 	add.w	r3, r7, #8
 8004e96:	4619      	mov	r1, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f858 	bl	8004f4e <SD_FindSCR>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)
 8004ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <SD_WideBus_Disable+0x54>
  {
    return errorstate;
 8004eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eb0:	e049      	b.n	8004f46 <SD_WideBus_Disable+0xe8>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d03f      	beq.n	8004f3c <SD_WideBus_Disable+0xde>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004ec4:	2337      	movs	r3, #55	; 0x37
 8004ec6:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004ec8:	2340      	movs	r3, #64	; 0x40
 8004eca:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed4:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f107 0210 	add.w	r2, r7, #16
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 fb51 	bl	8006588 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004ee6:	2137      	movs	r1, #55	; 0x37
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fd9d 	bl	8004a28 <SD_CmdResp1Error>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8004ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <SD_WideBus_Disable+0xa4>
    {
      return errorstate;
 8004efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f00:	e021      	b.n	8004f46 <SD_WideBus_Disable+0xe8>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    sdio_cmdinitstructure.Argument         = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8004f06:	2306      	movs	r3, #6
 8004f08:	617b      	str	r3, [r7, #20]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f107 0210 	add.w	r2, r7, #16
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 fb37 	bl	8006588 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8004f1a:	2106      	movs	r1, #6
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fd83 	bl	8004a28 <SD_CmdResp1Error>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8004f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <SD_WideBus_Disable+0xd8>
    {
      return errorstate;
 8004f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f34:	e007      	b.n	8004f46 <SD_WideBus_Disable+0xe8>
    }
    
    return errorstate;
 8004f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f3a:	e004      	b.n	8004f46 <SD_WideBus_Disable+0xe8>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 8004f3c:	2325      	movs	r3, #37	; 0x25
 8004f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8004f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3728      	adds	r7, #40	; 0x28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004f4e:	b590      	push	{r4, r7, lr}
 8004f50:	b093      	sub	sp, #76	; 0x4c
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint32_t index = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tempscr[2U] = {0U, 0U};
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8U;
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004f6e:	2310      	movs	r3, #16
 8004f70:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004f72:	2340      	movs	r3, #64	; 0x40
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004f76:	2300      	movs	r3, #0
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 fafc 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8004f90:	2110      	movs	r1, #16
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff fd48 	bl	8004a28 <SD_CmdResp1Error>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 8004f9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <SD_FindSCR+0x5e>
  {
    return errorstate;
 8004fa6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004faa:	e0d8      	b.n	800515e <SD_FindSCR+0x210>
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004fb4:	2337      	movs	r3, #55	; 0x37
 8004fb6:	633b      	str	r3, [r7, #48]	; 0x30
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 fae0 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004fc8:	2137      	movs	r1, #55	; 0x37
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fd2c 	bl	8004a28 <SD_CmdResp1Error>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 8004fd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <SD_FindSCR+0x96>
  {
    return errorstate;
 8004fde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004fe2:	e0bc      	b.n	800515e <SD_FindSCR+0x210>
  }
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataLength    = 8U;
 8004fea:	2308      	movs	r3, #8
 8004fec:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004fee:	2330      	movs	r3, #48	; 0x30
 8004ff0:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f107 0214 	add.w	r2, r7, #20
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f001 fb09 	bl	8006620 <SDIO_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8005012:	2333      	movs	r3, #51	; 0x33
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f001 fab1 	bl	8006588 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8005026:	2133      	movs	r1, #51	; 0x33
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fcfd 	bl	8004a28 <SD_CmdResp1Error>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 8005034:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005038:	2b00      	cmp	r3, #0
 800503a:	d018      	beq.n	800506e <SD_FindSCR+0x120>
  {
    return errorstate;
 800503c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005040:	e08d      	b.n	800515e <SD_FindSCR+0x210>
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
#endif /* SDIO_STA_STBITERR */
  {
    if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00e      	beq.n	800506e <SD_FindSCR+0x120>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	f107 020c 	add.w	r2, r7, #12
 800505c:	18d4      	adds	r4, r2, r3
 800505e:	4608      	mov	r0, r1
 8005060:	f001 fa69 	bl	8006536 <SDIO_ReadFIFO>
 8005064:	4603      	mov	r3, r0
 8005066:	6023      	str	r3, [r4, #0]
      index++;
 8005068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506a:	3301      	adds	r3, #1
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005074:	f240 632a 	movw	r3, #1578	; 0x62a
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0e1      	beq.n	8005042 <SD_FindSCR+0xf4>
    }
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <SD_FindSCR+0x152>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 800509a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800509e:	e05e      	b.n	800515e <SD_FindSCR+0x210>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <SD_FindSCR+0x174>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2202      	movs	r2, #2
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
 80050b6:	2302      	movs	r3, #2
 80050b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 80050bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050c0:	e04d      	b.n	800515e <SD_FindSCR+0x210>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <SD_FindSCR+0x196>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2220      	movs	r2, #32
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
 80050d8:	2306      	movs	r3, #6
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 80050de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050e2:	e03c      	b.n	800515e <SD_FindSCR+0x210>
  }
#ifdef SDIO_STA_STBITERR
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <SD_FindSCR+0x1ba>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
 80050fc:	2307      	movs	r3, #7
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 8005102:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005106:	e02a      	b.n	800515e <SD_FindSCR+0x210>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	061a      	lsls	r2, r3, #24
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800511e:	431a      	orrs	r2, r3
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 8005128:	ea42 0103 	orr.w	r1, r2, r3
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	0e1a      	lsrs	r2, r3, #24
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	3304      	adds	r3, #4
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
 8005134:	430a      	orrs	r2, r1
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 8005136:	601a      	str	r2, [r3, #0]
  
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	061a      	lsls	r2, r3, #24
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005144:	431a      	orrs	r2, r3
    ((tempscr[1U] & SD_16TO23BITS) >> 8U) | ((tempscr[1U] & SD_24TO31BITS) >> 24U);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 800514e:	431a      	orrs	r2, r3
    ((tempscr[1U] & SD_16TO23BITS) >> 8U) | ((tempscr[1U] & SD_24TO31BITS) >> 24U);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	0e1b      	lsrs	r3, r3, #24
 8005154:	431a      	orrs	r2, r3
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	601a      	str	r2, [r3, #0]
  
  return errorstate;
 800515a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
 800515e:	4618      	mov	r0, r3
 8005160:	374c      	adds	r7, #76	; 0x4c
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}

08005166 <HAL_SMARTCARD_Init>:
  * @param  hsc: pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                the configuration information for SMARTCARD module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsc)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the SMARTCARD handle allocation */
  if(hsc == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_SMARTCARD_Init+0x12>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e071      	b.n	800525c <HAL_SMARTCARD_Init+0xf6>

  /* Check the parameters */
  assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
  assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));

  if(hsc->gState == HAL_SMARTCARD_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <HAL_SMARTCARD_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    hsc->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SMARTCARD_MspInit(hsc);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f005 ffed 	bl	800b16c <HAL_SMARTCARD_MspInit>
  }
  
  hsc->gState = HAL_SMARTCARD_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	; 0x24
 8005196:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Set the Prescaler */
  MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_PSC, hsc->Init.Prescaler);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	619a      	str	r2, [r3, #24]

  /* Set the Guard Time */
  MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_GT, ((hsc->Init.GuardTime)<<8));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]

  /* Set the Smartcard Communication parameters */
  SMARTCARD_SetConfig(hsc);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f84b 	bl	8005264 <SMARTCARD_SetConfig>

  /* In SmartCard mode, the following bits must be kept cleared: 
  - LINEN bit in the USART_CR2 register
  - HDSEL and IREN bits in the USART_CR3 register.*/
  hsc->Instance->CR2 &= ~USART_CR2_LINEN;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051dc:	611a      	str	r2, [r3, #16]
  hsc->Instance->CR3 &= ~(USART_CR3_IREN | USART_CR3_HDSEL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 020a 	bic.w	r2, r2, #10
 80051ec:	615a      	str	r2, [r3, #20]

  /* Enable the SMARTCARD Parity Error Interrupt */
  __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_PE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fc:	60da      	str	r2, [r3, #12]

  /* Enable the SMARTCARD Framing Error Interrupt */
  __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_ERR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_SMARTCARD_ENABLE(hsc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800521c:	60da      	str	r2, [r3, #12]

  /* Configure the Smartcard NACK state */
  MODIFY_REG(hsc->Instance->CR3, USART_CR3_NACK, hsc->Init.NACKState);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f023 0110 	bic.w	r1, r3, #16
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	615a      	str	r2, [r3, #20]

  /* Enable the SC mode by setting the SCEN bit in the CR3 register */
  hsc->Instance->CR3 |= (USART_CR3_SCEN);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695a      	ldr	r2, [r3, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0220 	orr.w	r2, r2, #32
 8005242:	615a      	str	r2, [r3, #20]

  /* Initialize the SMARTCARD state*/
  hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	64da      	str	r2, [r3, #76]	; 0x4c
  hsc->gState= HAL_SMARTCARD_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  hsc->RxState= HAL_SMARTCARD_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SMARTCARD_SetConfig>:
  * @param  hsc: pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                the configuration information for SMARTCARD module.
  * @retval None
  */
static void SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsc)
{
 8005264:	b5b0      	push	{r4, r5, r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SMARTCARD_MODE(hsc->Init.Mode));
  assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  hsc->Instance->CR1 &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 020c 	bic.w	r2, r2, #12
 800527e:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = hsc->Instance->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800528e:	60fb      	str	r3, [r7, #12]
  /* Configure the SMARTCARD Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to hsc->Init.CLKPolarity value */
  /* Set CPHA bit according to hsc->Init.CLKPhase value */
  /* Set LBCL bit according to hsc->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity | 
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699a      	ldr	r2, [r3, #24]
                      hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity | 
 8005298:	431a      	orrs	r2, r3
                      hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity | 
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  hsc->Instance->CR2 = (uint32_t)tmpreg;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	611a      	str	r2, [r3, #16]
  
  tmpreg = hsc->Instance->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
  tmpreg |= (uint32_t)(hsc->Init.StopBits);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  hsc->Instance->CR2 = (uint32_t)tmpreg;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = hsc->Instance->CR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052e8:	f023 030c 	bic.w	r3, r3, #12
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Configure the SMARTCARD Word Length, Parity and mode: 
     Set the M bits according to hsc->Init.WordLength value 
     Set PCE and PS bits according to hsc->Init.Parity value
     Set TE and RE bits according to hsc->Init.Mode value */
  tmpreg |= (uint32_t)hsc->Init.WordLength | hsc->Init.Parity | hsc->Init.Mode;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  hsc->Instance->CR1 = (uint32_t)tmpreg;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/  
  /* Clear CTSE and RTSE bits */
  hsc->Instance->CR3 &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800531a:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((hsc->Instance == USART1) || (hsc->Instance == USART6))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a71      	ldr	r2, [pc, #452]	; (80054e8 <SMARTCARD_SetConfig+0x284>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <SMARTCARD_SetConfig+0xcc>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a70      	ldr	r2, [pc, #448]	; (80054ec <SMARTCARD_SetConfig+0x288>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d16b      	bne.n	8005408 <SMARTCARD_SetConfig+0x1a4>
  {
    hsc->Instance->BRR = SMARTCARD_BRR(HAL_RCC_GetPCLK2Freq(), hsc->Init.BaudRate);
 8005330:	f7fe f88c 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005334:	4602      	mov	r2, r0
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009a      	lsls	r2, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	fbb2 f3f3 	udiv	r3, r2, r3
 800534a:	4a69      	ldr	r2, [pc, #420]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	011c      	lsls	r4, r3, #4
 8005354:	f7fe f87a 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005358:	4602      	mov	r2, r0
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	009a      	lsls	r2, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	fbb2 f5f3 	udiv	r5, r2, r3
 800536e:	f7fe f86d 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005372:	4602      	mov	r2, r0
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009a      	lsls	r2, r3, #2
 800537c:	441a      	add	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	4a59      	ldr	r2, [pc, #356]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	2264      	movs	r2, #100	; 0x64
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	1aeb      	subs	r3, r5, r3
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	3332      	adds	r3, #50	; 0x32
 800539c:	4a54      	ldr	r2, [pc, #336]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a8:	441c      	add	r4, r3
 80053aa:	f7fe f84f 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 80053ae:	4602      	mov	r2, r0
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80053c4:	f7fe f842 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009a      	lsls	r2, r3, #2
 80053d2:	441a      	add	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	fbb2 f3f3 	udiv	r3, r2, r3
 80053de:	4a44      	ldr	r2, [pc, #272]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	2264      	movs	r2, #100	; 0x64
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	1aeb      	subs	r3, r5, r3
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	3332      	adds	r3, #50	; 0x32
 80053f2:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	f003 020f 	and.w	r2, r3, #15
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4422      	add	r2, r4
 8005404:	609a      	str	r2, [r3, #8]
 8005406:	e06b      	b.n	80054e0 <SMARTCARD_SetConfig+0x27c>
  }
  else
  {
    hsc->Instance->BRR = SMARTCARD_BRR(HAL_RCC_GetPCLK1Freq(), hsc->Init.BaudRate);
 8005408:	f7fd fffe 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 800540c:	4602      	mov	r2, r0
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009a      	lsls	r2, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	4a33      	ldr	r2, [pc, #204]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	011c      	lsls	r4, r3, #4
 800542c:	f7fd ffec 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8005430:	4602      	mov	r2, r0
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009a      	lsls	r2, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	fbb2 f5f3 	udiv	r5, r2, r3
 8005446:	f7fd ffdf 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 800544a:	4602      	mov	r2, r0
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009a      	lsls	r2, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	4a23      	ldr	r2, [pc, #140]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	2264      	movs	r2, #100	; 0x64
 800546a:	fb02 f303 	mul.w	r3, r2, r3
 800546e:	1aeb      	subs	r3, r5, r3
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	3332      	adds	r3, #50	; 0x32
 8005474:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005480:	441c      	add	r4, r3
 8005482:	f7fd ffc1 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8005486:	4602      	mov	r2, r0
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	fbb2 f5f3 	udiv	r5, r2, r3
 800549c:	f7fd ffb4 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009a      	lsls	r2, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	2264      	movs	r2, #100	; 0x64
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	1aeb      	subs	r3, r5, r3
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	3332      	adds	r3, #50	; 0x32
 80054ca:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <SMARTCARD_SetConfig+0x28c>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	f003 020f 	and.w	r2, r3, #15
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4422      	add	r2, r4
 80054dc:	609a      	str	r2, [r3, #8]
  }
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bdb0      	pop	{r4, r5, r7, pc}
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40011400 	.word	0x40011400
 80054f0:	51eb851f 	.word	0x51eb851f

080054f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e05d      	b.n	80055c2 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif

  if(hspi->State == HAL_SPI_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f005 fb6a 	bl	800abf4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	ea42 0103 	orr.w	r1, r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	0c1b      	lsrs	r3, r3, #16
 800557e:	f003 0104 	and.w	r1, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]

#ifdef USE_SPI_CRC
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005596:	d104      	bne.n	80055a2 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055a0:	611a      	str	r2, [r3, #16]
  }
#endif

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b0:	61da      	str	r2, [r3, #28]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e034      	b.n	800564a <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f82c 	bl	8005652 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3308      	adds	r3, #8
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f000 fe75 	bl	80062f4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	461a      	mov	r2, r3
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	f000 fed1 	bl	80063bc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6858      	ldr	r0, [r3, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	f000 ff1a 	bl	8006460 <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	6892      	ldr	r2, [r2, #8]
 8005634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	6892      	ldr	r2, [r2, #8]
 8005640:	f041 0101 	orr.w	r1, r1, #1
 8005644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_SRAM_MspInit>:
  * @param  hsram: pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsram);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */ 
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer: Pointer to destination buffer  
  * @param  BufferSize: Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 8005666:	b480      	push	{r7}
 8005668:	b087      	sub	sp, #28
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_SRAM_Read_16b+0x20>
 8005682:	2302      	movs	r3, #2
 8005684:	e022      	b.n	80056cc <HAL_SRAM_Read_16b+0x66>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8005696:	e00d      	b.n	80056b4 <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3302      	adds	r3, #2
 80056a6:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3302      	adds	r3, #2
 80056ac:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ee      	bne.n	8005698 <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e01d      	b.n	8005726 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f005 fc40 	bl	800af84 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f000 f8d0 	bl	80058bc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}  
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005746:	2302      	movs	r3, #2
 8005748:	e0b4      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b0c      	cmp	r3, #12
 800575e:	f200 809f 	bhi.w	80058a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	0800579d 	.word	0x0800579d
 800576c:	080058a1 	.word	0x080058a1
 8005770:	080058a1 	.word	0x080058a1
 8005774:	080058a1 	.word	0x080058a1
 8005778:	080057dd 	.word	0x080057dd
 800577c:	080058a1 	.word	0x080058a1
 8005780:	080058a1 	.word	0x080058a1
 8005784:	080058a1 	.word	0x080058a1
 8005788:	0800581f 	.word	0x0800581f
 800578c:	080058a1 	.word	0x080058a1
 8005790:	080058a1 	.word	0x080058a1
 8005794:	080058a1 	.word	0x080058a1
 8005798:	0800585f 	.word	0x0800585f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f9ac 	bl	8005b00 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0208 	orr.w	r2, r2, #8
 80057b6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0204 	bic.w	r2, r2, #4
 80057c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6999      	ldr	r1, [r3, #24]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	619a      	str	r2, [r3, #24]
    }
    break;
 80057da:	e062      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f914 	bl	8005a10 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6999      	ldr	r1, [r3, #24]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	021a      	lsls	r2, r3, #8
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	619a      	str	r2, [r3, #24]
    }
    break;
 800581c:	e041      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f9df 	bl	8005be8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69da      	ldr	r2, [r3, #28]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0208 	orr.w	r2, r2, #8
 8005838:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0204 	bic.w	r2, r2, #4
 8005848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69d9      	ldr	r1, [r3, #28]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	61da      	str	r2, [r3, #28]
    }
    break;
 800585c:	e021      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fa37 	bl	8005cd8 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005878:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69d9      	ldr	r1, [r3, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	021a      	lsls	r2, r3, #8
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	61da      	str	r2, [r3, #28]
    }
    break;
 800589e:	e000      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80058a0:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a44      	ldr	r2, [pc, #272]	; (80059e4 <TIM_Base_SetConfig+0x128>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <TIM_Base_SetConfig+0x44>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d00f      	beq.n	8005900 <TIM_Base_SetConfig+0x44>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a41      	ldr	r2, [pc, #260]	; (80059e8 <TIM_Base_SetConfig+0x12c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_Base_SetConfig+0x44>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a40      	ldr	r2, [pc, #256]	; (80059ec <TIM_Base_SetConfig+0x130>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <TIM_Base_SetConfig+0x44>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3f      	ldr	r2, [pc, #252]	; (80059f0 <TIM_Base_SetConfig+0x134>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0x44>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3e      	ldr	r2, [pc, #248]	; (80059f4 <TIM_Base_SetConfig+0x138>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d101      	bne.n	8005904 <TIM_Base_SetConfig+0x48>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <TIM_Base_SetConfig+0x4a>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a31      	ldr	r2, [pc, #196]	; (80059e4 <TIM_Base_SetConfig+0x128>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d02b      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d027      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <TIM_Base_SetConfig+0x12c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d023      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a2d      	ldr	r2, [pc, #180]	; (80059ec <TIM_Base_SetConfig+0x130>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d01f      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a2c      	ldr	r2, [pc, #176]	; (80059f0 <TIM_Base_SetConfig+0x134>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d01b      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a2b      	ldr	r2, [pc, #172]	; (80059f4 <TIM_Base_SetConfig+0x138>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d017      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a2a      	ldr	r2, [pc, #168]	; (80059f8 <TIM_Base_SetConfig+0x13c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a29      	ldr	r2, [pc, #164]	; (80059fc <TIM_Base_SetConfig+0x140>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00f      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a28      	ldr	r2, [pc, #160]	; (8005a00 <TIM_Base_SetConfig+0x144>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00b      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a27      	ldr	r2, [pc, #156]	; (8005a04 <TIM_Base_SetConfig+0x148>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <TIM_Base_SetConfig+0x14c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0xc0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <TIM_Base_SetConfig+0x150>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <TIM_Base_SetConfig+0xc4>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <TIM_Base_SetConfig+0xc6>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a0c      	ldr	r2, [pc, #48]	; (80059e4 <TIM_Base_SetConfig+0x128>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d003      	beq.n	80059be <TIM_Base_SetConfig+0x102>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <TIM_Base_SetConfig+0x138>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <TIM_Base_SetConfig+0x106>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <TIM_Base_SetConfig+0x108>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	615a      	str	r2, [r3, #20]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800
 8005a04:	40001800 	.word	0x40001800
 8005a08:	40001c00 	.word	0x40001c00
 8005a0c:	40002000 	.word	0x40002000

08005a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0210 	bic.w	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a52:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0320 	bic.w	r3, r3, #32
 8005a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <TIM_OC2_SetConfig+0xe8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC2_SetConfig+0x74>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <TIM_OC2_SetConfig+0xec>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d101      	bne.n	8005a88 <TIM_OC2_SetConfig+0x78>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <TIM_OC2_SetConfig+0x7a>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d021      	beq.n	8005ad2 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	621a      	str	r2, [r3, #32]
}
 8005aec:	bf00      	nop
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40010400 	.word	0x40010400

08005b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8005b12:	2300      	movs	r3, #0
 8005b14:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0201 	bic.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f023 0302 	bic.w	r3, r3, #2
 8005b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <TIM_OC1_SetConfig+0xe0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_OC1_SetConfig+0x70>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <TIM_OC1_SetConfig+0xe4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d101      	bne.n	8005b74 <TIM_OC1_SetConfig+0x74>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <TIM_OC1_SetConfig+0x76>
 8005b74:	2300      	movs	r3, #0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01e      	beq.n	8005bb8 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 0308 	bic.w	r3, r3, #8
 8005b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0304 	bic.w	r3, r3, #4
 8005b92:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	621a      	str	r2, [r3, #32]
} 
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40010400 	.word	0x40010400

08005be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <TIM_OC3_SetConfig+0xe8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_OC3_SetConfig+0x72>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <TIM_OC3_SetConfig+0xec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <TIM_OC3_SetConfig+0x76>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <TIM_OC3_SetConfig+0x78>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d021      	beq.n	8005ca8 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c7e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a14      	ldr	r2, [pc, #80]	; (8005d90 <TIM_OC4_SetConfig+0xb8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC4_SetConfig+0x74>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <TIM_OC4_SetConfig+0xbc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <TIM_OC4_SetConfig+0x78>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <TIM_OC4_SetConfig+0x7a>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	019b      	lsls	r3, r3, #6
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40010400 	.word	0x40010400

08005d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e032      	b.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005dce:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
} 
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e03f      	b.n	8005eb4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f005 f939 	bl	800b0c0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2224      	movs	r2, #36	; 0x24
 8005e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e64:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f828 	bl	8005ebc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e7a:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e8a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e9a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ebc:	b5b0      	push	{r4, r5, r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ef8:	f023 030c 	bic.w	r3, r3, #12
 8005efc:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f30:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4c:	f040 80e4 	bne.w	8006118 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4aab      	ldr	r2, [pc, #684]	; (8006204 <UART_SetConfig+0x348>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <UART_SetConfig+0xa8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4aaa      	ldr	r2, [pc, #680]	; (8006208 <UART_SetConfig+0x34c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d16c      	bne.n	800603e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005f64:	f7fd fa72 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009a      	lsls	r2, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7e:	4aa3      	ldr	r2, [pc, #652]	; (800620c <UART_SetConfig+0x350>)
 8005f80:	fba2 2303 	umull	r2, r3, r2, r3
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	011c      	lsls	r4, r3, #4
 8005f88:	f7fd fa60 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009a      	lsls	r2, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005fa2:	f7fd fa53 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009a      	lsls	r2, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	4a93      	ldr	r2, [pc, #588]	; (800620c <UART_SetConfig+0x350>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	2264      	movs	r2, #100	; 0x64
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	1aeb      	subs	r3, r5, r3
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	3332      	adds	r3, #50	; 0x32
 8005fd0:	4a8e      	ldr	r2, [pc, #568]	; (800620c <UART_SetConfig+0x350>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fde:	441c      	add	r4, r3
 8005fe0:	f7fd fa34 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009a      	lsls	r2, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ffa:	f7fd fa27 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005ffe:	4602      	mov	r2, r0
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009a      	lsls	r2, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	4a7d      	ldr	r2, [pc, #500]	; (800620c <UART_SetConfig+0x350>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	2264      	movs	r2, #100	; 0x64
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	1aeb      	subs	r3, r5, r3
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	3332      	adds	r3, #50	; 0x32
 8006028:	4a78      	ldr	r2, [pc, #480]	; (800620c <UART_SetConfig+0x350>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f003 0207 	and.w	r2, r3, #7
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4422      	add	r2, r4
 800603a:	609a      	str	r2, [r3, #8]
 800603c:	e154      	b.n	80062e8 <UART_SetConfig+0x42c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800603e:	f7fd f9e3 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8006042:	4602      	mov	r2, r0
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009a      	lsls	r2, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	fbb2 f3f3 	udiv	r3, r2, r3
 8006058:	4a6c      	ldr	r2, [pc, #432]	; (800620c <UART_SetConfig+0x350>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	011c      	lsls	r4, r3, #4
 8006062:	f7fd f9d1 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8006066:	4602      	mov	r2, r0
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	009a      	lsls	r2, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	fbb2 f5f3 	udiv	r5, r2, r3
 800607c:	f7fd f9c4 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8006080:	4602      	mov	r2, r0
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009a      	lsls	r2, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	fbb2 f3f3 	udiv	r3, r2, r3
 8006096:	4a5d      	ldr	r2, [pc, #372]	; (800620c <UART_SetConfig+0x350>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	2264      	movs	r2, #100	; 0x64
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
 80060a4:	1aeb      	subs	r3, r5, r3
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	3332      	adds	r3, #50	; 0x32
 80060aa:	4a58      	ldr	r2, [pc, #352]	; (800620c <UART_SetConfig+0x350>)
 80060ac:	fba2 2303 	umull	r2, r3, r2, r3
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060b8:	441c      	add	r4, r3
 80060ba:	f7fd f9a5 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80060be:	4602      	mov	r2, r0
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009a      	lsls	r2, r3, #2
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80060d4:	f7fd f998 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80060d8:	4602      	mov	r2, r0
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009a      	lsls	r2, r3, #2
 80060e2:	441a      	add	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ee:	4a47      	ldr	r2, [pc, #284]	; (800620c <UART_SetConfig+0x350>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	2264      	movs	r2, #100	; 0x64
 80060f8:	fb02 f303 	mul.w	r3, r2, r3
 80060fc:	1aeb      	subs	r3, r5, r3
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	3332      	adds	r3, #50	; 0x32
 8006102:	4a42      	ldr	r2, [pc, #264]	; (800620c <UART_SetConfig+0x350>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	f003 0207 	and.w	r2, r3, #7
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4422      	add	r2, r4
 8006114:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006116:	e0e7      	b.n	80062e8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a39      	ldr	r2, [pc, #228]	; (8006204 <UART_SetConfig+0x348>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <UART_SetConfig+0x270>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a38      	ldr	r2, [pc, #224]	; (8006208 <UART_SetConfig+0x34c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d171      	bne.n	8006210 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800612c:	f7fd f98e 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8006130:	4602      	mov	r2, r0
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009a      	lsls	r2, r3, #2
 800613a:	441a      	add	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	fbb2 f3f3 	udiv	r3, r2, r3
 8006146:	4a31      	ldr	r2, [pc, #196]	; (800620c <UART_SetConfig+0x350>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	011c      	lsls	r4, r3, #4
 8006150:	f7fd f97c 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8006154:	4602      	mov	r2, r0
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009a      	lsls	r2, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	fbb2 f5f3 	udiv	r5, r2, r3
 800616a:	f7fd f96f 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 800616e:	4602      	mov	r2, r0
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009a      	lsls	r2, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	fbb2 f3f3 	udiv	r3, r2, r3
 8006184:	4a21      	ldr	r2, [pc, #132]	; (800620c <UART_SetConfig+0x350>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	2264      	movs	r2, #100	; 0x64
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	1aeb      	subs	r3, r5, r3
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	3332      	adds	r3, #50	; 0x32
 8006198:	4a1c      	ldr	r2, [pc, #112]	; (800620c <UART_SetConfig+0x350>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061a4:	441c      	add	r4, r3
 80061a6:	f7fd f951 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 80061aa:	4602      	mov	r2, r0
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009a      	lsls	r2, r3, #2
 80061b4:	441a      	add	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80061c0:	f7fd f944 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009a      	lsls	r2, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <UART_SetConfig+0x350>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	2264      	movs	r2, #100	; 0x64
 80061e4:	fb02 f303 	mul.w	r3, r2, r3
 80061e8:	1aeb      	subs	r3, r5, r3
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	3332      	adds	r3, #50	; 0x32
 80061ee:	4a07      	ldr	r2, [pc, #28]	; (800620c <UART_SetConfig+0x350>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4422      	add	r2, r4
 8006200:	609a      	str	r2, [r3, #8]
 8006202:	e071      	b.n	80062e8 <UART_SetConfig+0x42c>
 8006204:	40011000 	.word	0x40011000
 8006208:	40011400 	.word	0x40011400
 800620c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006210:	f7fd f8fa 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8006214:	4602      	mov	r2, r0
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009a      	lsls	r2, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	4a31      	ldr	r2, [pc, #196]	; (80062f0 <UART_SetConfig+0x434>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	011c      	lsls	r4, r3, #4
 8006234:	f7fd f8e8 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8006238:	4602      	mov	r2, r0
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	009a      	lsls	r2, r3, #2
 8006242:	441a      	add	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	fbb2 f5f3 	udiv	r5, r2, r3
 800624e:	f7fd f8db 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8006252:	4602      	mov	r2, r0
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009a      	lsls	r2, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <UART_SetConfig+0x434>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	2264      	movs	r2, #100	; 0x64
 8006272:	fb02 f303 	mul.w	r3, r2, r3
 8006276:	1aeb      	subs	r3, r5, r3
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	3332      	adds	r3, #50	; 0x32
 800627c:	4a1c      	ldr	r2, [pc, #112]	; (80062f0 <UART_SetConfig+0x434>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006288:	441c      	add	r4, r3
 800628a:	f7fd f8bd 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 800628e:	4602      	mov	r2, r0
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009a      	lsls	r2, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80062a4:	f7fd f8b0 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80062a8:	4602      	mov	r2, r0
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009a      	lsls	r2, r3, #2
 80062b2:	441a      	add	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <UART_SetConfig+0x434>)
 80062c0:	fba2 2303 	umull	r2, r3, r2, r3
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	2264      	movs	r2, #100	; 0x64
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	1aeb      	subs	r3, r5, r3
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	3332      	adds	r3, #50	; 0x32
 80062d2:	4a07      	ldr	r2, [pc, #28]	; (80062f0 <UART_SetConfig+0x434>)
 80062d4:	fba2 2303 	umull	r2, r3, r2, r3
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4422      	add	r2, r4
 80062e4:	609a      	str	r2, [r3, #8]
}
 80062e6:	e7ff      	b.n	80062e8 <UART_SetConfig+0x42c>
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bdb0      	pop	{r4, r5, r7, pc}
 80062f0:	51eb851f 	.word	0x51eb851f

080062f4 <FMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4b29      	ldr	r3, [pc, #164]	; (80063b8 <FMC_NORSRAM_Init+0xc4>)
 8006312:	4013      	ands	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CPSIZE   | FMC_BCR1_CBURSTRW | \
                       FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800631e:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8006324:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 800632a:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 8006330:	431a      	orrs	r2, r3
                    Init->WrapMode             |\
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
                    Init->WaitSignalPolarity   |\
 8006336:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	69db      	ldr	r3, [r3, #28]
                    Init->WrapMode             |\
 800633c:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 8006342:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 8006348:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 800634e:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 8006354:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->AsynchronousWait     |\
 800635a:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->PageSize             |\
 8006360:	431a      	orrs	r2, r3
                    Init->ContinuousClock);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 8006366:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
                    Init->ContinuousClock      |\
                    Init->PageSize             |\
                    Init->WriteFifo);
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b08      	cmp	r3, #8
 8006374:	d103      	bne.n	800637e <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800637c:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68f9      	ldr	r1, [r7, #12]
 8006386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006392:	d10a      	bne.n	80063aa <FMC_NORSRAM_Init+0xb6>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	ffe00080 	.word	0xffe00080

080063bc <FMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80063de:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 80063ea:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 80063f2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 80063fa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	3b01      	subs	r3, #1
 8006402:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8006404:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	3b02      	subs	r3, #2
 800640c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 800640e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8006414:	4313      	orrs	r3, r2
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6979      	ldr	r1, [r7, #20]
 8006424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0FU) << 20U)); 
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800643c:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	3b01      	subs	r3, #1
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006478:	d122      	bne.n	80064c0 <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006482:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	4b15      	ldr	r3, [pc, #84]	; (80064dc <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006488:	4013      	ands	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006496:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800649e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80064a6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80064ac:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6979      	ldr	r1, [r7, #20]
 80064ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80064be:	e005      	b.n	80064cc <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80064c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	cff00000 	.word	0xcff00000

080064e0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  Init: SDIO initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80064e0:	b084      	sub	sp, #16
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	f107 001c 	add.w	r0, r7, #28
 80064ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U; 
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80064f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80064f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80064fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80064fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006502:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006506:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800650a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800651a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	b004      	add	sp, #16
 8006534:	4770      	bx	lr

08006536 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDIO register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <SDIO_PowerState_ON>:
  * @brief  Set SDIO Power state to ON. 
  * @param  SDIOx: Pointer to SDIO register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2203      	movs	r2, #3
 800655c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0303 	and.w	r3, r3, #3
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <SDIO_SendCommand>:
  * @param  SDIO_CmdInitStruct: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->Response));
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->CPSM));

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	609a      	str	r2, [r3, #8]

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
                       SDIO_CmdInitStruct->Response         |\
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 80065a6:	431a      	orrs	r2, r3
                       SDIO_CmdInitStruct->WaitForInterrupt |\
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
                       SDIO_CmdInitStruct->Response         |\
 80065ac:	431a      	orrs	r2, r3
                       SDIO_CmdInitStruct->CPSM);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
                       SDIO_CmdInitStruct->WaitForInterrupt |\
 80065b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80065c2:	f023 030f 	bic.w	r3, r3, #15
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDIO register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	b2db      	uxtb	r3, r3
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  /* Get the response */
  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <SDIO_GetResponse+0x24>)
 8006608:	4413      	add	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
}  
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40012c14 	.word	0x40012c14

08006620 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->DPSM));

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
                       SDIO_DataInitStruct->TransferDir   |\
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8006646:	431a      	orrs	r2, r3
                       SDIO_DataInitStruct->TransferMode  |\
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
                       SDIO_DataInitStruct->TransferDir   |\
 800664c:	431a      	orrs	r2, r3
                       SDIO_DataInitStruct->DPSM);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
                       SDIO_DataInitStruct->TransferMode  |\
 8006652:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800666a:	2300      	movs	r3, #0

}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006678:	b084      	sub	sp, #16
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	f107 0014 	add.w	r0, r7, #20
 8006686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	2b01      	cmp	r3, #1
 800668e:	d120      	bne.n	80066d2 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 80066b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d105      	bne.n	80066ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 f93a 	bl	8007944 <USB_CoreReset>
 80066d0:	e00c      	b.n	80066ec <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f930 	bl	8007944 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10b      	bne.n	800670a <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= (USB_OTG_GAHBCFG_HBSTLEN_1 | USB_OTG_GAHBCFG_HBSTLEN_2);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f043 020c 	orr.w	r2, r3, #12
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006716:	b004      	add	sp, #16
 8006718:	4770      	bx	lr

0800671a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f043 0201 	orr.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f023 0201 	bic.w	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d106      	bne.n	800678a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]
 8006788:	e008      	b.n	800679c <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d105      	bne.n	800679c <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 800679c:	2032      	movs	r0, #50	; 0x32
 800679e:	f7f9 fd7d 	bl	800029c <HAL_Delay>
  
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067ac:	b084      	sub	sp, #16
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	f107 001c 	add.w	r0, r7, #28
 80067ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0U)
 80067ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <USB_DevInit+0x34>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067e6:	461a      	mov	r2, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	4619      	mov	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	461a      	mov	r2, r3
 80067fc:	680b      	ldr	r3, [r1, #0]
 80067fe:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	2b01      	cmp	r3, #1
 8006804:	d10c      	bne.n	8006820 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d104      	bne.n	8006816 <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800680c:	2100      	movs	r1, #0
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f944 	bl	8006a9c <USB_SetDevSpeed>
 8006814:	e008      	b.n	8006828 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8006816:	2101      	movs	r1, #1
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f93f 	bl	8006a9c <USB_SetDevSpeed>
 800681e:	e003      	b.n	8006828 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8006820:	2103      	movs	r1, #3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f93a 	bl	8006a9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8006828:	2110      	movs	r1, #16
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f8ee 	bl	8006a0c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f911 	bl	8006a58 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683c:	461a      	mov	r2, r3
 800683e:	2300      	movs	r3, #0
 8006840:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006848:	461a      	mov	r2, r3
 800684a:	2300      	movs	r3, #0
 800684c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	461a      	mov	r2, r3
 8006856:	f04f 33ff 	mov.w	r3, #4294967295
 800685a:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	461a      	mov	r2, r3
 8006864:	2300      	movs	r3, #0
 8006866:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e034      	b.n	80068d8 <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006884:	d10a      	bne.n	800689c <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	461a      	mov	r2, r3
 8006894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e008      	b.n	80068ae <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	461a      	mov	r2, r3
 80068aa:	2300      	movs	r3, #0
 80068ac:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ba:	461a      	mov	r2, r3
 80068bc:	2300      	movs	r3, #0
 80068be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	461a      	mov	r2, r3
 80068ce:	23ff      	movs	r3, #255	; 0xff
 80068d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d3c6      	bcc.n	800686e <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e034      	b.n	8006950 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068fc:	d10a      	bne.n	8006914 <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	461a      	mov	r2, r3
 800690c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	e008      	b.n	8006926 <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006920:	461a      	mov	r2, r3
 8006922:	2300      	movs	r3, #0
 8006924:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006932:	461a      	mov	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	461a      	mov	r2, r3
 8006946:	23ff      	movs	r3, #255	; 0xff
 8006948:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	429a      	cmp	r2, r3
 8006956:	d3c6      	bcc.n	80068e6 <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800696a:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	2b01      	cmp	r3, #1
 8006970:	d116      	bne.n	80069a0 <USB_DevInit+0x1f4>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006978:	461a      	mov	r2, r3
 800697a:	4b22      	ldr	r3, [pc, #136]	; (8006a04 <USB_DevInit+0x258>)
 800697c:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800698c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006990:	f043 0303 	orr.w	r3, r3, #3
 8006994:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <USB_DevInit+0x214>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f043 0210 	orr.w	r2, r3, #16
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <USB_DevInit+0x25c>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 80069cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <USB_DevInit+0x232>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f043 0208 	orr.w	r2, r3, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80069de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d107      	bne.n	80069f4 <USB_DevInit+0x248>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ec:	f043 0304 	orr.w	r3, r3, #4
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a00:	b004      	add	sp, #16
 8006a02:	4770      	bx	lr
 8006a04:	00800100 	.word	0x00800100
 8006a08:	803c3800 	.word	0x803c3800

08006a0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	019b      	lsls	r3, r3, #6
 8006a1e:	f043 0220 	orr.w	r2, r3, #32
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <USB_FlushTxFifo+0x48>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e006      	b.n	8006a46 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d0f0      	beq.n	8006a26 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	00030d40 	.word	0x00030d40

08006a58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2210      	movs	r2, #16
 8006a68:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a09      	ldr	r2, [pc, #36]	; (8006a98 <USB_FlushRxFifo+0x40>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d901      	bls.n	8006a7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e006      	b.n	8006a8a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d0f0      	beq.n	8006a6a <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	00030d40 	.word	0x00030d40

08006a9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0306 	and.w	r3, r3, #6
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
 8006aea:	e01c      	b.n	8006b26 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0306 	and.w	r3, r3, #6
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d007      	beq.n	8006b0c <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8006b08:	2b06      	cmp	r3, #6
 8006b0a:	d102      	bne.n	8006b12 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	73fb      	strb	r3, [r7, #15]
 8006b10:	e009      	b.n	8006b26 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 0306 	and.w	r3, r3, #6
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d101      	bne.n	8006b26 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8006b22:	2302      	movs	r3, #2
 8006b24:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d13c      	bne.n	8006bc0 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4c:	69da      	ldr	r2, [r3, #28]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	2301      	movs	r3, #1
 8006b56:	408b      	lsls	r3, r1
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b60:	4313      	orrs	r3, r2
 8006b62:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d159      	bne.n	8006c30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	78c9      	ldrb	r1, [r1, #3]
 8006b98:	0489      	lsls	r1, r1, #18
 8006b9a:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	7809      	ldrb	r1, [r1, #0]
 8006ba0:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	7812      	ldrb	r2, [r2, #0]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e037      	b.n	8006c30 <USB_ActivateEndpoint+0xfc>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	69da      	ldr	r2, [r3, #28]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	2301      	movs	r3, #1
 8006bd0:	408b      	lsls	r3, r1
 8006bd2:	041b      	lsls	r3, r3, #16
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d11c      	bne.n	8006c30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	78c9      	ldrb	r1, [r1, #3]
 8006c12:	0489      	lsls	r1, r1, #18
 8006c14:	430b      	orrs	r3, r1
 8006c16:	4313      	orrs	r3, r2
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	7812      	ldrb	r2, [r2, #0]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2e:	6013      	str	r3, [r2, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d132      	bne.n	8006cb6 <USB_DeactivateEndpoint+0x78>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	2301      	movs	r3, #1
 8006c60:	408b      	lsls	r3, r1
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	43db      	mvns	r3, r3
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	2301      	movs	r3, #1
 8006c80:	408b      	lsls	r3, r1
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	43db      	mvns	r3, r3
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	7812      	ldrb	r2, [r2, #0]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	e031      	b.n	8006d1a <USB_DeactivateEndpoint+0xdc>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	408b      	lsls	r3, r1
 8006cc8:	041b      	lsls	r3, r3, #16
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));     
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	69da      	ldr	r2, [r3, #28]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	408b      	lsls	r3, r1
 8006ce8:	041b      	lsls	r3, r3, #16
 8006cea:	43db      	mvns	r3, r3
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	7812      	ldrb	r2, [r2, #0]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d18:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	f040 8139 	bne.w	8006fb6 <USB_EPStartXfer+0x28e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d138      	bne.n	8006dbe <USB_EPStartXfer+0x96>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	7812      	ldrb	r2, [r2, #0]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db6:	0cdb      	lsrs	r3, r3, #19
 8006db8:	04db      	lsls	r3, r3, #19
 8006dba:	6113      	str	r3, [r2, #16]
 8006dbc:	e080      	b.n	8006ec0 <USB_EPStartXfer+0x198>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	7812      	ldrb	r2, [r2, #0]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ddc:	0cdb      	lsrs	r3, r3, #19
 8006dde:	04db      	lsls	r3, r3, #19
 8006de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	7812      	ldrb	r2, [r2, #0]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e08:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6959      	ldr	r1, [r3, #20]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	440b      	add	r3, r1
 8006e24:	1e59      	subs	r1, r3, #1
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e2e:	04d9      	lsls	r1, r3, #19
 8006e30:	4b8a      	ldr	r3, [pc, #552]	; (800705c <USB_EPStartXfer+0x334>)
 8006e32:	400b      	ands	r3, r1
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	7809      	ldrb	r1, [r1, #0]
 8006e38:	0148      	lsls	r0, r1, #5
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	4401      	add	r1, r0
 8006e3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e42:	4313      	orrs	r3, r2
 8006e44:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	7809      	ldrb	r1, [r1, #0]
 8006e62:	0148      	lsls	r0, r1, #5
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	4401      	add	r1, r0
 8006e68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	78db      	ldrb	r3, [r3, #3]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d123      	bne.n	8006ec0 <USB_EPStartXfer+0x198>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e96:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e9a:	6113      	str	r3, [r2, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ebe:	6113      	str	r3, [r2, #16]
      }       
    }

    if (dma == 1U)
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d10b      	bne.n	8006ede <USB_EPStartXfer+0x1b6>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	6153      	str	r3, [r2, #20]
 8006edc:	e015      	b.n	8006f0a <USB_EPStartXfer+0x1e2>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d011      	beq.n	8006f0a <USB_EPStartXfer+0x1e2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00d      	beq.n	8006f0a <USB_EPStartXfer+0x1e2>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	2301      	movs	r3, #1
 8006efe:	408b      	lsls	r3, r1
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f06:	4313      	orrs	r3, r2
 8006f08:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	78db      	ldrb	r3, [r3, #3]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d12c      	bne.n	8006f6c <USB_EPStartXfer+0x244>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d112      	bne.n	8006f48 <USB_EPStartXfer+0x220>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	7812      	ldrb	r2, [r2, #0]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	e011      	b.n	8006f6c <USB_EPStartXfer+0x244>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	6013      	str	r3, [r2, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f8e:	6013      	str	r3, [r2, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	f040 80ed 	bne.w	8007174 <USB_EPStartXfer+0x44c>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	68d9      	ldr	r1, [r3, #12]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	b298      	uxth	r0, r3
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	4603      	mov	r3, r0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fa38 	bl	8007424 <USB_WritePacket>
 8006fb4:	e0de      	b.n	8007174 <USB_EPStartXfer+0x44c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	7812      	ldrb	r2, [r2, #0]
 8006fca:	0151      	lsls	r1, r2, #5
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	440a      	add	r2, r1
 8006fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd4:	0cdb      	lsrs	r3, r3, #19
 8006fd6:	04db      	lsls	r3, r3, #19
 8006fd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	7812      	ldrb	r2, [r2, #0]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ffc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007000:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d12a      	bne.n	8007060 <USB_EPStartXfer+0x338>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	7809      	ldrb	r1, [r1, #0]
 8007026:	0148      	lsls	r0, r1, #5
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	4401      	add	r1, r0
 800702c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007030:	4313      	orrs	r3, r2
 8007032:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	7812      	ldrb	r2, [r2, #0]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007056:	6113      	str	r3, [r2, #16]
 8007058:	e03b      	b.n	80070d2 <USB_EPStartXfer+0x3aa>
 800705a:	bf00      	nop
 800705c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	695a      	ldr	r2, [r3, #20]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	4413      	add	r3, r2
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	8afb      	ldrh	r3, [r7, #22]
 8007088:	04db      	lsls	r3, r3, #19
 800708a:	4619      	mov	r1, r3
 800708c:	4b3c      	ldr	r3, [pc, #240]	; (8007180 <USB_EPStartXfer+0x458>)
 800708e:	400b      	ands	r3, r1
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	7809      	ldrb	r1, [r1, #0]
 8007094:	0148      	lsls	r0, r1, #5
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	4401      	add	r1, r0
 800709a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800709e:	4313      	orrs	r3, r2
 80070a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b0:	691a      	ldr	r2, [r3, #16]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	8af9      	ldrh	r1, [r7, #22]
 80070b8:	fb01 f303 	mul.w	r3, r1, r3
 80070bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	7809      	ldrb	r1, [r1, #0]
 80070c4:	0148      	lsls	r0, r1, #5
 80070c6:	68f9      	ldr	r1, [r7, #12]
 80070c8:	4401      	add	r1, r0
 80070ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070ce:	4313      	orrs	r3, r2
 80070d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10a      	bne.n	80070ee <USB_EPStartXfer+0x3c6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68d9      	ldr	r1, [r3, #12]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	460a      	mov	r2, r1
 80070ec:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	78db      	ldrb	r3, [r3, #3]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d12c      	bne.n	8007150 <USB_EPStartXfer+0x428>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d112      	bne.n	800712c <USB_EPStartXfer+0x404>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	7812      	ldrb	r2, [r2, #0]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	e011      	b.n	8007150 <USB_EPStartXfer+0x428>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	0151      	lsls	r1, r2, #5
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	440a      	add	r2, r1
 8007146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800714a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	7812      	ldrb	r2, [r2, #0]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007172:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	1ff80000 	.word	0x1ff80000

08007184 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	2b01      	cmp	r3, #1
 8007198:	f040 80c8 	bne.w	800732c <USB_EP0StartXfer+0x1a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d138      	bne.n	8007216 <USB_EP0StartXfer+0x92>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	7812      	ldrb	r2, [r2, #0]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720e:	0cdb      	lsrs	r3, r3, #19
 8007210:	04db      	lsls	r3, r3, #19
 8007212:	6113      	str	r3, [r2, #16]
 8007214:	e056      	b.n	80072c4 <USB_EP0StartXfer+0x140>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	440a      	add	r2, r1
 8007230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007234:	0cdb      	lsrs	r3, r3, #19
 8007236:	04db      	lsls	r3, r3, #19
 8007238:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	7812      	ldrb	r2, [r2, #0]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007258:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800725c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007260:	6113      	str	r3, [r2, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	429a      	cmp	r2, r3
 800726c:	d903      	bls.n	8007276 <USB_EP0StartXfer+0xf2>
      {
        ep->xfer_len = ep->maxpacket;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	7812      	ldrb	r2, [r2, #0]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007298:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	7809      	ldrb	r1, [r1, #0]
 80072b6:	0148      	lsls	r0, r1, #5
 80072b8:	68f9      	ldr	r1, [r7, #12]
 80072ba:	4401      	add	r1, r0
 80072bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072c0:	4313      	orrs	r3, r2
 80072c2:	610b      	str	r3, [r1, #16]
    
    }
    
    if (dma == 1)
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d10b      	bne.n	80072e2 <USB_EP0StartXfer+0x15e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d8:	461a      	mov	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	6153      	str	r3, [r2, #20]
 80072e0:	e011      	b.n	8007306 <USB_EP0StartXfer+0x182>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00d      	beq.n	8007306 <USB_EP0StartXfer+0x182>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	4619      	mov	r1, r3
 80072f8:	2301      	movs	r3, #1
 80072fa:	408b      	lsls	r3, r1
 80072fc:	68f9      	ldr	r1, [r7, #12]
 80072fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007302:	4313      	orrs	r3, r2
 8007304:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	7812      	ldrb	r2, [r2, #0]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	e074      	b.n	8007416 <USB_EP0StartXfer+0x292>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	7812      	ldrb	r2, [r2, #0]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800734a:	0cdb      	lsrs	r3, r3, #19
 800734c:	04db      	lsls	r3, r3, #19
 800734e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	7812      	ldrb	r2, [r2, #0]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007372:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007376:	6113      	str	r3, [r2, #16]
      
    if (ep->xfer_len > 0U)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <USB_EP0StartXfer+0x204>
    {
      ep->xfer_len = ep->maxpacket;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	7809      	ldrb	r1, [r1, #0]
 80073c8:	0148      	lsls	r0, r1, #5
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	4401      	add	r1, r0
 80073ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073d2:	4313      	orrs	r3, r2
 80073d4:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d10a      	bne.n	80073f2 <USB_EP0StartXfer+0x26e>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	68d9      	ldr	r1, [r3, #12]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ee:	460a      	mov	r2, r1
 80073f0:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	7812      	ldrb	r2, [r2, #0]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	440a      	add	r2, r1
 800740c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007410:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007414:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4611      	mov	r1, r2
 8007430:	461a      	mov	r2, r3
 8007432:	460b      	mov	r3, r1
 8007434:	71fb      	strb	r3, [r7, #7]
 8007436:	4613      	mov	r3, r2
 8007438:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8007442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d11a      	bne.n	8007480 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 800744a:	88bb      	ldrh	r3, [r7, #4]
 800744c:	3303      	adds	r3, #3
 800744e:	089b      	lsrs	r3, r3, #2
 8007450:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e00f      	b.n	8007478 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	031a      	lsls	r2, r3, #12
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007464:	461a      	mov	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	3301      	adds	r3, #1
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	3304      	adds	r3, #4
 8007476:	60bb      	str	r3, [r7, #8]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d3eb      	bcc.n	8007458 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800748e:	b480      	push	{r7}
 8007490:	b087      	sub	sp, #28
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	4613      	mov	r3, r2
 800749a:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	3303      	adds	r3, #3
 80074a4:	089b      	lsrs	r3, r3, #2
 80074a6:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	e00b      	b.n	80074c6 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	3301      	adds	r3, #1
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	3304      	adds	r3, #4
 80074c4:	60bb      	str	r3, [r7, #8]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d3ef      	bcc.n	80074ae <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 80074ce:	68bb      	ldr	r3, [r7, #8]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	785b      	ldrb	r3, [r3, #1]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d12e      	bne.n	800754c <USB_EPSetStall+0x70>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	db11      	blt.n	8007526 <USB_EPSetStall+0x4a>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	7812      	ldrb	r2, [r2, #0]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007520:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007524:	6013      	str	r3, [r2, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	7812      	ldrb	r2, [r2, #0]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	440a      	add	r2, r1
 8007540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	e02d      	b.n	80075a8 <USB_EPSetStall+0xcc>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	db11      	blt.n	8007584 <USB_EPSetStall+0xa8>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	7812      	ldrb	r2, [r2, #0]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007582:	6013      	str	r3, [r2, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	7812      	ldrb	r2, [r2, #0]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d12c      	bne.n	8007622 <USB_EPClearStall+0x6c>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ea:	6013      	str	r3, [r2, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	78db      	ldrb	r3, [r3, #3]
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d003      	beq.n	80075fc <USB_EPClearStall+0x46>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	78db      	ldrb	r3, [r3, #3]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d13e      	bne.n	800767a <USB_EPClearStall+0xc4>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e02b      	b.n	800767a <USB_EPClearStall+0xc4>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	7812      	ldrb	r2, [r2, #0]
 8007636:	0151      	lsls	r1, r2, #5
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	440a      	add	r2, r1
 800763c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007640:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007644:	6013      	str	r3, [r2, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	78db      	ldrb	r3, [r3, #3]
 800764a:	2b03      	cmp	r3, #3
 800764c:	d003      	beq.n	8007656 <USB_EPClearStall+0xa0>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	78db      	ldrb	r3, [r3, #3]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d111      	bne.n	800767a <USB_EPClearStall+0xc4>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	7812      	ldrb	r2, [r2, #0]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007678:	6013      	str	r3, [r2, #0]
    }    
  }
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076be:	4313      	orrs	r3, r2
 80076c0:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e6:	f023 0302 	bic.w	r3, r3, #2
 80076ea:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80076ec:	2003      	movs	r0, #3
 80076ee:	f7f8 fdd5 	bl	800029c <HAL_Delay>
  
  return HAL_OK;  
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007712:	f043 0302 	orr.w	r3, r3, #2
 8007716:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007718:	2003      	movs	r0, #3
 800771a:	f7f8 fdbf 	bl	800029c <HAL_Delay>
  
  return HAL_OK;  
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4013      	ands	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  return v;  
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4013      	ands	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	0c1b      	lsrs	r3, r3, #16
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4013      	ands	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	b29b      	uxth	r3, r3
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	460b      	mov	r3, r1
 80077bc:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	4013      	ands	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  return v;
 80077dc:	68fb      	ldr	r3, [r7, #12]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b087      	sub	sp, #28
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007808:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	fa22 f303 	lsr.w	r3, r2, r3
 8007812:	01db      	lsls	r3, r3, #7
 8007814:	b2db      	uxtb	r3, r3
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	4013      	ands	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
  return v;
 8007830:	68fb      	ldr	r3, [r7, #12]
}
 8007832:	4618      	mov	r0, r3
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f003 0301 	and.w	r3, r3, #1
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007870:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007874:	f023 0307 	bic.w	r3, r3, #7
 8007878:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 0306 	and.w	r3, r3, #6
 8007886:	2b04      	cmp	r3, #4
 8007888:	d109      	bne.n	800789e <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007898:	f043 0303 	orr.w	r3, r3, #3
 800789c:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	460b      	mov	r3, r1
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	461a      	mov	r2, r3
 80078d6:	2300      	movs	r3, #0
 80078d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078fc:	f043 0318 	orr.w	r3, r3, #24
 8007900:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007910:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007914:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d10c      	bne.n	8007936 <USB_EP0_OutStart+0x76>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	461a      	mov	r2, r3
 8007930:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8007934:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <USB_CoreReset+0x64>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d901      	bls.n	8007962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e01b      	b.n	800799a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	daf2      	bge.n	8007950 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	f043 0201 	orr.w	r2, r3, #1
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3301      	adds	r3, #1
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a09      	ldr	r2, [pc, #36]	; (80079a8 <USB_CoreReset+0x64>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d901      	bls.n	800798c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e006      	b.n	800799a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b01      	cmp	r3, #1
 8007996:	d0f0      	beq.n	800797a <USB_CoreReset+0x36>
  
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	00030d40 	.word	0x00030d40

080079ac <USBD_MSC_Init>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, 
                            uint8_t cfgidx)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  int16_t ret = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	81fb      	strh	r3, [r7, #14]
   
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7c1b      	ldrb	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10e      	bne.n	80079e2 <USBD_MSC_Init+0x36>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80079c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079c8:	2202      	movs	r2, #2
 80079ca:	2101      	movs	r1, #1
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f003 fdfe 	bl	800b5ce <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_HS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80079d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d6:	2202      	movs	r2, #2
 80079d8:	2181      	movs	r1, #129	; 0x81
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f003 fdf7 	bl	800b5ce <USBD_LL_OpenEP>
 80079e0:	e00b      	b.n	80079fa <USBD_MSC_Init+0x4e>
                   MSC_MAX_HS_PACKET);  
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80079e2:	2340      	movs	r3, #64	; 0x40
 80079e4:	2202      	movs	r2, #2
 80079e6:	2101      	movs	r1, #1
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f003 fdf0 	bl	800b5ce <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	2202      	movs	r2, #2
 80079f2:	2181      	movs	r1, #129	; 0x81
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f003 fdea 	bl	800b5ce <USBD_LL_OpenEP>
                   MSC_EPIN_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);  
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 80079fa:	f244 006c 	movw	r0, #16492	; 0x406c
 80079fe:	f00f fcd1 	bl	80173a4 <malloc>
 8007a02:	4603      	mov	r3, r0
 8007a04:	461a      	mov	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d102      	bne.n	8007a1c <USBD_MSC_Init+0x70>
  {
    ret = 1; 
 8007a16:	2301      	movs	r3, #1
 8007a18:	81fb      	strh	r3, [r7, #14]
 8007a1a:	e004      	b.n	8007a26 <USBD_MSC_Init+0x7a>
  }
  else
  {
    /* Init the BOT  layer */
    MSC_BOT_Init(pdev); 
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f95c 	bl	8007cda <MSC_BOT_Init>
    ret = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	81fb      	strh	r3, [r7, #14]
  }
  
  return ret;
 8007a26:	89fb      	ldrh	r3, [r7, #14]
 8007a28:	b2db      	uxtb	r3, r3
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev, 
                              uint8_t cfgidx)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev,
 8007a3e:	2101      	movs	r1, #1
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f003 fdde 	bl	800b602 <USBD_LL_CloseEP>
                  MSC_EPOUT_ADDR);
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8007a46:	2181      	movs	r1, #129	; 0x81
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f003 fdda 	bl	800b602 <USBD_LL_CloseEP>
                  MSC_EPIN_ADDR);
  
  
    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f993 	bl	8007d7a <MSC_BOT_DeInit>
  
  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <USBD_MSC_DeInit+0x40>
  {
    USBD_free(pdev->pClassData);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a64:	4618      	mov	r0, r3
 8007a66:	f00f fca5 	bl	80173b4 <free>
    pdev->pClassData  = NULL; 
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  return 0;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a8c:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d04a      	beq.n	8007b30 <USBD_MSC_Setup+0xb4>
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	f040 80a2 	bne.w	8007be4 <USBD_MSC_Setup+0x168>
  {

  /* Class request */
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2bfe      	cmp	r3, #254	; 0xfe
 8007aa6:	d002      	beq.n	8007aae <USBD_MSC_Setup+0x32>
 8007aa8:	2bff      	cmp	r3, #255	; 0xff
 8007aaa:	d023      	beq.n	8007af4 <USBD_MSC_Setup+0x78>
 8007aac:	e039      	b.n	8007b22 <USBD_MSC_Setup+0xa6>
    {
    case BOT_GET_MAX_LUN :

      if((req->wValue  == 0) && 
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d118      	bne.n	8007ae8 <USBD_MSC_Setup+0x6c>
         (req->wLength == 1) &&
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d114      	bne.n	8007ae8 <USBD_MSC_Setup+0x6c>
         ((req->bmRequest & 0x80) == 0x80))
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b25b      	sxtb	r3, r3
         (req->wLength == 1) &&
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da0f      	bge.n	8007ae8 <USBD_MSC_Setup+0x6c>
      {
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	4798      	blx	r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	601a      	str	r2, [r3, #0]
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmsc->max_lun,
 8007ada:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 8007adc:	2201      	movs	r2, #1
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f002 f8c9 	bl	8009c78 <USBD_CtlSendData>
      else
      {
         USBD_CtlError(pdev , req);
         return USBD_FAIL; 
      }
      break;
 8007ae6:	e022      	b.n	8007b2e <USBD_MSC_Setup+0xb2>
         USBD_CtlError(pdev , req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f002 f858 	bl	8009ba0 <USBD_CtlError>
         return USBD_FAIL; 
 8007af0:	2302      	movs	r3, #2
 8007af2:	e07b      	b.n	8007bec <USBD_MSC_Setup+0x170>
      
    case BOT_RESET :
      if((req->wValue  == 0) && 
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	885b      	ldrh	r3, [r3, #2]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10c      	bne.n	8007b16 <USBD_MSC_Setup+0x9a>
         (req->wLength == 0) &&
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d108      	bne.n	8007b16 <USBD_MSC_Setup+0x9a>
        ((req->bmRequest & 0x80) != 0x80))
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	b25b      	sxtb	r3, r3
         (req->wLength == 0) &&
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	db03      	blt.n	8007b16 <USBD_MSC_Setup+0x9a>
      {      
         MSC_BOT_Reset(pdev);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f918 	bl	8007d44 <MSC_BOT_Reset>
      else
      {
         USBD_CtlError(pdev , req);
         return USBD_FAIL; 
      }
      break;
 8007b14:	e00b      	b.n	8007b2e <USBD_MSC_Setup+0xb2>
         USBD_CtlError(pdev , req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f002 f841 	bl	8009ba0 <USBD_CtlError>
         return USBD_FAIL; 
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e064      	b.n	8007bec <USBD_MSC_Setup+0x170>

    default:
       USBD_CtlError(pdev , req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f002 f83b 	bl	8009ba0 <USBD_CtlError>
       return USBD_FAIL; 
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e05e      	b.n	8007bec <USBD_MSC_Setup+0x170>
    }
    break;
 8007b2e:	e05c      	b.n	8007bea <USBD_MSC_Setup+0x16e>
  /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	2b0b      	cmp	r3, #11
 8007b36:	d00d      	beq.n	8007b54 <USBD_MSC_Setup+0xd8>
 8007b38:	2b0b      	cmp	r3, #11
 8007b3a:	dc55      	bgt.n	8007be8 <USBD_MSC_Setup+0x16c>
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d010      	beq.n	8007b62 <USBD_MSC_Setup+0xe6>
 8007b40:	2b0a      	cmp	r3, #10
 8007b42:	d151      	bne.n	8007be8 <USBD_MSC_Setup+0x16c>
    {
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hmsc->interface,
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev,
 8007b48:	2201      	movs	r2, #1
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f002 f893 	bl	8009c78 <USBD_CtlSendData>
                        1);
      break;
 8007b52:	e046      	b.n	8007be2 <USBD_MSC_Setup+0x166>
      
    case USB_REQ_SET_INTERFACE :
      hmsc->interface = (uint8_t)(req->wValue);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	885b      	ldrh	r3, [r3, #2]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	605a      	str	r2, [r3, #4]
      break;
 8007b60:	e03f      	b.n	8007be2 <USBD_MSC_Setup+0x166>
    
    case USB_REQ_CLEAR_FEATURE:  
      
      /* Flush the FIFO and Clear the stall status */    
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	889b      	ldrh	r3, [r3, #4]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f003 fd5c 	bl	800b628 <USBD_LL_FlushEP>
      
      /* Reactivate the EP */      
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	889b      	ldrh	r3, [r3, #4]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f003 fd42 	bl	800b602 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	889b      	ldrh	r3, [r3, #4]
 8007b82:	b25b      	sxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	da12      	bge.n	8007bae <USBD_MSC_Setup+0x132>
      {
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7c1b      	ldrb	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d107      	bne.n	8007ba0 <USBD_MSC_Setup+0x124>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev,
 8007b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b94:	2202      	movs	r2, #2
 8007b96:	2181      	movs	r1, #129	; 0x81
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f003 fd18 	bl	800b5ce <USBD_LL_OpenEP>
 8007b9e:	e018      	b.n	8007bd2 <USBD_MSC_Setup+0x156>
                         MSC_MAX_HS_PACKET);  
        }
        else
        {   
          /* Open EP IN */
          USBD_LL_OpenEP(pdev,
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	2181      	movs	r1, #129	; 0x81
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f003 fd11 	bl	800b5ce <USBD_LL_OpenEP>
 8007bac:	e011      	b.n	8007bd2 <USBD_MSC_Setup+0x156>
                         MSC_MAX_FS_PACKET);  
        }
      }
      else
      {
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	7c1b      	ldrb	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d107      	bne.n	8007bc6 <USBD_MSC_Setup+0x14a>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev,
 8007bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bba:	2202      	movs	r2, #2
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f003 fd05 	bl	800b5ce <USBD_LL_OpenEP>
 8007bc4:	e005      	b.n	8007bd2 <USBD_MSC_Setup+0x156>
                         MSC_MAX_HS_PACKET);  
        }
        else
        {   
          /* Open EP IN */
          USBD_LL_OpenEP(pdev,
 8007bc6:	2340      	movs	r3, #64	; 0x40
 8007bc8:	2202      	movs	r2, #2
 8007bca:	2101      	movs	r1, #1
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f003 fcfe 	bl	800b5ce <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);  
        }
      }
      
      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	889b      	ldrh	r3, [r3, #4]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa71 	bl	80080c2 <MSC_BOT_CplClrFeature>
      break;
 8007be0:	bf00      	nop
      
    }  
    break;
 8007be2:	e001      	b.n	8007be8 <USBD_MSC_Setup+0x16c>
   
  default:
    break;
 8007be4:	bf00      	nop
 8007be6:	e000      	b.n	8007bea <USBD_MSC_Setup+0x16e>
    break;
 8007be8:	bf00      	nop
  }
  return 0;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f8c9 	bl	8007d9c <MSC_BOT_DataIn>
  return 0;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev, 
                               uint8_t epnum)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f8ee 	bl	8007e06 <MSC_BOT_DataOut>
  return 0;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 8007c42:	4b03      	ldr	r3, [pc, #12]	; (8007c50 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20000038 	.word	0x20000038

08007c54 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 8007c62:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	20000058 	.word	0x20000058

08007c74 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 8007c82:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	20000078 	.word	0x20000078

08007c94 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	220a      	movs	r2, #10
 8007ca0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 8007ca2:	4b03      	ldr	r3, [pc, #12]	; (8007cb0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	20000098 	.word	0x20000098

08007cb4 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData= fops;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }
  return 0;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ce8:	60fb      	str	r3, [r7, #12]
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	725a      	strb	r2, [r3, #9]
  
  hmsc->scsi_sense_tail = 0;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007cfc:	335d      	adds	r3, #93	; 0x5d
 8007cfe:	2200      	movs	r2, #0
 8007d00:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007d08:	335c      	adds	r3, #92	; 0x5c
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
  
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2000      	movs	r0, #0
 8007d18:	4798      	blx	r3
  
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f003 fc83 	bl	800b628 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8007d22:	2181      	movs	r1, #129	; 0x81
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f003 fc7f 	bl	800b628 <USBD_LL_FlushEP>
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8007d30:	320c      	adds	r2, #12
  USBD_LL_PrepareReceive (pdev,
 8007d32:	231f      	movs	r3, #31
 8007d34:	2101      	movs	r1, #1
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f003 fd05 	bl	800b746 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);    
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d52:	60fb      	str	r3, [r7, #12]
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	725a      	strb	r2, [r3, #9]
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8007d66:	320c      	adds	r2, #12
  USBD_LL_PrepareReceive (pdev,
 8007d68:	231f      	movs	r3, #31
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f003 fcea 	bl	800b746 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);   
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d88:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	721a      	strb	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev, 
                     uint8_t epnum)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dae:	60fb      	str	r3, [r7, #12]
  
  switch (hmsc->bot_state)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	7a1b      	ldrb	r3, [r3, #8]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d005      	beq.n	8007dc4 <MSC_BOT_DataIn+0x28>
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	db1d      	blt.n	8007df8 <MSC_BOT_DataIn+0x5c>
 8007dbc:	3b03      	subs	r3, #3
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d81a      	bhi.n	8007df8 <MSC_BOT_DataIn+0x5c>
 8007dc2:	e014      	b.n	8007dee <MSC_BOT_DataIn+0x52>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007dca:	3319      	adds	r3, #25
 8007dcc:	7819      	ldrb	r1, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007dd4:	331b      	adds	r3, #27
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f999 	bl	8008110 <SCSI_ProcessCmd>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	da0b      	bge.n	8007dfc <MSC_BOT_DataIn+0x60>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007de4:	2101      	movs	r1, #1
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f906 	bl	8007ff8 <MSC_BOT_SendCSW>
    }
    break;
 8007dec:	e006      	b.n	8007dfc <MSC_BOT_DataIn+0x60>
    
  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8007dee:	2100      	movs	r1, #0
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f901 	bl	8007ff8 <MSC_BOT_SendCSW>
    
    break;
 8007df6:	e002      	b.n	8007dfe <MSC_BOT_DataIn+0x62>
    
  default:
    break;
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <MSC_BOT_DataIn+0x62>
    break;
 8007dfc:	bf00      	nop
  }
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev, 
                      uint8_t epnum)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e18:	60fb      	str	r3, [r7, #12]
  
  switch (hmsc->bot_state)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	7a1b      	ldrb	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <MSC_BOT_DataOut+0x22>
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d004      	beq.n	8007e30 <MSC_BOT_DataOut+0x2a>
    }

    break;
    
  default:
    break;
 8007e26:	e018      	b.n	8007e5a <MSC_BOT_DataOut+0x54>
    MSC_BOT_CBW_Decode(pdev);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f81b 	bl	8007e64 <MSC_BOT_CBW_Decode>
    break;
 8007e2e:	e014      	b.n	8007e5a <MSC_BOT_DataOut+0x54>
    if(SCSI_ProcessCmd(pdev,
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007e36:	3319      	adds	r3, #25
 8007e38:	7819      	ldrb	r1, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007e40:	331b      	adds	r3, #27
 8007e42:	461a      	mov	r2, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f963 	bl	8008110 <SCSI_ProcessCmd>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	da03      	bge.n	8007e58 <MSC_BOT_DataOut+0x52>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007e50:	2101      	movs	r1, #1
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f8d0 	bl	8007ff8 <MSC_BOT_SendCSW>
    break;
 8007e58:	bf00      	nop
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly  
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e72:	60fb      	str	r3, [r7, #12]
  
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007e7a:	3310      	adds	r3, #16
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007e84:	3330      	adds	r3, #48	; 0x30
 8007e86:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007e8e:	3314      	adds	r3, #20
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007e98:	3334      	adds	r3, #52	; 0x34
 8007e9a:	601a      	str	r2, [r3, #0]
  
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f003 fc68 	bl	800b774 <USBD_LL_GetRxDataSize>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b1f      	cmp	r3, #31
 8007ea8:	d11c      	bne.n	8007ee4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007eb0:	330c      	adds	r3, #12
 8007eb2:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007eb4:	4a35      	ldr	r2, [pc, #212]	; (8007f8c <MSC_BOT_CBW_Decode+0x128>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d114      	bne.n	8007ee4 <MSC_BOT_CBW_Decode+0x80>
        (hmsc->cbw.bLUN > 1) || 
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007ec0:	3319      	adds	r3, #25
 8007ec2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d80d      	bhi.n	8007ee4 <MSC_BOT_CBW_Decode+0x80>
          (hmsc->cbw.bCBLength < 1) || 
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007ece:	331a      	adds	r3, #26
 8007ed0:	781b      	ldrb	r3, [r3, #0]
        (hmsc->cbw.bLUN > 1) || 
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d006      	beq.n	8007ee4 <MSC_BOT_CBW_Decode+0x80>
            (hmsc->cbw.bCBLength > 16))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007edc:	331a      	adds	r3, #26
 8007ede:	781b      	ldrb	r3, [r3, #0]
          (hmsc->cbw.bCBLength < 1) || 
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d910      	bls.n	8007f06 <MSC_BOT_CBW_Decode+0xa2>
  {
    
    SCSI_SenseCode(pdev,
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007eea:	3319      	adds	r3, #25
 8007eec:	7819      	ldrb	r1, [r3, #0]
 8007eee:	2320      	movs	r3, #32
 8007ef0:	2205      	movs	r2, #5
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fc7a 	bl	80087ec <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2202      	movs	r2, #2
 8007efc:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f8ac 	bl	800805c <MSC_BOT_Abort>
        MSC_BOT_SendCSW (pdev,
                         USBD_CSW_CMD_PASSED);
      }
    }
  }
}
 8007f04:	e03e      	b.n	8007f84 <MSC_BOT_CBW_Decode+0x120>
    if(SCSI_ProcessCmd(pdev,
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007f0c:	3319      	adds	r3, #25
 8007f0e:	7819      	ldrb	r1, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007f16:	331b      	adds	r3, #27
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8f8 	bl	8008110 <SCSI_ProcessCmd>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da0c      	bge.n	8007f40 <MSC_BOT_CBW_Decode+0xdc>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	7a1b      	ldrb	r3, [r3, #8]
 8007f2a:	2b05      	cmp	r3, #5
 8007f2c:	d104      	bne.n	8007f38 <MSC_BOT_CBW_Decode+0xd4>
       MSC_BOT_SendCSW (pdev,
 8007f2e:	2101      	movs	r1, #1
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f861 	bl	8007ff8 <MSC_BOT_SendCSW>
}
 8007f36:	e025      	b.n	8007f84 <MSC_BOT_CBW_Decode+0x120>
        MSC_BOT_Abort(pdev);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f88f 	bl	800805c <MSC_BOT_Abort>
}
 8007f3e:	e021      	b.n	8007f84 <MSC_BOT_CBW_Decode+0x120>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	7a1b      	ldrb	r3, [r3, #8]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d01d      	beq.n	8007f84 <MSC_BOT_CBW_Decode+0x120>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d019      	beq.n	8007f84 <MSC_BOT_CBW_Decode+0x120>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN)) 
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d015      	beq.n	8007f84 <MSC_BOT_CBW_Decode+0x120>
      if (hmsc->bot_data_length > 0)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	895b      	ldrh	r3, [r3, #10]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <MSC_BOT_CBW_Decode+0x110>
                         hmsc->bot_data, 
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f103 010c 	add.w	r1, r3, #12
        MSC_BOT_SendData(pdev,
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	895b      	ldrh	r3, [r3, #10]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f80f 	bl	8007f90 <MSC_BOT_SendData>
}
 8007f72:	e007      	b.n	8007f84 <MSC_BOT_CBW_Decode+0x120>
      else if (hmsc->bot_data_length == 0) 
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	895b      	ldrh	r3, [r3, #10]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d103      	bne.n	8007f84 <MSC_BOT_CBW_Decode+0x120>
        MSC_BOT_SendCSW (pdev,
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f83a 	bl	8007ff8 <MSC_BOT_SendCSW>
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	43425355 	.word	0x43425355

08007f90 <MSC_BOT_SendData>:
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef  *pdev,
                              uint8_t* buf, 
                              uint16_t len)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007fa4:	617b      	str	r3, [r7, #20]
  
  len = MIN (hmsc->cbw.dDataLength, len);
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007fae:	3314      	adds	r3, #20
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bf28      	it	cs
 8007fb6:	4613      	movcs	r3, r2
 8007fb8:	80fb      	strh	r3, [r7, #6]
  hmsc->csw.dDataResidue -= len;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007fc0:	3334      	adds	r3, #52	; 0x34
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	88fb      	ldrh	r3, [r7, #6]
 8007fc6:	1ad2      	subs	r2, r2, r3
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007fce:	3334      	adds	r3, #52	; 0x34
 8007fd0:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007fd8:	3338      	adds	r3, #56	; 0x38
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	721a      	strb	r2, [r3, #8]
  
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	2181      	movs	r1, #129	; 0x81
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f003 fb94 	bl	800b718 <USBD_LL_Transmit>
}
 8007ff0:	bf00      	nop
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800800a:	60fb      	str	r3, [r7, #12]
  
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008012:	332c      	adds	r3, #44	; 0x2c
 8008014:	4a10      	ldr	r2, [pc, #64]	; (8008058 <MSC_BOT_SendCSW+0x60>)
 8008016:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800801e:	3338      	adds	r3, #56	; 0x38
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	721a      	strb	r2, [r3, #8]
  
  USBD_LL_Transmit (pdev, 
             MSC_EPIN_ADDR, 
             (uint8_t *)&hmsc->csw, 
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8008030:	322c      	adds	r2, #44	; 0x2c
  USBD_LL_Transmit (pdev, 
 8008032:	230d      	movs	r3, #13
 8008034:	2181      	movs	r1, #129	; 0x81
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f003 fb6e 	bl	800b718 <USBD_LL_Transmit>
             USBD_BOT_CSW_LENGTH);
  
  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev,
                    MSC_EPOUT_ADDR,
                    (uint8_t *)&hmsc->cbw, 
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8008042:	320c      	adds	r2, #12
  USBD_LL_PrepareReceive (pdev,
 8008044:	231f      	movs	r3, #31
 8008046:	2101      	movs	r1, #1
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f003 fb7c 	bl	800b746 <USBD_LL_PrepareReceive>
                    USBD_BOT_CBW_LENGTH);  
  
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	53425355 	.word	0x53425355

0800805c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800806a:	60fb      	str	r3, [r7, #12]
  
  if ((hmsc->cbw.bmFlags == 0) && 
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008072:	3318      	adds	r3, #24
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10e      	bne.n	8008098 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0) &&
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008080:	3314      	adds	r3, #20
 8008082:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0) && 
 8008084:	2b00      	cmp	r3, #0
 8008086:	d007      	beq.n	8008098 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0) &&
 800808c:	2b00      	cmp	r3, #0
 800808e:	d103      	bne.n	8008098 <MSC_BOT_Abort+0x3c>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8008090:	2101      	movs	r1, #1
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f003 fadb 	bl	800b64e <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008098:	2181      	movs	r1, #129	; 0x81
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f003 fad7 	bl	800b64e <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	7a5b      	ldrb	r3, [r3, #9]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d108      	bne.n	80080ba <MSC_BOT_Abort+0x5e>
  {
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 80080ae:	320c      	adds	r2, #12
    USBD_LL_PrepareReceive (pdev,
 80080b0:	231f      	movs	r3, #31
 80080b2:	2101      	movs	r1, #1
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f003 fb46 	bl	800b746 <USBD_LL_PrepareReceive>
                      USBD_BOT_CBW_LENGTH);    
  }
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80080d4:	60fb      	str	r3, [r7, #12]
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	7a5b      	ldrb	r3, [r3, #9]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d107      	bne.n	80080ee <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80080de:	2181      	movs	r1, #129	; 0x81
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f003 fab4 	bl	800b64e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	725a      	strb	r2, [r3, #9]
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 80080ec:	e00b      	b.n	8008106 <MSC_BOT_CplClrFeature+0x44>
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80080ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da07      	bge.n	8008106 <MSC_BOT_CplClrFeature+0x44>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	7a5b      	ldrb	r3, [r3, #9]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d003      	beq.n	8008106 <MSC_BOT_CplClrFeature+0x44>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80080fe:	2101      	movs	r1, #1
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff ff79 	bl	8007ff8 <MSC_BOT_SendCSW>
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <SCSI_ProcessCmd>:
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef  *pdev,
                           uint8_t lun, 
                           uint8_t *params)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	460b      	mov	r3, r1
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	72fb      	strb	r3, [r7, #11]
  
  switch (params[0])
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b5a      	cmp	r3, #90	; 0x5a
 8008124:	f200 811a 	bhi.w	800835c <SCSI_ProcessCmd+0x24c>
 8008128:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <SCSI_ProcessCmd+0x20>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	0800829d 	.word	0x0800829d
 8008134:	0800835d 	.word	0x0800835d
 8008138:	0800835d 	.word	0x0800835d
 800813c:	080082ad 	.word	0x080082ad
 8008140:	0800835d 	.word	0x0800835d
 8008144:	0800835d 	.word	0x0800835d
 8008148:	0800835d 	.word	0x0800835d
 800814c:	0800835d 	.word	0x0800835d
 8008150:	0800835d 	.word	0x0800835d
 8008154:	0800835d 	.word	0x0800835d
 8008158:	0800835d 	.word	0x0800835d
 800815c:	0800835d 	.word	0x0800835d
 8008160:	0800835d 	.word	0x0800835d
 8008164:	0800835d 	.word	0x0800835d
 8008168:	0800835d 	.word	0x0800835d
 800816c:	0800835d 	.word	0x0800835d
 8008170:	0800835d 	.word	0x0800835d
 8008174:	0800835d 	.word	0x0800835d
 8008178:	080082bd 	.word	0x080082bd
 800817c:	0800835d 	.word	0x0800835d
 8008180:	0800835d 	.word	0x0800835d
 8008184:	0800835d 	.word	0x0800835d
 8008188:	0800835d 	.word	0x0800835d
 800818c:	0800835d 	.word	0x0800835d
 8008190:	0800835d 	.word	0x0800835d
 8008194:	0800835d 	.word	0x0800835d
 8008198:	080082ed 	.word	0x080082ed
 800819c:	080082cd 	.word	0x080082cd
 80081a0:	0800835d 	.word	0x0800835d
 80081a4:	0800835d 	.word	0x0800835d
 80081a8:	080082dd 	.word	0x080082dd
 80081ac:	0800835d 	.word	0x0800835d
 80081b0:	0800835d 	.word	0x0800835d
 80081b4:	0800835d 	.word	0x0800835d
 80081b8:	0800835d 	.word	0x0800835d
 80081bc:	0800830d 	.word	0x0800830d
 80081c0:	0800835d 	.word	0x0800835d
 80081c4:	0800831d 	.word	0x0800831d
 80081c8:	0800835d 	.word	0x0800835d
 80081cc:	0800835d 	.word	0x0800835d
 80081d0:	0800832d 	.word	0x0800832d
 80081d4:	0800835d 	.word	0x0800835d
 80081d8:	0800833d 	.word	0x0800833d
 80081dc:	0800835d 	.word	0x0800835d
 80081e0:	0800835d 	.word	0x0800835d
 80081e4:	0800835d 	.word	0x0800835d
 80081e8:	0800835d 	.word	0x0800835d
 80081ec:	0800834d 	.word	0x0800834d
 80081f0:	0800835d 	.word	0x0800835d
 80081f4:	0800835d 	.word	0x0800835d
 80081f8:	0800835d 	.word	0x0800835d
 80081fc:	0800835d 	.word	0x0800835d
 8008200:	0800835d 	.word	0x0800835d
 8008204:	0800835d 	.word	0x0800835d
 8008208:	0800835d 	.word	0x0800835d
 800820c:	0800835d 	.word	0x0800835d
 8008210:	0800835d 	.word	0x0800835d
 8008214:	0800835d 	.word	0x0800835d
 8008218:	0800835d 	.word	0x0800835d
 800821c:	0800835d 	.word	0x0800835d
 8008220:	0800835d 	.word	0x0800835d
 8008224:	0800835d 	.word	0x0800835d
 8008228:	0800835d 	.word	0x0800835d
 800822c:	0800835d 	.word	0x0800835d
 8008230:	0800835d 	.word	0x0800835d
 8008234:	0800835d 	.word	0x0800835d
 8008238:	0800835d 	.word	0x0800835d
 800823c:	0800835d 	.word	0x0800835d
 8008240:	0800835d 	.word	0x0800835d
 8008244:	0800835d 	.word	0x0800835d
 8008248:	0800835d 	.word	0x0800835d
 800824c:	0800835d 	.word	0x0800835d
 8008250:	0800835d 	.word	0x0800835d
 8008254:	0800835d 	.word	0x0800835d
 8008258:	0800835d 	.word	0x0800835d
 800825c:	0800835d 	.word	0x0800835d
 8008260:	0800835d 	.word	0x0800835d
 8008264:	0800835d 	.word	0x0800835d
 8008268:	0800835d 	.word	0x0800835d
 800826c:	0800835d 	.word	0x0800835d
 8008270:	0800835d 	.word	0x0800835d
 8008274:	0800835d 	.word	0x0800835d
 8008278:	0800835d 	.word	0x0800835d
 800827c:	0800835d 	.word	0x0800835d
 8008280:	0800835d 	.word	0x0800835d
 8008284:	0800835d 	.word	0x0800835d
 8008288:	0800835d 	.word	0x0800835d
 800828c:	0800835d 	.word	0x0800835d
 8008290:	0800835d 	.word	0x0800835d
 8008294:	0800835d 	.word	0x0800835d
 8008298:	080082fd 	.word	0x080082fd
  {
  case SCSI_TEST_UNIT_READY:
    return SCSI_TestUnitReady(pdev, lun, params);
 800829c:	7afb      	ldrb	r3, [r7, #11]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	4619      	mov	r1, r3
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f866 	bl	8008374 <SCSI_TestUnitReady>
 80082a8:	4603      	mov	r3, r0
 80082aa:	e05f      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_REQUEST_SENSE:
    return SCSI_RequestSense (pdev, lun, params);
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4619      	mov	r1, r3
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fa1a 	bl	80086ec <SCSI_RequestSense>
 80082b8:	4603      	mov	r3, r0
 80082ba:	e057      	b.n	800836c <SCSI_ProcessCmd+0x25c>
  case SCSI_INQUIRY:
    return SCSI_Inquiry(pdev, lun, params);
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	4619      	mov	r1, r3
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f894 	bl	80083f0 <SCSI_Inquiry>
 80082c8:	4603      	mov	r3, r0
 80082ca:	e04f      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_START_STOP_UNIT:
    return SCSI_StartStopUnit(pdev, lun, params);
 80082cc:	7afb      	ldrb	r3, [r7, #11]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4619      	mov	r1, r3
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fad4 	bl	8008880 <SCSI_StartStopUnit>
 80082d8:	4603      	mov	r3, r0
 80082da:	e047      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_ALLOW_MEDIUM_REMOVAL:
    return SCSI_StartStopUnit(pdev, lun, params);
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	4619      	mov	r1, r3
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 facc 	bl	8008880 <SCSI_StartStopUnit>
 80082e8:	4603      	mov	r3, r0
 80082ea:	e03f      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_MODE_SENSE6:
    return SCSI_ModeSense6 (pdev, lun, params);
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	4619      	mov	r1, r3
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f9aa 	bl	800864c <SCSI_ModeSense6>
 80082f8:	4603      	mov	r3, r0
 80082fa:	e037      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_MODE_SENSE10:
    return SCSI_ModeSense10 (pdev, lun, params);
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	4619      	mov	r1, r3
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 f9ca 	bl	800869c <SCSI_ModeSense10>
 8008308:	4603      	mov	r3, r0
 800830a:	e02f      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ_FORMAT_CAPACITIES:
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4619      	mov	r1, r3
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f936 	bl	8008584 <SCSI_ReadFormatCapacity>
 8008318:	4603      	mov	r3, r0
 800831a:	e027      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ_CAPACITY10:
    return SCSI_ReadCapacity10(pdev, lun, params);
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	4619      	mov	r1, r3
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 f8b4 	bl	8008490 <SCSI_ReadCapacity10>
 8008328:	4603      	mov	r3, r0
 800832a:	e01f      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ10:
    return SCSI_Read10(pdev, lun, params); 
 800832c:	7afb      	ldrb	r3, [r7, #11]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	4619      	mov	r1, r3
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 fab9 	bl	80088aa <SCSI_Read10>
 8008338:	4603      	mov	r3, r0
 800833a:	e017      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_WRITE10:
    return SCSI_Write10(pdev, lun, params);
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	4619      	mov	r1, r3
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 fb70 	bl	8008a28 <SCSI_Write10>
 8008348:	4603      	mov	r3, r0
 800834a:	e00f      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  case SCSI_VERIFY10:
    return SCSI_Verify10(pdev, lun, params);
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4619      	mov	r1, r3
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fc4a 	bl	8008bec <SCSI_Verify10>
 8008358:	4603      	mov	r3, r0
 800835a:	e007      	b.n	800836c <SCSI_ProcessCmd+0x25c>
    
  default:
    SCSI_SenseCode(pdev, 
 800835c:	7af9      	ldrb	r1, [r7, #11]
 800835e:	2320      	movs	r3, #32
 8008360:	2205      	movs	r2, #5
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fa42 	bl	80087ec <SCSI_SenseCode>
                   lun,
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);    
    return -1;
 8008368:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	460b      	mov	r3, r1
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008388:	617b      	str	r3, [r7, #20]
    
  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008390:	3314      	adds	r3, #20
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00c      	beq.n	80083b2 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev,
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800839e:	3319      	adds	r3, #25
 80083a0:	7819      	ldrb	r1, [r3, #0]
 80083a2:	2320      	movs	r3, #32
 80083a4:	2205      	movs	r2, #5
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fa20 	bl	80087ec <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    return -1;
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	e019      	b.n	80083e6 <SCSI_TestUnitReady+0x72>
  }  
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	7afa      	ldrb	r2, [r7, #11]
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <SCSI_TestUnitReady+0x6a>
  {
    SCSI_SenseCode(pdev,
 80083c6:	7af9      	ldrb	r1, [r7, #11]
 80083c8:	233a      	movs	r3, #58	; 0x3a
 80083ca:	2202      	movs	r2, #2
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fa0d 	bl	80087ec <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2205      	movs	r2, #5
 80083d6:	721a      	strb	r2, [r3, #8]
    return -1;
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295
 80083dc:	e003      	b.n	80083e6 <SCSI_TestUnitReady+0x72>
  } 
  hmsc->bot_data_length = 0;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2200      	movs	r2, #0
 80083e2:	815a      	strh	r2, [r3, #10]
  return 0;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b089      	sub	sp, #36	; 0x24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	460b      	mov	r3, r1
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008404:	617b      	str	r3, [r7, #20]
  
  if (params[1] & 0x01)/*Evpd is set*/
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3301      	adds	r3, #1
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <SCSI_Inquiry+0x2e>
  {
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8008414:	4b1d      	ldr	r3, [pc, #116]	; (800848c <SCSI_Inquiry+0x9c>)
 8008416:	61fb      	str	r3, [r7, #28]
    len = LENGTH_INQUIRY_PAGE00;
 8008418:	2307      	movs	r3, #7
 800841a:	837b      	strh	r3, [r7, #26]
 800841c:	e01b      	b.n	8008456 <SCSI_Inquiry+0x66>
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008424:	69d9      	ldr	r1, [r3, #28]
 8008426:	7afa      	ldrb	r2, [r7, #11]
 8008428:	4613      	mov	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	61fb      	str	r3, [r7, #28]
    len = pPage[4] + 5;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	3304      	adds	r3, #4
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	b29b      	uxth	r3, r3
 800843c:	3305      	adds	r3, #5
 800843e:	837b      	strh	r3, [r7, #26]
    
    if (params[4] <= len)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	8b7a      	ldrh	r2, [r7, #26]
 800844a:	429a      	cmp	r2, r3
 800844c:	d303      	bcc.n	8008456 <SCSI_Inquiry+0x66>
    {
      len = params[4];
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3304      	adds	r3, #4
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	837b      	strh	r3, [r7, #26]
    }
  }
  hmsc->bot_data_length = len;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	8b7a      	ldrh	r2, [r7, #26]
 800845a:	815a      	strh	r2, [r3, #10]
  
  while (len) 
 800845c:	e00b      	b.n	8008476 <SCSI_Inquiry+0x86>
  {
    len--;
 800845e:	8b7b      	ldrh	r3, [r7, #26]
 8008460:	3b01      	subs	r3, #1
 8008462:	837b      	strh	r3, [r7, #26]
    hmsc->bot_data[len] = pPage[len];
 8008464:	8b7b      	ldrh	r3, [r7, #26]
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	441a      	add	r2, r3
 800846a:	8b7b      	ldrh	r3, [r7, #26]
 800846c:	7811      	ldrb	r1, [r2, #0]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4413      	add	r3, r2
 8008472:	460a      	mov	r2, r1
 8008474:	731a      	strb	r2, [r3, #12]
  while (len) 
 8008476:	8b7b      	ldrh	r3, [r7, #26]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f0      	bne.n	800845e <SCSI_Inquiry+0x6e>
  }
  return 0;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3724      	adds	r7, #36	; 0x24
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	08017684 	.word	0x08017684

08008490 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	460b      	mov	r3, r1
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80084a4:	617b      	str	r3, [r7, #20]
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80084ac:	685c      	ldr	r4, [r3, #4]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80084b4:	3360      	adds	r3, #96	; 0x60
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80084bc:	325e      	adds	r2, #94	; 0x5e
 80084be:	7af8      	ldrb	r0, [r7, #11]
 80084c0:	4619      	mov	r1, r3
 80084c2:	47a0      	blx	r4
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d008      	beq.n	80084dc <SCSI_ReadCapacity10+0x4c>
  {
    SCSI_SenseCode(pdev,
 80084ca:	7af9      	ldrb	r1, [r7, #11]
 80084cc:	233a      	movs	r3, #58	; 0x3a
 80084ce:	2202      	movs	r2, #2
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f98b 	bl	80087ec <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 80084d6:	f04f 33ff 	mov.w	r3, #4294967295
 80084da:	e04f      	b.n	800857c <SCSI_ReadCapacity10+0xec>
  } 
  else
  {
    
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80084e2:	3360      	adds	r3, #96	; 0x60
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	0e1b      	lsrs	r3, r3, #24
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80084f6:	3360      	adds	r3, #96	; 0x60
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	0c1b      	lsrs	r3, r3, #16
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800850a:	3360      	adds	r3, #96	; 0x60
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3b01      	subs	r3, #1
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	b2da      	uxtb	r2, r3
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800851e:	3360      	adds	r3, #96	; 0x60
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b2da      	uxtb	r2, r3
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	73da      	strb	r2, [r3, #15]
    
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008532:	335e      	adds	r3, #94	; 0x5e
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	161b      	asrs	r3, r3, #24
 8008538:	b2da      	uxtb	r2, r3
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008544:	335e      	adds	r3, #94	; 0x5e
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	141b      	asrs	r3, r3, #16
 800854a:	b2da      	uxtb	r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008556:	335e      	adds	r3, #94	; 0x5e
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	0a1b      	lsrs	r3, r3, #8
 800855c:	b29b      	uxth	r3, r3
 800855e:	b2da      	uxtb	r2, r3
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800856a:	335e      	adds	r3, #94	; 0x5e
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b2da      	uxtb	r2, r3
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	74da      	strb	r2, [r3, #19]
    
    hmsc->bot_data_length = 8;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2208      	movs	r2, #8
 8008578:	815a      	strh	r2, [r3, #10]
    return 0;
 800857a:	2300      	movs	r3, #0
  }
}
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	bd90      	pop	{r4, r7, pc}

08008584 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	460b      	mov	r3, r1
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008598:	61bb      	str	r3, [r7, #24]
  
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  
  for(i=0 ; i < 12 ; i++) 
 800859a:	2300      	movs	r3, #0
 800859c:	83fb      	strh	r3, [r7, #30]
 800859e:	e007      	b.n	80085b0 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0;
 80085a0:	8bfb      	ldrh	r3, [r7, #30]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	4413      	add	r3, r2
 80085a6:	2200      	movs	r2, #0
 80085a8:	731a      	strb	r2, [r3, #12]
  for(i=0 ; i < 12 ; i++) 
 80085aa:	8bfb      	ldrh	r3, [r7, #30]
 80085ac:	3301      	adds	r3, #1
 80085ae:	83fb      	strh	r3, [r7, #30]
 80085b0:	8bfb      	ldrh	r3, [r7, #30]
 80085b2:	2b0b      	cmp	r3, #11
 80085b4:	d9f4      	bls.n	80085a0 <SCSI_ReadFormatCapacity+0x1c>
  }
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f107 0216 	add.w	r2, r7, #22
 80085c2:	f107 0110 	add.w	r1, r7, #16
 80085c6:	7af8      	ldrb	r0, [r7, #11]
 80085c8:	4798      	blx	r3
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d008      	beq.n	80085e2 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev,
 80085d0:	7af9      	ldrb	r1, [r7, #11]
 80085d2:	233a      	movs	r3, #58	; 0x3a
 80085d4:	2202      	movs	r2, #2
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f908 	bl	80087ec <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	e030      	b.n	8008644 <SCSI_ReadFormatCapacity+0xc0>
  } 
  else
  {
    hmsc->bot_data[3] = 0x08;
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2208      	movs	r2, #8
 80085e6:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	0e1b      	lsrs	r3, r3, #24
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	0c1b      	lsrs	r3, r3, #16
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	3b01      	subs	r3, #1
 8008604:	0a1b      	lsrs	r3, r3, #8
 8008606:	b2da      	uxtb	r2, r3
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	74da      	strb	r2, [r3, #19]
    
    hmsc->bot_data[8] = 0x02;
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2202      	movs	r2, #2
 800861c:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800861e:	8afb      	ldrh	r3, [r7, #22]
 8008620:	141b      	asrs	r3, r3, #16
 8008622:	b2da      	uxtb	r2, r3
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008628:	8afb      	ldrh	r3, [r7, #22]
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	b29b      	uxth	r3, r3
 800862e:	b2da      	uxtb	r2, r3
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8008634:	8afb      	ldrh	r3, [r7, #22]
 8008636:	b2da      	uxtb	r2, r3
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	75da      	strb	r2, [r3, #23]
    
    hmsc->bot_data_length = 12;
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	220c      	movs	r2, #12
 8008640:	815a      	strh	r2, [r3, #10]
    return 0;
 8008642:	2300      	movs	r3, #0
  }
}
 8008644:	4618      	mov	r0, r3
 8008646:	3720      	adds	r7, #32
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	460b      	mov	r3, r1
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008660:	613b      	str	r3, [r7, #16]
  uint16_t len = 8 ;
 8008662:	2308      	movs	r3, #8
 8008664:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	8afa      	ldrh	r2, [r7, #22]
 800866a:	815a      	strh	r2, [r3, #10]
  
  while (len) 
 800866c:	e00a      	b.n	8008684 <SCSI_ModeSense6+0x38>
  {
    len--;
 800866e:	8afb      	ldrh	r3, [r7, #22]
 8008670:	3b01      	subs	r3, #1
 8008672:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8008674:	8afa      	ldrh	r2, [r7, #22]
 8008676:	8afb      	ldrh	r3, [r7, #22]
 8008678:	4907      	ldr	r1, [pc, #28]	; (8008698 <SCSI_ModeSense6+0x4c>)
 800867a:	5c89      	ldrb	r1, [r1, r2]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4413      	add	r3, r2
 8008680:	460a      	mov	r2, r1
 8008682:	731a      	strb	r2, [r3, #12]
  while (len) 
 8008684:	8afb      	ldrh	r3, [r7, #22]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f1      	bne.n	800866e <SCSI_ModeSense6+0x22>
  }
  return 0;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	0801768c 	.word	0x0801768c

0800869c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	460b      	mov	r3, r1
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8;
 80086aa:	2308      	movs	r3, #8
 80086ac:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80086b4:	613b      	str	r3, [r7, #16]
  
  hmsc->bot_data_length = len;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	8afa      	ldrh	r2, [r7, #22]
 80086ba:	815a      	strh	r2, [r3, #10]

  while (len) 
 80086bc:	e00a      	b.n	80086d4 <SCSI_ModeSense10+0x38>
  {
    len--;
 80086be:	8afb      	ldrh	r3, [r7, #22]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80086c4:	8afa      	ldrh	r2, [r7, #22]
 80086c6:	8afb      	ldrh	r3, [r7, #22]
 80086c8:	4907      	ldr	r1, [pc, #28]	; (80086e8 <SCSI_ModeSense10+0x4c>)
 80086ca:	5c89      	ldrb	r1, [r1, r2]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	460a      	mov	r2, r1
 80086d2:	731a      	strb	r2, [r3, #12]
  while (len) 
 80086d4:	8afb      	ldrh	r3, [r7, #22]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f1      	bne.n	80086be <SCSI_ModeSense10+0x22>
  }
  return 0;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	08017694 	.word	0x08017694

080086ec <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	460b      	mov	r3, r1
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008700:	613b      	str	r3, [r7, #16]
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]
 8008706:	e007      	b.n	8008718 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	4413      	add	r3, r2
 800870e:	2200      	movs	r2, #0
 8008710:	731a      	strb	r2, [r3, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	3301      	adds	r3, #1
 8008716:	75fb      	strb	r3, [r7, #23]
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	2b11      	cmp	r3, #17
 800871c:	d9f4      	bls.n	8008708 <SCSI_RequestSense+0x1c>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	2270      	movs	r2, #112	; 0x70
 8008722:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	220c      	movs	r2, #12
 8008728:	74da      	strb	r2, [r3, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008730:	335c      	adds	r3, #92	; 0x5c
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800873a:	335d      	adds	r3, #93	; 0x5d
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d03f      	beq.n	80087c2 <SCSI_RequestSense+0xd6>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008748:	335c      	adds	r3, #92	; 0x5c
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	4413      	add	r3, r2
 8008756:	791a      	ldrb	r2, [r3, #4]
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008762:	335c      	adds	r3, #92	; 0x5c
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	f603 0307 	addw	r3, r3, #2055	; 0x807
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4413      	add	r3, r2
 8008770:	7a5a      	ldrb	r2, [r3, #9]
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800877c:	335c      	adds	r3, #92	; 0x5c
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	4413      	add	r3, r2
 800878a:	7a1a      	ldrb	r2, [r3, #8]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008796:	335c      	adds	r3, #92	; 0x5c
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	3301      	adds	r3, #1
 800879c:	b2da      	uxtb	r2, r3
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80087a4:	335c      	adds	r3, #92	; 0x5c
 80087a6:	701a      	strb	r2, [r3, #0]
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80087ae:	335c      	adds	r3, #92	; 0x5c
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d105      	bne.n	80087c2 <SCSI_RequestSense+0xd6>
    {
      hmsc->scsi_sense_head = 0;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80087bc:	335c      	adds	r3, #92	; 0x5c
 80087be:	2200      	movs	r2, #0
 80087c0:	701a      	strb	r2, [r3, #0]
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	2212      	movs	r2, #18
 80087c6:	815a      	strh	r2, [r3, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b12      	cmp	r3, #18
 80087d0:	d805      	bhi.n	80087de <SCSI_RequestSense+0xf2>
  {
    hmsc->bot_data_length = params[4];
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3304      	adds	r3, #4
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	b29a      	uxth	r2, r3
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	70fb      	strb	r3, [r7, #3]
 80087fe:	460b      	mov	r3, r1
 8008800:	70bb      	strb	r3, [r7, #2]
 8008802:	4613      	mov	r3, r2
 8008804:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800880c:	60fb      	str	r3, [r7, #12]
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008814:	335d      	adds	r3, #93	; 0x5d
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	f603 0307 	addw	r3, r3, #2055	; 0x807
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	4413      	add	r3, r2
 8008822:	78ba      	ldrb	r2, [r7, #2]
 8008824:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008826:	787b      	ldrb	r3, [r7, #1]
 8008828:	021a      	lsls	r2, r3, #8
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008830:	335d      	adds	r3, #93	; 0x5d
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	4611      	mov	r1, r2
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	f603 0307 	addw	r3, r3, #2055	; 0x807
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4413      	add	r3, r2
 8008840:	6099      	str	r1, [r3, #8]
  hmsc->scsi_sense_tail++;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008848:	335d      	adds	r3, #93	; 0x5d
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	b2da      	uxtb	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008856:	335d      	adds	r3, #93	; 0x5d
 8008858:	701a      	strb	r2, [r3, #0]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008860:	335d      	adds	r3, #93	; 0x5d
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b04      	cmp	r3, #4
 8008866:	d105      	bne.n	8008874 <SCSI_SenseCode+0x88>
  {
    hmsc->scsi_sense_tail = 0;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800886e:	335d      	adds	r3, #93	; 0x5d
 8008870:	2200      	movs	r2, #0
 8008872:	701a      	strb	r2, [r3, #0]
  }
}
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	460b      	mov	r3, r1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008894:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	815a      	strh	r2, [r3, #10]
  return 0;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	460b      	mov	r3, r1
 80088b4:	607a      	str	r2, [r7, #4]
 80088b6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088be:	617b      	str	r3, [r7, #20]
  
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	7a1b      	ldrb	r3, [r3, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f040 80a1 	bne.w	8008a0c <SCSI_Read10+0x162>
  {
    
    /* case 10 : Ho <> Di */
    
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80088d0:	3318      	adds	r3, #24
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	b25b      	sxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	db0c      	blt.n	80088f4 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev,
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80088e0:	3319      	adds	r3, #25
 80088e2:	7819      	ldrb	r1, [r3, #0]
 80088e4:	2320      	movs	r3, #32
 80088e6:	2205      	movs	r2, #5
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f7ff ff7f 	bl	80087ec <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
 80088f2:	e095      	b.n	8008a20 <SCSI_Read10+0x176>
    }    
    
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	7afa      	ldrb	r2, [r7, #11]
 80088fe:	4610      	mov	r0, r2
 8008900:	4798      	blx	r3
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d008      	beq.n	800891a <SCSI_Read10+0x70>
    {
      SCSI_SenseCode(pdev,
 8008908:	7af9      	ldrb	r1, [r7, #11]
 800890a:	233a      	movs	r3, #58	; 0x3a
 800890c:	2202      	movs	r2, #2
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff ff6c 	bl	80087ec <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 8008914:	f04f 33ff 	mov.w	r3, #4294967295
 8008918:	e082      	b.n	8008a20 <SCSI_Read10+0x176>
    } 
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3302      	adds	r3, #2
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3303      	adds	r3, #3
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800892a:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3304      	adds	r3, #4
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 8008934:	4313      	orrs	r3, r2
          params[5];
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	3205      	adds	r2, #5
 800893a:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 800893c:	4313      	orrs	r3, r2
 800893e:	461a      	mov	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008946:	3364      	adds	r3, #100	; 0x64
 8008948:	601a      	str	r2, [r3, #0]
    
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3307      	adds	r3, #7
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	021b      	lsls	r3, r3, #8
      params[8];  
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	3208      	adds	r2, #8
 8008956:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008958:	4313      	orrs	r3, r2
 800895a:	461a      	mov	r2, r3
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008962:	3368      	adds	r3, #104	; 0x68
 8008964:	601a      	str	r2, [r3, #0]
    
    
    
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800896c:	3364      	adds	r3, #100	; 0x64
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008976:	3368      	adds	r3, #104	; 0x68
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	b29b      	uxth	r3, r3
 800897c:	7af9      	ldrb	r1, [r7, #11]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f96c 	bl	8008c5c <SCSI_CheckAddressRange>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	da02      	bge.n	8008990 <SCSI_Read10+0xe6>
    {
      return -1; /* error */
 800898a:	f04f 33ff 	mov.w	r3, #4294967295
 800898e:	e047      	b.n	8008a20 <SCSI_Read10+0x176>
    }
    
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2202      	movs	r2, #2
 8008994:	721a      	strb	r2, [r3, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800899c:	3364      	adds	r3, #100	; 0x64
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80089a6:	335e      	adds	r3, #94	; 0x5e
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	fb03 f202 	mul.w	r2, r3, r2
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80089b4:	3364      	adds	r3, #100	; 0x64
 80089b6:	601a      	str	r2, [r3, #0]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80089be:	3368      	adds	r3, #104	; 0x68
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80089c8:	335e      	adds	r3, #94	; 0x5e
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	fb03 f202 	mul.w	r2, r3, r2
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80089d6:	3368      	adds	r3, #104	; 0x68
 80089d8:	601a      	str	r2, [r3, #0]
    
    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80089e0:	3314      	adds	r3, #20
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80089ea:	3368      	adds	r3, #104	; 0x68
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d00c      	beq.n	8008a0c <SCSI_Read10+0x162>
    {
      SCSI_SenseCode(pdev,
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80089f8:	3319      	adds	r3, #25
 80089fa:	7819      	ldrb	r1, [r3, #0]
 80089fc:	2320      	movs	r3, #32
 80089fe:	2205      	movs	r2, #5
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f7ff fef3 	bl	80087ec <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8008a06:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0a:	e009      	b.n	8008a20 <SCSI_Read10+0x176>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a12:	815a      	strh	r2, [r3, #10]
  
  return SCSI_ProcessRead(pdev, lun);
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	4619      	mov	r1, r3
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 f945 	bl	8008ca8 <SCSI_ProcessRead>
 8008a1e:	4603      	mov	r3, r0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	460b      	mov	r3, r1
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008a3c:	617b      	str	r3, [r7, #20]
  
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	7a1b      	ldrb	r3, [r3, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 80c8 	bne.w	8008bd8 <SCSI_Write10+0x1b0>
  {
    
    /* case 8 : Hi <> Do */
    
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008a4e:	3318      	adds	r3, #24
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	b25b      	sxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	da0c      	bge.n	8008a72 <SCSI_Write10+0x4a>
    {
      SCSI_SenseCode(pdev,
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008a5e:	3319      	adds	r3, #25
 8008a60:	7819      	ldrb	r1, [r3, #0]
 8008a62:	2320      	movs	r3, #32
 8008a64:	2205      	movs	r2, #5
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fec0 	bl	80087ec <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8008a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a70:	e0b8      	b.n	8008be4 <SCSI_Write10+0x1bc>
    }
    
    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	7afa      	ldrb	r2, [r7, #11]
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <SCSI_Write10+0x70>
    {
      SCSI_SenseCode(pdev,
 8008a86:	7af9      	ldrb	r1, [r7, #11]
 8008a88:	233a      	movs	r3, #58	; 0x3a
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7ff fead 	bl	80087ec <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 8008a92:	f04f 33ff 	mov.w	r3, #4294967295
 8008a96:	e0a5      	b.n	8008be4 <SCSI_Write10+0x1bc>
    } 
    
    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	7afa      	ldrb	r2, [r7, #11]
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	4798      	blx	r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d008      	beq.n	8008abe <SCSI_Write10+0x96>
    {
      SCSI_SenseCode(pdev,
 8008aac:	7af9      	ldrb	r1, [r7, #11]
 8008aae:	2327      	movs	r3, #39	; 0x27
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f7ff fe9a 	bl	80087ec <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     WRITE_PROTECTED);
      return -1;
 8008ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8008abc:	e092      	b.n	8008be4 <SCSI_Write10+0x1bc>
    } 
    
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3303      	adds	r3, #3
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008ace:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 8008ad8:	4313      	orrs	r3, r2
          params[5];
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	3205      	adds	r2, #5
 8008ade:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	461a      	mov	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008aea:	3364      	adds	r3, #100	; 0x64
 8008aec:	601a      	str	r2, [r3, #0]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3307      	adds	r3, #7
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	021b      	lsls	r3, r3, #8
      params[8];  
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	3208      	adds	r2, #8
 8008afa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8008afc:	4313      	orrs	r3, r2
 8008afe:	461a      	mov	r2, r3
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b06:	3368      	adds	r3, #104	; 0x68
 8008b08:	601a      	str	r2, [r3, #0]
    
    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev,
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b10:	3364      	adds	r3, #100	; 0x64
 8008b12:	681a      	ldr	r2, [r3, #0]
                              lun,
                              hmsc->scsi_blk_addr,
                              hmsc->scsi_blk_len) < 0)
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b1a:	3368      	adds	r3, #104	; 0x68
 8008b1c:	681b      	ldr	r3, [r3, #0]
    if(SCSI_CheckAddressRange(pdev,
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	7af9      	ldrb	r1, [r7, #11]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f89a 	bl	8008c5c <SCSI_CheckAddressRange>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da02      	bge.n	8008b34 <SCSI_Write10+0x10c>
    {
      return -1; /* error */      
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b32:	e057      	b.n	8008be4 <SCSI_Write10+0x1bc>
    }
    
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b3a:	3364      	adds	r3, #100	; 0x64
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b44:	335e      	adds	r3, #94	; 0x5e
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	fb03 f202 	mul.w	r2, r3, r2
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b52:	3364      	adds	r3, #100	; 0x64
 8008b54:	601a      	str	r2, [r3, #0]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b5c:	3368      	adds	r3, #104	; 0x68
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b66:	335e      	adds	r3, #94	; 0x5e
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	fb03 f202 	mul.w	r2, r3, r2
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b74:	3368      	adds	r3, #104	; 0x68
 8008b76:	601a      	str	r2, [r3, #0]
    
    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b7e:	3314      	adds	r3, #20
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b88:	3368      	adds	r3, #104	; 0x68
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d00c      	beq.n	8008baa <SCSI_Write10+0x182>
    {
      SCSI_SenseCode(pdev,
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008b96:	3319      	adds	r3, #25
 8008b98:	7819      	ldrb	r1, [r3, #0]
 8008b9a:	2320      	movs	r3, #32
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7ff fe24 	bl	80087ec <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	e01c      	b.n	8008be4 <SCSI_Write10+0x1bc>
    }
    
    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2201      	movs	r2, #1
 8008bae:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      hmsc->bot_data, 
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f103 020c 	add.w	r2, r3, #12
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008bbc:	3368      	adds	r3, #104	; 0x68
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bc4:	bf28      	it	cs
 8008bc6:	f44f 4380 	movcs.w	r3, #16384	; 0x4000
    USBD_LL_PrepareReceive (pdev,
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2101      	movs	r1, #1
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f002 fdb9 	bl	800b746 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e005      	b.n	8008be4 <SCSI_Write10+0x1bc>
    return SCSI_ProcessWrite(pdev, lun);
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 f8df 	bl	8008da0 <SCSI_ProcessWrite>
 8008be2:	4603      	mov	r3, r0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008c00:	617b      	str	r3, [r7, #20]
  
  if ((params[1]& 0x02) == 0x02) 
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3301      	adds	r3, #1
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d008      	beq.n	8008c22 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode (pdev,
 8008c10:	7af9      	ldrb	r1, [r7, #11]
 8008c12:	2324      	movs	r3, #36	; 0x24
 8008c14:	2205      	movs	r2, #5
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7ff fde8 	bl	80087ec <SCSI_SenseCode>
                    lun, 
                    ILLEGAL_REQUEST, 
                    INVALID_FIELED_IN_COMMAND);
    return -1; /* Error, Verify Mode Not supported*/
 8008c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c20:	e018      	b.n	8008c54 <SCSI_Verify10+0x68>
  }
  
  if(SCSI_CheckAddressRange(pdev,
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008c28:	3364      	adds	r3, #100	; 0x64
 8008c2a:	681a      	ldr	r2, [r3, #0]
                            lun, 
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008c32:	3368      	adds	r3, #104	; 0x68
 8008c34:	681b      	ldr	r3, [r3, #0]
  if(SCSI_CheckAddressRange(pdev,
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	7af9      	ldrb	r1, [r7, #11]
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f80e 	bl	8008c5c <SCSI_CheckAddressRange>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	da02      	bge.n	8008c4c <SCSI_Verify10+0x60>
  {
    return -1; /* error */      
 8008c46:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4a:	e003      	b.n	8008c54 <SCSI_Verify10+0x68>
  }
  hmsc->bot_data_length = 0;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	815a      	strh	r2, [r3, #10]
  return 0;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	607a      	str	r2, [r7, #4]
 8008c66:	461a      	mov	r2, r3
 8008c68:	460b      	mov	r3, r1
 8008c6a:	72fb      	strb	r3, [r7, #11]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	813b      	strh	r3, [r7, #8]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008c76:	617b      	str	r3, [r7, #20]
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008c78:	893a      	ldrh	r2, [r7, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008c84:	3360      	adds	r3, #96	; 0x60
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d908      	bls.n	8008c9e <SCSI_CheckAddressRange+0x42>
  {
    SCSI_SenseCode(pdev,
 8008c8c:	7af9      	ldrb	r1, [r7, #11]
 8008c8e:	2321      	movs	r3, #33	; 0x21
 8008c90:	2205      	movs	r2, #5
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff fdaa 	bl	80087ec <SCSI_SenseCode>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	e000      	b.n	8008ca0 <SCSI_CheckAddressRange+0x44>
  }
  return 0;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8008ca8:	b590      	push	{r4, r7, lr}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008cba:	60fb      	str	r3, [r7, #12]
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008cc2:	3368      	adds	r3, #104	; 0x68
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cca:	bf28      	it	cs
 8008ccc:	f44f 4380 	movcs.w	r3, #16384	; 0x4000
 8008cd0:	60bb      	str	r3, [r7, #8]
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008cd8:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data, 
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f103 010c 	add.w	r1, r3, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008ce6:	3364      	adds	r3, #100	; 0x64
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008cf0:	335e      	adds	r3, #94	; 0x5e
 8008cf2:	881b      	ldrh	r3, [r3, #0]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008cf4:	fbb2 f2f3 	udiv	r2, r2, r3
                              len / hmsc->scsi_blk_size) < 0)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008cfe:	335e      	adds	r3, #94	; 0x5e
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	78f8      	ldrb	r0, [r7, #3]
 8008d0e:	47a0      	blx	r4
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	da08      	bge.n	8008d28 <SCSI_ProcessRead+0x80>
  {
    
    SCSI_SenseCode(pdev,
 8008d16:	78f9      	ldrb	r1, [r7, #3]
 8008d18:	2311      	movs	r3, #17
 8008d1a:	2204      	movs	r2, #4
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff fd65 	bl	80087ec <SCSI_SenseCode>
                   lun, 
                   HARDWARE_ERROR, 
                   UNRECOVERED_READ_ERROR);
    return -1; 
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	e037      	b.n	8008d98 <SCSI_ProcessRead+0xf0>
  }
  
  
  USBD_LL_Transmit (pdev, 
             MSC_EPIN_ADDR,
             hmsc->bot_data,
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f103 020c 	add.w	r2, r3, #12
  USBD_LL_Transmit (pdev, 
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2181      	movs	r1, #129	; 0x81
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f002 fcef 	bl	800b718 <USBD_LL_Transmit>
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008d40:	3364      	adds	r3, #100	; 0x64
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	441a      	add	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008d4e:	3364      	adds	r3, #100	; 0x64
 8008d50:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len    -= len;  
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008d58:	3368      	adds	r3, #104	; 0x68
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008d66:	3368      	adds	r3, #104	; 0x68
 8008d68:	601a      	str	r2, [r3, #0]
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008d70:	3334      	adds	r3, #52	; 0x34
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008d7e:	3334      	adds	r3, #52	; 0x34
 8008d80:	601a      	str	r2, [r3, #0]
  
  if (hmsc->scsi_blk_len == 0)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008d88:	3368      	adds	r3, #104	; 0x68
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <SCSI_ProcessRead+0xee>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2203      	movs	r2, #3
 8008d94:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd90      	pop	{r4, r7, pc}

08008da0 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008db2:	60fb      	str	r3, [r7, #12]
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008dba:	3368      	adds	r3, #104	; 0x68
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc2:	bf28      	it	cs
 8008dc4:	f44f 4380 	movcs.w	r3, #16384	; 0x4000
 8008dc8:	60bb      	str	r3, [r7, #8]
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008dd0:	695c      	ldr	r4, [r3, #20]
                              hmsc->bot_data, 
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f103 010c 	add.w	r1, r3, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008dde:	3364      	adds	r3, #100	; 0x64
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008de8:	335e      	adds	r3, #94	; 0x5e
 8008dea:	881b      	ldrh	r3, [r3, #0]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008dec:	fbb2 f2f3 	udiv	r2, r2, r3
                              len / hmsc->scsi_blk_size) < 0)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008df6:	335e      	adds	r3, #94	; 0x5e
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	78f8      	ldrb	r0, [r7, #3]
 8008e06:	47a0      	blx	r4
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	da08      	bge.n	8008e20 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev,
 8008e0e:	78f9      	ldrb	r1, [r7, #3]
 8008e10:	2303      	movs	r3, #3
 8008e12:	2204      	movs	r2, #4
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fce9 	bl	80087ec <SCSI_SenseCode>
                   lun, 
                   HARDWARE_ERROR, 
                   WRITE_FAULT);     
    return -1; 
 8008e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1e:	e042      	b.n	8008ea6 <SCSI_ProcessWrite+0x106>
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008e26:	3364      	adds	r3, #100	; 0x64
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	441a      	add	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008e34:	3364      	adds	r3, #100	; 0x64
 8008e36:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len   -= len; 
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008e3e:	3368      	adds	r3, #104	; 0x68
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	1ad2      	subs	r2, r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008e4c:	3368      	adds	r3, #104	; 0x68
 8008e4e:	601a      	str	r2, [r3, #0]
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008e56:	3334      	adds	r3, #52	; 0x34
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	1ad2      	subs	r2, r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008e64:	3334      	adds	r3, #52	; 0x34
 8008e66:	601a      	str	r2, [r3, #0]
  
  if (hmsc->scsi_blk_len == 0)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008e6e:	3368      	adds	r3, #104	; 0x68
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d104      	bne.n	8008e80 <SCSI_ProcessWrite+0xe0>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8008e76:	2100      	movs	r1, #0
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff f8bd 	bl	8007ff8 <MSC_BOT_SendCSW>
 8008e7e:	e011      	b.n	8008ea4 <SCSI_ProcessWrite+0x104>
  else
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f103 020c 	add.w	r2, r3, #12
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008e8c:	3368      	adds	r3, #104	; 0x68
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e94:	bf28      	it	cs
 8008e96:	f44f 4380 	movcs.w	r3, #16384	; 0x4000
    USBD_LL_PrepareReceive (pdev,
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f002 fc51 	bl	800b746 <USBD_LL_PrepareReceive>
  }
  
  return 0;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd90      	pop	{r4, r7, pc}

08008eae <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e01a      	b.n	8008efc <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	79fa      	ldrb	r2, [r7, #7]
 8008ef2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f002 fb0b 	bl	800b510 <USBD_LL_Init>
  
  return USBD_OK; 
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d006      	beq.n	8008f26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
 8008f24:	e001      	b.n	8008f2a <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8008f26:	2302      	movs	r3, #2
 8008f28:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f002 fb35 	bl	800b5b0 <USBD_LL_Start>
  
  return USBD_OK;  
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008f72:	2302      	movs	r3, #2
 8008f74:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00c      	beq.n	8008f9a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	4798      	blx	r3
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	4611      	mov	r1, r2
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	4798      	blx	r3
  return USBD_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fda2 	bl	8009b26 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008ffe:	f003 031f 	and.w	r3, r3, #31
 8009002:	2b02      	cmp	r3, #2
 8009004:	d016      	beq.n	8009034 <USBD_LL_SetupStage+0x6a>
 8009006:	2b02      	cmp	r3, #2
 8009008:	dc1c      	bgt.n	8009044 <USBD_LL_SetupStage+0x7a>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <USBD_LL_SetupStage+0x4a>
 800900e:	2b01      	cmp	r3, #1
 8009010:	d008      	beq.n	8009024 <USBD_LL_SetupStage+0x5a>
 8009012:	e017      	b.n	8009044 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f9c7 	bl	80093b0 <USBD_StdDevReq>
    break;
 8009022:	e01a      	b.n	800905a <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa0f 	bl	8009450 <USBD_StdItfReq>
    break;
 8009032:	e012      	b.n	800905a <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fa3a 	bl	80094b6 <USBD_StdEPReq>
    break;
 8009042:	e00a      	b.n	800905a <USBD_LL_SetupStage+0x90>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800904a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800904e:	b2db      	uxtb	r3, r3
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f002 fafb 	bl	800b64e <USBD_LL_StallEP>
    break;
 8009058:	bf00      	nop
  }  
  return USBD_OK;  
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	460b      	mov	r3, r1
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d138      	bne.n	80090ea <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800907e:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8009086:	2b03      	cmp	r3, #3
 8009088:	d142      	bne.n	8009110 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	429a      	cmp	r2, r3
 8009094:	d914      	bls.n	80090c0 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	68da      	ldr	r2, [r3, #12]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	4293      	cmp	r3, r2
 80090ae:	bf28      	it	cs
 80090b0:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	461a      	mov	r2, r3
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 fe0b 	bl	8009cd4 <USBD_CtlContinueRx>
 80090be:	e027      	b.n	8009110 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00a      	beq.n	80090e2 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d105      	bne.n	80090e2 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fe08 	bl	8009cf8 <USBD_CtlSendStatus>
 80090e8:	e012      	b.n	8009110 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00c      	beq.n	8009110 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d107      	bne.n	8009110 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	7afa      	ldrb	r2, [r7, #11]
 800910a:	4611      	mov	r1, r2
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	4798      	blx	r3
  }  
  return USBD_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b086      	sub	sp, #24
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	460b      	mov	r3, r1
 8009124:	607a      	str	r2, [r7, #4]
 8009126:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8009128:	7afb      	ldrb	r3, [r7, #11]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d16c      	bne.n	8009208 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3314      	adds	r3, #20
 8009132:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800913a:	2b02      	cmp	r3, #2
 800913c:	d157      	bne.n	80091ee <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	429a      	cmp	r2, r3
 8009148:	d915      	bls.n	8009176 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	1ad2      	subs	r2, r2, r3
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800915c:	b29b      	uxth	r3, r3
 800915e:	461a      	mov	r2, r3
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 fda4 	bl	8009cb0 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8009168:	2300      	movs	r3, #0
 800916a:	2200      	movs	r2, #0
 800916c:	2100      	movs	r1, #0
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f002 fae9 	bl	800b746 <USBD_LL_PrepareReceive>
 8009174:	e03b      	b.n	80091ee <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	68d2      	ldr	r2, [r2, #12]
 800917e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009182:	fb02 f201 	mul.w	r2, r2, r1
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d11c      	bne.n	80091c6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8009194:	429a      	cmp	r2, r3
 8009196:	d316      	bcc.n	80091c6 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d20f      	bcs.n	80091c6 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80091a6:	2200      	movs	r2, #0
 80091a8:	2100      	movs	r1, #0
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 fd80 	bl	8009cb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80091b8:	2300      	movs	r3, #0
 80091ba:	2200      	movs	r2, #0
 80091bc:	2100      	movs	r1, #0
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f002 fac1 	bl	800b746 <USBD_LL_PrepareReceive>
 80091c4:	e013      	b.n	80091ee <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d105      	bne.n	80091e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 fd98 	bl	8009d1e <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d11a      	bne.n	800922e <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff fea9 	bl	8008f50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8009206:	e012      	b.n	800922e <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00c      	beq.n	800922e <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800921a:	2b03      	cmp	r3, #3
 800921c:	d107      	bne.n	800922e <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	7afa      	ldrb	r2, [r7, #11]
 8009228:	4611      	mov	r1, r2
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	4798      	blx	r3
  }  
  return USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8009240:	2340      	movs	r3, #64	; 0x40
 8009242:	2200      	movs	r2, #0
 8009244:	2100      	movs	r1, #0
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f002 f9c1 	bl	800b5ce <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2240      	movs	r2, #64	; 0x40
 8009250:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8009254:	2340      	movs	r3, #64	; 0x40
 8009256:	2200      	movs	r2, #0
 8009258:	2180      	movs	r1, #128	; 0x80
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f002 f9b7 	bl	800b5ce <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2240      	movs	r2, #64	; 0x40
 8009264:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6852      	ldr	r2, [r2, #4]
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	4611      	mov	r1, r2
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
 
  
  return USBD_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	78fa      	ldrb	r2, [r7, #3]
 80092a6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2204      	movs	r2, #4
 80092ce:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009310:	2b03      	cmp	r3, #3
 8009312:	d10b      	bne.n	800932c <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6852      	ldr	r2, [r2, #4]
 800939c:	b2d2      	uxtb	r2, r2
 800939e:	4611      	mov	r1, r2
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4798      	blx	r3
   
  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	2b09      	cmp	r3, #9
 80093c4:	d839      	bhi.n	800943a <USBD_StdDevReq+0x8a>
 80093c6:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <USBD_StdDevReq+0x1c>)
 80093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093cc:	0800941d 	.word	0x0800941d
 80093d0:	08009431 	.word	0x08009431
 80093d4:	0800943b 	.word	0x0800943b
 80093d8:	08009427 	.word	0x08009427
 80093dc:	0800943b 	.word	0x0800943b
 80093e0:	080093ff 	.word	0x080093ff
 80093e4:	080093f5 	.word	0x080093f5
 80093e8:	0800943b 	.word	0x0800943b
 80093ec:	08009413 	.word	0x08009413
 80093f0:	08009409 	.word	0x08009409
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f93a 	bl	8009670 <USBD_GetDescriptor>
    break;
 80093fc:	e022      	b.n	8009444 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fa29 	bl	8009858 <USBD_SetAddress>
    break;
 8009406:	e01d      	b.n	8009444 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fa64 	bl	80098d8 <USBD_SetConfig>
    break;
 8009410:	e018      	b.n	8009444 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fae7 	bl	80099e8 <USBD_GetConfig>
    break;
 800941a:	e013      	b.n	8009444 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fb14 	bl	8009a4c <USBD_GetStatus>
    break;
 8009424:	e00e      	b.n	8009444 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fb39 	bl	8009aa0 <USBD_SetFeature>
    break;
 800942e:	e009      	b.n	8009444 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fb4f 	bl	8009ad6 <USBD_ClrFeature>
    break;
 8009438:	e004      	b.n	8009444 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fbaf 	bl	8009ba0 <USBD_CtlError>
    break;
 8009442:	bf00      	nop
  }
  
  return ret;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop

08009450 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009464:	2b03      	cmp	r3, #3
 8009466:	d11b      	bne.n	80094a0 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	889b      	ldrh	r3, [r3, #4]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b01      	cmp	r3, #1
 8009470:	d811      	bhi.n	8009496 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	88db      	ldrh	r3, [r3, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d110      	bne.n	80094aa <USBD_StdItfReq+0x5a>
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10d      	bne.n	80094aa <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fc32 	bl	8009cf8 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8009494:	e009      	b.n	80094aa <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fb81 	bl	8009ba0 <USBD_CtlError>
    break;
 800949e:	e004      	b.n	80094aa <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fb7c 	bl	8009ba0 <USBD_CtlError>
    break;
 80094a8:	e000      	b.n	80094ac <USBD_StdItfReq+0x5c>
    break;
 80094aa:	bf00      	nop
  }
  return USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	889b      	ldrh	r3, [r3, #4]
 80094c8:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d108      	bne.n	80094e8 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
    
    return USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	e0be      	b.n	8009666 <USBD_StdEPReq+0x1b0>
  }
  
  switch (req->bRequest) 
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	785b      	ldrb	r3, [r3, #1]
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d007      	beq.n	8009500 <USBD_StdEPReq+0x4a>
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	f300 80b6 	bgt.w	8009662 <USBD_StdEPReq+0x1ac>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d06d      	beq.n	80095d6 <USBD_StdEPReq+0x120>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d035      	beq.n	800956a <USBD_StdEPReq+0xb4>
      break;
    }
    break;
    
  default:
    break;
 80094fe:	e0b0      	b.n	8009662 <USBD_StdEPReq+0x1ac>
    switch (pdev->dev_state) 
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009506:	2b02      	cmp	r3, #2
 8009508:	d002      	beq.n	8009510 <USBD_StdEPReq+0x5a>
 800950a:	2b03      	cmp	r3, #3
 800950c:	d00c      	beq.n	8009528 <USBD_StdEPReq+0x72>
 800950e:	e025      	b.n	800955c <USBD_StdEPReq+0xa6>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d027      	beq.n	8009566 <USBD_StdEPReq+0xb0>
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	2b80      	cmp	r3, #128	; 0x80
 800951a:	d024      	beq.n	8009566 <USBD_StdEPReq+0xb0>
        USBD_LL_StallEP(pdev , ep_addr);
 800951c:	7bbb      	ldrb	r3, [r7, #14]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f002 f894 	bl	800b64e <USBD_LL_StallEP>
      break;	
 8009526:	e01e      	b.n	8009566 <USBD_StdEPReq+0xb0>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	885b      	ldrh	r3, [r3, #2]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <USBD_StdEPReq+0x90>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d007      	beq.n	8009546 <USBD_StdEPReq+0x90>
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b80      	cmp	r3, #128	; 0x80
 800953a:	d004      	beq.n	8009546 <USBD_StdEPReq+0x90>
          USBD_LL_StallEP(pdev , ep_addr);
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f002 f884 	bl	800b64e <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fbcf 	bl	8009cf8 <USBD_CtlSendStatus>
      break;
 800955a:	e005      	b.n	8009568 <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fb1e 	bl	8009ba0 <USBD_CtlError>
      break;    
 8009564:	e000      	b.n	8009568 <USBD_StdEPReq+0xb2>
      break;	
 8009566:	bf00      	nop
    break;
 8009568:	e07c      	b.n	8009664 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009570:	2b02      	cmp	r3, #2
 8009572:	d002      	beq.n	800957a <USBD_StdEPReq+0xc4>
 8009574:	2b03      	cmp	r3, #3
 8009576:	d00c      	beq.n	8009592 <USBD_StdEPReq+0xdc>
 8009578:	e024      	b.n	80095c4 <USBD_StdEPReq+0x10e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d026      	beq.n	80095ce <USBD_StdEPReq+0x118>
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d023      	beq.n	80095ce <USBD_StdEPReq+0x118>
        USBD_LL_StallEP(pdev , ep_addr);
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f002 f85f 	bl	800b64e <USBD_LL_StallEP>
      break;	
 8009590:	e01d      	b.n	80095ce <USBD_StdEPReq+0x118>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	885b      	ldrh	r3, [r3, #2]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d11b      	bne.n	80095d2 <USBD_StdEPReq+0x11c>
        if ((ep_addr & 0x7F) != 0x00) 
 800959a:	7bbb      	ldrb	r3, [r7, #14]
 800959c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <USBD_StdEPReq+0x106>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f002 f863 	bl	800b674 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fb9b 	bl	8009cf8 <USBD_CtlSendStatus>
      break;
 80095c2:	e006      	b.n	80095d2 <USBD_StdEPReq+0x11c>
      USBD_CtlError(pdev , req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 faea 	bl	8009ba0 <USBD_CtlError>
      break;    
 80095cc:	e002      	b.n	80095d4 <USBD_StdEPReq+0x11e>
      break;	
 80095ce:	bf00      	nop
 80095d0:	e048      	b.n	8009664 <USBD_StdEPReq+0x1ae>
      break;
 80095d2:	bf00      	nop
    break;
 80095d4:	e046      	b.n	8009664 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d002      	beq.n	80095e6 <USBD_StdEPReq+0x130>
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d00b      	beq.n	80095fc <USBD_StdEPReq+0x146>
 80095e4:	e036      	b.n	8009654 <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x7F) != 0x00) 
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d036      	beq.n	800965e <USBD_StdEPReq+0x1a8>
        USBD_LL_StallEP(pdev , ep_addr);
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f002 f82a 	bl	800b64e <USBD_LL_StallEP>
      break;	
 80095fa:	e030      	b.n	800965e <USBD_StdEPReq+0x1a8>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80095fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da08      	bge.n	8009616 <USBD_StdEPReq+0x160>
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800960a:	3301      	adds	r3, #1
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	4413      	add	r3, r2
 8009612:	3304      	adds	r3, #4
 8009614:	e007      	b.n	8009626 <USBD_StdEPReq+0x170>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800961c:	3310      	adds	r3, #16
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	3304      	adds	r3, #4
 8009626:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f002 f834 	bl	800b69a <USBD_LL_IsStallEP>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <USBD_StdEPReq+0x18a>
        pep->status = 0x0001;     
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e002      	b.n	8009646 <USBD_StdEPReq+0x190>
        pep->status = 0x0000;  
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8009646:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8009648:	2202      	movs	r2, #2
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fb13 	bl	8009c78 <USBD_CtlSendData>
      break;
 8009652:	e005      	b.n	8009660 <USBD_StdEPReq+0x1aa>
      USBD_CtlError(pdev , req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 faa2 	bl	8009ba0 <USBD_CtlError>
      break;
 800965c:	e000      	b.n	8009660 <USBD_StdEPReq+0x1aa>
      break;	
 800965e:	bf00      	nop
    break;
 8009660:	e000      	b.n	8009664 <USBD_StdEPReq+0x1ae>
    break;
 8009662:	bf00      	nop
  }
  return ret;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	885b      	ldrh	r3, [r3, #2]
 800967e:	0a1b      	lsrs	r3, r3, #8
 8009680:	b29b      	uxth	r3, r3
 8009682:	3b01      	subs	r3, #1
 8009684:	2b06      	cmp	r3, #6
 8009686:	f200 80c9 	bhi.w	800981c <USBD_GetDescriptor+0x1ac>
 800968a:	a201      	add	r2, pc, #4	; (adr r2, 8009690 <USBD_GetDescriptor+0x20>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	080096ad 	.word	0x080096ad
 8009694:	080096c5 	.word	0x080096c5
 8009698:	08009705 	.word	0x08009705
 800969c:	0800981d 	.word	0x0800981d
 80096a0:	0800981d 	.word	0x0800981d
 80096a4:	080097c9 	.word	0x080097c9
 80096a8:	080097ef 	.word	0x080097ef
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	7c12      	ldrb	r2, [r2, #16]
 80096b8:	f107 010a 	add.w	r1, r7, #10
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	60f8      	str	r0, [r7, #12]
    break;
 80096c2:	e0b0      	b.n	8009826 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	7c1b      	ldrb	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10d      	bne.n	80096e8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d4:	f107 020a 	add.w	r2, r7, #10
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	2202      	movs	r2, #2
 80096e4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80096e6:	e09e      	b.n	8009826 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	f107 020a 	add.w	r2, r7, #10
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3301      	adds	r3, #1
 80096fe:	2202      	movs	r2, #2
 8009700:	701a      	strb	r2, [r3, #0]
    break;
 8009702:	e090      	b.n	8009826 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	885b      	ldrh	r3, [r3, #2]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b05      	cmp	r3, #5
 800970c:	d856      	bhi.n	80097bc <USBD_GetDescriptor+0x14c>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <USBD_GetDescriptor+0xa4>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	0800972d 	.word	0x0800972d
 8009718:	08009745 	.word	0x08009745
 800971c:	0800975d 	.word	0x0800975d
 8009720:	08009775 	.word	0x08009775
 8009724:	0800978d 	.word	0x0800978d
 8009728:	080097a5 	.word	0x080097a5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	7c12      	ldrb	r2, [r2, #16]
 8009738:	f107 010a 	add.w	r1, r7, #10
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
 8009740:	60f8      	str	r0, [r7, #12]
      break;
 8009742:	e040      	b.n	80097c6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	7c12      	ldrb	r2, [r2, #16]
 8009750:	f107 010a 	add.w	r1, r7, #10
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
 8009758:	60f8      	str	r0, [r7, #12]
      break;
 800975a:	e034      	b.n	80097c6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 010a 	add.w	r1, r7, #10
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
      break;
 8009772:	e028      	b.n	80097c6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	7c12      	ldrb	r2, [r2, #16]
 8009780:	f107 010a 	add.w	r1, r7, #10
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
 8009788:	60f8      	str	r0, [r7, #12]
      break;
 800978a:	e01c      	b.n	80097c6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7c12      	ldrb	r2, [r2, #16]
 8009798:	f107 010a 	add.w	r1, r7, #10
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
 80097a0:	60f8      	str	r0, [r7, #12]
      break;
 80097a2:	e010      	b.n	80097c6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	7c12      	ldrb	r2, [r2, #16]
 80097b0:	f107 010a 	add.w	r1, r7, #10
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	60f8      	str	r0, [r7, #12]
      break;
 80097ba:	e004      	b.n	80097c6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f9ee 	bl	8009ba0 <USBD_CtlError>
      return;
 80097c4:	e044      	b.n	8009850 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80097c6:	e02e      	b.n	8009826 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	7c1b      	ldrb	r3, [r3, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d109      	bne.n	80097e4 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d8:	f107 020a 	add.w	r2, r7, #10
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
      break;
 80097e2:	e020      	b.n	8009826 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f9da 	bl	8009ba0 <USBD_CtlError>
      return;
 80097ec:	e030      	b.n	8009850 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	7c1b      	ldrb	r3, [r3, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10d      	bne.n	8009812 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	f107 020a 	add.w	r2, r7, #10
 8009802:	4610      	mov	r0, r2
 8009804:	4798      	blx	r3
 8009806:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	2207      	movs	r2, #7
 800980e:	701a      	strb	r2, [r3, #0]
      break; 
 8009810:	e009      	b.n	8009826 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f9c3 	bl	8009ba0 <USBD_CtlError>
      return;
 800981a:	e019      	b.n	8009850 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f9be 	bl	8009ba0 <USBD_CtlError>
    return;
 8009824:	e014      	b.n	8009850 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8009826:	897b      	ldrh	r3, [r7, #10]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d011      	beq.n	8009850 <USBD_GetDescriptor+0x1e0>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	88db      	ldrh	r3, [r3, #6]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00d      	beq.n	8009850 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	88da      	ldrh	r2, [r3, #6]
 8009838:	897b      	ldrh	r3, [r7, #10]
 800983a:	4293      	cmp	r3, r2
 800983c:	bf28      	it	cs
 800983e:	4613      	movcs	r3, r2
 8009840:	b29b      	uxth	r3, r3
 8009842:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8009844:	897b      	ldrh	r3, [r7, #10]
 8009846:	461a      	mov	r2, r3
 8009848:	68f9      	ldr	r1, [r7, #12]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa14 	bl	8009c78 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop

08009858 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	889b      	ldrh	r3, [r3, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d12c      	bne.n	80098c4 <USBD_SetAddress+0x6c>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	88db      	ldrh	r3, [r3, #6]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d128      	bne.n	80098c4 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	885b      	ldrh	r3, [r3, #2]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009884:	2b03      	cmp	r3, #3
 8009886:	d104      	bne.n	8009892 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f988 	bl	8009ba0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009890:	e01d      	b.n	80098ce <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	7bfa      	ldrb	r2, [r7, #15]
 8009896:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f001 ff27 	bl	800b6f2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fa27 	bl	8009cf8 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d004      	beq.n	80098ba <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80098b8:	e009      	b.n	80098ce <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80098c2:	e004      	b.n	80098ce <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f96a 	bl	8009ba0 <USBD_CtlError>
  } 
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	885b      	ldrh	r3, [r3, #2]
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	4b3e      	ldr	r3, [pc, #248]	; (80099e4 <USBD_SetConfig+0x10c>)
 80098ea:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80098ec:	4b3d      	ldr	r3, [pc, #244]	; (80099e4 <USBD_SetConfig+0x10c>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d904      	bls.n	80098fe <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f952 	bl	8009ba0 <USBD_CtlError>
 80098fc:	e06f      	b.n	80099de <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009904:	2b02      	cmp	r3, #2
 8009906:	d002      	beq.n	800990e <USBD_SetConfig+0x36>
 8009908:	2b03      	cmp	r3, #3
 800990a:	d023      	beq.n	8009954 <USBD_SetConfig+0x7c>
 800990c:	e062      	b.n	80099d4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800990e:	4b35      	ldr	r3, [pc, #212]	; (80099e4 <USBD_SetConfig+0x10c>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d01a      	beq.n	800994c <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8009916:	4b33      	ldr	r3, [pc, #204]	; (80099e4 <USBD_SetConfig+0x10c>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2203      	movs	r2, #3
 8009924:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8009928:	4b2e      	ldr	r3, [pc, #184]	; (80099e4 <USBD_SetConfig+0x10c>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7ff fb19 	bl	8008f66 <USBD_SetClassConfig>
 8009934:	4603      	mov	r3, r0
 8009936:	2b02      	cmp	r3, #2
 8009938:	d104      	bne.n	8009944 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f92f 	bl	8009ba0 <USBD_CtlError>
          return;
 8009942:	e04c      	b.n	80099de <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f9d7 	bl	8009cf8 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800994a:	e048      	b.n	80099de <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f9d3 	bl	8009cf8 <USBD_CtlSendStatus>
      break;
 8009952:	e044      	b.n	80099de <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8009954:	4b23      	ldr	r3, [pc, #140]	; (80099e4 <USBD_SetConfig+0x10c>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d112      	bne.n	8009982 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8009964:	4b1f      	ldr	r3, [pc, #124]	; (80099e4 <USBD_SetConfig+0x10c>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800996e:	4b1d      	ldr	r3, [pc, #116]	; (80099e4 <USBD_SetConfig+0x10c>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7ff fb15 	bl	8008fa4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f9bc 	bl	8009cf8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009980:	e02d      	b.n	80099de <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8009982:	4b18      	ldr	r3, [pc, #96]	; (80099e4 <USBD_SetConfig+0x10c>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	429a      	cmp	r2, r3
 800998e:	d01d      	beq.n	80099cc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff fb03 	bl	8008fa4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800999e:	4b11      	ldr	r3, [pc, #68]	; (80099e4 <USBD_SetConfig+0x10c>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80099a8:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <USBD_SetConfig+0x10c>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff fad9 	bl	8008f66 <USBD_SetClassConfig>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d104      	bne.n	80099c4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f8ef 	bl	8009ba0 <USBD_CtlError>
          return;
 80099c2:	e00c      	b.n	80099de <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f997 	bl	8009cf8 <USBD_CtlSendStatus>
      break;
 80099ca:	e008      	b.n	80099de <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f993 	bl	8009cf8 <USBD_CtlSendStatus>
      break;
 80099d2:	e004      	b.n	80099de <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f8e2 	bl	8009ba0 <USBD_CtlError>
      break;
 80099dc:	bf00      	nop
    }
  }
}
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	2000032c 	.word	0x2000032c

080099e8 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	88db      	ldrh	r3, [r3, #6]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d004      	beq.n	8009a04 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f8cf 	bl	8009ba0 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009a02:	e01f      	b.n	8009a44 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d002      	beq.n	8009a14 <USBD_GetConfig+0x2c>
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d00b      	beq.n	8009a2a <USBD_GetConfig+0x42>
 8009a12:	e012      	b.n	8009a3a <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f928 	bl	8009c78 <USBD_CtlSendData>
      break;
 8009a28:	e00c      	b.n	8009a44 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8009a2e:	2201      	movs	r2, #1
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f920 	bl	8009c78 <USBD_CtlSendData>
      break;
 8009a38:	e004      	b.n	8009a44 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f8af 	bl	8009ba0 <USBD_CtlError>
      break;
 8009a42:	bf00      	nop
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009a5c:	3b02      	subs	r3, #2
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d815      	bhi.n	8009a8e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f043 0202 	orr.w	r2, r3, #2
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8009a82:	2202      	movs	r2, #2
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f8f6 	bl	8009c78 <USBD_CtlSendData>
                      2);
    break;
 8009a8c:	e004      	b.n	8009a98 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f885 	bl	8009ba0 <USBD_CtlError>
    break;
 8009a96:	bf00      	nop
  }
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	885b      	ldrh	r3, [r3, #2]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d10d      	bne.n	8009ace <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f915 	bl	8009cf8 <USBD_CtlSendStatus>
  }

}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009ae6:	3b02      	subs	r3, #2
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d812      	bhi.n	8009b12 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	885b      	ldrh	r3, [r3, #2]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d113      	bne.n	8009b1c <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f8f4 	bl	8009cf8 <USBD_CtlSendStatus>
    }
    break;
 8009b10:	e004      	b.n	8009b1c <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f843 	bl	8009ba0 <USBD_CtlError>
    break;
 8009b1a:	e000      	b.n	8009b1e <USBD_ClrFeature+0x48>
    break;
 8009b1c:	bf00      	nop
  }
}
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781a      	ldrb	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	785a      	ldrb	r2, [r3, #1]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	3302      	adds	r3, #2
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	3303      	adds	r3, #3
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	021b      	lsls	r3, r3, #8
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	4413      	add	r3, r2
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	3305      	adds	r3, #5
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	021b      	lsls	r3, r3, #8
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	4413      	add	r3, r2
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	3306      	adds	r3, #6
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	3307      	adds	r3, #7
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	4413      	add	r3, r2
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	80da      	strh	r2, [r3, #6]

}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8009baa:	2180      	movs	r1, #128	; 0x80
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 fd4e 	bl	800b64e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 fd4a 	bl	800b64e <USBD_LL_StallEP>
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b086      	sub	sp, #24
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d033      	beq.n	8009c40 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f835 	bl	8009c48 <USBD_GetLen>
 8009bde:	4603      	mov	r3, r0
 8009be0:	3301      	adds	r3, #1
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	005b      	lsls	r3, r3, #1
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	881a      	ldrh	r2, [r3, #0]
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	1c59      	adds	r1, r3, #1
 8009bf4:	75f9      	strb	r1, [r7, #23]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	440b      	add	r3, r1
 8009bfc:	b2d2      	uxtb	r2, r2
 8009bfe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	75fa      	strb	r2, [r7, #23]
 8009c06:	461a      	mov	r2, r3
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	2203      	movs	r2, #3
 8009c0e:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8009c10:	e012      	b.n	8009c38 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	60fa      	str	r2, [r7, #12]
 8009c18:	7dfa      	ldrb	r2, [r7, #23]
 8009c1a:	1c51      	adds	r1, r2, #1
 8009c1c:	75f9      	strb	r1, [r7, #23]
 8009c1e:	4611      	mov	r1, r2
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	440a      	add	r2, r1
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	75fa      	strb	r2, [r7, #23]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4413      	add	r3, r2
 8009c34:	2200      	movs	r2, #0
 8009c36:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e8      	bne.n	8009c12 <USBD_GetString+0x50>
    }
  } 
}
 8009c40:	bf00      	nop
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8009c54:	e005      	b.n	8009c62 <USBD_GetLen+0x1a>
    {
        len++;
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1f5      	bne.n	8009c56 <USBD_GetLen+0xe>
    }

    return len;
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8009c8e:	88fa      	ldrh	r2, [r7, #6]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8009c94:	88fa      	ldrh	r2, [r7, #6]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009c9a:	88fb      	ldrh	r3, [r7, #6]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f001 fd39 	bl	800b718 <USBD_LL_Transmit>
  
  return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f001 fd27 	bl	800b718 <USBD_LL_Transmit>
  
  return USBD_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f001 fd2c 	bl	800b746 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2204      	movs	r2, #4
 8009d04:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 fd02 	bl	800b718 <USBD_LL_Transmit>
  
  return USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2205      	movs	r2, #5
 8009d2a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8009d2e:	2300      	movs	r3, #0
 8009d30:	2200      	movs	r2, #0
 8009d32:	2100      	movs	r1, #0
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 fd06 	bl	800b746 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <FPGA_IPM_init>:
static FPGA_IPM_BOOLEAN checkCore(FPGA_IPM_CORE coreID);
static void writeRow0(FPGA_IPM_DATA newRow0);
static void readRow0();


FPGA_IPM_BOOLEAN FPGA_IPM_init() {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b09e      	sub	sp, #120	; 0x78
 8009d48:	af00      	add	r7, sp, #0
    
	if (initialized) return 0;
 8009d4a:	4b03      	ldr	r3, [pc, #12]	; (8009d58 <FPGA_IPM_init+0x14>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d004      	beq.n	8009d5c <FPGA_IPM_init+0x18>
 8009d52:	2300      	movs	r3, #0
 8009d54:	e1ae      	b.n	800a0b4 <FPGA_IPM_init+0x370>
 8009d56:	bf00      	nop
 8009d58:	20000330 	.word	0x20000330
	
	initialized = 1;
 8009d5c:	4ba5      	ldr	r3, [pc, #660]	; (8009ff4 <FPGA_IPM_init+0x2b0>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	601a      	str	r2, [r3, #0]
	// INIT FMC
	FMC_NORSRAM_TimingTypeDef Timing;
	FMC_NORSRAM_TimingTypeDef ExtTiming;

	/** Perform the FPGA CS1 memory initialization sequence */
	SRAM_READ.Instance = FMC_NORSRAM_DEVICE;
 8009d62:	4ba5      	ldr	r3, [pc, #660]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d64:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009d68:	601a      	str	r2, [r3, #0]
	SRAM_READ.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8009d6a:	4ba3      	ldr	r3, [pc, #652]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d6c:	4aa3      	ldr	r2, [pc, #652]	; (8009ffc <FPGA_IPM_init+0x2b8>)
 8009d6e:	605a      	str	r2, [r3, #4]

	/* SRAM_READ.Init */
	SRAM_READ.Init.NSBank = FMC_NORSRAM_BANK1;
 8009d70:	4ba1      	ldr	r3, [pc, #644]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	609a      	str	r2, [r3, #8]
	SRAM_READ.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8009d76:	4ba0      	ldr	r3, [pc, #640]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	60da      	str	r2, [r3, #12]
	SRAM_READ.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8009d7c:	4b9e      	ldr	r3, [pc, #632]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	611a      	str	r2, [r3, #16]
	SRAM_READ.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009d82:	4b9d      	ldr	r3, [pc, #628]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d84:	2210      	movs	r2, #16
 8009d86:	615a      	str	r2, [r3, #20]
	SRAM_READ.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8009d88:	4b9b      	ldr	r3, [pc, #620]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	619a      	str	r2, [r3, #24]
	SRAM_READ.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8009d8e:	4b9a      	ldr	r3, [pc, #616]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	61da      	str	r2, [r3, #28]
	SRAM_READ.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 8009d94:	4b98      	ldr	r3, [pc, #608]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	621a      	str	r2, [r3, #32]
	SRAM_READ.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8009d9a:	4b97      	ldr	r3, [pc, #604]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	625a      	str	r2, [r3, #36]	; 0x24
	SRAM_READ.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8009da0:	4b95      	ldr	r3, [pc, #596]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009da2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009da6:	629a      	str	r2, [r3, #40]	; 0x28
	SRAM_READ.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8009da8:	4b93      	ldr	r3, [pc, #588]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	62da      	str	r2, [r3, #44]	; 0x2c
	SRAM_READ.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 8009dae:	4b92      	ldr	r3, [pc, #584]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009db0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30
	SRAM_READ.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009db6:	4b90      	ldr	r3, [pc, #576]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	635a      	str	r2, [r3, #52]	; 0x34
	SRAM_READ.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8009dbc:	4b8e      	ldr	r3, [pc, #568]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	639a      	str	r2, [r3, #56]	; 0x38
	SRAM_READ.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009dc2:	4b8d      	ldr	r3, [pc, #564]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	63da      	str	r2, [r3, #60]	; 0x3c

	// Timing (Read)
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	677b      	str	r3, [r7, #116]	; 0x74
	Timing.AddressSetupTime = 6;
 8009dcc:	2306      	movs	r3, #6
 8009dce:	65fb      	str	r3, [r7, #92]	; 0x5c
	Timing.AddressHoldTime = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	663b      	str	r3, [r7, #96]	; 0x60
	Timing.DataSetupTime = 6;
 8009dd4:	2306      	movs	r3, #6
 8009dd6:	667b      	str	r3, [r7, #100]	; 0x64
	Timing.BusTurnAroundDuration = 0; // don't care
 8009dd8:	2300      	movs	r3, #0
 8009dda:	66bb      	str	r3, [r7, #104]	; 0x68
	Timing.CLKDivision = 10; // don't care
 8009ddc:	230a      	movs	r3, #10
 8009dde:	66fb      	str	r3, [r7, #108]	; 0x6c
	Timing.DataLatency = 2; // don't care
 8009de0:	2302      	movs	r3, #2
 8009de2:	673b      	str	r3, [r7, #112]	; 0x70

	/** Perform the FPGA CS2 memory initialization sequence */
	SRAM_WRITE.Instance = FMC_NORSRAM_DEVICE;
 8009de4:	4b86      	ldr	r3, [pc, #536]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009de6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009dea:	601a      	str	r2, [r3, #0]
	SRAM_WRITE.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8009dec:	4b84      	ldr	r3, [pc, #528]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009dee:	4a83      	ldr	r2, [pc, #524]	; (8009ffc <FPGA_IPM_init+0x2b8>)
 8009df0:	605a      	str	r2, [r3, #4]

	/* SRAM_WRITE.Init */
	SRAM_WRITE.Init.NSBank = FMC_NORSRAM_BANK2;
 8009df2:	4b83      	ldr	r3, [pc, #524]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009df4:	2202      	movs	r2, #2
 8009df6:	609a      	str	r2, [r3, #8]
	SRAM_WRITE.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8009df8:	4b81      	ldr	r3, [pc, #516]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	60da      	str	r2, [r3, #12]
	SRAM_WRITE.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8009dfe:	4b80      	ldr	r3, [pc, #512]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	611a      	str	r2, [r3, #16]
	SRAM_WRITE.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009e04:	4b7e      	ldr	r3, [pc, #504]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e06:	2210      	movs	r2, #16
 8009e08:	615a      	str	r2, [r3, #20]
	SRAM_WRITE.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8009e0a:	4b7d      	ldr	r3, [pc, #500]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	619a      	str	r2, [r3, #24]
	SRAM_WRITE.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8009e10:	4b7b      	ldr	r3, [pc, #492]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	61da      	str	r2, [r3, #28]
	SRAM_WRITE.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 8009e16:	4b7a      	ldr	r3, [pc, #488]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	621a      	str	r2, [r3, #32]
	SRAM_WRITE.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8009e1c:	4b78      	ldr	r3, [pc, #480]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	625a      	str	r2, [r3, #36]	; 0x24
	SRAM_WRITE.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8009e22:	4b77      	ldr	r3, [pc, #476]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	629a      	str	r2, [r3, #40]	; 0x28
	SRAM_WRITE.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8009e28:	4b75      	ldr	r3, [pc, #468]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	62da      	str	r2, [r3, #44]	; 0x2c
	SRAM_WRITE.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 8009e2e:	4b74      	ldr	r3, [pc, #464]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e34:	631a      	str	r2, [r3, #48]	; 0x30
	SRAM_WRITE.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009e36:	4b72      	ldr	r3, [pc, #456]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	635a      	str	r2, [r3, #52]	; 0x34
	SRAM_WRITE.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8009e3c:	4b70      	ldr	r3, [pc, #448]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	639a      	str	r2, [r3, #56]	; 0x38
	SRAM_WRITE.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009e42:	4b6f      	ldr	r3, [pc, #444]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	63da      	str	r2, [r3, #60]	; 0x3c

	// ExtTiming (Write)
	ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	65bb      	str	r3, [r7, #88]	; 0x58
	ExtTiming.AddressSetupTime = 6;
 8009e4c:	2306      	movs	r3, #6
 8009e4e:	643b      	str	r3, [r7, #64]	; 0x40
	ExtTiming.AddressHoldTime = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	647b      	str	r3, [r7, #68]	; 0x44
	ExtTiming.DataSetupTime = 6;
 8009e54:	2306      	movs	r3, #6
 8009e56:	64bb      	str	r3, [r7, #72]	; 0x48
	ExtTiming.BusTurnAroundDuration = 0; // don't care
 8009e58:	2300      	movs	r3, #0
 8009e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	ExtTiming.CLKDivision = 10; // don't care
 8009e5c:	230a      	movs	r3, #10
 8009e5e:	653b      	str	r3, [r7, #80]	; 0x50
	ExtTiming.DataLatency = 2; // don't care
 8009e60:	2302      	movs	r3, #2
 8009e62:	657b      	str	r3, [r7, #84]	; 0x54


	HAL_SRAM_Init(&SRAM_READ, &Timing, &ExtTiming);
 8009e64:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009e68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4862      	ldr	r0, [pc, #392]	; (8009ff8 <FPGA_IPM_init+0x2b4>)
 8009e70:	f7fb fbab 	bl	80055ca <HAL_SRAM_Init>
	HAL_SRAM_Init(&SRAM_WRITE, &Timing, &ExtTiming);
 8009e74:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009e78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4860      	ldr	r0, [pc, #384]	; (800a000 <FPGA_IPM_init+0x2bc>)
 8009e80:	f7fb fba3 	bl	80055ca <HAL_SRAM_Init>

	// INIT GPIO
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__FMC_CLK_ENABLE();
 8009e84:	2300      	movs	r3, #0
 8009e86:	61fb      	str	r3, [r7, #28]
 8009e88:	4b5e      	ldr	r3, [pc, #376]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8c:	4a5d      	ldr	r2, [pc, #372]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009e8e:	f043 0301 	orr.w	r3, r3, #1
 8009e92:	6393      	str	r3, [r2, #56]	; 0x38
 8009e94:	4b5b      	ldr	r3, [pc, #364]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	61fb      	str	r3, [r7, #28]
 8009e9e:	69fb      	ldr	r3, [r7, #28]

	__GPIOF_CLK_ENABLE();
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61bb      	str	r3, [r7, #24]
 8009ea4:	4b57      	ldr	r3, [pc, #348]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea8:	4a56      	ldr	r2, [pc, #344]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009eaa:	f043 0320 	orr.w	r3, r3, #32
 8009eae:	6313      	str	r3, [r2, #48]	; 0x30
 8009eb0:	4b54      	ldr	r3, [pc, #336]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb4:	f003 0320 	and.w	r3, r3, #32
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	69bb      	ldr	r3, [r7, #24]
	__GPIOE_CLK_ENABLE();
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	4b50      	ldr	r3, [pc, #320]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec4:	4a4f      	ldr	r2, [pc, #316]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009ec6:	f043 0310 	orr.w	r3, r3, #16
 8009eca:	6313      	str	r3, [r2, #48]	; 0x30
 8009ecc:	4b4d      	ldr	r3, [pc, #308]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	f003 0310 	and.w	r3, r3, #16
 8009ed4:	617b      	str	r3, [r7, #20]
 8009ed6:	697b      	ldr	r3, [r7, #20]
	__GPIOD_CLK_ENABLE();
 8009ed8:	2300      	movs	r3, #0
 8009eda:	613b      	str	r3, [r7, #16]
 8009edc:	4b49      	ldr	r3, [pc, #292]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	4a48      	ldr	r2, [pc, #288]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009ee2:	f043 0308 	orr.w	r3, r3, #8
 8009ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8009ee8:	4b46      	ldr	r3, [pc, #280]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	613b      	str	r3, [r7, #16]
 8009ef2:	693b      	ldr	r3, [r7, #16]
	__GPIOG_CLK_ENABLE();
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	4b42      	ldr	r3, [pc, #264]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efc:	4a41      	ldr	r2, [pc, #260]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f02:	6313      	str	r3, [r2, #48]	; 0x30
 8009f04:	4b3f      	ldr	r3, [pc, #252]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
	PD5   ------> FMC_NWE
	PD7   ------> FMC_NE1
	PG9   ------> FMC_NE2
	*/

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8009f10:	233f      	movs	r3, #63	; 0x3f
 8009f12:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f14:	2302      	movs	r3, #2
 8009f16:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f20:	230c      	movs	r3, #12
 8009f22:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4837      	ldr	r0, [pc, #220]	; (800a008 <FPGA_IPM_init+0x2c4>)
 8009f2c:	f7f7 fb4a 	bl	80015c4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8009f30:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f36:	2302      	movs	r3, #2
 8009f38:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8009f3e:	2302      	movs	r3, #2
 8009f40:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f42:	230c      	movs	r3, #12
 8009f44:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	482f      	ldr	r0, [pc, #188]	; (800a00c <FPGA_IPM_init+0x2c8>)
 8009f4e:	f7f7 fb39 	bl	80015c4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 8009f52:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8009f56:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f58:	2302      	movs	r3, #2
 8009f5a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8009f60:	2302      	movs	r3, #2
 8009f62:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f64:	230c      	movs	r3, #12
 8009f66:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4828      	ldr	r0, [pc, #160]	; (800a010 <FPGA_IPM_init+0x2cc>)
 8009f70:	f7f7 fb28 	bl	80015c4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8009f82:	2302      	movs	r3, #2
 8009f84:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f86:	230c      	movs	r3, #12
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4820      	ldr	r0, [pc, #128]	; (800a014 <FPGA_IPM_init+0x2d0>)
 8009f92:	f7f7 fb17 	bl	80015c4 <HAL_GPIO_Init>

	// CONFIGURE RESET ---------------------------------------------------------------

	/* Set pin PG2 as reset for the FPGA */
	GPIO_InitStruct.Pin = FPGA_RST_Pin;
 8009f96:	2304      	movs	r3, #4
 8009f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009faa:	4619      	mov	r1, r3
 8009fac:	4819      	ldr	r0, [pc, #100]	; (800a014 <FPGA_IPM_init+0x2d0>)
 8009fae:	f7f7 fb09 	bl	80015c4 <HAL_GPIO_Init>

	  
	// CONFIGURE OUTPUT CLOCK --------------------------------------------------------

	/* Enable clock for GPIOA */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	4b13      	ldr	r3, [pc, #76]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fba:	4a12      	ldr	r2, [pc, #72]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009fbc:	f043 0301 	orr.w	r3, r3, #1
 8009fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	60bb      	str	r3, [r7, #8]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
	/* Enable clock for SYSCFG */
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fce:	2300      	movs	r3, #0
 8009fd0:	607b      	str	r3, [r7, #4]
 8009fd2:	4b0c      	ldr	r3, [pc, #48]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd6:	4a0b      	ldr	r2, [pc, #44]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8009fde:	4b09      	ldr	r3, [pc, #36]	; (800a004 <FPGA_IPM_init+0x2c0>)
 8009fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fe6:	607b      	str	r3, [r7, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]

	/* Set pin PA8 as clock for the FPGA */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e011      	b.n	800a018 <FPGA_IPM_init+0x2d4>
 8009ff4:	20000330 	.word	0x20000330
 8009ff8:	20000338 	.word	0x20000338
 8009ffc:	a0000104 	.word	0xa0000104
 800a000:	20000388 	.word	0x20000388
 800a004:	40023800 	.word	0x40023800
 800a008:	40021400 	.word	0x40021400
 800a00c:	40021000 	.word	0x40021000
 800a010:	40020c00 	.word	0x40020c00
 800a014:	40021800 	.word	0x40021800
 800a018:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800a01e:	2302      	movs	r3, #2
 800a020:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a022:	2300      	movs	r3, #0
 800a024:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a02a:	4619      	mov	r1, r3
 800a02c:	4823      	ldr	r0, [pc, #140]	; (800a0bc <FPGA_IPM_init+0x378>)
 800a02e:	f7f7 fac9 	bl	80015c4 <HAL_GPIO_Init>
	  
	/* Set MCO1 output = PLLCLK with prescaler 3 = 180MHz / 3 = 60MHz */
	__HAL_RCC_MCO1_CONFIG(RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_3);
 800a032:	4b23      	ldr	r3, [pc, #140]	; (800a0c0 <FPGA_IPM_init+0x37c>)
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800a03a:	4a21      	ldr	r2, [pc, #132]	; (800a0c0 <FPGA_IPM_init+0x37c>)
 800a03c:	f043 63ac 	orr.w	r3, r3, #90177536	; 0x5600000
 800a040:	6093      	str	r3, [r2, #8]

	// INIT SEMAPHORE
	sem = 1;
 800a042:	4b20      	ldr	r3, [pc, #128]	; (800a0c4 <FPGA_IPM_init+0x380>)
 800a044:	2201      	movs	r2, #1
 800a046:	601a      	str	r2, [r3, #0]
	/* Set variables used */
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;
	  
	/* Set pin PA9 as interrupt line from the FPGA */
	GPIO_InitStruct.Pin = FPGA_INTN_Pin;
 800a048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a04c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a04e:	2300      	movs	r3, #0
 800a050:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a052:	2300      	movs	r3, #0
 800a054:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800a056:	2302      	movs	r3, #2
 800a058:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(FPGA_INTN_GPIO_Port, &GPIO_InitStruct);
 800a05a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a05e:	4619      	mov	r1, r3
 800a060:	4816      	ldr	r0, [pc, #88]	; (800a0bc <FPGA_IPM_init+0x378>)
 800a062:	f7f7 faaf 	bl	80015c4 <HAL_GPIO_Init>
	  
	/* Tell system that you will use PA9 for EXTI_Line9 */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource9);
 800a066:	2109      	movs	r1, #9
 800a068:	2000      	movs	r0, #0
 800a06a:	f000 fedb 	bl	800ae24 <SYSCFG_EXTILineConfig>
	  
	/* PA9 is connected to EXTI_Line9 */
	EXTI_InitStruct.EXTI_Line = EXTI_Line9;
 800a06e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
	/* Enable interrupt */
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	/* Interrupt mode */
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800a07a:	2300      	movs	r3, #0
 800a07c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	/* Triggers on rising edge */
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 800a080:	2308      	movs	r3, #8
 800a082:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	/* Add to EXTI */
	EXTI_Init(&EXTI_InitStruct);
 800a086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fdf0 	bl	800ac70 <EXTI_Init>
	  
	/* Add IRQ vector to NVIC */
	/* PA9 is connected to EXTI_Line9, which has EXTI9_5_IRQn vector */
	NVIC_InitStruct.NVIC_IRQChannel = EXTI9_5_IRQn;
 800a090:	2317      	movs	r3, #23
 800a092:	f887 3020 	strb.w	r3, [r7, #32]
	/* Set priority */
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 800a096:	2300      	movs	r3, #0
 800a098:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* Set sub priority */
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 800a09c:	2301      	movs	r3, #1
 800a09e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	/* Enable interrupt */
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Add to NVIC */
	NVIC_Init(&NVIC_InitStruct);
 800a0a8:	f107 0320 	add.w	r3, r7, #32
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 faeb 	bl	800a688 <NVIC_Init>
	  
	  
	return 0;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3778      	adds	r7, #120	; 0x78
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40020000 	.word	0x40020000
 800a0c0:	40023800 	.word	0x40023800
 800a0c4:	20000334 	.word	0x20000334

0800a0c8 <readRow0>:
  HAL_SRAM_Write_16b(&SRAM_WRITE, addr, &newRow0, 1);
  row0 = newRow0;
}


static void readRow0() {
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
	uint32_t* addr = FPGA_IPM_SRAM_BASE_ADDR;
 800a0ce:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800a0d2:	607b      	str	r3, [r7, #4]
	HAL_SRAM_Read_16b(&SRAM_READ, addr, &row0, 1);
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	4a04      	ldr	r2, [pc, #16]	; (800a0e8 <readRow0+0x20>)
 800a0d8:	6879      	ldr	r1, [r7, #4]
 800a0da:	4804      	ldr	r0, [pc, #16]	; (800a0ec <readRow0+0x24>)
 800a0dc:	f7fb fac3 	bl	8005666 <HAL_SRAM_Read_16b>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	2000032e 	.word	0x2000032e
 800a0ec:	20000338 	.word	0x20000338

0800a0f0 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
	/* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line9) != RESET) {
 800a0f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a0f8:	f000 fe2c 	bl	800ad54 <EXTI_GetITStatus>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d006      	beq.n	800a110 <EXTI9_5_IRQHandler+0x20>
        /* Do your stuff when PA9 is changed */
        /* switch among different cores and call the specific ISR for everyone of them */
    	readRow0();
 800a102:	f7ff ffe1 	bl	800a0c8 <readRow0>
    	switch(row0) {
    		case 1:
    			// insert here code for IP #1
    		default:
    			break;
 800a106:	bf00      	nop
    	}
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line9);
 800a108:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a10c:	f000 fe3c 	bl	800ad88 <EXTI_ClearITPendingBit>
    }
}
 800a110:	bf00      	nop
 800a112:	bd80      	pop	{r7, pc}

0800a114 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800a11a:	4b1a      	ldr	r3, [pc, #104]	; (800a184 <MX_ADC1_Init+0x70>)
 800a11c:	4a1a      	ldr	r2, [pc, #104]	; (800a188 <MX_ADC1_Init+0x74>)
 800a11e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;
 800a120:	4b18      	ldr	r3, [pc, #96]	; (800a184 <MX_ADC1_Init+0x70>)
 800a122:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a126:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION12b;
 800a128:	4b16      	ldr	r3, [pc, #88]	; (800a184 <MX_ADC1_Init+0x70>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800a12e:	4b15      	ldr	r3, [pc, #84]	; (800a184 <MX_ADC1_Init+0x70>)
 800a130:	2200      	movs	r2, #0
 800a132:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a134:	4b13      	ldr	r3, [pc, #76]	; (800a184 <MX_ADC1_Init+0x70>)
 800a136:	2200      	movs	r2, #0
 800a138:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a13a:	4b12      	ldr	r3, [pc, #72]	; (800a184 <MX_ADC1_Init+0x70>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a140:	4b10      	ldr	r3, [pc, #64]	; (800a184 <MX_ADC1_Init+0x70>)
 800a142:	2200      	movs	r2, #0
 800a144:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a146:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <MX_ADC1_Init+0x70>)
 800a148:	2200      	movs	r2, #0
 800a14a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a14c:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <MX_ADC1_Init+0x70>)
 800a14e:	2201      	movs	r2, #1
 800a150:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a152:	4b0c      	ldr	r3, [pc, #48]	; (800a184 <MX_ADC1_Init+0x70>)
 800a154:	2200      	movs	r2, #0
 800a156:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <MX_ADC1_Init+0x70>)
 800a15a:	2201      	movs	r2, #1
 800a15c:	615a      	str	r2, [r3, #20]
  HAL_ADC_Init(&hadc1);
 800a15e:	4809      	ldr	r0, [pc, #36]	; (800a184 <MX_ADC1_Init+0x70>)
 800a160:	f7f6 f8b3 	bl	80002ca <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 800a164:	230c      	movs	r3, #12
 800a166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800a168:	2301      	movs	r3, #1
 800a16a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800a170:	463b      	mov	r3, r7
 800a172:	4619      	mov	r1, r3
 800a174:	4803      	ldr	r0, [pc, #12]	; (800a184 <MX_ADC1_Init+0x70>)
 800a176:	f7f6 f8eb 	bl	8000350 <HAL_ADC_ConfigChannel>

}
 800a17a:	bf00      	nop
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	2000045c 	.word	0x2000045c
 800a188:	40012000 	.word	0x40012000

0800a18c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a10      	ldr	r2, [pc, #64]	; (800a1dc <HAL_ADC_MspInit+0x50>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d119      	bne.n	800a1d2 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60bb      	str	r3, [r7, #8]
 800a1a2:	4b0f      	ldr	r3, [pc, #60]	; (800a1e0 <HAL_ADC_MspInit+0x54>)
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	4a0e      	ldr	r2, [pc, #56]	; (800a1e0 <HAL_ADC_MspInit+0x54>)
 800a1a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a1ae:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <HAL_ADC_MspInit+0x54>)
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b6:	60bb      	str	r3, [r7, #8]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a1ba:	2304      	movs	r3, #4
 800a1bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1c6:	f107 030c 	add.w	r3, r7, #12
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4805      	ldr	r0, [pc, #20]	; (800a1e4 <HAL_ADC_MspInit+0x58>)
 800a1ce:	f7f7 f9f9 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a1d2:	bf00      	nop
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	40012000 	.word	0x40012000
 800a1e0:	40023800 	.word	0x40023800
 800a1e4:	40020800 	.word	0x40020800

0800a1e8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800a1ec:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <MX_CRC_Init+0x14>)
 800a1ee:	4a04      	ldr	r2, [pc, #16]	; (800a200 <MX_CRC_Init+0x18>)
 800a1f0:	601a      	str	r2, [r3, #0]
  HAL_CRC_Init(&hcrc);
 800a1f2:	4802      	ldr	r0, [pc, #8]	; (800a1fc <MX_CRC_Init+0x14>)
 800a1f4:	f7f6 fc0b 	bl	8000a0e <HAL_CRC_Init>

}
 800a1f8:	bf00      	nop
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	200004a4 	.word	0x200004a4
 800a200:	40023000 	.word	0x40023000

0800a204 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a0b      	ldr	r2, [pc, #44]	; (800a240 <HAL_CRC_MspInit+0x3c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d10d      	bne.n	800a232 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __CRC_CLK_ENABLE();
 800a216:	2300      	movs	r3, #0
 800a218:	60fb      	str	r3, [r7, #12]
 800a21a:	4b0a      	ldr	r3, [pc, #40]	; (800a244 <HAL_CRC_MspInit+0x40>)
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	4a09      	ldr	r2, [pc, #36]	; (800a244 <HAL_CRC_MspInit+0x40>)
 800a220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a224:	6313      	str	r3, [r2, #48]	; 0x30
 800a226:	4b07      	ldr	r3, [pc, #28]	; (800a244 <HAL_CRC_MspInit+0x40>)
 800a228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800a232:	bf00      	nop
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	40023000 	.word	0x40023000
 800a244:	40023800 	.word	0x40023800

0800a248 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA2_CLK_ENABLE();
 800a24e:	2300      	movs	r3, #0
 800a250:	607b      	str	r3, [r7, #4]
 800a252:	4b10      	ldr	r3, [pc, #64]	; (800a294 <MX_DMA_Init+0x4c>)
 800a254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a256:	4a0f      	ldr	r2, [pc, #60]	; (800a294 <MX_DMA_Init+0x4c>)
 800a258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a25c:	6313      	str	r3, [r2, #48]	; 0x30
 800a25e:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <MX_DMA_Init+0x4c>)
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a266:	607b      	str	r3, [r7, #4]
 800a268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800a26a:	2200      	movs	r2, #0
 800a26c:	2106      	movs	r1, #6
 800a26e:	203b      	movs	r0, #59	; 0x3b
 800a270:	f7f6 fb6d 	bl	800094e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800a274:	203b      	movs	r0, #59	; 0x3b
 800a276:	f7f6 fb86 	bl	8000986 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 800a27a:	2200      	movs	r2, #0
 800a27c:	2106      	movs	r1, #6
 800a27e:	2045      	movs	r0, #69	; 0x45
 800a280:	f7f6 fb65 	bl	800094e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800a284:	2045      	movs	r0, #69	; 0x45
 800a286:	f7f6 fb7e 	bl	8000986 <HAL_NVIC_EnableIRQ>

}
 800a28a:	bf00      	nop
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	40023800 	.word	0x40023800

0800a298 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08e      	sub	sp, #56	; 0x38
 800a29c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOE_CLK_ENABLE();
 800a29e:	2300      	movs	r3, #0
 800a2a0:	623b      	str	r3, [r7, #32]
 800a2a2:	4b75      	ldr	r3, [pc, #468]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a6:	4a74      	ldr	r2, [pc, #464]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2a8:	f043 0310 	orr.w	r3, r3, #16
 800a2ac:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ae:	4b72      	ldr	r3, [pc, #456]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b2:	f003 0310 	and.w	r3, r3, #16
 800a2b6:	623b      	str	r3, [r7, #32]
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
  __GPIOB_CLK_ENABLE();
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	61fb      	str	r3, [r7, #28]
 800a2be:	4b6e      	ldr	r3, [pc, #440]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c2:	4a6d      	ldr	r2, [pc, #436]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2c4:	f043 0302 	orr.w	r3, r3, #2
 800a2c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ca:	4b6b      	ldr	r3, [pc, #428]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	61fb      	str	r3, [r7, #28]
 800a2d4:	69fb      	ldr	r3, [r7, #28]
  __GPIOD_CLK_ENABLE();
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61bb      	str	r3, [r7, #24]
 800a2da:	4b67      	ldr	r3, [pc, #412]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2de:	4a66      	ldr	r2, [pc, #408]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2e0:	f043 0308 	orr.w	r3, r3, #8
 800a2e4:	6313      	str	r3, [r2, #48]	; 0x30
 800a2e6:	4b64      	ldr	r3, [pc, #400]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ea:	f003 0308 	and.w	r3, r3, #8
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	69bb      	ldr	r3, [r7, #24]
  __GPIOC_CLK_ENABLE();
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	4b60      	ldr	r3, [pc, #384]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fa:	4a5f      	ldr	r2, [pc, #380]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a2fc:	f043 0304 	orr.w	r3, r3, #4
 800a300:	6313      	str	r3, [r2, #48]	; 0x30
 800a302:	4b5d      	ldr	r3, [pc, #372]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	697b      	ldr	r3, [r7, #20]
  __GPIOA_CLK_ENABLE();
 800a30e:	2300      	movs	r3, #0
 800a310:	613b      	str	r3, [r7, #16]
 800a312:	4b59      	ldr	r3, [pc, #356]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a316:	4a58      	ldr	r2, [pc, #352]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a318:	f043 0301 	orr.w	r3, r3, #1
 800a31c:	6313      	str	r3, [r2, #48]	; 0x30
 800a31e:	4b56      	ldr	r3, [pc, #344]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	613b      	str	r3, [r7, #16]
 800a328:	693b      	ldr	r3, [r7, #16]
  __GPIOF_CLK_ENABLE();
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	4b52      	ldr	r3, [pc, #328]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a332:	4a51      	ldr	r2, [pc, #324]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a334:	f043 0320 	orr.w	r3, r3, #32
 800a338:	6313      	str	r3, [r2, #48]	; 0x30
 800a33a:	4b4f      	ldr	r3, [pc, #316]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33e:	f003 0320 	and.w	r3, r3, #32
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
  __GPIOG_CLK_ENABLE();
 800a346:	2300      	movs	r3, #0
 800a348:	60bb      	str	r3, [r7, #8]
 800a34a:	4b4b      	ldr	r3, [pc, #300]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34e:	4a4a      	ldr	r2, [pc, #296]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a354:	6313      	str	r3, [r2, #48]	; 0x30
 800a356:	4b48      	ldr	r3, [pc, #288]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35e:	60bb      	str	r3, [r7, #8]
 800a360:	68bb      	ldr	r3, [r7, #8]
  __GPIOI_CLK_ENABLE();
 800a362:	2300      	movs	r3, #0
 800a364:	607b      	str	r3, [r7, #4]
 800a366:	4b44      	ldr	r3, [pc, #272]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	4a43      	ldr	r2, [pc, #268]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a36c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a370:	6313      	str	r3, [r2, #48]	; 0x30
 800a372:	4b41      	ldr	r3, [pc, #260]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37a:	607b      	str	r3, [r7, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
  __GPIOH_CLK_ENABLE();
 800a37e:	2300      	movs	r3, #0
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	4b3d      	ldr	r3, [pc, #244]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a386:	4a3c      	ldr	r2, [pc, #240]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38c:	6313      	str	r3, [r2, #48]	; 0x30
 800a38e:	4b3a      	ldr	r3, [pc, #232]	; (800a478 <MX_GPIO_Init+0x1e0>)
 800a390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FPGA_TCK_Pin|FPGA_TDO_Pin|SC_ON_OFF_Pin|SC_RST_Pin 
 800a39a:	2200      	movs	r2, #0
 800a39c:	2177      	movs	r1, #119	; 0x77
 800a39e:	4837      	ldr	r0, [pc, #220]	; (800a47c <MX_GPIO_Init+0x1e4>)
 800a3a0:	f7f7 fad4 	bl	800194c <HAL_GPIO_WritePin>
                          |FPGA_TMS_Pin|FPGA_PROGRAMN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO0_RST_OUT_Pin|FPGA_RST_Pin, GPIO_PIN_RESET);
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	210c      	movs	r1, #12
 800a3a8:	4835      	ldr	r0, [pc, #212]	; (800a480 <MX_GPIO_Init+0x1e8>)
 800a3aa:	f7f7 facf 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = SC_ON_OFF_Pin|SC_RST_Pin;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	482d      	ldr	r0, [pc, #180]	; (800a47c <MX_GPIO_Init+0x1e4>)
 800a3c6:	f7f7 f8fd 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE5 PE4 PE6 */
  GPIO_InitStruct.Pin = FPGA_TCK_Pin|FPGA_TDI_Pin|FPGA_TMS_Pin|FPGA_PROGRAMN_Pin;
 800a3ca:	2378      	movs	r3, #120	; 0x78
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a3da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4826      	ldr	r0, [pc, #152]	; (800a47c <MX_GPIO_Init+0x1e4>)
 800a3e2:	f7f7 f8ef 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = FPGA_TDO_Pin;
 800a3e6:	2304      	movs	r3, #4
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FPGA_TDI_GPIO_Port, &GPIO_InitStruct);
 800a3f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4820      	ldr	r0, [pc, #128]	; (800a47c <MX_GPIO_Init+0x1e4>)
 800a3fa:	f7f7 f8e3 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = FPGA_INTN_Pin;
 800a3fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a404:	2300      	movs	r3, #0
 800a406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a408:	2300      	movs	r3, #0
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FPGA_INTN_GPIO_Port, &GPIO_InitStruct);
 800a40c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a410:	4619      	mov	r1, r3
 800a412:	481c      	ldr	r0, [pc, #112]	; (800a484 <MX_GPIO_Init+0x1ec>)
 800a414:	f7f7 f8d6 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a41e:	2302      	movs	r3, #2
 800a420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a422:	2300      	movs	r3, #0
 800a424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800a426:	2300      	movs	r3, #0
 800a428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a42a:	2300      	movs	r3, #0
 800a42c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a42e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a432:	4619      	mov	r1, r3
 800a434:	4813      	ldr	r0, [pc, #76]	; (800a484 <MX_GPIO_Init+0x1ec>)
 800a436:	f7f7 f8c5 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO1_INT_N_OUT_Pin;
 800a43a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a440:	2300      	movs	r3, #0
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a444:	2300      	movs	r3, #0
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO1_INT_N_OUT_GPIO_Port, &GPIO_InitStruct);
 800a448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a44c:	4619      	mov	r1, r3
 800a44e:	480e      	ldr	r0, [pc, #56]	; (800a488 <MX_GPIO_Init+0x1f0>)
 800a450:	f7f7 f8b8 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO0_RST_OUT_Pin|FPGA_RST_Pin;
 800a454:	230c      	movs	r3, #12
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a458:	2301      	movs	r3, #1
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800a460:	2300      	movs	r3, #0
 800a462:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a468:	4619      	mov	r1, r3
 800a46a:	4805      	ldr	r0, [pc, #20]	; (800a480 <MX_GPIO_Init+0x1e8>)
 800a46c:	f7f7 f8aa 	bl	80015c4 <HAL_GPIO_Init>



}
 800a470:	bf00      	nop
 800a472:	3738      	adds	r7, #56	; 0x38
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	40023800 	.word	0x40023800
 800a47c:	40021000 	.word	0x40021000
 800a480:	40021800 	.word	0x40021800
 800a484:	40020000 	.word	0x40020000
 800a488:	40021400 	.word	0x40021400

0800a48c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800a490:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a492:	4a11      	ldr	r2, [pc, #68]	; (800a4d8 <MX_I2C2_Init+0x4c>)
 800a494:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800a496:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a498:	4a10      	ldr	r2, [pc, #64]	; (800a4dc <MX_I2C2_Init+0x50>)
 800a49a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a49c:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a4a8:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a4aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a4ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800a4b0:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a4b6:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800a4bc:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800a4c2:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c2);
 800a4c8:	4802      	ldr	r0, [pc, #8]	; (800a4d4 <MX_I2C2_Init+0x48>)
 800a4ca:	f7f7 fa59 	bl	8001980 <HAL_I2C_Init>

}
 800a4ce:	bf00      	nop
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200004ac 	.word	0x200004ac
 800a4d8:	40005800 	.word	0x40005800
 800a4dc:	000186a0 	.word	0x000186a0

0800a4e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C2)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a12      	ldr	r2, [pc, #72]	; (800a538 <HAL_I2C_MspInit+0x58>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d11d      	bne.n	800a52e <HAL_I2C_MspInit+0x4e>
  
    /**I2C2 GPIO Configuration    
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a4f2:	2330      	movs	r3, #48	; 0x30
 800a4f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a4f6:	2312      	movs	r3, #18
 800a4f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a4fe:	2303      	movs	r3, #3
 800a500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a502:	2304      	movs	r3, #4
 800a504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a506:	f107 030c 	add.w	r3, r7, #12
 800a50a:	4619      	mov	r1, r3
 800a50c:	480b      	ldr	r0, [pc, #44]	; (800a53c <HAL_I2C_MspInit+0x5c>)
 800a50e:	f7f7 f859 	bl	80015c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __I2C2_CLK_ENABLE();
 800a512:	2300      	movs	r3, #0
 800a514:	60bb      	str	r3, [r7, #8]
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <HAL_I2C_MspInit+0x60>)
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	4a09      	ldr	r2, [pc, #36]	; (800a540 <HAL_I2C_MspInit+0x60>)
 800a51c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a520:	6413      	str	r3, [r2, #64]	; 0x40
 800a522:	4b07      	ldr	r3, [pc, #28]	; (800a540 <HAL_I2C_MspInit+0x60>)
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a52a:	60bb      	str	r3, [r7, #8]
 800a52c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a52e:	bf00      	nop
 800a530:	3720      	adds	r7, #32
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	40005800 	.word	0x40005800
 800a53c:	40021c00 	.word	0x40021c00
 800a540:	40023800 	.word	0x40023800

0800a544 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a548:	f7f5 fe50 	bl	80001ec <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800a54c:	f000 f830 	bl	800a5b0 <SystemClock_Config>
  //__DSB();
  //__enable_irq();
	
	
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800a550:	f7ff fea2 	bl	800a298 <MX_GPIO_Init>
	MX_DMA_Init();
 800a554:	f7ff fe78 	bl	800a248 <MX_DMA_Init>
	MX_ADC1_Init();
 800a558:	f7ff fddc 	bl	800a114 <MX_ADC1_Init>
	//MX_FMC_Init();

	MX_I2C2_Init();
 800a55c:	f7ff ff96 	bl	800a48c <MX_I2C2_Init>
	MX_SDIO_SD_Init();
 800a560:	f000 f924 	bl	800a7ac <MX_SDIO_SD_Init>
	MX_SPI5_Init();
 800a564:	f000 fb16 	bl	800ab94 <MX_SPI5_Init>
	MX_TIM4_Init();
 800a568:	f000 fcd4 	bl	800af14 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 800a56c:	f000 fd4e 	bl	800b00c <MX_USART1_UART_Init>
	MX_USART6_SMARTCARD_Init();
 800a570:	f000 fd72 	bl	800b058 <MX_USART6_SMARTCARD_Init>
	MX_USB_DEVICE_Init();
 800a574:	f000 fe3e 	bl	800b1f4 <MX_USB_DEVICE_Init>
	MX_CRC_Init();
 800a578:	f7ff fe36 	bl	800a1e8 <MX_CRC_Init>
	MX_RNG_Init();
 800a57c:	f000 f8e6 	bl	800a74c <MX_RNG_Init>

	//FPGA code.
	FPGA_IPM_init();
 800a580:	f7ff fbe0 	bl	8009d44 <FPGA_IPM_init>
	B5_FPGA_Programming();
 800a584:	f008 fa60 	bl	8012a48 <B5_FPGA_Programming>
	HAL_GPIO_WritePin(GPIOG, FPGA_RST_Pin, GPIO_PIN_SET);
 800a588:	2201      	movs	r2, #1
 800a58a:	2104      	movs	r1, #4
 800a58c:	4807      	ldr	r0, [pc, #28]	; (800a5ac <main+0x68>)
 800a58e:	f7f7 f9dd 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, FPGA_RST_Pin, GPIO_PIN_RESET);
 800a592:	2200      	movs	r2, #0
 800a594:	2104      	movs	r1, #4
 800a596:	4805      	ldr	r0, [pc, #20]	; (800a5ac <main+0x68>)
 800a598:	f7f7 f9d8 	bl	800194c <HAL_GPIO_WritePin>
	/* USER CODE BEGIN */
	device_init();
 800a59c:	f009 fae2 	bl	8013b64 <device_init>

	device_loop();
 800a5a0:	f009 faea 	bl	8013b78 <device_loop>
	/* USER CODE END  */

	return 0;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	40021800 	.word	0x40021800

0800a5b0 <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b094      	sub	sp, #80	; 0x50
 800a5b4:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	__PWR_CLK_ENABLE();
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60bb      	str	r3, [r7, #8]
 800a5ba:	4b30      	ldr	r3, [pc, #192]	; (800a67c <SystemClock_Config+0xcc>)
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	4a2f      	ldr	r2, [pc, #188]	; (800a67c <SystemClock_Config+0xcc>)
 800a5c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a5c6:	4b2d      	ldr	r3, [pc, #180]	; (800a67c <SystemClock_Config+0xcc>)
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5ce:	60bb      	str	r3, [r7, #8]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	607b      	str	r3, [r7, #4]
 800a5d6:	4b2a      	ldr	r3, [pc, #168]	; (800a680 <SystemClock_Config+0xd0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a29      	ldr	r2, [pc, #164]	; (800a680 <SystemClock_Config+0xd0>)
 800a5dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	4b27      	ldr	r3, [pc, #156]	; (800a680 <SystemClock_Config+0xd0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5ea:	607b      	str	r3, [r7, #4]
 800a5ec:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a5fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800a600:	2310      	movs	r3, #16
 800a602:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800a604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a608:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a60a:	2302      	movs	r3, #2
 800a60c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800a60e:	2307      	movs	r3, #7
 800a610:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a612:	f107 0320 	add.w	r3, r7, #32
 800a616:	4618      	mov	r0, r3
 800a618:	f7f8 fadc 	bl	8002bd4 <HAL_RCC_OscConfig>

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a61c:	230f      	movs	r3, #15
 800a61e:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a620:	2302      	movs	r3, #2
 800a622:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a624:	2300      	movs	r3, #0
 800a626:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a62c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a62e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a632:	61fb      	str	r3, [r7, #28]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800a634:	f107 030c 	add.w	r3, r7, #12
 800a638:	2105      	movs	r1, #5
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f8 fcde 	bl	8002ffc <HAL_RCC_ClockConfig>

	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_2);
 800a640:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a644:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 800a648:	2000      	movs	r0, #0
 800a64a:	f7f8 fdcd 	bl	80031e8 <HAL_RCC_MCOConfig>

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a64e:	f7f8 feb3 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 800a652:	4603      	mov	r3, r0
 800a654:	4a0b      	ldr	r2, [pc, #44]	; (800a684 <SystemClock_Config+0xd4>)
 800a656:	fba2 2303 	umull	r2, r3, r2, r3
 800a65a:	099b      	lsrs	r3, r3, #6
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7f6 f9a0 	bl	80009a2 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a662:	2004      	movs	r0, #4
 800a664:	f7f6 f9aa 	bl	80009bc <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a668:	2200      	movs	r2, #0
 800a66a:	2100      	movs	r1, #0
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	f7f6 f96d 	bl	800094e <HAL_NVIC_SetPriority>
}
 800a674:	bf00      	nop
 800a676:	3750      	adds	r7, #80	; 0x50
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	40023800 	.word	0x40023800
 800a680:	40007000 	.word	0x40007000
 800a684:	10624dd3 	.word	0x10624dd3

0800a688 <NVIC_Init>:
 * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
 *         the configuration information for the specified NVIC peripheral.
 * @retval None
 */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
    uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800a690:	2300      	movs	r3, #0
 800a692:	73fb      	strb	r3, [r7, #15]
 800a694:	2300      	movs	r3, #0
 800a696:	73bb      	strb	r3, [r7, #14]
 800a698:	230f      	movs	r3, #15
 800a69a:	737b      	strb	r3, [r7, #13]
    /* Check the parameters */
    assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
    assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
    if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	78db      	ldrb	r3, [r3, #3]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d039      	beq.n	800a718 <NVIC_Init+0x90>
    {
        /* Compute the Corresponding IRQ Priority --------------------------------*/
        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800a6a4:	4b27      	ldr	r3, [pc, #156]	; (800a744 <NVIC_Init+0xbc>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	43db      	mvns	r3, r3
 800a6aa:	0a1b      	lsrs	r3, r3, #8
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	73fb      	strb	r3, [r7, #15]
        tmppre = (0x4 - tmppriority);
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	f1c3 0304 	rsb	r3, r3, #4
 800a6ba:	73bb      	strb	r3, [r7, #14]
        tmpsub = tmpsub >> tmppriority;
 800a6bc:	7b7a      	ldrb	r2, [r7, #13]
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	fa42 f303 	asr.w	r3, r2, r3
 800a6c4:	737b      	strb	r3, [r7, #13]
        
        tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	785b      	ldrb	r3, [r3, #1]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d2:	73fb      	strb	r3, [r7, #15]
        tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	789a      	ldrb	r2, [r3, #2]
 800a6d8:	7b7b      	ldrb	r3, [r7, #13]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	73fb      	strb	r3, [r7, #15]
        
        tmppriority = tmppriority << 0x04;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	011b      	lsls	r3, r3, #4
 800a6e8:	73fb      	strb	r3, [r7, #15]
        
        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800a6ea:	4a17      	ldr	r2, [pc, #92]	; (800a748 <NVIC_Init+0xc0>)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	7bfa      	ldrb	r2, [r7, #15]
 800a6f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        
        /* Enable the Selected IRQ Channels --------------------------------------*/
        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
        (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	f003 031f 	and.w	r3, r3, #31
        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800a700:	4911      	ldr	r1, [pc, #68]	; (800a748 <NVIC_Init+0xc0>)
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	7812      	ldrb	r2, [r2, #0]
 800a706:	0952      	lsrs	r2, r2, #5
 800a708:	b2d2      	uxtb	r2, r2
 800a70a:	4610      	mov	r0, r2
        (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800a70c:	2201      	movs	r2, #1
 800a70e:	fa02 f303 	lsl.w	r3, r2, r3
        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800a712:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    {
        /* Disable the Selected IRQ Channels -------------------------------------*/
        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
        (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    }
}
 800a716:	e00f      	b.n	800a738 <NVIC_Init+0xb0>
        (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	f003 031f 	and.w	r3, r3, #31
        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800a720:	4909      	ldr	r1, [pc, #36]	; (800a748 <NVIC_Init+0xc0>)
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	7812      	ldrb	r2, [r2, #0]
 800a726:	0952      	lsrs	r2, r2, #5
 800a728:	b2d2      	uxtb	r2, r2
 800a72a:	4610      	mov	r0, r2
        (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800a72c:	2201      	movs	r2, #1
 800a72e:	409a      	lsls	r2, r3
        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800a730:	f100 0320 	add.w	r3, r0, #32
 800a734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a738:	bf00      	nop
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	e000ed00 	.word	0xe000ed00
 800a748:	e000e100 	.word	0xe000e100

0800a74c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 800a750:	4b03      	ldr	r3, [pc, #12]	; (800a760 <MX_RNG_Init+0x14>)
 800a752:	4a04      	ldr	r2, [pc, #16]	; (800a764 <MX_RNG_Init+0x18>)
 800a754:	601a      	str	r2, [r3, #0]
  HAL_RNG_Init(&hrng);
 800a756:	4802      	ldr	r0, [pc, #8]	; (800a760 <MX_RNG_Init+0x14>)
 800a758:	f7f8 fe9a 	bl	8003490 <HAL_RNG_Init>

}
 800a75c:	bf00      	nop
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	200004f0 	.word	0x200004f0
 800a764:	50060800 	.word	0x50060800

0800a768 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]

  if(hrng->Instance==RNG)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a0b      	ldr	r2, [pc, #44]	; (800a7a4 <HAL_RNG_MspInit+0x3c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d10d      	bne.n	800a796 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __RNG_CLK_ENABLE();
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <HAL_RNG_MspInit+0x40>)
 800a780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a782:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <HAL_RNG_MspInit+0x40>)
 800a784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a788:	6353      	str	r3, [r2, #52]	; 0x34
 800a78a:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <HAL_RNG_MspInit+0x40>)
 800a78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800a796:	bf00      	nop
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	50060800 	.word	0x50060800
 800a7a8:	40023800 	.word	0x40023800

0800a7ac <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800a7b0:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7b2:	4a10      	ldr	r2, [pc, #64]	; (800a7f4 <MX_SDIO_SD_Init+0x48>)
 800a7b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a7b6:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a7bc:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a7c2:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a7c8:	4b09      	ldr	r3, [pc, #36]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a7ce:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a7d4:	4b06      	ldr	r3, [pc, #24]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	619a      	str	r2, [r3, #24]
  HAL_SD_Init(&hsd, &SDCardInfo);
 800a7da:	4907      	ldr	r1, [pc, #28]	; (800a7f8 <MX_SDIO_SD_Init+0x4c>)
 800a7dc:	4804      	ldr	r0, [pc, #16]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7de:	f7f8 fed5 	bl	800358c <HAL_SD_Init>

  HAL_SD_WideBusOperation_Config(&hsd, SDIO_BUS_WIDE_4B);
 800a7e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a7e6:	4802      	ldr	r0, [pc, #8]	; (800a7f0 <MX_SDIO_SD_Init+0x44>)
 800a7e8:	f7f9 fd68 	bl	80042bc <HAL_SD_WideBusOperation_Config>

}
 800a7ec:	bf00      	nop
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20000608 	.word	0x20000608
 800a7f4:	40012c00 	.word	0x40012c00
 800a7f8:	20000558 	.word	0x20000558

0800a7fc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a56      	ldr	r2, [pc, #344]	; (800a964 <HAL_SD_MspInit+0x168>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	f040 80a5 	bne.w	800a95a <HAL_SD_MspInit+0x15e>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __SDIO_CLK_ENABLE();
 800a810:	2300      	movs	r3, #0
 800a812:	60bb      	str	r3, [r7, #8]
 800a814:	4b54      	ldr	r3, [pc, #336]	; (800a968 <HAL_SD_MspInit+0x16c>)
 800a816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a818:	4a53      	ldr	r2, [pc, #332]	; (800a968 <HAL_SD_MspInit+0x16c>)
 800a81a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a81e:	6453      	str	r3, [r2, #68]	; 0x44
 800a820:	4b51      	ldr	r3, [pc, #324]	; (800a968 <HAL_SD_MspInit+0x16c>)
 800a822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a828:	60bb      	str	r3, [r7, #8]
 800a82a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9 
 800a82c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800a830:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a832:	2302      	movs	r3, #2
 800a834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a83a:	2303      	movs	r3, #3
 800a83c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a83e:	230c      	movs	r3, #12
 800a840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a842:	f107 030c 	add.w	r3, r7, #12
 800a846:	4619      	mov	r1, r3
 800a848:	4848      	ldr	r0, [pc, #288]	; (800a96c <HAL_SD_MspInit+0x170>)
 800a84a:	f7f6 febb 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a84e:	2304      	movs	r3, #4
 800a850:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a852:	2302      	movs	r3, #2
 800a854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a85a:	2303      	movs	r3, #3
 800a85c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a85e:	230c      	movs	r3, #12
 800a860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a862:	f107 030c 	add.w	r3, r7, #12
 800a866:	4619      	mov	r1, r3
 800a868:	4841      	ldr	r0, [pc, #260]	; (800a970 <HAL_SD_MspInit+0x174>)
 800a86a:	f7f6 feab 	bl	80015c4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800a86e:	4b41      	ldr	r3, [pc, #260]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a870:	4a41      	ldr	r2, [pc, #260]	; (800a978 <HAL_SD_MspInit+0x17c>)
 800a872:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800a874:	4b3f      	ldr	r3, [pc, #252]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a87a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a87c:	4b3d      	ldr	r3, [pc, #244]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a87e:	2200      	movs	r2, #0
 800a880:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a882:	4b3c      	ldr	r3, [pc, #240]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a884:	2200      	movs	r2, #0
 800a886:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a888:	4b3a      	ldr	r3, [pc, #232]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a88a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a88e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a890:	4b38      	ldr	r3, [pc, #224]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a896:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a898:	4b36      	ldr	r3, [pc, #216]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a89a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a89e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800a8a0:	4b34      	ldr	r3, [pc, #208]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a8a6:	4b33      	ldr	r3, [pc, #204]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a8ac:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a8ae:	4b31      	ldr	r3, [pc, #196]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8b0:	2204      	movs	r2, #4
 800a8b2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a8b4:	4b2f      	ldr	r3, [pc, #188]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8b6:	2203      	movs	r2, #3
 800a8b8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800a8ba:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a8c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a8c2:	4b2c      	ldr	r3, [pc, #176]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a8c8:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_DMA_Init(&hdma_sdio_rx);
 800a8ca:	482a      	ldr	r0, [pc, #168]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8cc:	f7f6 f8be 	bl	8000a4c <HAL_DMA_Init>

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a28      	ldr	r2, [pc, #160]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8d4:	659a      	str	r2, [r3, #88]	; 0x58
 800a8d6:	4a27      	ldr	r2, [pc, #156]	; (800a974 <HAL_SD_MspInit+0x178>)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6393      	str	r3, [r2, #56]	; 0x38

    hdma_sdio_tx.Instance = DMA2_Stream6;
 800a8dc:	4b27      	ldr	r3, [pc, #156]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a8de:	4a28      	ldr	r2, [pc, #160]	; (800a980 <HAL_SD_MspInit+0x184>)
 800a8e0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800a8e2:	4b26      	ldr	r3, [pc, #152]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a8e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8e8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a8ea:	4b24      	ldr	r3, [pc, #144]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a8ec:	2240      	movs	r2, #64	; 0x40
 800a8ee:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a8f0:	4b22      	ldr	r3, [pc, #136]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a8f6:	4b21      	ldr	r3, [pc, #132]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a8f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a8fc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a8fe:	4b1f      	ldr	r3, [pc, #124]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a904:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a906:	4b1d      	ldr	r3, [pc, #116]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a908:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a90c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800a90e:	4b1b      	ldr	r3, [pc, #108]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a910:	2220      	movs	r2, #32
 800a912:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a914:	4b19      	ldr	r3, [pc, #100]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a916:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a91a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a91c:	4b17      	ldr	r3, [pc, #92]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a91e:	2204      	movs	r2, #4
 800a920:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a922:	4b16      	ldr	r3, [pc, #88]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a924:	2203      	movs	r2, #3
 800a926:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800a928:	4b14      	ldr	r3, [pc, #80]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a92a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a92e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a930:	4b12      	ldr	r3, [pc, #72]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a932:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a936:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_DMA_Init(&hdma_sdio_tx);
 800a938:	4810      	ldr	r0, [pc, #64]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a93a:	f7f6 f887 	bl	8000a4c <HAL_DMA_Init>

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a0e      	ldr	r2, [pc, #56]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a942:	65da      	str	r2, [r3, #92]	; 0x5c
 800a944:	4a0d      	ldr	r2, [pc, #52]	; (800a97c <HAL_SD_MspInit+0x180>)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6393      	str	r3, [r2, #56]	; 0x38

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800a94a:	2200      	movs	r2, #0
 800a94c:	2105      	movs	r1, #5
 800a94e:	2031      	movs	r0, #49	; 0x31
 800a950:	f7f5 fffd 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a954:	2031      	movs	r0, #49	; 0x31
 800a956:	f7f6 f816 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800a95a:	bf00      	nop
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	40012c00 	.word	0x40012c00
 800a968:	40023800 	.word	0x40023800
 800a96c:	40020800 	.word	0x40020800
 800a970:	40020c00 	.word	0x40020c00
 800a974:	20000500 	.word	0x20000500
 800a978:	40026458 	.word	0x40026458
 800a97c:	200005b0 	.word	0x200005b0
 800a980:	400264a0 	.word	0x400264a0

0800a984 <se3_rand32>:
#include "se3_rand.h"
#include "rng.h"
#include "stm32f4xx_hal_rng.h"


bool se3_rand32(uint32_t *val){
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
	size_t i;
	HAL_StatusTypeDef ret;
	for(i=0; i<20; i++){
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	e012      	b.n	800a9b8 <se3_rand32+0x34>
		ret=HAL_RNG_GenerateRandomNumber(&hrng, val);
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	480c      	ldr	r0, [pc, #48]	; (800a9c8 <se3_rand32+0x44>)
 800a996:	f7f8 fdae 	bl	80034f6 <HAL_RNG_GenerateRandomNumber>
 800a99a:	4603      	mov	r3, r0
 800a99c:	72fb      	strb	r3, [r7, #11]
		if(ret==HAL_OK){
 800a99e:	7afb      	ldrb	r3, [r7, #11]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <se3_rand32+0x24>
			return true;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e00b      	b.n	800a9c0 <se3_rand32+0x3c>
		}
		else if(ret==HAL_ERROR){
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <se3_rand32+0x2e>
			return false;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e006      	b.n	800a9c0 <se3_rand32+0x3c>
	for(i=0; i<20; i++){
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2b13      	cmp	r3, #19
 800a9bc:	d9e9      	bls.n	800a992 <se3_rand32+0xe>
		}
	}
	return false;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	200004f0 	.word	0x200004f0

0800a9cc <se3_rand>:

uint16_t se3_rand(uint16_t size, uint8_t* data){
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	6039      	str	r1, [r7, #0]
 800a9d6:	80fb      	strh	r3, [r7, #6]
	uint32_t tmp;
	size_t i,n;

	n=size/4;
 800a9d8:	88fb      	ldrh	r3, [r7, #6]
 800a9da:	089b      	lsrs	r3, r3, #2
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	613b      	str	r3, [r7, #16]
	for(i=0;i<n;i++){
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	617b      	str	r3, [r7, #20]
 800a9e4:	e010      	b.n	800aa08 <se3_rand+0x3c>
		if(!se3_rand32((uint32_t*)data)){
 800a9e6:	6838      	ldr	r0, [r7, #0]
 800a9e8:	f7ff ffcc 	bl	800a984 <se3_rand32>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f083 0301 	eor.w	r3, r3, #1
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <se3_rand+0x30>
			return 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e031      	b.n	800aa60 <se3_rand+0x94>
		}
		data+=4;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	603b      	str	r3, [r7, #0]
	for(i=0;i<n;i++){
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	3301      	adds	r3, #1
 800aa06:	617b      	str	r3, [r7, #20]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d3ea      	bcc.n	800a9e6 <se3_rand+0x1a>
	}
	n=size%4;
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	613b      	str	r3, [r7, #16]
	if(n!=0){
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01f      	beq.n	800aa5e <se3_rand+0x92>
		if(!se3_rand32(&tmp)){
 800aa1e:	f107 030c 	add.w	r3, r7, #12
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7ff ffae 	bl	800a984 <se3_rand32>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f083 0301 	eor.w	r3, r3, #1
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <se3_rand+0x6c>
			return 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	e013      	b.n	800aa60 <se3_rand+0x94>
		}
		for(i=0;i<n;i++){
 800aa38:	2300      	movs	r3, #0
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	e00b      	b.n	800aa56 <se3_rand+0x8a>
			data[i]=((uint8_t*)&tmp)[i];
 800aa3e:	f107 020c 	add.w	r2, r7, #12
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	441a      	add	r2, r3
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	440b      	add	r3, r1
 800aa4c:	7812      	ldrb	r2, [r2, #0]
 800aa4e:	701a      	strb	r2, [r3, #0]
		for(i=0;i<n;i++){
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	3301      	adds	r3, #1
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d3ef      	bcc.n	800aa3e <se3_rand+0x72>
		}
	}
	return size;
 800aa5e:	88fb      	ldrh	r3, [r7, #6]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <secube_sdio_write>:
#include "usbd_storage_if.h"
#include "sdio.h"


bool secube_sdio_write(uint8_t lun, const uint8_t* buf, uint32_t blk_addr, uint16_t blk_len)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af02      	add	r7, sp, #8
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
 800aa72:	461a      	mov	r2, r3
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	81bb      	strh	r3, [r7, #12]
	if (HAL_SD_WriteBlocks_DMA(&hsd, (uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len) == SD_OK)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	025b      	lsls	r3, r3, #9
 800aa80:	461a      	mov	r2, r3
 800aa82:	f04f 0300 	mov.w	r3, #0
 800aa86:	89b9      	ldrh	r1, [r7, #12]
 800aa88:	9101      	str	r1, [sp, #4]
 800aa8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa8e:	9100      	str	r1, [sp, #0]
 800aa90:	68b9      	ldr	r1, [r7, #8]
 800aa92:	480a      	ldr	r0, [pc, #40]	; (800aabc <secube_sdio_write+0x54>)
 800aa94:	f7f8 feb6 	bl	8003804 <HAL_SD_WriteBlocks_DMA>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d108      	bne.n	800aab0 <secube_sdio_write+0x48>
		if (HAL_SD_CheckWriteOperation(&hsd, (uint32_t)SD_DATATIMEOUT) == SD_OK)
 800aa9e:	4908      	ldr	r1, [pc, #32]	; (800aac0 <secube_sdio_write+0x58>)
 800aaa0:	4806      	ldr	r0, [pc, #24]	; (800aabc <secube_sdio_write+0x54>)
 800aaa2:	f7f8 ffd9 	bl	8003a58 <HAL_SD_CheckWriteOperation>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <secube_sdio_write+0x48>
			return true;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e000      	b.n	800aab2 <secube_sdio_write+0x4a>

	return false;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000608 	.word	0x20000608
 800aac0:	05f5e100 	.word	0x05f5e100

0800aac4 <secube_sdio_read>:
bool secube_sdio_read(uint8_t lun, uint8_t* buf, uint32_t blk_addr, uint16_t blk_len)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	607a      	str	r2, [r7, #4]
 800aace:	461a      	mov	r2, r3
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]
 800aad4:	4613      	mov	r3, r2
 800aad6:	81bb      	strh	r3, [r7, #12]
	if (HAL_SD_ReadBlocks_DMA(&hsd, (uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len) == SD_OK)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	025b      	lsls	r3, r3, #9
 800aadc:	461a      	mov	r2, r3
 800aade:	f04f 0300 	mov.w	r3, #0
 800aae2:	89b9      	ldrh	r1, [r7, #12]
 800aae4:	9101      	str	r1, [sp, #4]
 800aae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aaea:	9100      	str	r1, [sp, #0]
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	480a      	ldr	r0, [pc, #40]	; (800ab18 <secube_sdio_read+0x54>)
 800aaf0:	f7f8 fdc2 	bl	8003678 <HAL_SD_ReadBlocks_DMA>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d108      	bne.n	800ab0c <secube_sdio_read+0x48>
		if (HAL_SD_CheckReadOperation(&hsd, (uint32_t)SD_DATATIMEOUT) == SD_OK)
 800aafa:	4908      	ldr	r1, [pc, #32]	; (800ab1c <secube_sdio_read+0x58>)
 800aafc:	4806      	ldr	r0, [pc, #24]	; (800ab18 <secube_sdio_read+0x54>)
 800aafe:	f7f8 ff4d 	bl	800399c <HAL_SD_CheckReadOperation>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <secube_sdio_read+0x48>
			return true;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e000      	b.n	800ab0e <secube_sdio_read+0x4a>

	return false;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000608 	.word	0x20000608
 800ab1c:	05f5e100 	.word	0x05f5e100

0800ab20 <secube_sdio_capacity>:

bool secube_sdio_capacity(uint32_t *block_num, uint16_t *block_size)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]

	if (HAL_SD_Get_CardInfo(&hsd,&SDCardInfo) == SD_OK){
 800ab2a:	4910      	ldr	r1, [pc, #64]	; (800ab6c <secube_sdio_capacity+0x4c>)
 800ab2c:	4810      	ldr	r0, [pc, #64]	; (800ab70 <secube_sdio_capacity+0x50>)
 800ab2e:	f7f9 f8b6 	bl	8003c9e <HAL_SD_Get_CardInfo>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d114      	bne.n	800ab62 <secube_sdio_capacity+0x42>
			*block_num = (SDCardInfo.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 800ab38:	4b0c      	ldr	r3, [pc, #48]	; (800ab6c <secube_sdio_capacity+0x4c>)
 800ab3a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800ab3e:	f04f 0200 	mov.w	r2, #0
 800ab42:	f04f 0300 	mov.w	r3, #0
 800ab46:	0a42      	lsrs	r2, r0, #9
 800ab48:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ab4c:	0a4b      	lsrs	r3, r1, #9
 800ab4e:	4613      	mov	r3, r2
 800ab50:	1e5a      	subs	r2, r3, #1
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	601a      	str	r2, [r3, #0]
			*block_size = STORAGE_BLK_SIZ;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab5c:	801a      	strh	r2, [r3, #0]
			return true;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <secube_sdio_capacity+0x44>
		}

	return false;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20000558 	.word	0x20000558
 800ab70:	20000608 	.word	0x20000608

0800ab74 <secube_sdio_isready>:

bool secube_sdio_isready(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0

	if (HAL_SD_GetStatus(&hsd) != SD_TRANSFER_OK)
 800ab78:	4805      	ldr	r0, [pc, #20]	; (800ab90 <secube_sdio_isready+0x1c>)
 800ab7a:	f7f9 fc2b 	bl	80043d4 <HAL_SD_GetStatus>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <secube_sdio_isready+0x14>
		return false;
 800ab84:	2300      	movs	r3, #0
 800ab86:	e000      	b.n	800ab8a <secube_sdio_isready+0x16>

	return true;
 800ab88:	2301      	movs	r3, #1
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20000608 	.word	0x20000608

0800ab94 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800ab98:	4b14      	ldr	r3, [pc, #80]	; (800abec <MX_SPI5_Init+0x58>)
 800ab9a:	4a15      	ldr	r2, [pc, #84]	; (800abf0 <MX_SPI5_Init+0x5c>)
 800ab9c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800ab9e:	4b13      	ldr	r3, [pc, #76]	; (800abec <MX_SPI5_Init+0x58>)
 800aba0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aba4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800aba6:	4b11      	ldr	r3, [pc, #68]	; (800abec <MX_SPI5_Init+0x58>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800abac:	4b0f      	ldr	r3, [pc, #60]	; (800abec <MX_SPI5_Init+0x58>)
 800abae:	2200      	movs	r2, #0
 800abb0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800abb2:	4b0e      	ldr	r3, [pc, #56]	; (800abec <MX_SPI5_Init+0x58>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800abb8:	4b0c      	ldr	r3, [pc, #48]	; (800abec <MX_SPI5_Init+0x58>)
 800abba:	2200      	movs	r2, #0
 800abbc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 800abbe:	4b0b      	ldr	r3, [pc, #44]	; (800abec <MX_SPI5_Init+0x58>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800abc4:	4b09      	ldr	r3, [pc, #36]	; (800abec <MX_SPI5_Init+0x58>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800abca:	4b08      	ldr	r3, [pc, #32]	; (800abec <MX_SPI5_Init+0x58>)
 800abcc:	2200      	movs	r2, #0
 800abce:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLED;
 800abd0:	4b06      	ldr	r3, [pc, #24]	; (800abec <MX_SPI5_Init+0x58>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800abd6:	4b05      	ldr	r3, [pc, #20]	; (800abec <MX_SPI5_Init+0x58>)
 800abd8:	2200      	movs	r2, #0
 800abda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800abdc:	4b03      	ldr	r3, [pc, #12]	; (800abec <MX_SPI5_Init+0x58>)
 800abde:	220a      	movs	r2, #10
 800abe0:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi5);
 800abe2:	4802      	ldr	r0, [pc, #8]	; (800abec <MX_SPI5_Init+0x58>)
 800abe4:	f7fa fc86 	bl	80054f4 <HAL_SPI_Init>

}
 800abe8:	bf00      	nop
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20000668 	.word	0x20000668
 800abf0:	40015000 	.word	0x40015000

0800abf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b088      	sub	sp, #32
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI5)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a18      	ldr	r2, [pc, #96]	; (800ac64 <HAL_SPI_MspInit+0x70>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d12a      	bne.n	800ac5c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __SPI5_CLK_ENABLE();
 800ac06:	2300      	movs	r3, #0
 800ac08:	60bb      	str	r3, [r7, #8]
 800ac0a:	4b17      	ldr	r3, [pc, #92]	; (800ac68 <HAL_SPI_MspInit+0x74>)
 800ac0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0e:	4a16      	ldr	r2, [pc, #88]	; (800ac68 <HAL_SPI_MspInit+0x74>)
 800ac10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac14:	6453      	str	r3, [r2, #68]	; 0x44
 800ac16:	4b14      	ldr	r3, [pc, #80]	; (800ac68 <HAL_SPI_MspInit+0x74>)
 800ac18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac1e:	60bb      	str	r3, [r7, #8]
 800ac20:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> SPI5_SCK
    PF6     ------> SPI5_NSS
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 800ac22:	f44f 7360 	mov.w	r3, #896	; 0x380
 800ac26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac28:	2302      	movs	r3, #2
 800ac2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ac30:	2303      	movs	r3, #3
 800ac32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800ac34:	2305      	movs	r3, #5
 800ac36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac38:	f107 030c 	add.w	r3, r7, #12
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	480b      	ldr	r0, [pc, #44]	; (800ac6c <HAL_SPI_MspInit+0x78>)
 800ac40:	f7f6 fcc0 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ac44:	2340      	movs	r3, #64	; 0x40
 800ac46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac50:	f107 030c 	add.w	r3, r7, #12
 800ac54:	4619      	mov	r1, r3
 800ac56:	4805      	ldr	r0, [pc, #20]	; (800ac6c <HAL_SPI_MspInit+0x78>)
 800ac58:	f7f6 fcb4 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	3720      	adds	r7, #32
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	40015000 	.word	0x40015000
 800ac68:	40023800 	.word	0x40023800
 800ac6c:	40021400 	.word	0x40021400

0800ac70 <EXTI_Init>:
 * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
 *         that contains the configuration information for the EXTI peripheral.
 * @retval None
 */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
    uint32_t tmp = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60fb      	str	r3, [r7, #12]
    assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
    assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
    assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
    assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
    
    tmp = (uint32_t)EXTI_BASE;
 800ac7c:	4b34      	ldr	r3, [pc, #208]	; (800ad50 <EXTI_Init+0xe0>)
 800ac7e:	60fb      	str	r3, [r7, #12]
    
    if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	799b      	ldrb	r3, [r3, #6]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d04f      	beq.n	800ad28 <EXTI_Init+0xb8>
    {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800ac88:	4b31      	ldr	r3, [pc, #196]	; (800ad50 <EXTI_Init+0xe0>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	43db      	mvns	r3, r3
 800ac92:	492f      	ldr	r1, [pc, #188]	; (800ad50 <EXTI_Init+0xe0>)
 800ac94:	4013      	ands	r3, r2
 800ac96:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800ac98:	4b2d      	ldr	r3, [pc, #180]	; (800ad50 <EXTI_Init+0xe0>)
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	43db      	mvns	r3, r3
 800aca2:	492b      	ldr	r1, [pc, #172]	; (800ad50 <EXTI_Init+0xe0>)
 800aca4:	4013      	ands	r3, r2
 800aca6:	604b      	str	r3, [r1, #4]
        
        tmp += EXTI_InitStruct->EXTI_Mode;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	791b      	ldrb	r3, [r3, #4]
 800acac:	461a      	mov	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	4413      	add	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
        
        *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6819      	ldr	r1, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	601a      	str	r2, [r3, #0]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800acc2:	4b23      	ldr	r3, [pc, #140]	; (800ad50 <EXTI_Init+0xe0>)
 800acc4:	689a      	ldr	r2, [r3, #8]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	43db      	mvns	r3, r3
 800accc:	4920      	ldr	r1, [pc, #128]	; (800ad50 <EXTI_Init+0xe0>)
 800acce:	4013      	ands	r3, r2
 800acd0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800acd2:	4b1f      	ldr	r3, [pc, #124]	; (800ad50 <EXTI_Init+0xe0>)
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	43db      	mvns	r3, r3
 800acdc:	491c      	ldr	r1, [pc, #112]	; (800ad50 <EXTI_Init+0xe0>)
 800acde:	4013      	ands	r3, r2
 800ace0:	60cb      	str	r3, [r1, #12]
        
        /* Select the trigger for the selected external interrupts */
        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	795b      	ldrb	r3, [r3, #5]
 800ace6:	2b10      	cmp	r3, #16
 800ace8:	d10e      	bne.n	800ad08 <EXTI_Init+0x98>
        {
            /* Rising Falling edge */
            EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800acea:	4b19      	ldr	r3, [pc, #100]	; (800ad50 <EXTI_Init+0xe0>)
 800acec:	689a      	ldr	r2, [r3, #8]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4917      	ldr	r1, [pc, #92]	; (800ad50 <EXTI_Init+0xe0>)
 800acf4:	4313      	orrs	r3, r2
 800acf6:	608b      	str	r3, [r1, #8]
            EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800acf8:	4b15      	ldr	r3, [pc, #84]	; (800ad50 <EXTI_Init+0xe0>)
 800acfa:	68da      	ldr	r2, [r3, #12]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4913      	ldr	r1, [pc, #76]	; (800ad50 <EXTI_Init+0xe0>)
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60cb      	str	r3, [r1, #12]
        tmp += EXTI_InitStruct->EXTI_Mode;
        
        /* Disable the selected external lines */
        *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    }
}
 800ad06:	e01d      	b.n	800ad44 <EXTI_Init+0xd4>
            tmp = (uint32_t)EXTI_BASE;
 800ad08:	4b11      	ldr	r3, [pc, #68]	; (800ad50 <EXTI_Init+0xe0>)
 800ad0a:	60fb      	str	r3, [r7, #12]
            tmp += EXTI_InitStruct->EXTI_Trigger;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	795b      	ldrb	r3, [r3, #5]
 800ad10:	461a      	mov	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4413      	add	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]
            *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6819      	ldr	r1, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	430a      	orrs	r2, r1
 800ad24:	601a      	str	r2, [r3, #0]
}
 800ad26:	e00d      	b.n	800ad44 <EXTI_Init+0xd4>
        tmp += EXTI_InitStruct->EXTI_Mode;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	791b      	ldrb	r3, [r3, #4]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	4413      	add	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
        *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6819      	ldr	r1, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	43da      	mvns	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	400a      	ands	r2, r1
 800ad42:	601a      	str	r2, [r3, #0]
}
 800ad44:	bf00      	nop
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	40013c00 	.word	0x40013c00

0800ad54 <EXTI_GetITStatus>:
 * @param  EXTI_Line: specifies the EXTI line to check.
 *          This parameter can be EXTI_Linex where x can be(0..22)
 * @retval The new state of EXTI_Line (SET or RESET).
 */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
    FlagStatus bitstatus = RESET;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
    /* Check the parameters */
    assert_param(IS_GET_EXTI_LINE(EXTI_Line));
    
    if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800ad60:	4b08      	ldr	r3, [pc, #32]	; (800ad84 <EXTI_GetITStatus+0x30>)
 800ad62:	695a      	ldr	r2, [r3, #20]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4013      	ands	r3, r2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <EXTI_GetITStatus+0x1e>
    {
        bitstatus = SET;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	73fb      	strb	r3, [r7, #15]
 800ad70:	e001      	b.n	800ad76 <EXTI_GetITStatus+0x22>
    }
    else
    {
        bitstatus = RESET;
 800ad72:	2300      	movs	r3, #0
 800ad74:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
    
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	40013c00 	.word	0x40013c00

0800ad88 <EXTI_ClearITPendingBit>:
 * @param  EXTI_Line: specifies the EXTI lines to clear.
 *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
 * @retval None
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
    /* Check the parameters */
    assert_param(IS_EXTI_LINE(EXTI_Line));
    
    EXTI->PR = EXTI_Line;
 800ad90:	4a04      	ldr	r2, [pc, #16]	; (800ada4 <EXTI_ClearITPendingBit+0x1c>)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6153      	str	r3, [r2, #20]
}
 800ad96:	bf00      	nop
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	40013c00 	.word	0x40013c00

0800ada8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800adac:	2003      	movs	r0, #3
 800adae:	f7f5 fdc3 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800adb2:	2200      	movs	r2, #0
 800adb4:	2100      	movs	r1, #0
 800adb6:	f04f 30ff 	mov.w	r0, #4294967295
 800adba:	f7f5 fdc8 	bl	800094e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800adbe:	bf00      	nop
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800adc6:	f7f5 fa4f 	bl	8000268 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800adca:	f7f5 fe13 	bl	80009f4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//  se3_time_inc();
  /* USER CODE END SysTick_IRQn 1 */
}
 800adce:	bf00      	nop
 800add0:	bd80      	pop	{r7, pc}
	...

0800add4 <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800add8:	4802      	ldr	r0, [pc, #8]	; (800ade4 <SDIO_IRQHandler+0x10>)
 800adda:	f7f8 fea2 	bl	8003b22 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800adde:	bf00      	nop
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20000608 	.word	0x20000608

0800ade8 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800adec:	4802      	ldr	r0, [pc, #8]	; (800adf8 <DMA2_Stream3_IRQHandler+0x10>)
 800adee:	f7f5 ff19 	bl	8000c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800adf2:	bf00      	nop
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000500 	.word	0x20000500

0800adfc <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800ae00:	4802      	ldr	r0, [pc, #8]	; (800ae0c <DMA2_Stream6_IRQHandler+0x10>)
 800ae02:	f7f5 ff0f 	bl	8000c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800ae06:	bf00      	nop
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	200005b0 	.word	0x200005b0

0800ae10 <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

	/* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800ae14:	4802      	ldr	r0, [pc, #8]	; (800ae20 <OTG_HS_IRQHandler+0x10>)
 800ae16:	f7f6 ffbe 	bl	8001d96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800ae1a:	bf00      	nop
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	200009b0 	.word	0x200009b0

0800ae24 <SYSCFG_EXTILineConfig>:
 *           be (0..7) for STM32F42xxx/43xxx devices.
 *
 * @retval None
 */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	460a      	mov	r2, r1
 800ae2e:	71fb      	strb	r3, [r7, #7]
 800ae30:	4613      	mov	r3, r2
 800ae32:	71bb      	strb	r3, [r7, #6]
    uint32_t tmp = 0x00;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]
    
    /* Check the parameters */
    assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
    assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
    
    tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800ae38:	79bb      	ldrb	r3, [r7, #6]
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	220f      	movs	r2, #15
 800ae42:	fa02 f303 	lsl.w	r3, r2, r3
 800ae46:	60fb      	str	r3, [r7, #12]
    SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800ae48:	4a16      	ldr	r2, [pc, #88]	; (800aea4 <SYSCFG_EXTILineConfig+0x80>)
 800ae4a:	79bb      	ldrb	r3, [r7, #6]
 800ae4c:	089b      	lsrs	r3, r3, #2
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	3302      	adds	r3, #2
 800ae52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	43db      	mvns	r3, r3
 800ae5a:	4812      	ldr	r0, [pc, #72]	; (800aea4 <SYSCFG_EXTILineConfig+0x80>)
 800ae5c:	79b9      	ldrb	r1, [r7, #6]
 800ae5e:	0889      	lsrs	r1, r1, #2
 800ae60:	b2c9      	uxtb	r1, r1
 800ae62:	401a      	ands	r2, r3
 800ae64:	1c8b      	adds	r3, r1, #2
 800ae66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800ae6a:	4a0e      	ldr	r2, [pc, #56]	; (800aea4 <SYSCFG_EXTILineConfig+0x80>)
 800ae6c:	79bb      	ldrb	r3, [r7, #6]
 800ae6e:	089b      	lsrs	r3, r3, #2
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	3302      	adds	r3, #2
 800ae74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ae78:	79f9      	ldrb	r1, [r7, #7]
 800ae7a:	79bb      	ldrb	r3, [r7, #6]
 800ae7c:	f003 0303 	and.w	r3, r3, #3
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	fa01 f303 	lsl.w	r3, r1, r3
 800ae86:	4807      	ldr	r0, [pc, #28]	; (800aea4 <SYSCFG_EXTILineConfig+0x80>)
 800ae88:	79b9      	ldrb	r1, [r7, #6]
 800ae8a:	0889      	lsrs	r1, r1, #2
 800ae8c:	b2c9      	uxtb	r1, r1
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	1c8b      	adds	r3, r1, #2
 800ae92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800ae96:	bf00      	nop
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	40013800 	.word	0x40013800

0800aea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aeac:	4b16      	ldr	r3, [pc, #88]	; (800af08 <SystemInit+0x60>)
 800aeae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb2:	4a15      	ldr	r2, [pc, #84]	; (800af08 <SystemInit+0x60>)
 800aeb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aeb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800aebc:	4b13      	ldr	r3, [pc, #76]	; (800af0c <SystemInit+0x64>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a12      	ldr	r2, [pc, #72]	; (800af0c <SystemInit+0x64>)
 800aec2:	f043 0301 	orr.w	r3, r3, #1
 800aec6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800aec8:	4b10      	ldr	r3, [pc, #64]	; (800af0c <SystemInit+0x64>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800aece:	4b0f      	ldr	r3, [pc, #60]	; (800af0c <SystemInit+0x64>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a0e      	ldr	r2, [pc, #56]	; (800af0c <SystemInit+0x64>)
 800aed4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800aed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aedc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800aede:	4b0b      	ldr	r3, [pc, #44]	; (800af0c <SystemInit+0x64>)
 800aee0:	4a0b      	ldr	r2, [pc, #44]	; (800af10 <SystemInit+0x68>)
 800aee2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800aee4:	4b09      	ldr	r3, [pc, #36]	; (800af0c <SystemInit+0x64>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a08      	ldr	r2, [pc, #32]	; (800af0c <SystemInit+0x64>)
 800aeea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aeee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800aef0:	4b06      	ldr	r3, [pc, #24]	; (800af0c <SystemInit+0x64>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aef6:	4b04      	ldr	r3, [pc, #16]	; (800af08 <SystemInit+0x60>)
 800aef8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aefc:	609a      	str	r2, [r3, #8]
#endif
}
 800aefe:	bf00      	nop
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	e000ed00 	.word	0xe000ed00
 800af0c:	40023800 	.word	0x40023800
 800af10:	24003010 	.word	0x24003010

0800af14 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 800af1a:	4b18      	ldr	r3, [pc, #96]	; (800af7c <MX_TIM4_Init+0x68>)
 800af1c:	4a18      	ldr	r2, [pc, #96]	; (800af80 <MX_TIM4_Init+0x6c>)
 800af1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800af20:	4b16      	ldr	r3, [pc, #88]	; (800af7c <MX_TIM4_Init+0x68>)
 800af22:	2200      	movs	r2, #0
 800af24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af26:	4b15      	ldr	r3, [pc, #84]	; (800af7c <MX_TIM4_Init+0x68>)
 800af28:	2200      	movs	r2, #0
 800af2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800af2c:	4b13      	ldr	r3, [pc, #76]	; (800af7c <MX_TIM4_Init+0x68>)
 800af2e:	2200      	movs	r2, #0
 800af30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af32:	4b12      	ldr	r3, [pc, #72]	; (800af7c <MX_TIM4_Init+0x68>)
 800af34:	2200      	movs	r2, #0
 800af36:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&htim4);
 800af38:	4810      	ldr	r0, [pc, #64]	; (800af7c <MX_TIM4_Init+0x68>)
 800af3a:	f7fa fbcd 	bl	80056d8 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af3e:	2300      	movs	r3, #0
 800af40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af42:	2300      	movs	r3, #0
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800af46:	f107 0320 	add.w	r3, r7, #32
 800af4a:	4619      	mov	r1, r3
 800af4c:	480b      	ldr	r0, [pc, #44]	; (800af7c <MX_TIM4_Init+0x68>)
 800af4e:	f7fa ff23 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800af52:	2360      	movs	r3, #96	; 0x60
 800af54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800af5e:	2300      	movs	r3, #0
 800af60:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 800af62:	1d3b      	adds	r3, r7, #4
 800af64:	2200      	movs	r2, #0
 800af66:	4619      	mov	r1, r3
 800af68:	4804      	ldr	r0, [pc, #16]	; (800af7c <MX_TIM4_Init+0x68>)
 800af6a:	f7fa fbe1 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim4);
 800af6e:	4803      	ldr	r0, [pc, #12]	; (800af7c <MX_TIM4_Init+0x68>)
 800af70:	f000 f82a 	bl	800afc8 <HAL_TIM_MspPostInit>

}
 800af74:	bf00      	nop
 800af76:	3728      	adds	r7, #40	; 0x28
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	200006c0 	.word	0x200006c0
 800af80:	40000800 	.word	0x40000800

0800af84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM4)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a0b      	ldr	r2, [pc, #44]	; (800afc0 <HAL_TIM_PWM_MspInit+0x3c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d10d      	bne.n	800afb2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __TIM4_CLK_ENABLE();
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <HAL_TIM_PWM_MspInit+0x40>)
 800af9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9e:	4a09      	ldr	r2, [pc, #36]	; (800afc4 <HAL_TIM_PWM_MspInit+0x40>)
 800afa0:	f043 0304 	orr.w	r3, r3, #4
 800afa4:	6413      	str	r3, [r2, #64]	; 0x40
 800afa6:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <HAL_TIM_PWM_MspInit+0x40>)
 800afa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afaa:	f003 0304 	and.w	r3, r3, #4
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800afb2:	bf00      	nop
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	40000800 	.word	0x40000800
 800afc4:	40023800 	.word	0x40023800

0800afc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a0b      	ldr	r2, [pc, #44]	; (800b004 <HAL_TIM_MspPostInit+0x3c>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d110      	bne.n	800affc <HAL_TIM_MspPostInit+0x34>
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800afda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afe0:	2302      	movs	r3, #2
 800afe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afe4:	2300      	movs	r3, #0
 800afe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800afe8:	2300      	movs	r3, #0
 800afea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800afec:	2302      	movs	r3, #2
 800afee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aff0:	f107 030c 	add.w	r3, r7, #12
 800aff4:	4619      	mov	r1, r3
 800aff6:	4804      	ldr	r0, [pc, #16]	; (800b008 <HAL_TIM_MspPostInit+0x40>)
 800aff8:	f7f6 fae4 	bl	80015c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800affc:	bf00      	nop
 800affe:	3720      	adds	r7, #32
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	40000800 	.word	0x40000800
 800b008:	40020c00 	.word	0x40020c00

0800b00c <MX_USART1_UART_Init>:
SMARTCARD_HandleTypeDef hsc6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800b010:	4b0f      	ldr	r3, [pc, #60]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b012:	4a10      	ldr	r2, [pc, #64]	; (800b054 <MX_USART1_UART_Init+0x48>)
 800b014:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b016:	4b0e      	ldr	r3, [pc, #56]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b01c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b01e:	4b0c      	ldr	r3, [pc, #48]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b020:	2200      	movs	r2, #0
 800b022:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b024:	4b0a      	ldr	r3, [pc, #40]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b026:	2200      	movs	r2, #0
 800b028:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b02a:	4b09      	ldr	r3, [pc, #36]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b032:	220c      	movs	r2, #12
 800b034:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b038:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b03c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b03e:	4b04      	ldr	r3, [pc, #16]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b040:	2200      	movs	r2, #0
 800b042:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 800b044:	4802      	ldr	r0, [pc, #8]	; (800b050 <MX_USART1_UART_Init+0x44>)
 800b046:	f7fa feec 	bl	8005e22 <HAL_UART_Init>

}
 800b04a:	bf00      	nop
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200006fc 	.word	0x200006fc
 800b054:	40011000 	.word	0x40011000

0800b058 <MX_USART6_SMARTCARD_Init>:
/* USART6 init function */

void MX_USART6_SMARTCARD_Init(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0

  hsc6.Instance = USART6;
 800b05c:	4b16      	ldr	r3, [pc, #88]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b05e:	4a17      	ldr	r2, [pc, #92]	; (800b0bc <MX_USART6_SMARTCARD_Init+0x64>)
 800b060:	601a      	str	r2, [r3, #0]
  hsc6.Init.BaudRate = 115200;
 800b062:	4b15      	ldr	r3, [pc, #84]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b068:	605a      	str	r2, [r3, #4]
  hsc6.Init.WordLength = SMARTCARD_WORDLENGTH_9B;
 800b06a:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b06c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b070:	609a      	str	r2, [r3, #8]
  hsc6.Init.StopBits = SMARTCARD_STOPBITS_1_5;
 800b072:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b074:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800b078:	60da      	str	r2, [r3, #12]
  hsc6.Init.Parity = SMARTCARD_PARITY_EVEN;
 800b07a:	4b0f      	ldr	r3, [pc, #60]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b07c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b080:	611a      	str	r2, [r3, #16]
  hsc6.Init.Mode = SMARTCARD_MODE_TX_RX;
 800b082:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b084:	220c      	movs	r2, #12
 800b086:	615a      	str	r2, [r3, #20]
  hsc6.Init.CLKPolarity = SMARTCARD_POLARITY_LOW;
 800b088:	4b0b      	ldr	r3, [pc, #44]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	619a      	str	r2, [r3, #24]
  hsc6.Init.CLKPhase = SMARTCARD_PHASE_1EDGE;
 800b08e:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b090:	2200      	movs	r2, #0
 800b092:	61da      	str	r2, [r3, #28]
  hsc6.Init.CLKLastBit = SMARTCARD_LASTBIT_DISABLE;
 800b094:	4b08      	ldr	r3, [pc, #32]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b096:	2200      	movs	r2, #0
 800b098:	621a      	str	r2, [r3, #32]
  hsc6.Init.Prescaler = 11;
 800b09a:	4b07      	ldr	r3, [pc, #28]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b09c:	220b      	movs	r2, #11
 800b09e:	625a      	str	r2, [r3, #36]	; 0x24
  hsc6.Init.GuardTime = 0;
 800b0a0:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsc6.Init.NACKState = SMARTCARD_NACK_DISABLED;
 800b0a6:	4b04      	ldr	r3, [pc, #16]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SMARTCARD_Init(&hsc6);
 800b0ac:	4802      	ldr	r0, [pc, #8]	; (800b0b8 <MX_USART6_SMARTCARD_Init+0x60>)
 800b0ae:	f7fa f85a 	bl	8005166 <HAL_SMARTCARD_Init>

}
 800b0b2:	bf00      	nop
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000073c 	.word	0x2000073c
 800b0bc:	40011400 	.word	0x40011400

0800b0c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a23      	ldr	r2, [pc, #140]	; (800b15c <HAL_UART_MspInit+0x9c>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d13f      	bne.n	800b152 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __USART1_CLK_ENABLE();
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60bb      	str	r3, [r7, #8]
 800b0d6:	4b22      	ldr	r3, [pc, #136]	; (800b160 <HAL_UART_MspInit+0xa0>)
 800b0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0da:	4a21      	ldr	r2, [pc, #132]	; (800b160 <HAL_UART_MspInit+0xa0>)
 800b0dc:	f043 0310 	orr.w	r3, r3, #16
 800b0e0:	6453      	str	r3, [r2, #68]	; 0x44
 800b0e2:	4b1f      	ldr	r3, [pc, #124]	; (800b160 <HAL_UART_MspInit+0xa0>)
 800b0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e6:	f003 0310 	and.w	r3, r3, #16
 800b0ea:	60bb      	str	r3, [r7, #8]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> USART1_TX
    PA12     ------> USART1_RTS
    PA11     ------> USART1_CTS
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b0ee:	2340      	movs	r3, #64	; 0x40
 800b0f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b0fe:	2307      	movs	r3, #7
 800b100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b102:	f107 030c 	add.w	r3, r7, #12
 800b106:	4619      	mov	r1, r3
 800b108:	4816      	ldr	r0, [pc, #88]	; (800b164 <HAL_UART_MspInit+0xa4>)
 800b10a:	f7f6 fa5b 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800b10e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b112:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b114:	2302      	movs	r3, #2
 800b116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b118:	2300      	movs	r3, #0
 800b11a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b11c:	2303      	movs	r3, #3
 800b11e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b120:	2307      	movs	r3, #7
 800b122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b124:	f107 030c 	add.w	r3, r7, #12
 800b128:	4619      	mov	r1, r3
 800b12a:	480f      	ldr	r0, [pc, #60]	; (800b168 <HAL_UART_MspInit+0xa8>)
 800b12c:	f7f6 fa4a 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b134:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b136:	2302      	movs	r3, #2
 800b138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b13a:	2301      	movs	r3, #1
 800b13c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b13e:	2303      	movs	r3, #3
 800b140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b142:	2307      	movs	r3, #7
 800b144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b146:	f107 030c 	add.w	r3, r7, #12
 800b14a:	4619      	mov	r1, r3
 800b14c:	4806      	ldr	r0, [pc, #24]	; (800b168 <HAL_UART_MspInit+0xa8>)
 800b14e:	f7f6 fa39 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800b152:	bf00      	nop
 800b154:	3720      	adds	r7, #32
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	40011000 	.word	0x40011000
 800b160:	40023800 	.word	0x40023800
 800b164:	40020400 	.word	0x40020400
 800b168:	40020000 	.word	0x40020000

0800b16c <HAL_SMARTCARD_MspInit>:

void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef* hsmartcard)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsmartcard->Instance==USART6)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a1a      	ldr	r2, [pc, #104]	; (800b1e4 <HAL_SMARTCARD_MspInit+0x78>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d12d      	bne.n	800b1da <HAL_SMARTCARD_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __USART6_CLK_ENABLE();
 800b17e:	2300      	movs	r3, #0
 800b180:	60bb      	str	r3, [r7, #8]
 800b182:	4b19      	ldr	r3, [pc, #100]	; (800b1e8 <HAL_SMARTCARD_MspInit+0x7c>)
 800b184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b186:	4a18      	ldr	r2, [pc, #96]	; (800b1e8 <HAL_SMARTCARD_MspInit+0x7c>)
 800b188:	f043 0320 	orr.w	r3, r3, #32
 800b18c:	6453      	str	r3, [r2, #68]	; 0x44
 800b18e:	4b16      	ldr	r3, [pc, #88]	; (800b1e8 <HAL_SMARTCARD_MspInit+0x7c>)
 800b190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	60bb      	str	r3, [r7, #8]
 800b198:	68bb      	ldr	r3, [r7, #8]
  
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PG7     ------> USART6_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b19a:	2340      	movs	r3, #64	; 0x40
 800b19c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b19e:	2312      	movs	r3, #18
 800b1a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b1aa:	2308      	movs	r3, #8
 800b1ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b1ae:	f107 030c 	add.w	r3, r7, #12
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	480d      	ldr	r0, [pc, #52]	; (800b1ec <HAL_SMARTCARD_MspInit+0x80>)
 800b1b6:	f7f6 fa05 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800b1ba:	2380      	movs	r3, #128	; 0x80
 800b1bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1be:	2302      	movs	r3, #2
 800b1c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b1ca:	2308      	movs	r3, #8
 800b1cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b1ce:	f107 030c 	add.w	r3, r7, #12
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4806      	ldr	r0, [pc, #24]	; (800b1f0 <HAL_SMARTCARD_MspInit+0x84>)
 800b1d6:	f7f6 f9f5 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800b1da:	bf00      	nop
 800b1dc:	3720      	adds	r7, #32
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	40011400 	.word	0x40011400
 800b1e8:	40023800 	.word	0x40023800
 800b1ec:	40020800 	.word	0x40020800
 800b1f0:	40021800 	.word	0x40021800

0800b1f4 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceHS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	4908      	ldr	r1, [pc, #32]	; (800b21c <MX_USB_DEVICE_Init+0x28>)
 800b1fc:	4808      	ldr	r0, [pc, #32]	; (800b220 <MX_USB_DEVICE_Init+0x2c>)
 800b1fe:	f7fd fe56 	bl	8008eae <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC);
 800b202:	4908      	ldr	r1, [pc, #32]	; (800b224 <MX_USB_DEVICE_Init+0x30>)
 800b204:	4806      	ldr	r0, [pc, #24]	; (800b220 <MX_USB_DEVICE_Init+0x2c>)
 800b206:	f7fd fe7d 	bl	8008f04 <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS);
 800b20a:	4907      	ldr	r1, [pc, #28]	; (800b228 <MX_USB_DEVICE_Init+0x34>)
 800b20c:	4804      	ldr	r0, [pc, #16]	; (800b220 <MX_USB_DEVICE_Init+0x2c>)
 800b20e:	f7fc fd51 	bl	8007cb4 <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceHS);
 800b212:	4803      	ldr	r0, [pc, #12]	; (800b220 <MX_USB_DEVICE_Init+0x2c>)
 800b214:	f7fd fe90 	bl	8008f38 <USBD_Start>

}
 800b218:	bf00      	nop
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	200000a8 	.word	0x200000a8
 800b220:	2000078c 	.word	0x2000078c
 800b224:	20000000 	.word	0x20000000
 800b228:	200000dc 	.word	0x200000dc

0800b22c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08a      	sub	sp, #40	; 0x28
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hpcd->Instance==USB_OTG_HS)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a36      	ldr	r2, [pc, #216]	; (800b314 <HAL_PCD_MspInit+0xe8>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d165      	bne.n	800b30a <HAL_PCD_MspInit+0xde>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_10 
 800b23e:	f643 4323 	movw	r3, #15395	; 0x3c23
 800b242:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b244:	2302      	movs	r3, #2
 800b246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b248:	2300      	movs	r3, #0
 800b24a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b24c:	2303      	movs	r3, #3
 800b24e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b250:	230a      	movs	r3, #10
 800b252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b254:	f107 0314 	add.w	r3, r7, #20
 800b258:	4619      	mov	r1, r3
 800b25a:	482f      	ldr	r0, [pc, #188]	; (800b318 <HAL_PCD_MspInit+0xec>)
 800b25c:	f7f6 f9b2 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b266:	2302      	movs	r3, #2
 800b268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b26e:	2303      	movs	r3, #3
 800b270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b272:	230a      	movs	r3, #10
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b276:	f107 0314 	add.w	r3, r7, #20
 800b27a:	4619      	mov	r1, r3
 800b27c:	4827      	ldr	r0, [pc, #156]	; (800b31c <HAL_PCD_MspInit+0xf0>)
 800b27e:	f7f6 f9a1 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 800b282:	2309      	movs	r3, #9
 800b284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b286:	2302      	movs	r3, #2
 800b288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b28e:	2303      	movs	r3, #3
 800b290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b292:	230a      	movs	r3, #10
 800b294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b296:	f107 0314 	add.w	r3, r7, #20
 800b29a:	4619      	mov	r1, r3
 800b29c:	4820      	ldr	r0, [pc, #128]	; (800b320 <HAL_PCD_MspInit+0xf4>)
 800b29e:	f7f6 f991 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800b2a2:	2328      	movs	r3, #40	; 0x28
 800b2a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b2b2:	230a      	movs	r3, #10
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2b6:	f107 0314 	add.w	r3, r7, #20
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4819      	ldr	r0, [pc, #100]	; (800b324 <HAL_PCD_MspInit+0xf8>)
 800b2be:	f7f6 f981 	bl	80015c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __USB_OTG_HS_CLK_ENABLE();
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	613b      	str	r3, [r7, #16]
 800b2c6:	4b18      	ldr	r3, [pc, #96]	; (800b328 <HAL_PCD_MspInit+0xfc>)
 800b2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ca:	4a17      	ldr	r2, [pc, #92]	; (800b328 <HAL_PCD_MspInit+0xfc>)
 800b2cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2d0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2d2:	4b15      	ldr	r3, [pc, #84]	; (800b328 <HAL_PCD_MspInit+0xfc>)
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	693b      	ldr	r3, [r7, #16]
    __USB_OTG_HS_ULPI_CLK_ENABLE();
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	4b11      	ldr	r3, [pc, #68]	; (800b328 <HAL_PCD_MspInit+0xfc>)
 800b2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e6:	4a10      	ldr	r2, [pc, #64]	; (800b328 <HAL_PCD_MspInit+0xfc>)
 800b2e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ee:	4b0e      	ldr	r3, [pc, #56]	; (800b328 <HAL_PCD_MspInit+0xfc>)
 800b2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 7, 0);
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2107      	movs	r1, #7
 800b2fe:	204d      	movs	r0, #77	; 0x4d
 800b300:	f7f5 fb25 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b304:	204d      	movs	r0, #77	; 0x4d
 800b306:	f7f5 fb3e 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b30a:	bf00      	nop
 800b30c:	3728      	adds	r7, #40	; 0x28
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	40040000 	.word	0x40040000
 800b318:	40020400 	.word	0x40020400
 800b31c:	40022000 	.word	0x40022000
 800b320:	40020800 	.word	0x40020800
 800b324:	40020000 	.word	0x40020000
 800b328:	40023800 	.word	0x40023800

0800b32c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f7fd fe41 	bl	8008fca <USBD_LL_SetupStage>
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 03b4 	ldr.w	r0, [r3, #948]	; 0x3b4
 800b362:	78fa      	ldrb	r2, [r7, #3]
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	00db      	lsls	r3, r3, #3
 800b36a:	1a9b      	subs	r3, r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	440b      	add	r3, r1
 800b370:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	78fb      	ldrb	r3, [r7, #3]
 800b378:	4619      	mov	r1, r3
 800b37a:	f7fd fe73 	bl	8009064 <USBD_LL_DataOutStage>
}
 800b37e:	bf00      	nop
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	460b      	mov	r3, r1
 800b390:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 03b4 	ldr.w	r0, [r3, #948]	; 0x3b4
 800b398:	78fa      	ldrb	r2, [r7, #3]
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	4613      	mov	r3, r2
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	1a9b      	subs	r3, r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	440b      	add	r3, r1
 800b3a6:	3344      	adds	r3, #68	; 0x44
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	78fb      	ldrb	r3, [r7, #3]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f7fd feb4 	bl	800911a <USBD_LL_DataInStage>
}
 800b3b2:	bf00      	nop
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b082      	sub	sp, #8
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fd ff9a 	bl	8009302 <USBD_LL_SOF>
}
 800b3ce:	bf00      	nop
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <HAL_PCD_ResetCallback+0x1a>
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d003      	beq.n	800b3f6 <HAL_PCD_ResetCallback+0x20>
 800b3ee:	e005      	b.n	800b3fc <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f4:	e005      	b.n	800b402 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3fa:	e002      	b.n	800b402 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;    
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	73fb      	strb	r3, [r7, #15]
    break;    
 800b400:	bf00      	nop
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b408:	7bfa      	ldrb	r2, [r7, #15]
 800b40a:	4611      	mov	r1, r2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fd ff42 	bl	8009296 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fd ff0d 	bl	8009238 <USBD_LL_Reset>
}
 800b41e:	bf00      	nop
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
	...

0800b428 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd ff3d 	bl	80092b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	6812      	ldr	r2, [r2, #0]
 800b44a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b44e:	f043 0301 	orr.w	r3, r3, #1
 800b452:	6013      	str	r3, [r2, #0]
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a1b      	ldr	r3, [r3, #32]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d005      	beq.n	800b468 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b45c:	4b04      	ldr	r3, [pc, #16]	; (800b470 <HAL_PCD_SuspendCallback+0x48>)
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	4a03      	ldr	r2, [pc, #12]	; (800b470 <HAL_PCD_SuspendCallback+0x48>)
 800b462:	f043 0306 	orr.w	r3, r3, #6
 800b466:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	e000ed00 	.word	0xe000ed00

0800b474 <HAL_PCD_ResumeCallback>:
    When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume(hpcd->pData);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b482:	4618      	mov	r0, r3
 800b484:	f7fd ff2c 	bl	80092e0 <USBD_LL_Resume>
}
 800b488:	bf00      	nop
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b4a2:	78fa      	ldrb	r2, [r7, #3]
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fd ff52 	bl	8009350 <USBD_LL_IsoOUTIncomplete>
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b4c6:	78fa      	ldrb	r2, [r7, #3]
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fd ff33 	bl	8009336 <USBD_LL_IsoINIncomplete>
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fd ff3f 	bl	800936a <USBD_LL_DevConnected>
}
 800b4ec:	bf00      	nop
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b502:	4618      	mov	r0, r3
 800b504:	f7fd ff3c 	bl	8009380 <USBD_LL_DevDisconnected>
}
 800b508:	bf00      	nop
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (pdev->id == DEVICE_HS) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d13e      	bne.n	800b59e <USBD_LL_Init+0x8e>
  /* Link The driver to the stack */
  hpcd_USB_OTG_HS.pData = pdev;
 800b520:	4a21      	ldr	r2, [pc, #132]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
  pdev->pData = &hpcd_USB_OTG_HS;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a1f      	ldr	r2, [pc, #124]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b52c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b530:	4b1d      	ldr	r3, [pc, #116]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b532:	4a1e      	ldr	r2, [pc, #120]	; (800b5ac <USBD_LL_Init+0x9c>)
 800b534:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 11;
 800b536:	4b1c      	ldr	r3, [pc, #112]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b538:	220b      	movs	r2, #11
 800b53a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800b53c:	4b1a      	ldr	r3, [pc, #104]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b53e:	2200      	movs	r2, #0
 800b540:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 800b542:	4b19      	ldr	r3, [pc, #100]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b544:	2201      	movs	r2, #1
 800b546:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800b548:	4b17      	ldr	r3, [pc, #92]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800b54e:	4b16      	ldr	r3, [pc, #88]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b550:	2201      	movs	r2, #1
 800b552:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b554:	4b14      	ldr	r3, [pc, #80]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b556:	2200      	movs	r2, #0
 800b558:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b55a:	4b13      	ldr	r3, [pc, #76]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b560:	4b11      	ldr	r3, [pc, #68]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b562:	2200      	movs	r2, #0
 800b564:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800b566:	4b10      	ldr	r3, [pc, #64]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b568:	2201      	movs	r2, #1
 800b56a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b56c:	4b0e      	ldr	r3, [pc, #56]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b56e:	2200      	movs	r2, #0
 800b570:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b572:	4b0d      	ldr	r3, [pc, #52]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b574:	2200      	movs	r2, #0
 800b576:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_PCD_Init(&hpcd_USB_OTG_HS);
 800b578:	480b      	ldr	r0, [pc, #44]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b57a:	f7f6 fae3 	bl	8001b44 <HAL_PCD_Init>

  HAL_PCD_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b57e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b582:	4809      	ldr	r0, [pc, #36]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b584:	f7f7 fb14 	bl	8002bb0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b588:	2280      	movs	r2, #128	; 0x80
 800b58a:	2100      	movs	r1, #0
 800b58c:	4806      	ldr	r0, [pc, #24]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b58e:	f7f7 fac4 	bl	8002b1a <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b592:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800b596:	2101      	movs	r1, #1
 800b598:	4803      	ldr	r0, [pc, #12]	; (800b5a8 <USBD_LL_Init+0x98>)
 800b59a:	f7f7 fabe 	bl	8002b1a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	200009b0 	.word	0x200009b0
 800b5ac:	40040000 	.word	0x40040000

0800b5b0 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7f6 fbc7 	bl	8001d52 <HAL_PCD_Start>
  return USBD_OK; 
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	4608      	mov	r0, r1
 800b5d8:	4611      	mov	r1, r2
 800b5da:	461a      	mov	r2, r3
 800b5dc:	4603      	mov	r3, r0
 800b5de:	70fb      	strb	r3, [r7, #3]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70bb      	strb	r3, [r7, #2]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	803b      	strh	r3, [r7, #0]

  HAL_PCD_EP_Open(pdev->pData, 
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800b5ee:	78bb      	ldrb	r3, [r7, #2]
 800b5f0:	883a      	ldrh	r2, [r7, #0]
 800b5f2:	78f9      	ldrb	r1, [r7, #3]
 800b5f4:	f7f6 ffbc 	bl	8002570 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b614:	78fa      	ldrb	r2, [r7, #3]
 800b616:	4611      	mov	r1, r2
 800b618:	4618      	mov	r0, r3
 800b61a:	f7f7 f812 	bl	8002642 <HAL_PCD_EP_Close>
  return USBD_OK; 
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	460b      	mov	r3, r1
 800b632:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b63a:	78fa      	ldrb	r2, [r7, #3]
 800b63c:	4611      	mov	r1, r2
 800b63e:	4618      	mov	r0, r3
 800b640:	f7f7 f9bd 	bl	80029be <HAL_PCD_EP_Flush>
  return USBD_OK; 
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b082      	sub	sp, #8
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	460b      	mov	r3, r1
 800b658:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b660:	78fa      	ldrb	r2, [r7, #3]
 800b662:	4611      	mov	r1, r2
 800b664:	4618      	mov	r0, r3
 800b666:	f7f7 f902 	bl	800286e <HAL_PCD_EP_SetStall>
  return USBD_OK; 
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b686:	78fa      	ldrb	r2, [r7, #3]
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7f7 f94b 	bl	8002926 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800b69a:	b480      	push	{r7}
 800b69c:	b085      	sub	sp, #20
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b6ac:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b6ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	da0b      	bge.n	800b6ce <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6bc:	68f9      	ldr	r1, [r7, #12]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	00db      	lsls	r3, r3, #3
 800b6c2:	1a9b      	subs	r3, r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	440b      	add	r3, r1
 800b6c8:	333a      	adds	r3, #58	; 0x3a
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	e00b      	b.n	800b6e6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b6ce:	78fb      	ldrb	r3, [r7, #3]
 800b6d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	1a9b      	subs	r3, r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	440b      	add	r3, r1
 800b6e0:	f503 73ef 	add.w	r3, r3, #478	; 0x1de
 800b6e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b082      	sub	sp, #8
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	4611      	mov	r1, r2
 800b708:	4618      	mov	r0, r3
 800b70a:	f7f6 ff10 	bl	800252e <HAL_PCD_SetAddress>
  return USBD_OK; 
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	607a      	str	r2, [r7, #4]
 800b722:	461a      	mov	r2, r3
 800b724:	460b      	mov	r3, r1
 800b726:	72fb      	strb	r3, [r7, #11]
 800b728:	4613      	mov	r3, r2
 800b72a:	813b      	strh	r3, [r7, #8]

  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800b732:	893b      	ldrh	r3, [r7, #8]
 800b734:	7af9      	ldrb	r1, [r7, #11]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	f7f7 f841 	bl	80027be <HAL_PCD_EP_Transmit>
  return USBD_OK;   
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	461a      	mov	r2, r3
 800b752:	460b      	mov	r3, r1
 800b754:	72fb      	strb	r3, [r7, #11]
 800b756:	4613      	mov	r3, r2
 800b758:	813b      	strh	r3, [r7, #8]

  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800b760:	893b      	ldrh	r3, [r7, #8]
 800b762:	7af9      	ldrb	r1, [r7, #11]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	f7f6 ffb7 	bl	80026d8 <HAL_PCD_EP_Receive>
  return USBD_OK;   
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f6 fffe 	bl	800278c <HAL_PCD_EP_GetRxCount>
 800b790:	4603      	mov	r3, r0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <USBD_HS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	6039      	str	r1, [r7, #0]
 800b7a6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_DeviceDesc);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2212      	movs	r2, #18
 800b7ac:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800b7ae:	4b03      	ldr	r3, [pc, #12]	; (800b7bc <USBD_HS_DeviceDescriptor+0x20>)
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	200000c4 	.word	0x200000c4

0800b7c0 <USBD_HS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2204      	movs	r2, #4
 800b7d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7d2:	4b03      	ldr	r3, [pc, #12]	; (800b7e0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	200000d8 	.word	0x200000d8

0800b7e4 <USBD_HS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d105      	bne.n	800b802 <USBD_HS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString ((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	4907      	ldr	r1, [pc, #28]	; (800b818 <USBD_HS_ProductStrDescriptor+0x34>)
 800b7fa:	4808      	ldr	r0, [pc, #32]	; (800b81c <USBD_HS_ProductStrDescriptor+0x38>)
 800b7fc:	f7fe f9e1 	bl	8009bc2 <USBD_GetString>
 800b800:	e004      	b.n	800b80c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);    
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	4904      	ldr	r1, [pc, #16]	; (800b818 <USBD_HS_ProductStrDescriptor+0x34>)
 800b806:	4805      	ldr	r0, [pc, #20]	; (800b81c <USBD_HS_ProductStrDescriptor+0x38>)
 800b808:	f7fe f9db 	bl	8009bc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b80c:	4b02      	ldr	r3, [pc, #8]	; (800b818 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20000d68 	.word	0x20000d68
 800b81c:	08017604 	.word	0x08017604

0800b820 <USBD_HS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	6039      	str	r1, [r7, #0]
 800b82a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString ((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	4904      	ldr	r1, [pc, #16]	; (800b840 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800b830:	4804      	ldr	r0, [pc, #16]	; (800b844 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800b832:	f7fe f9c6 	bl	8009bc2 <USBD_GetString>
  return USBD_StrDesc;
 800b836:	4b02      	ldr	r3, [pc, #8]	; (800b840 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20000d68 	.word	0x20000d68
 800b844:	08017604 	.word	0x08017604

0800b848 <USBD_HS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	6039      	str	r1, [r7, #0]
 800b852:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d105      	bne.n	800b866 <USBD_HS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	4907      	ldr	r1, [pc, #28]	; (800b87c <USBD_HS_SerialStrDescriptor+0x34>)
 800b85e:	4808      	ldr	r0, [pc, #32]	; (800b880 <USBD_HS_SerialStrDescriptor+0x38>)
 800b860:	f7fe f9af 	bl	8009bc2 <USBD_GetString>
 800b864:	e004      	b.n	800b870 <USBD_HS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);    
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	4904      	ldr	r1, [pc, #16]	; (800b87c <USBD_HS_SerialStrDescriptor+0x34>)
 800b86a:	4805      	ldr	r0, [pc, #20]	; (800b880 <USBD_HS_SerialStrDescriptor+0x38>)
 800b86c:	f7fe f9a9 	bl	8009bc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b870:	4b02      	ldr	r3, [pc, #8]	; (800b87c <USBD_HS_SerialStrDescriptor+0x34>)
}
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	20000d68 	.word	0x20000d68
 800b880:	0801760c 	.word	0x0801760c

0800b884 <USBD_HS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 800b890:	79fb      	ldrb	r3, [r7, #7]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d105      	bne.n	800b8a2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	4907      	ldr	r1, [pc, #28]	; (800b8b8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b89a:	4808      	ldr	r0, [pc, #32]	; (800b8bc <USBD_HS_ConfigStrDescriptor+0x38>)
 800b89c:	f7fe f991 	bl	8009bc2 <USBD_GetString>
 800b8a0:	e004      	b.n	800b8ac <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length); 
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	4904      	ldr	r1, [pc, #16]	; (800b8b8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b8a6:	4805      	ldr	r0, [pc, #20]	; (800b8bc <USBD_HS_ConfigStrDescriptor+0x38>)
 800b8a8:	f7fe f98b 	bl	8009bc2 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800b8ac:	4b02      	ldr	r3, [pc, #8]	; (800b8b8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000d68 	.word	0x20000d68
 800b8bc:	0801761c 	.word	0x0801761c

0800b8c0 <USBD_HS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	6039      	str	r1, [r7, #0]
 800b8ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8cc:	79fb      	ldrb	r3, [r7, #7]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d105      	bne.n	800b8de <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString ((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	4907      	ldr	r1, [pc, #28]	; (800b8f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b8d6:	4808      	ldr	r0, [pc, #32]	; (800b8f8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b8d8:	f7fe f973 	bl	8009bc2 <USBD_GetString>
 800b8dc:	e004      	b.n	800b8e8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	4904      	ldr	r1, [pc, #16]	; (800b8f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b8e2:	4805      	ldr	r0, [pc, #20]	; (800b8f8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b8e4:	f7fe f96d 	bl	8009bc2 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800b8e8:	4b02      	ldr	r3, [pc, #8]	; (800b8f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000d68 	.word	0x20000d68
 800b8f8:	08017628 	.word	0x08017628

0800b8fc <STORAGE_Init_HS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_HS (uint8_t lun)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	4603      	mov	r3, r0
 800b904:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */ 
  return (USBD_OK);
 800b906:	2300      	movs	r3, #0
  /* USER CODE END 9 */ 
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <STORAGE_GetCapacity_HS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_HS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */   
	if (!secube_sdio_capacity(block_num, block_size))
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	68b8      	ldr	r0, [r7, #8]
 800b926:	f7ff f8fb 	bl	800ab20 <secube_sdio_capacity>
 800b92a:	4603      	mov	r3, r0
 800b92c:	f083 0301 	eor.w	r3, r3, #1
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <STORAGE_GetCapacity_HS+0x26>
		return USBD_FAIL;
 800b936:	2302      	movs	r3, #2
 800b938:	e000      	b.n	800b93c <STORAGE_GetCapacity_HS+0x28>

	return USBD_OK;
 800b93a:	2300      	movs	r3, #0
  /* USER CODE END 10 */ 
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <STORAGE_IsReady_HS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_HS (uint8_t lun)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */ 
	if (!secube_sdio_isready())
 800b94e:	f7ff f911 	bl	800ab74 <secube_sdio_isready>
 800b952:	4603      	mov	r3, r0
 800b954:	f083 0301 	eor.w	r3, r3, #1
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <STORAGE_IsReady_HS+0x1e>
		return USBD_FAIL;
 800b95e:	2302      	movs	r3, #2
 800b960:	e000      	b.n	800b964 <STORAGE_IsReady_HS+0x20>

	return USBD_OK;
 800b962:	2300      	movs	r3, #0
  /* USER CODE END 11 */ 
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <STORAGE_IsWriteProtected_HS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_HS (uint8_t lun)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */ 
  return (USBD_OK);
 800b976:	2300      	movs	r3, #0
  /* USER CODE END 12 */ 
}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <STORAGE_Read_HS>:
*******************************************************************************/
int8_t STORAGE_Read_HS (uint8_t lun, 
                        uint8_t *buf, 
                        uint32_t blk_addr,                       
                        uint16_t blk_len)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	461a      	mov	r2, r3
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]
 800b994:	4613      	mov	r3, r2
 800b996:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 13 */ 
	int32_t r = se3_proto_send(lun, buf, blk_addr, blk_len);
 800b998:	89bb      	ldrh	r3, [r7, #12]
 800b99a:	7bf8      	ldrb	r0, [r7, #15]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	68b9      	ldr	r1, [r7, #8]
 800b9a0:	f008 f87e 	bl	8013aa0 <se3_proto_send>
 800b9a4:	6178      	str	r0, [r7, #20]
	if(r==SE3_PROTO_BUSY){
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d101      	bne.n	800b9b0 <STORAGE_Read_HS+0x2c>
		return USBD_BUSY;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e005      	b.n	800b9bc <STORAGE_Read_HS+0x38>
	}
	else if(r==SE3_PROTO_OK){
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <STORAGE_Read_HS+0x36>
		return USBD_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e000      	b.n	800b9bc <STORAGE_Read_HS+0x38>
	}
	return USBD_FAIL;
 800b9ba:	2302      	movs	r3, #2
	//if (_SEcube_device_send_data(lun, buf, blk_addr, blk_len) != PROTOCOL_OK)
	//	return USBD_FAIL;

	//return USBD_OK;
  /* USER CODE END 13 */ 
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <STORAGE_Write_HS>:
*******************************************************************************/
int8_t STORAGE_Write_HS (uint8_t lun, 
                         uint8_t *buf, 
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60b9      	str	r1, [r7, #8]
 800b9cc:	607a      	str	r2, [r7, #4]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73fb      	strb	r3, [r7, #15]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 14 */ 
	if(SE3_PROTO_OK != se3_proto_recv(lun, buf, blk_addr, blk_len))
 800b9d8:	89bb      	ldrh	r3, [r7, #12]
 800b9da:	7bf8      	ldrb	r0, [r7, #15]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	f007 fee4 	bl	80137ac <se3_proto_recv>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d001      	beq.n	800b9ee <STORAGE_Write_HS+0x2a>
		return USBD_FAIL;
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e000      	b.n	800b9f0 <STORAGE_Write_HS+0x2c>
	return USBD_OK;
 800b9ee:	2300      	movs	r3, #0
	//if (_SEcube_device_receive_data(lun, buf, blk_addr, blk_len) != PROTOCOL_OK)
	//	return USBD_FAIL;

	//return USBD_OK;
  /* USER CODE END 14 */ 
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <STORAGE_GetMaxLun_HS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_HS (void)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */ 
  return (STORAGE_LUN_NBR - 1);
 800b9fc:	2300      	movs	r3, #0
  /* USER CODE END 15 */   
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <B5_AES256_GETUINT32>:
 * @brief Convert a 4 bytes array into a 32 bit word.
 * @param pt Byte array to be converted.
 * @return 32-bit word extracted from input array.
 */
uint32_t B5_AES256_GETUINT32 (const uint8_t *pt)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
    uint16_t ph,pl;
    uint32_t p;
    
    ph = ((uint16_t) pt[0]) << 8;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	021b      	lsls	r3, r3, #8
 800ba18:	81fb      	strh	r3, [r7, #14]
    ph ^= ((uint16_t) pt[1]) & 0x00ff;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	89fb      	ldrh	r3, [r7, #14]
 800ba24:	4053      	eors	r3, r2
 800ba26:	81fb      	strh	r3, [r7, #14]
    pl = ((uint16_t) pt[2]) << 8;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3302      	adds	r3, #2
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	021b      	lsls	r3, r3, #8
 800ba32:	81bb      	strh	r3, [r7, #12]
    pl ^= ((uint16_t) pt[3]) & 0x00ff;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3303      	adds	r3, #3
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	89bb      	ldrh	r3, [r7, #12]
 800ba3e:	4053      	eors	r3, r2
 800ba40:	81bb      	strh	r3, [r7, #12]
    p = (((uint32_t) ph) << 16) ^ pl;
 800ba42:	89fb      	ldrh	r3, [r7, #14]
 800ba44:	041a      	lsls	r2, r3, #16
 800ba46:	89bb      	ldrh	r3, [r7, #12]
 800ba48:	4053      	eors	r3, r2
 800ba4a:	60bb      	str	r3, [r7, #8]
    return p;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <B5_AES256_PUTUINT32>:
 * @brief Convert a 32 bit word into a 4 bytes array.
 * @param ct Pointer to converted array.
 * @param st 32-bit word to be converted.
 */
void B5_AES256_PUTUINT32 (uint8_t *ct, const uint32_t st)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
    ct[0] = (uint8_t)((st) >> 24);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	0e1b      	lsrs	r3, r3, #24
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	701a      	strb	r2, [r3, #0]
    ct[1] = (uint8_t)((st) >> 16);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	0c1a      	lsrs	r2, r3, #16
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	3301      	adds	r3, #1
 800ba76:	b2d2      	uxtb	r2, r2
 800ba78:	701a      	strb	r2, [r3, #0]
    ct[2] = (uint8_t)((st) >>  8);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	0a1a      	lsrs	r2, r3, #8
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	3302      	adds	r3, #2
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	701a      	strb	r2, [r3, #0]
    ct[3] = (uint8_t)(st);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	3303      	adds	r3, #3
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	b2d2      	uxtb	r2, r2
 800ba8e:	701a      	strb	r2, [r3, #0]
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <B5_rijndaelKeySetupEnc>:
 * @param cipherKey Key to be expanded.
 * @param keyBits Key length. Key length. See \ref aesKeys for supported sizes.
 * @return Number of rounds for the given cipher key size (10, 12, 14).
 */
static uint8_t B5_rijndaelKeySetupEnc (B5_tAesCtx *ctx, uint32_t *rk, const uint8_t *cipherKey, int16_t keyBits) 
{
 800ba9c:	b590      	push	{r4, r7, lr}
 800ba9e:	b08d      	sub	sp, #52	; 0x34
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	807b      	strh	r3, [r7, #2]
    int16_t i;
    uint32_t temp;
    uint32_t ut0, ut1, ut2, ut3, ut4;
    
    i = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rk[0] = B5_AES256_GETUINT32(cipherKey     );
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f7ff ffaa 	bl	800ba08 <B5_AES256_GETUINT32>
 800bab4:	4602      	mov	r2, r0
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	601a      	str	r2, [r3, #0]
    rk[1] = B5_AES256_GETUINT32(cipherKey +  4);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	1d1a      	adds	r2, r3, #4
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	1d1c      	adds	r4, r3, #4
 800bac2:	4610      	mov	r0, r2
 800bac4:	f7ff ffa0 	bl	800ba08 <B5_AES256_GETUINT32>
 800bac8:	4603      	mov	r3, r0
 800baca:	6023      	str	r3, [r4, #0]
    rk[2] = B5_AES256_GETUINT32(cipherKey +  8);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f103 0208 	add.w	r2, r3, #8
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	f103 0408 	add.w	r4, r3, #8
 800bad8:	4610      	mov	r0, r2
 800bada:	f7ff ff95 	bl	800ba08 <B5_AES256_GETUINT32>
 800bade:	4603      	mov	r3, r0
 800bae0:	6023      	str	r3, [r4, #0]
    rk[3] = B5_AES256_GETUINT32(cipherKey + 12);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f103 020c 	add.w	r2, r3, #12
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	f103 040c 	add.w	r4, r3, #12
 800baee:	4610      	mov	r0, r2
 800baf0:	f7ff ff8a 	bl	800ba08 <B5_AES256_GETUINT32>
 800baf4:	4603      	mov	r3, r0
 800baf6:	6023      	str	r3, [r4, #0]
    
    if (keyBits == 128) 
 800baf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bafc:	2b80      	cmp	r3, #128	; 0x80
 800bafe:	d172      	bne.n	800bbe6 <B5_rijndaelKeySetupEnc+0x14a>
    {
        for (;;) 
        {
            temp  = rk[3];
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	62bb      	str	r3, [r7, #40]	; 0x28
            memcpy(&ut0, &ctx->Te4[(temp >> 16) & 0xff], sizeof(uint32_t));
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	0c1b      	lsrs	r3, r3, #16
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
            memcpy(&ut1, &ctx->Te4[(temp >>  8) & 0xff], sizeof(uint32_t));
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	0a1b      	lsrs	r3, r3, #8
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	623b      	str	r3, [r7, #32]
            memcpy(&ut2, &ctx->Te4[(temp      ) & 0xff], sizeof(uint32_t));
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	61fb      	str	r3, [r7, #28]
            memcpy(&ut3, &ctx->Te4[(temp >> 24)       ], sizeof(uint32_t));
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	0e1b      	lsrs	r3, r3, #24
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4413      	add	r3, r2
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	61bb      	str	r3, [r7, #24]
            memcpy(&ut4, &B5_rcon[i], sizeof(uint32_t));
 800bb52:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4a74      	ldr	r2, [pc, #464]	; (800bd2c <B5_rijndaelKeySetupEnc+0x290>)
 800bb5a:	4413      	add	r3, r2
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	617b      	str	r3, [r7, #20]
            
            rk[4] = rk[0] ^
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	681a      	ldr	r2, [r3, #0]
                    (ut0 & 0xff000000) ^
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
            rk[4] = rk[0] ^
 800bb6a:	405a      	eors	r2, r3
                    (ut1 & 0x00ff0000) ^
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                    (ut0 & 0xff000000) ^
 800bb72:	405a      	eors	r2, r3
                    (ut2 & 0x0000ff00) ^
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (ut1 & 0x00ff0000) ^
 800bb7a:	405a      	eors	r2, r3
                    (ut3 & 0x000000ff) ^
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	b2db      	uxtb	r3, r3
                    (ut2 & 0x0000ff00) ^
 800bb80:	ea82 0103 	eor.w	r1, r2, r3
                    (ut3 & 0x000000ff) ^
 800bb84:	697a      	ldr	r2, [r7, #20]
            rk[4] = rk[0] ^
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	3310      	adds	r3, #16
                    (ut3 & 0x000000ff) ^
 800bb8a:	404a      	eors	r2, r1
            rk[4] = rk[0] ^
 800bb8c:	601a      	str	r2, [r3, #0]
                    ut4;
            
            rk[5] = rk[1] ^ rk[4];
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	3304      	adds	r3, #4
 800bb92:	6819      	ldr	r1, [r3, #0]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	3310      	adds	r3, #16
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	3314      	adds	r3, #20
 800bb9e:	404a      	eors	r2, r1
 800bba0:	601a      	str	r2, [r3, #0]
            rk[6] = rk[2] ^ rk[5];
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	3308      	adds	r3, #8
 800bba6:	6819      	ldr	r1, [r3, #0]
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	3314      	adds	r3, #20
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	3318      	adds	r3, #24
 800bbb2:	404a      	eors	r2, r1
 800bbb4:	601a      	str	r2, [r3, #0]
            rk[7] = rk[3] ^ rk[6];
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	330c      	adds	r3, #12
 800bbba:	6819      	ldr	r1, [r3, #0]
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	3318      	adds	r3, #24
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	331c      	adds	r3, #28
 800bbc6:	404a      	eors	r2, r1
 800bbc8:	601a      	str	r2, [r3, #0]
            
            if (++i == 10) return 10;
 800bbca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbcc:	3301      	adds	r3, #1
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bbd2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bbd6:	2b0a      	cmp	r3, #10
 800bbd8:	d101      	bne.n	800bbde <B5_rijndaelKeySetupEnc+0x142>
 800bbda:	230a      	movs	r3, #10
 800bbdc:	e195      	b.n	800bf0a <B5_rijndaelKeySetupEnc+0x46e>
            rk += 4;
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	3310      	adds	r3, #16
 800bbe2:	60bb      	str	r3, [r7, #8]
            temp  = rk[3];
 800bbe4:	e78c      	b.n	800bb00 <B5_rijndaelKeySetupEnc+0x64>
        }
    }
    
    rk[4] = B5_AES256_GETUINT32(cipherKey + 16);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f103 0210 	add.w	r2, r3, #16
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f103 0410 	add.w	r4, r3, #16
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	f7ff ff08 	bl	800ba08 <B5_AES256_GETUINT32>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	6023      	str	r3, [r4, #0]
    rk[5] = B5_AES256_GETUINT32(cipherKey + 20);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f103 0214 	add.w	r2, r3, #20
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	f103 0414 	add.w	r4, r3, #20
 800bc08:	4610      	mov	r0, r2
 800bc0a:	f7ff fefd 	bl	800ba08 <B5_AES256_GETUINT32>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	6023      	str	r3, [r4, #0]
    
    if (keyBits == 192) 
 800bc12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bc16:	2bc0      	cmp	r3, #192	; 0xc0
 800bc18:	f040 808a 	bne.w	800bd30 <B5_rijndaelKeySetupEnc+0x294>
    {
        for (;;) 
        {
            temp = rk[5];
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	62bb      	str	r3, [r7, #40]	; 0x28
            memcpy(&ut0, &ctx->Te4[(temp >> 16) & 0xff], sizeof(uint32_t));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	0c1b      	lsrs	r3, r3, #16
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	627b      	str	r3, [r7, #36]	; 0x24
            memcpy(&ut1, &ctx->Te4[(temp >>  8) & 0xff], sizeof(uint32_t));
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	0a1b      	lsrs	r3, r3, #8
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	623b      	str	r3, [r7, #32]
            memcpy(&ut2, &ctx->Te4[(temp      ) & 0xff], sizeof(uint32_t));
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	61fb      	str	r3, [r7, #28]
            memcpy(&ut3, &ctx->Te4[(temp >> 24)       ], sizeof(uint32_t));
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	0e1b      	lsrs	r3, r3, #24
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	61bb      	str	r3, [r7, #24]
            memcpy(&ut4, &B5_rcon[i], sizeof(uint32_t));
 800bc6e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4a2d      	ldr	r2, [pc, #180]	; (800bd2c <B5_rijndaelKeySetupEnc+0x290>)
 800bc76:	4413      	add	r3, r2
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	617b      	str	r3, [r7, #20]
            
            rk[ 6] = rk[ 0] ^
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	681a      	ldr	r2, [r3, #0]
                    (ut0 & 0xff000000) ^
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
            rk[ 6] = rk[ 0] ^
 800bc86:	405a      	eors	r2, r3
                    (ut1 & 0x00ff0000) ^
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                    (ut0 & 0xff000000) ^
 800bc8e:	405a      	eors	r2, r3
                    (ut2 & 0x0000ff00) ^
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (ut1 & 0x00ff0000) ^
 800bc96:	405a      	eors	r2, r3
                    (ut3 & 0x000000ff) ^
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	b2db      	uxtb	r3, r3
                    (ut2 & 0x0000ff00) ^
 800bc9c:	ea82 0103 	eor.w	r1, r2, r3
                    (ut3 & 0x000000ff) ^
 800bca0:	697a      	ldr	r2, [r7, #20]
            rk[ 6] = rk[ 0] ^
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	3318      	adds	r3, #24
                    (ut3 & 0x000000ff) ^
 800bca6:	404a      	eors	r2, r1
            rk[ 6] = rk[ 0] ^
 800bca8:	601a      	str	r2, [r3, #0]
                    ut4;
            
            rk[ 7] = rk[ 1] ^ rk[ 6];
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	3304      	adds	r3, #4
 800bcae:	6819      	ldr	r1, [r3, #0]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	3318      	adds	r3, #24
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	331c      	adds	r3, #28
 800bcba:	404a      	eors	r2, r1
 800bcbc:	601a      	str	r2, [r3, #0]
            rk[ 8] = rk[ 2] ^ rk[ 7];
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	6819      	ldr	r1, [r3, #0]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	331c      	adds	r3, #28
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	3320      	adds	r3, #32
 800bcce:	404a      	eors	r2, r1
 800bcd0:	601a      	str	r2, [r3, #0]
            rk[ 9] = rk[ 3] ^ rk[ 8];
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	330c      	adds	r3, #12
 800bcd6:	6819      	ldr	r1, [r3, #0]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	3320      	adds	r3, #32
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	3324      	adds	r3, #36	; 0x24
 800bce2:	404a      	eors	r2, r1
 800bce4:	601a      	str	r2, [r3, #0]
            
            if (++i == 8) return 12;
 800bce6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bce8:	3301      	adds	r3, #1
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bcee:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bcf2:	2b08      	cmp	r3, #8
 800bcf4:	d101      	bne.n	800bcfa <B5_rijndaelKeySetupEnc+0x25e>
 800bcf6:	230c      	movs	r3, #12
 800bcf8:	e107      	b.n	800bf0a <B5_rijndaelKeySetupEnc+0x46e>
            rk[10] = rk[ 4] ^ rk[ 9];
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	3310      	adds	r3, #16
 800bcfe:	6819      	ldr	r1, [r3, #0]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	3324      	adds	r3, #36	; 0x24
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	3328      	adds	r3, #40	; 0x28
 800bd0a:	404a      	eors	r2, r1
 800bd0c:	601a      	str	r2, [r3, #0]
            rk[11] = rk[ 5] ^ rk[10];
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	3314      	adds	r3, #20
 800bd12:	6819      	ldr	r1, [r3, #0]
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	3328      	adds	r3, #40	; 0x28
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	332c      	adds	r3, #44	; 0x2c
 800bd1e:	404a      	eors	r2, r1
 800bd20:	601a      	str	r2, [r3, #0]
            rk += 6;
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	3318      	adds	r3, #24
 800bd26:	60bb      	str	r3, [r7, #8]
            temp = rk[5];
 800bd28:	e778      	b.n	800bc1c <B5_rijndaelKeySetupEnc+0x180>
 800bd2a:	bf00      	nop
 800bd2c:	08019ec0 	.word	0x08019ec0
        }
    }
    
    rk[6] = B5_AES256_GETUINT32(cipherKey + 24);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f103 0218 	add.w	r2, r3, #24
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f103 0418 	add.w	r4, r3, #24
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f7ff fe63 	bl	800ba08 <B5_AES256_GETUINT32>
 800bd42:	4603      	mov	r3, r0
 800bd44:	6023      	str	r3, [r4, #0]
    rk[7] = B5_AES256_GETUINT32(cipherKey + 28);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f103 021c 	add.w	r2, r3, #28
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	f103 041c 	add.w	r4, r3, #28
 800bd52:	4610      	mov	r0, r2
 800bd54:	f7ff fe58 	bl	800ba08 <B5_AES256_GETUINT32>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	6023      	str	r3, [r4, #0]
    
    if (keyBits == 256) 
 800bd5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd64:	f040 80d0 	bne.w	800bf08 <B5_rijndaelKeySetupEnc+0x46c>
    {
        for (;;) 
        {
            temp = rk[ 7];
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	69db      	ldr	r3, [r3, #28]
 800bd6c:	62bb      	str	r3, [r7, #40]	; 0x28
            memcpy(&ut0, &ctx->Te4[(temp >> 16) & 0xff], sizeof(uint32_t));
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	0c1b      	lsrs	r3, r3, #16
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24
            memcpy(&ut1, &ctx->Te4[(temp >>  8) & 0xff], sizeof(uint32_t));
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	0a1b      	lsrs	r3, r3, #8
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	623b      	str	r3, [r7, #32]
            memcpy(&ut2, &ctx->Te4[(temp      ) & 0xff], sizeof(uint32_t));
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	61fb      	str	r3, [r7, #28]
            memcpy(&ut3, &ctx->Te4[(temp >> 24)       ], sizeof(uint32_t));
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb0:	0e1b      	lsrs	r3, r3, #24
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	61bb      	str	r3, [r7, #24]
            memcpy(&ut4, &B5_rcon[i], sizeof(uint32_t));
 800bdba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4a54      	ldr	r2, [pc, #336]	; (800bf14 <B5_rijndaelKeySetupEnc+0x478>)
 800bdc2:	4413      	add	r3, r2
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	617b      	str	r3, [r7, #20]
            
            rk[ 8] = rk[ 0] ^
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	681a      	ldr	r2, [r3, #0]
                    (ut0 & 0xff000000) ^
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
            rk[ 8] = rk[ 0] ^
 800bdd2:	405a      	eors	r2, r3
                    (ut1 & 0x00ff0000) ^
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                    (ut0 & 0xff000000) ^
 800bdda:	405a      	eors	r2, r3
                    (ut2 & 0x0000ff00) ^
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (ut1 & 0x00ff0000) ^
 800bde2:	405a      	eors	r2, r3
                    (ut3 & 0x000000ff) ^
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	b2db      	uxtb	r3, r3
                    (ut2 & 0x0000ff00) ^
 800bde8:	ea82 0103 	eor.w	r1, r2, r3
                    (ut3 & 0x000000ff) ^
 800bdec:	697a      	ldr	r2, [r7, #20]
            rk[ 8] = rk[ 0] ^
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	3320      	adds	r3, #32
                    (ut3 & 0x000000ff) ^
 800bdf2:	404a      	eors	r2, r1
            rk[ 8] = rk[ 0] ^
 800bdf4:	601a      	str	r2, [r3, #0]
                    ut4;
            
            rk[ 9] = rk[ 1] ^ rk[ 8];
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	6819      	ldr	r1, [r3, #0]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	3320      	adds	r3, #32
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	3324      	adds	r3, #36	; 0x24
 800be06:	404a      	eors	r2, r1
 800be08:	601a      	str	r2, [r3, #0]
            rk[10] = rk[ 2] ^ rk[ 9];
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	3308      	adds	r3, #8
 800be0e:	6819      	ldr	r1, [r3, #0]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	3324      	adds	r3, #36	; 0x24
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	3328      	adds	r3, #40	; 0x28
 800be1a:	404a      	eors	r2, r1
 800be1c:	601a      	str	r2, [r3, #0]
            rk[11] = rk[ 3] ^ rk[10];
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	330c      	adds	r3, #12
 800be22:	6819      	ldr	r1, [r3, #0]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	3328      	adds	r3, #40	; 0x28
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	332c      	adds	r3, #44	; 0x2c
 800be2e:	404a      	eors	r2, r1
 800be30:	601a      	str	r2, [r3, #0]
            
            if (++i == 7) return 14;
 800be32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be34:	3301      	adds	r3, #1
 800be36:	b29b      	uxth	r3, r3
 800be38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800be3a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800be3e:	2b07      	cmp	r3, #7
 800be40:	d101      	bne.n	800be46 <B5_rijndaelKeySetupEnc+0x3aa>
 800be42:	230e      	movs	r3, #14
 800be44:	e061      	b.n	800bf0a <B5_rijndaelKeySetupEnc+0x46e>
            temp = rk[11];
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4a:	62bb      	str	r3, [r7, #40]	; 0x28
            memcpy(&ut0, &ctx->Te4[(temp >> 24)       ], sizeof(uint32_t));
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	0e1b      	lsrs	r3, r3, #24
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
            memcpy(&ut1, &ctx->Te4[(temp >> 16) & 0xff], sizeof(uint32_t));
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	0c1b      	lsrs	r3, r3, #16
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	623b      	str	r3, [r7, #32]
            memcpy(&ut2, &ctx->Te4[(temp >>  8) & 0xff], sizeof(uint32_t));
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	0a1b      	lsrs	r3, r3, #8
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	61fb      	str	r3, [r7, #28]
            memcpy(&ut3, &ctx->Te4[(temp      ) & 0xff], sizeof(uint32_t));
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	61bb      	str	r3, [r7, #24]
            
            rk[ 12] = rk[ 4] ^
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	3310      	adds	r3, #16
 800be9c:	681a      	ldr	r2, [r3, #0]
                    (ut0 & 0xff000000) ^
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
            rk[ 12] = rk[ 4] ^
 800bea4:	405a      	eors	r2, r3
                    (ut1 & 0x00ff0000) ^
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                    (ut0 & 0xff000000) ^
 800beac:	405a      	eors	r2, r3
                    (ut2 & 0x0000ff00) ^
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (ut1 & 0x00ff0000) ^
 800beb4:	ea82 0103 	eor.w	r1, r2, r3
                    (ut3 & 0x000000ff);
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	b2da      	uxtb	r2, r3
            rk[ 12] = rk[ 4] ^
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3330      	adds	r3, #48	; 0x30
                    (ut2 & 0x0000ff00) ^
 800bec0:	404a      	eors	r2, r1
            rk[ 12] = rk[ 4] ^
 800bec2:	601a      	str	r2, [r3, #0]
            
            rk[13] = rk[ 5] ^ rk[12];
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	3314      	adds	r3, #20
 800bec8:	6819      	ldr	r1, [r3, #0]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	3330      	adds	r3, #48	; 0x30
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	3334      	adds	r3, #52	; 0x34
 800bed4:	404a      	eors	r2, r1
 800bed6:	601a      	str	r2, [r3, #0]
            rk[14] = rk[ 6] ^ rk[13];
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	3318      	adds	r3, #24
 800bedc:	6819      	ldr	r1, [r3, #0]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	3334      	adds	r3, #52	; 0x34
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	3338      	adds	r3, #56	; 0x38
 800bee8:	404a      	eors	r2, r1
 800beea:	601a      	str	r2, [r3, #0]
            rk[15] = rk[ 7] ^ rk[14];
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	331c      	adds	r3, #28
 800bef0:	6819      	ldr	r1, [r3, #0]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	3338      	adds	r3, #56	; 0x38
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	333c      	adds	r3, #60	; 0x3c
 800befc:	404a      	eors	r2, r1
 800befe:	601a      	str	r2, [r3, #0]
            
            rk += 8;
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	3320      	adds	r3, #32
 800bf04:	60bb      	str	r3, [r7, #8]
            temp = rk[ 7];
 800bf06:	e72f      	b.n	800bd68 <B5_rijndaelKeySetupEnc+0x2cc>
        }
    }
    return 0;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3734      	adds	r7, #52	; 0x34
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd90      	pop	{r4, r7, pc}
 800bf12:	bf00      	nop
 800bf14:	08019ec0 	.word	0x08019ec0

0800bf18 <B5_rijndaelKeySetupDec>:
 * @param cipherKey Key to be expanded.
 * @param keyBits Key length. See \ref aesKeys for supported sizes.
 * @return Number of rounds for the given cipher key size (10, 12, 14).
 */
static uint8_t B5_rijndaelKeySetupDec (B5_tAesCtx *ctx, uint32_t *rk, const uint8_t *cipherKey, int16_t keyBits)
{ 
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b088      	sub	sp, #32
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	807b      	strh	r3, [r7, #2]
    int Nr, i, j;
    uint32_t temp;
    
    /* expand the cipher key: */
    Nr = B5_rijndaelKeySetupEnc(ctx, rk, cipherKey, keyBits);
 800bf26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	68b9      	ldr	r1, [r7, #8]
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7ff fdb4 	bl	800ba9c <B5_rijndaelKeySetupEnc>
 800bf34:	4603      	mov	r3, r0
 800bf36:	617b      	str	r3, [r7, #20]
    /* invert the order of the round keys: */
    for (i = 0, j = 4*Nr; i < j; i += 4, j -= 4) {
 800bf38:	2300      	movs	r3, #0
 800bf3a:	61fb      	str	r3, [r7, #28]
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	61bb      	str	r3, [r7, #24]
 800bf42:	e069      	b.n	800c018 <B5_rijndaelKeySetupDec+0x100>
        temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	613b      	str	r3, [r7, #16]
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	441a      	add	r2, r3
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	68b9      	ldr	r1, [r7, #8]
 800bf5e:	440b      	add	r3, r1
 800bf60:	6812      	ldr	r2, [r2, #0]
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	601a      	str	r2, [r3, #0]
        temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	3301      	adds	r3, #1
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	4413      	add	r3, r2
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	613b      	str	r3, [r7, #16]
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	3301      	adds	r3, #1
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	441a      	add	r2, r3
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	440b      	add	r3, r1
 800bf92:	6812      	ldr	r2, [r2, #0]
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	601a      	str	r2, [r3, #0]
        temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	3302      	adds	r3, #2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	4413      	add	r3, r2
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	613b      	str	r3, [r7, #16]
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	3302      	adds	r3, #2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	441a      	add	r2, r3
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	3302      	adds	r3, #2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	68b9      	ldr	r1, [r7, #8]
 800bfc4:	440b      	add	r3, r1
 800bfc6:	6812      	ldr	r2, [r2, #0]
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	3302      	adds	r3, #2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	601a      	str	r2, [r3, #0]
        temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	3303      	adds	r3, #3
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	613b      	str	r3, [r7, #16]
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	3303      	adds	r3, #3
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	441a      	add	r2, r3
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	3303      	adds	r3, #3
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	440b      	add	r3, r1
 800bffa:	6812      	ldr	r2, [r2, #0]
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	3303      	adds	r3, #3
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	4413      	add	r3, r2
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	601a      	str	r2, [r3, #0]
    for (i = 0, j = 4*Nr; i < j; i += 4, j -= 4) {
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	3304      	adds	r3, #4
 800c010:	61fb      	str	r3, [r7, #28]
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	3b04      	subs	r3, #4
 800c016:	61bb      	str	r3, [r7, #24]
 800c018:	69fa      	ldr	r2, [r7, #28]
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	db91      	blt.n	800bf44 <B5_rijndaelKeySetupDec+0x2c>
    }
    /* apply the inverse MixColumn transform to all round keys but the first and the last: */
    for (i = 1; i < Nr; i++) {
 800c020:	2301      	movs	r3, #1
 800c022:	61fb      	str	r3, [r7, #28]
 800c024:	e133      	b.n	800c28e <B5_rijndaelKeySetupDec+0x376>
        rk += 4;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	3310      	adds	r3, #16
 800c02a:	60bb      	str	r3, [r7, #8]
        rk[0] =
                ctx->Td0[ctx->Te4[(rk[0] >> 24)       ] & 0xff] ^
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	0e1b      	lsrs	r3, r3, #24
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	b2db      	uxtb	r3, r3
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	681a      	ldr	r2, [r3, #0]
                ctx->Td1[ctx->Te4[(rk[0] >> 16) & 0xff] & 0xff] ^
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	0c1b      	lsrs	r3, r3, #16
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4403      	add	r3, r0
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	681b      	ldr	r3, [r3, #0]
                ctx->Td0[ctx->Te4[(rk[0] >> 24)       ] & 0xff] ^
 800c06e:	405a      	eors	r2, r3
                ctx->Td2[ctx->Te4[(rk[0] >>  8) & 0xff] & 0xff] ^
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	0a1b      	lsrs	r3, r3, #8
 800c082:	b2db      	uxtb	r3, r3
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4403      	add	r3, r0
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	440b      	add	r3, r1
 800c090:	681b      	ldr	r3, [r3, #0]
                ctx->Td1[ctx->Te4[(rk[0] >> 16) & 0xff] & 0xff] ^
 800c092:	405a      	eors	r2, r3
                ctx->Td3[ctx->Te4[(rk[0]      ) & 0xff] & 0xff];
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4403      	add	r3, r0
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	440b      	add	r3, r1
 800c0b2:	681b      	ldr	r3, [r3, #0]
                ctx->Td2[ctx->Te4[(rk[0] >>  8) & 0xff] & 0xff] ^
 800c0b4:	405a      	eors	r2, r3
        rk[0] =
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	601a      	str	r2, [r3, #0]
        rk[1] =
                ctx->Td0[ctx->Te4[(rk[1] >> 24)       ] & 0xff] ^
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	0e1b      	lsrs	r3, r3, #24
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	440b      	add	r3, r1
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	681a      	ldr	r2, [r3, #0]
                ctx->Td1[ctx->Te4[(rk[1] >> 16) & 0xff] & 0xff] ^
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	0c1b      	lsrs	r3, r3, #16
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4403      	add	r3, r0
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	681b      	ldr	r3, [r3, #0]
                ctx->Td0[ctx->Te4[(rk[1] >> 24)       ] & 0xff] ^
 800c100:	405a      	eors	r2, r3
                ctx->Td2[ctx->Te4[(rk[1] >>  8) & 0xff] & 0xff] ^
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	3304      	adds	r3, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	0a1b      	lsrs	r3, r3, #8
 800c116:	b2db      	uxtb	r3, r3
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4403      	add	r3, r0
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	440b      	add	r3, r1
 800c124:	681b      	ldr	r3, [r3, #0]
                ctx->Td1[ctx->Te4[(rk[1] >> 16) & 0xff] & 0xff] ^
 800c126:	ea82 0103 	eor.w	r1, r2, r3
                ctx->Td3[ctx->Te4[(rk[1]      ) & 0xff] & 0xff];
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	3304      	adds	r3, #4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4403      	add	r3, r0
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	b2db      	uxtb	r3, r3
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	681a      	ldr	r2, [r3, #0]
        rk[1] =
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	3304      	adds	r3, #4
                ctx->Td2[ctx->Te4[(rk[1] >>  8) & 0xff] & 0xff] ^
 800c150:	404a      	eors	r2, r1
        rk[1] =
 800c152:	601a      	str	r2, [r3, #0]
        rk[2] =
                ctx->Td0[ctx->Te4[(rk[2] >> 24)       ] & 0xff] ^
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	3308      	adds	r3, #8
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	0e1b      	lsrs	r3, r3, #24
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	440b      	add	r3, r1
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	681a      	ldr	r2, [r3, #0]
                ctx->Td1[ctx->Te4[(rk[2] >> 16) & 0xff] & 0xff] ^
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	3308      	adds	r3, #8
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	0c1b      	lsrs	r3, r3, #16
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4403      	add	r3, r0
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	440b      	add	r3, r1
 800c198:	681b      	ldr	r3, [r3, #0]
                ctx->Td0[ctx->Te4[(rk[2] >> 24)       ] & 0xff] ^
 800c19a:	405a      	eors	r2, r3
                ctx->Td2[ctx->Te4[(rk[2] >>  8) & 0xff] & 0xff] ^
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	0a1b      	lsrs	r3, r3, #8
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4403      	add	r3, r0
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	440b      	add	r3, r1
 800c1be:	681b      	ldr	r3, [r3, #0]
                ctx->Td1[ctx->Te4[(rk[2] >> 16) & 0xff] & 0xff] ^
 800c1c0:	ea82 0103 	eor.w	r1, r2, r3
                ctx->Td3[ctx->Te4[(rk[2]      ) & 0xff] & 0xff];
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	3308      	adds	r3, #8
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4403      	add	r3, r0
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	681a      	ldr	r2, [r3, #0]
        rk[2] =
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	3308      	adds	r3, #8
                ctx->Td2[ctx->Te4[(rk[2] >>  8) & 0xff] & 0xff] ^
 800c1ea:	404a      	eors	r2, r1
        rk[2] =
 800c1ec:	601a      	str	r2, [r3, #0]
        rk[3] =
                ctx->Td0[ctx->Te4[(rk[3] >> 24)       ] & 0xff] ^
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	330c      	adds	r3, #12
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	0e1b      	lsrs	r3, r3, #24
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	440b      	add	r3, r1
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	681a      	ldr	r2, [r3, #0]
                ctx->Td1[ctx->Te4[(rk[3] >> 16) & 0xff] & 0xff] ^
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	330c      	adds	r3, #12
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	0c1b      	lsrs	r3, r3, #16
 800c224:	b2db      	uxtb	r3, r3
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4403      	add	r3, r0
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	440b      	add	r3, r1
 800c232:	681b      	ldr	r3, [r3, #0]
                ctx->Td0[ctx->Te4[(rk[3] >> 24)       ] & 0xff] ^
 800c234:	405a      	eors	r2, r3
                ctx->Td2[ctx->Te4[(rk[3] >>  8) & 0xff] & 0xff] ^
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	330c      	adds	r3, #12
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	0a1b      	lsrs	r3, r3, #8
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4403      	add	r3, r0
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	b2db      	uxtb	r3, r3
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	440b      	add	r3, r1
 800c258:	681b      	ldr	r3, [r3, #0]
                ctx->Td1[ctx->Te4[(rk[3] >> 16) & 0xff] & 0xff] ^
 800c25a:	ea82 0103 	eor.w	r1, r2, r3
                ctx->Td3[ctx->Te4[(rk[3]      ) & 0xff] & 0xff];
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	330c      	adds	r3, #12
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	b2db      	uxtb	r3, r3
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4403      	add	r3, r0
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	681a      	ldr	r2, [r3, #0]
        rk[3] =
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	330c      	adds	r3, #12
                ctx->Td2[ctx->Te4[(rk[3] >>  8) & 0xff] & 0xff] ^
 800c284:	404a      	eors	r2, r1
        rk[3] =
 800c286:	601a      	str	r2, [r3, #0]
    for (i = 1; i < Nr; i++) {
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	3301      	adds	r3, #1
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	69fa      	ldr	r2, [r7, #28]
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	429a      	cmp	r2, r3
 800c294:	f6ff aec7 	blt.w	800c026 <B5_rijndaelKeySetupDec+0x10e>
    }
    return (uint8_t) Nr;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	b2db      	uxtb	r3, r3
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3720      	adds	r7, #32
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <B5_rijndaelEncrypt>:
 * @param Nr number of rounds (depends on the original key length)
 * @param pt input block
 * @param ct output block
 */
static void B5_rijndaelEncrypt (B5_tAesCtx *ctx, uint32_t *rk, int16_t Nr, const uint8_t *pt, uint8_t *ct)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08c      	sub	sp, #48	; 0x30
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	80fb      	strh	r3, [r7, #6]
    uint32_t s0, s1, s2, s3, t0, t1, t2, t3;
    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    s0 = B5_AES256_GETUINT32(pt     ) ^ rk[0];
 800c2b4:	6838      	ldr	r0, [r7, #0]
 800c2b6:	f7ff fba7 	bl	800ba08 <B5_AES256_GETUINT32>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4053      	eors	r3, r2
 800c2c2:	61fb      	str	r3, [r7, #28]
    s1 = B5_AES256_GETUINT32(pt +  4) ^ rk[1];
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff fb9d 	bl	800ba08 <B5_AES256_GETUINT32>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4053      	eors	r3, r2
 800c2d8:	61bb      	str	r3, [r7, #24]
    s2 = B5_AES256_GETUINT32(pt +  8) ^ rk[2];
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	3308      	adds	r3, #8
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7ff fb92 	bl	800ba08 <B5_AES256_GETUINT32>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4053      	eors	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
    s3 = B5_AES256_GETUINT32(pt + 12) ^ rk[3];
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	330c      	adds	r3, #12
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff fb87 	bl	800ba08 <B5_AES256_GETUINT32>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	330c      	adds	r3, #12
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4053      	eors	r3, r2
 800c304:	613b      	str	r3, [r7, #16]
    
    
    /* round 1: */
    t0 = ctx->Te0[s0 >> 24] ^ ctx->Te1[(s1 >> 16) & 0xff] ^ ctx->Te2[(s2 >>  8) & 0xff] ^ ctx->Te3[s3 & 0xff] ^ rk[ 4];
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	0e1b      	lsrs	r3, r3, #24
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	0c1b      	lsrs	r3, r3, #16
 800c320:	b2db      	uxtb	r3, r3
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	440b      	add	r3, r1
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	405a      	eors	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	0a1b      	lsrs	r3, r3, #8
 800c334:	b2db      	uxtb	r3, r3
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	440b      	add	r3, r1
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	405a      	eors	r2, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	440b      	add	r3, r1
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	405a      	eors	r2, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	3310      	adds	r3, #16
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4053      	eors	r3, r2
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Te0[s1 >> 24] ^ ctx->Te1[(s2 >> 16) & 0xff] ^ ctx->Te2[(s3 >>  8) & 0xff] ^ ctx->Te3[s0 & 0xff] ^ rk[ 5];
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	0e1b      	lsrs	r3, r3, #24
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	0c1b      	lsrs	r3, r3, #16
 800c374:	b2db      	uxtb	r3, r3
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	440b      	add	r3, r1
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	405a      	eors	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	0a1b      	lsrs	r3, r3, #8
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	440b      	add	r3, r1
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	405a      	eors	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	440b      	add	r3, r1
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	405a      	eors	r2, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	3314      	adds	r3, #20
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4053      	eors	r3, r2
 800c3ac:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Te0[s2 >> 24] ^ ctx->Te1[(s3 >> 16) & 0xff] ^ ctx->Te2[(s0 >>  8) & 0xff] ^ ctx->Te3[s1 & 0xff] ^ rk[ 6];
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	0e1b      	lsrs	r3, r3, #24
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4413      	add	r3, r2
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	0c1b      	lsrs	r3, r3, #16
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	440b      	add	r3, r1
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	405a      	eors	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	0a1b      	lsrs	r3, r3, #8
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	440b      	add	r3, r1
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	405a      	eors	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	440b      	add	r3, r1
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	405a      	eors	r2, r3
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	3318      	adds	r3, #24
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4053      	eors	r3, r2
 800c400:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Te0[s3 >> 24] ^ ctx->Te1[(s0 >> 16) & 0xff] ^ ctx->Te2[(s1 >>  8) & 0xff] ^ ctx->Te3[s2 & 0xff] ^ rk[ 7];
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	0e1b      	lsrs	r3, r3, #24
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	0c1b      	lsrs	r3, r3, #16
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	440b      	add	r3, r1
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	405a      	eors	r2, r3
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	0a1b      	lsrs	r3, r3, #8
 800c430:	b2db      	uxtb	r3, r3
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	440b      	add	r3, r1
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	405a      	eors	r2, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	b2db      	uxtb	r3, r3
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	440b      	add	r3, r1
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	405a      	eors	r2, r3
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	331c      	adds	r3, #28
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4053      	eors	r3, r2
 800c454:	623b      	str	r3, [r7, #32]
    /* round 2: */
    s0 = ctx->Te0[t0 >> 24] ^ ctx->Te1[(t1 >> 16) & 0xff] ^ ctx->Te2[(t2 >>  8) & 0xff] ^ ctx->Te3[t3 & 0xff] ^ rk[ 8];
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	0e1b      	lsrs	r3, r3, #24
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4413      	add	r3, r2
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	0c1b      	lsrs	r3, r3, #16
 800c470:	b2db      	uxtb	r3, r3
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	440b      	add	r3, r1
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	405a      	eors	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	0a1b      	lsrs	r3, r3, #8
 800c484:	b2db      	uxtb	r3, r3
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	440b      	add	r3, r1
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	405a      	eors	r2, r3
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	b2db      	uxtb	r3, r3
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	440b      	add	r3, r1
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	405a      	eors	r2, r3
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	3320      	adds	r3, #32
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4053      	eors	r3, r2
 800c4a8:	61fb      	str	r3, [r7, #28]
    s1 = ctx->Te0[t1 >> 24] ^ ctx->Te1[(t2 >> 16) & 0xff] ^ ctx->Te2[(t3 >>  8) & 0xff] ^ ctx->Te3[t0 & 0xff] ^ rk[ 9];
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	0e1b      	lsrs	r3, r3, #24
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	0c1b      	lsrs	r3, r3, #16
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	405a      	eors	r2, r3
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	0a1b      	lsrs	r3, r3, #8
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	440b      	add	r3, r1
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	405a      	eors	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	440b      	add	r3, r1
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	405a      	eors	r2, r3
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	3324      	adds	r3, #36	; 0x24
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4053      	eors	r3, r2
 800c4fc:	61bb      	str	r3, [r7, #24]
    s2 = ctx->Te0[t2 >> 24] ^ ctx->Te1[(t3 >> 16) & 0xff] ^ ctx->Te2[(t0 >>  8) & 0xff] ^ ctx->Te3[t1 & 0xff] ^ rk[10];
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	0e1b      	lsrs	r3, r3, #24
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	0c1b      	lsrs	r3, r3, #16
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	440b      	add	r3, r1
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	405a      	eors	r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52a:	0a1b      	lsrs	r3, r3, #8
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	440b      	add	r3, r1
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	405a      	eors	r2, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	440b      	add	r3, r1
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	405a      	eors	r2, r3
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	3328      	adds	r3, #40	; 0x28
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4053      	eors	r3, r2
 800c550:	617b      	str	r3, [r7, #20]
    s3 = ctx->Te0[t3 >> 24] ^ ctx->Te1[(t0 >> 16) & 0xff] ^ ctx->Te2[(t1 >>  8) & 0xff] ^ ctx->Te3[t2 & 0xff] ^ rk[11];
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	0e1b      	lsrs	r3, r3, #24
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56a:	0c1b      	lsrs	r3, r3, #16
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	440b      	add	r3, r1
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	405a      	eors	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57e:	0a1b      	lsrs	r3, r3, #8
 800c580:	b2db      	uxtb	r3, r3
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	440b      	add	r3, r1
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	405a      	eors	r2, r3
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	b2db      	uxtb	r3, r3
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	440b      	add	r3, r1
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	405a      	eors	r2, r3
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	332c      	adds	r3, #44	; 0x2c
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4053      	eors	r3, r2
 800c5a4:	613b      	str	r3, [r7, #16]
    /* round 3: */
    t0 = ctx->Te0[s0 >> 24] ^ ctx->Te1[(s1 >> 16) & 0xff] ^ ctx->Te2[(s2 >>  8) & 0xff] ^ ctx->Te3[s3 & 0xff] ^ rk[12];
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	0e1b      	lsrs	r3, r3, #24
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4413      	add	r3, r2
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	0c1b      	lsrs	r3, r3, #16
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	440b      	add	r3, r1
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	405a      	eors	r2, r3
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	0a1b      	lsrs	r3, r3, #8
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	440b      	add	r3, r1
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	405a      	eors	r2, r3
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	440b      	add	r3, r1
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	405a      	eors	r2, r3
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	3330      	adds	r3, #48	; 0x30
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4053      	eors	r3, r2
 800c5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Te0[s1 >> 24] ^ ctx->Te1[(s2 >> 16) & 0xff] ^ ctx->Te2[(s3 >>  8) & 0xff] ^ ctx->Te3[s0 & 0xff] ^ rk[13];
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	0e1b      	lsrs	r3, r3, #24
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	0c1b      	lsrs	r3, r3, #16
 800c614:	b2db      	uxtb	r3, r3
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	440b      	add	r3, r1
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	405a      	eors	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	0a1b      	lsrs	r3, r3, #8
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	440b      	add	r3, r1
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	405a      	eors	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	440b      	add	r3, r1
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	405a      	eors	r2, r3
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	3334      	adds	r3, #52	; 0x34
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4053      	eors	r3, r2
 800c64c:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Te0[s2 >> 24] ^ ctx->Te1[(s3 >> 16) & 0xff] ^ ctx->Te2[(s0 >>  8) & 0xff] ^ ctx->Te3[s1 & 0xff] ^ rk[14];
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	0e1b      	lsrs	r3, r3, #24
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	0c1b      	lsrs	r3, r3, #16
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	440b      	add	r3, r1
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	405a      	eors	r2, r3
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	0a1b      	lsrs	r3, r3, #8
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	440b      	add	r3, r1
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	405a      	eors	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	440b      	add	r3, r1
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	405a      	eors	r2, r3
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	3338      	adds	r3, #56	; 0x38
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4053      	eors	r3, r2
 800c6a0:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Te0[s3 >> 24] ^ ctx->Te1[(s0 >> 16) & 0xff] ^ ctx->Te2[(s1 >>  8) & 0xff] ^ ctx->Te3[s2 & 0xff] ^ rk[15];
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	0e1b      	lsrs	r3, r3, #24
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	0c1b      	lsrs	r3, r3, #16
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	440b      	add	r3, r1
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	405a      	eors	r2, r3
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	0a1b      	lsrs	r3, r3, #8
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	440b      	add	r3, r1
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	405a      	eors	r2, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	440b      	add	r3, r1
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	405a      	eors	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	333c      	adds	r3, #60	; 0x3c
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4053      	eors	r3, r2
 800c6f4:	623b      	str	r3, [r7, #32]
    /* round 4: */
    s0 = ctx->Te0[t0 >> 24] ^ ctx->Te1[(t1 >> 16) & 0xff] ^ ctx->Te2[(t2 >>  8) & 0xff] ^ ctx->Te3[t3 & 0xff] ^ rk[16];
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	0e1b      	lsrs	r3, r3, #24
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4413      	add	r3, r2
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70e:	0c1b      	lsrs	r3, r3, #16
 800c710:	b2db      	uxtb	r3, r3
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	440b      	add	r3, r1
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	405a      	eors	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	0a1b      	lsrs	r3, r3, #8
 800c724:	b2db      	uxtb	r3, r3
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	440b      	add	r3, r1
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	405a      	eors	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c734:	6a3b      	ldr	r3, [r7, #32]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	440b      	add	r3, r1
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	405a      	eors	r2, r3
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	3340      	adds	r3, #64	; 0x40
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4053      	eors	r3, r2
 800c748:	61fb      	str	r3, [r7, #28]
    s1 = ctx->Te0[t1 >> 24] ^ ctx->Te1[(t2 >> 16) & 0xff] ^ ctx->Te2[(t3 >>  8) & 0xff] ^ ctx->Te3[t0 & 0xff] ^ rk[17];
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c752:	0e1b      	lsrs	r3, r3, #24
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	4413      	add	r3, r2
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c762:	0c1b      	lsrs	r3, r3, #16
 800c764:	b2db      	uxtb	r3, r3
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	440b      	add	r3, r1
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	405a      	eors	r2, r3
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	0a1b      	lsrs	r3, r3, #8
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	440b      	add	r3, r1
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	405a      	eors	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	440b      	add	r3, r1
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	405a      	eors	r2, r3
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	3344      	adds	r3, #68	; 0x44
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4053      	eors	r3, r2
 800c79c:	61bb      	str	r3, [r7, #24]
    s2 = ctx->Te0[t2 >> 24] ^ ctx->Te1[(t3 >> 16) & 0xff] ^ ctx->Te2[(t0 >>  8) & 0xff] ^ ctx->Te3[t1 & 0xff] ^ rk[18];
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	0e1b      	lsrs	r3, r3, #24
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	0c1b      	lsrs	r3, r3, #16
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	440b      	add	r3, r1
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	405a      	eors	r2, r3
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	0a1b      	lsrs	r3, r3, #8
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	440b      	add	r3, r1
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	405a      	eors	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	440b      	add	r3, r1
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	405a      	eors	r2, r3
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3348      	adds	r3, #72	; 0x48
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4053      	eors	r3, r2
 800c7f0:	617b      	str	r3, [r7, #20]
    s3 = ctx->Te0[t3 >> 24] ^ ctx->Te1[(t0 >> 16) & 0xff] ^ ctx->Te2[(t1 >>  8) & 0xff] ^ ctx->Te3[t2 & 0xff] ^ rk[19];
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c7f8:	6a3b      	ldr	r3, [r7, #32]
 800c7fa:	0e1b      	lsrs	r3, r3, #24
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	0c1b      	lsrs	r3, r3, #16
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	440b      	add	r3, r1
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	405a      	eors	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	0a1b      	lsrs	r3, r3, #8
 800c820:	b2db      	uxtb	r3, r3
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	440b      	add	r3, r1
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	405a      	eors	r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	b2db      	uxtb	r3, r3
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	440b      	add	r3, r1
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	405a      	eors	r2, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	334c      	adds	r3, #76	; 0x4c
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4053      	eors	r3, r2
 800c844:	613b      	str	r3, [r7, #16]
    /* round 5: */
    t0 = ctx->Te0[s0 >> 24] ^ ctx->Te1[(s1 >> 16) & 0xff] ^ ctx->Te2[(s2 >>  8) & 0xff] ^ ctx->Te3[s3 & 0xff] ^ rk[20];
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	0e1b      	lsrs	r3, r3, #24
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	0c1b      	lsrs	r3, r3, #16
 800c860:	b2db      	uxtb	r3, r3
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	440b      	add	r3, r1
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	405a      	eors	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	0a1b      	lsrs	r3, r3, #8
 800c874:	b2db      	uxtb	r3, r3
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	440b      	add	r3, r1
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	405a      	eors	r2, r3
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	b2db      	uxtb	r3, r3
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	440b      	add	r3, r1
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	405a      	eors	r2, r3
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	3350      	adds	r3, #80	; 0x50
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4053      	eors	r3, r2
 800c898:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Te0[s1 >> 24] ^ ctx->Te1[(s2 >> 16) & 0xff] ^ ctx->Te2[(s3 >>  8) & 0xff] ^ ctx->Te3[s0 & 0xff] ^ rk[21];
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	0e1b      	lsrs	r3, r3, #24
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	0c1b      	lsrs	r3, r3, #16
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	440b      	add	r3, r1
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	405a      	eors	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	0a1b      	lsrs	r3, r3, #8
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	440b      	add	r3, r1
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	405a      	eors	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	440b      	add	r3, r1
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	405a      	eors	r2, r3
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	3354      	adds	r3, #84	; 0x54
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4053      	eors	r3, r2
 800c8ec:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Te0[s2 >> 24] ^ ctx->Te1[(s3 >> 16) & 0xff] ^ ctx->Te2[(s0 >>  8) & 0xff] ^ ctx->Te3[s1 & 0xff] ^ rk[22];
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	0e1b      	lsrs	r3, r3, #24
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	0c1b      	lsrs	r3, r3, #16
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	440b      	add	r3, r1
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	405a      	eors	r2, r3
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	0a1b      	lsrs	r3, r3, #8
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	440b      	add	r3, r1
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	405a      	eors	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	440b      	add	r3, r1
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	405a      	eors	r2, r3
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	3358      	adds	r3, #88	; 0x58
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4053      	eors	r3, r2
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Te0[s3 >> 24] ^ ctx->Te1[(s0 >> 16) & 0xff] ^ ctx->Te2[(s1 >>  8) & 0xff] ^ ctx->Te3[s2 & 0xff] ^ rk[23];
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	0e1b      	lsrs	r3, r3, #24
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4413      	add	r3, r2
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	0c1b      	lsrs	r3, r3, #16
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	440b      	add	r3, r1
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	405a      	eors	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	0a1b      	lsrs	r3, r3, #8
 800c970:	b2db      	uxtb	r3, r3
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	440b      	add	r3, r1
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	405a      	eors	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	440b      	add	r3, r1
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	405a      	eors	r2, r3
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	335c      	adds	r3, #92	; 0x5c
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4053      	eors	r3, r2
 800c994:	623b      	str	r3, [r7, #32]
    /* round 6: */
    s0 = ctx->Te0[t0 >> 24] ^ ctx->Te1[(t1 >> 16) & 0xff] ^ ctx->Te2[(t2 >>  8) & 0xff] ^ ctx->Te3[t3 & 0xff] ^ rk[24];
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	0e1b      	lsrs	r3, r3, #24
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	0c1b      	lsrs	r3, r3, #16
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	440b      	add	r3, r1
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	405a      	eors	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	0a1b      	lsrs	r3, r3, #8
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	440b      	add	r3, r1
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	405a      	eors	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800c9d4:	6a3b      	ldr	r3, [r7, #32]
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	440b      	add	r3, r1
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	405a      	eors	r2, r3
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	3360      	adds	r3, #96	; 0x60
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4053      	eors	r3, r2
 800c9e8:	61fb      	str	r3, [r7, #28]
    s1 = ctx->Te0[t1 >> 24] ^ ctx->Te1[(t2 >> 16) & 0xff] ^ ctx->Te2[(t3 >>  8) & 0xff] ^ ctx->Te3[t0 & 0xff] ^ rk[25];
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	0e1b      	lsrs	r3, r3, #24
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	0c1b      	lsrs	r3, r3, #16
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	440b      	add	r3, r1
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	405a      	eors	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	0a1b      	lsrs	r3, r3, #8
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	440b      	add	r3, r1
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	405a      	eors	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	440b      	add	r3, r1
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	405a      	eors	r2, r3
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	3364      	adds	r3, #100	; 0x64
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4053      	eors	r3, r2
 800ca3c:	61bb      	str	r3, [r7, #24]
    s2 = ctx->Te0[t2 >> 24] ^ ctx->Te1[(t3 >> 16) & 0xff] ^ ctx->Te2[(t0 >>  8) & 0xff] ^ ctx->Te3[t1 & 0xff] ^ rk[26];
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	0e1b      	lsrs	r3, r3, #24
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	0c1b      	lsrs	r3, r3, #16
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	405a      	eors	r2, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	0a1b      	lsrs	r3, r3, #8
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	440b      	add	r3, r1
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	405a      	eors	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	440b      	add	r3, r1
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	405a      	eors	r2, r3
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3368      	adds	r3, #104	; 0x68
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4053      	eors	r3, r2
 800ca90:	617b      	str	r3, [r7, #20]
    s3 = ctx->Te0[t3 >> 24] ^ ctx->Te1[(t0 >> 16) & 0xff] ^ ctx->Te2[(t1 >>  8) & 0xff] ^ ctx->Te3[t2 & 0xff] ^ rk[27];
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800ca98:	6a3b      	ldr	r3, [r7, #32]
 800ca9a:	0e1b      	lsrs	r3, r3, #24
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	0c1b      	lsrs	r3, r3, #16
 800caac:	b2db      	uxtb	r3, r3
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	440b      	add	r3, r1
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	405a      	eors	r2, r3
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	0a1b      	lsrs	r3, r3, #8
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	440b      	add	r3, r1
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	405a      	eors	r2, r3
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	440b      	add	r3, r1
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	405a      	eors	r2, r3
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	336c      	adds	r3, #108	; 0x6c
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4053      	eors	r3, r2
 800cae4:	613b      	str	r3, [r7, #16]
    /* round 7: */
    t0 = ctx->Te0[s0 >> 24] ^ ctx->Te1[(s1 >> 16) & 0xff] ^ ctx->Te2[(s2 >>  8) & 0xff] ^ ctx->Te3[s3 & 0xff] ^ rk[28];
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	0e1b      	lsrs	r3, r3, #24
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4413      	add	r3, r2
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	0c1b      	lsrs	r3, r3, #16
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	440b      	add	r3, r1
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	405a      	eors	r2, r3
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	0a1b      	lsrs	r3, r3, #8
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	440b      	add	r3, r1
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	405a      	eors	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	440b      	add	r3, r1
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	405a      	eors	r2, r3
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	3370      	adds	r3, #112	; 0x70
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4053      	eors	r3, r2
 800cb38:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Te0[s1 >> 24] ^ ctx->Te1[(s2 >> 16) & 0xff] ^ ctx->Te2[(s3 >>  8) & 0xff] ^ ctx->Te3[s0 & 0xff] ^ rk[29];
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	0e1b      	lsrs	r3, r3, #24
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4413      	add	r3, r2
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	0c1b      	lsrs	r3, r3, #16
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	440b      	add	r3, r1
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	405a      	eors	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	0a1b      	lsrs	r3, r3, #8
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	440b      	add	r3, r1
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	405a      	eors	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	440b      	add	r3, r1
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	405a      	eors	r2, r3
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	3374      	adds	r3, #116	; 0x74
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4053      	eors	r3, r2
 800cb8c:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Te0[s2 >> 24] ^ ctx->Te1[(s3 >> 16) & 0xff] ^ ctx->Te2[(s0 >>  8) & 0xff] ^ ctx->Te3[s1 & 0xff] ^ rk[30];
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	0e1b      	lsrs	r3, r3, #24
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	0c1b      	lsrs	r3, r3, #16
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	440b      	add	r3, r1
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	405a      	eors	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	0a1b      	lsrs	r3, r3, #8
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	440b      	add	r3, r1
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	405a      	eors	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	440b      	add	r3, r1
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	405a      	eors	r2, r3
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	3378      	adds	r3, #120	; 0x78
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4053      	eors	r3, r2
 800cbe0:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Te0[s3 >> 24] ^ ctx->Te1[(s0 >> 16) & 0xff] ^ ctx->Te2[(s1 >>  8) & 0xff] ^ ctx->Te3[s2 & 0xff] ^ rk[31];
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	0e1b      	lsrs	r3, r3, #24
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	0c1b      	lsrs	r3, r3, #16
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	440b      	add	r3, r1
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	405a      	eors	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	0a1b      	lsrs	r3, r3, #8
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	440b      	add	r3, r1
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	405a      	eors	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	440b      	add	r3, r1
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	405a      	eors	r2, r3
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	337c      	adds	r3, #124	; 0x7c
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4053      	eors	r3, r2
 800cc34:	623b      	str	r3, [r7, #32]
    /* round 8: */
    s0 = ctx->Te0[t0 >> 24] ^ ctx->Te1[(t1 >> 16) & 0xff] ^ ctx->Te2[(t2 >>  8) & 0xff] ^ ctx->Te3[t3 & 0xff] ^ rk[32];
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3e:	0e1b      	lsrs	r3, r3, #24
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	4413      	add	r3, r2
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4e:	0c1b      	lsrs	r3, r3, #16
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	440b      	add	r3, r1
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	405a      	eors	r2, r3
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	0a1b      	lsrs	r3, r3, #8
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	440b      	add	r3, r1
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	405a      	eors	r2, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	440b      	add	r3, r1
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	405a      	eors	r2, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	3380      	adds	r3, #128	; 0x80
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4053      	eors	r3, r2
 800cc88:	61fb      	str	r3, [r7, #28]
    s1 = ctx->Te0[t1 >> 24] ^ ctx->Te1[(t2 >> 16) & 0xff] ^ ctx->Te2[(t3 >>  8) & 0xff] ^ ctx->Te3[t0 & 0xff] ^ rk[33];
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	0e1b      	lsrs	r3, r3, #24
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	0c1b      	lsrs	r3, r3, #16
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	440b      	add	r3, r1
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	405a      	eors	r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800ccb4:	6a3b      	ldr	r3, [r7, #32]
 800ccb6:	0a1b      	lsrs	r3, r3, #8
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	440b      	add	r3, r1
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	405a      	eors	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	440b      	add	r3, r1
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	405a      	eors	r2, r3
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	3384      	adds	r3, #132	; 0x84
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4053      	eors	r3, r2
 800ccdc:	61bb      	str	r3, [r7, #24]
    s2 = ctx->Te0[t2 >> 24] ^ ctx->Te1[(t3 >> 16) & 0xff] ^ ctx->Te2[(t0 >>  8) & 0xff] ^ ctx->Te3[t1 & 0xff] ^ rk[34];
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	0e1b      	lsrs	r3, r3, #24
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	0c1b      	lsrs	r3, r3, #16
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	440b      	add	r3, r1
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	405a      	eors	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	0a1b      	lsrs	r3, r3, #8
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	440b      	add	r3, r1
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	405a      	eors	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	440b      	add	r3, r1
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	405a      	eors	r2, r3
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	3388      	adds	r3, #136	; 0x88
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4053      	eors	r3, r2
 800cd30:	617b      	str	r3, [r7, #20]
    s3 = ctx->Te0[t3 >> 24] ^ ctx->Te1[(t0 >> 16) & 0xff] ^ ctx->Te2[(t1 >>  8) & 0xff] ^ ctx->Te3[t2 & 0xff] ^ rk[35];
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cd38:	6a3b      	ldr	r3, [r7, #32]
 800cd3a:	0e1b      	lsrs	r3, r3, #24
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	0c1b      	lsrs	r3, r3, #16
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	440b      	add	r3, r1
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	405a      	eors	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5e:	0a1b      	lsrs	r3, r3, #8
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	440b      	add	r3, r1
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	405a      	eors	r2, r3
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	440b      	add	r3, r1
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	405a      	eors	r2, r3
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	338c      	adds	r3, #140	; 0x8c
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4053      	eors	r3, r2
 800cd84:	613b      	str	r3, [r7, #16]
    /* round 9: */
    t0 = ctx->Te0[s0 >> 24] ^ ctx->Te1[(s1 >> 16) & 0xff] ^ ctx->Te2[(s2 >>  8) & 0xff] ^ ctx->Te3[s3 & 0xff] ^ rk[36];
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	0e1b      	lsrs	r3, r3, #24
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	0c1b      	lsrs	r3, r3, #16
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	440b      	add	r3, r1
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	405a      	eors	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	0a1b      	lsrs	r3, r3, #8
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	440b      	add	r3, r1
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	405a      	eors	r2, r3
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	440b      	add	r3, r1
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	405a      	eors	r2, r3
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	3390      	adds	r3, #144	; 0x90
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4053      	eors	r3, r2
 800cdd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Te0[s1 >> 24] ^ ctx->Te1[(s2 >> 16) & 0xff] ^ ctx->Te2[(s3 >>  8) & 0xff] ^ ctx->Te3[s0 & 0xff] ^ rk[37];
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	0e1b      	lsrs	r3, r3, #24
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	0c1b      	lsrs	r3, r3, #16
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	405a      	eors	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	0a1b      	lsrs	r3, r3, #8
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	440b      	add	r3, r1
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	405a      	eors	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	440b      	add	r3, r1
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	405a      	eors	r2, r3
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	3394      	adds	r3, #148	; 0x94
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4053      	eors	r3, r2
 800ce2c:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Te0[s2 >> 24] ^ ctx->Te1[(s3 >> 16) & 0xff] ^ ctx->Te2[(s0 >>  8) & 0xff] ^ ctx->Te3[s1 & 0xff] ^ rk[38];
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	0e1b      	lsrs	r3, r3, #24
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	0c1b      	lsrs	r3, r3, #16
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	440b      	add	r3, r1
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	405a      	eors	r2, r3
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	0a1b      	lsrs	r3, r3, #8
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	440b      	add	r3, r1
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	405a      	eors	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	440b      	add	r3, r1
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	405a      	eors	r2, r3
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	3398      	adds	r3, #152	; 0x98
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4053      	eors	r3, r2
 800ce80:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Te0[s3 >> 24] ^ ctx->Te1[(s0 >> 16) & 0xff] ^ ctx->Te2[(s1 >>  8) & 0xff] ^ ctx->Te3[s2 & 0xff] ^ rk[39];
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	0e1b      	lsrs	r3, r3, #24
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	0c1b      	lsrs	r3, r3, #16
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	440b      	add	r3, r1
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	405a      	eors	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	0a1b      	lsrs	r3, r3, #8
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	440b      	add	r3, r1
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	405a      	eors	r2, r3
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	440b      	add	r3, r1
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	405a      	eors	r2, r3
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	339c      	adds	r3, #156	; 0x9c
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4053      	eors	r3, r2
 800ced4:	623b      	str	r3, [r7, #32]
    if (Nr > 10) {
 800ced6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceda:	2b0a      	cmp	r3, #10
 800cedc:	f340 82a5 	ble.w	800d42a <B5_rijndaelEncrypt+0x1186>
        /* round 10: */
        s0 = ctx->Te0[t0 >> 24] ^ ctx->Te1[(t1 >> 16) & 0xff] ^ ctx->Te2[(t2 >>  8) & 0xff] ^ ctx->Te3[t3 & 0xff] ^ rk[40];
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	0e1b      	lsrs	r3, r3, #24
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	4413      	add	r3, r2
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef8:	0c1b      	lsrs	r3, r3, #16
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	440b      	add	r3, r1
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	405a      	eors	r2, r3
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	0a1b      	lsrs	r3, r3, #8
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	440b      	add	r3, r1
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	405a      	eors	r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	440b      	add	r3, r1
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	405a      	eors	r2, r3
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	33a0      	adds	r3, #160	; 0xa0
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4053      	eors	r3, r2
 800cf32:	61fb      	str	r3, [r7, #28]
        s1 = ctx->Te0[t1 >> 24] ^ ctx->Te1[(t2 >> 16) & 0xff] ^ ctx->Te2[(t3 >>  8) & 0xff] ^ ctx->Te3[t0 & 0xff] ^ rk[41];
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3c:	0e1b      	lsrs	r3, r3, #24
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	0c1b      	lsrs	r3, r3, #16
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	440b      	add	r3, r1
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	405a      	eors	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	0a1b      	lsrs	r3, r3, #8
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	440b      	add	r3, r1
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	405a      	eors	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	440b      	add	r3, r1
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	405a      	eors	r2, r3
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	33a4      	adds	r3, #164	; 0xa4
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4053      	eors	r3, r2
 800cf86:	61bb      	str	r3, [r7, #24]
        s2 = ctx->Te0[t2 >> 24] ^ ctx->Te1[(t3 >> 16) & 0xff] ^ ctx->Te2[(t0 >>  8) & 0xff] ^ ctx->Te3[t1 & 0xff] ^ rk[42];
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf90:	0e1b      	lsrs	r3, r3, #24
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cf9e:	6a3b      	ldr	r3, [r7, #32]
 800cfa0:	0c1b      	lsrs	r3, r3, #16
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	440b      	add	r3, r1
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	405a      	eors	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	0a1b      	lsrs	r3, r3, #8
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	440b      	add	r3, r1
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	405a      	eors	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	440b      	add	r3, r1
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	405a      	eors	r2, r3
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	33a8      	adds	r3, #168	; 0xa8
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4053      	eors	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]
        s3 = ctx->Te0[t3 >> 24] ^ ctx->Te1[(t0 >> 16) & 0xff] ^ ctx->Te2[(t1 >>  8) & 0xff] ^ ctx->Te3[t2 & 0xff] ^ rk[43];
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	0e1b      	lsrs	r3, r3, #24
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	4413      	add	r3, r2
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff4:	0c1b      	lsrs	r3, r3, #16
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	440b      	add	r3, r1
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	405a      	eors	r2, r3
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	0a1b      	lsrs	r3, r3, #8
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	440b      	add	r3, r1
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	405a      	eors	r2, r3
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	440b      	add	r3, r1
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	405a      	eors	r2, r3
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	33ac      	adds	r3, #172	; 0xac
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4053      	eors	r3, r2
 800d02e:	613b      	str	r3, [r7, #16]
        /* round 11: */
        t0 = ctx->Te0[s0 >> 24] ^ ctx->Te1[(s1 >> 16) & 0xff] ^ ctx->Te2[(s2 >>  8) & 0xff] ^ ctx->Te3[s3 & 0xff] ^ rk[44];
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	0e1b      	lsrs	r3, r3, #24
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	0c1b      	lsrs	r3, r3, #16
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	440b      	add	r3, r1
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	405a      	eors	r2, r3
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	0a1b      	lsrs	r3, r3, #8
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	440b      	add	r3, r1
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	405a      	eors	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	b2db      	uxtb	r3, r3
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	440b      	add	r3, r1
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	405a      	eors	r2, r3
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	33b0      	adds	r3, #176	; 0xb0
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4053      	eors	r3, r2
 800d082:	62fb      	str	r3, [r7, #44]	; 0x2c
        t1 = ctx->Te0[s1 >> 24] ^ ctx->Te1[(s2 >> 16) & 0xff] ^ ctx->Te2[(s3 >>  8) & 0xff] ^ ctx->Te3[s0 & 0xff] ^ rk[45];
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	0e1b      	lsrs	r3, r3, #24
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	0c1b      	lsrs	r3, r3, #16
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	440b      	add	r3, r1
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	405a      	eors	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	0a1b      	lsrs	r3, r3, #8
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	440b      	add	r3, r1
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	405a      	eors	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	440b      	add	r3, r1
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	405a      	eors	r2, r3
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	33b4      	adds	r3, #180	; 0xb4
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4053      	eors	r3, r2
 800d0d6:	62bb      	str	r3, [r7, #40]	; 0x28
        t2 = ctx->Te0[s2 >> 24] ^ ctx->Te1[(s3 >> 16) & 0xff] ^ ctx->Te2[(s0 >>  8) & 0xff] ^ ctx->Te3[s1 & 0xff] ^ rk[46];
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	0e1b      	lsrs	r3, r3, #24
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	4413      	add	r3, r2
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	0c1b      	lsrs	r3, r3, #16
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	440b      	add	r3, r1
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	405a      	eors	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	0a1b      	lsrs	r3, r3, #8
 800d106:	b2db      	uxtb	r3, r3
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	440b      	add	r3, r1
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	405a      	eors	r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	440b      	add	r3, r1
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	405a      	eors	r2, r3
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	33b8      	adds	r3, #184	; 0xb8
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4053      	eors	r3, r2
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
        t3 = ctx->Te0[s3 >> 24] ^ ctx->Te1[(s0 >> 16) & 0xff] ^ ctx->Te2[(s1 >>  8) & 0xff] ^ ctx->Te3[s2 & 0xff] ^ rk[47];
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	0e1b      	lsrs	r3, r3, #24
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	0c1b      	lsrs	r3, r3, #16
 800d146:	b2db      	uxtb	r3, r3
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	440b      	add	r3, r1
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	405a      	eors	r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	0a1b      	lsrs	r3, r3, #8
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	440b      	add	r3, r1
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	405a      	eors	r2, r3
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	440b      	add	r3, r1
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	405a      	eors	r2, r3
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	33bc      	adds	r3, #188	; 0xbc
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4053      	eors	r3, r2
 800d17e:	623b      	str	r3, [r7, #32]
        if (Nr > 12) {
 800d180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d184:	2b0c      	cmp	r3, #12
 800d186:	f340 8150 	ble.w	800d42a <B5_rijndaelEncrypt+0x1186>
            /* round 12: */
            s0 = ctx->Te0[t0 >> 24] ^ ctx->Te1[(t1 >> 16) & 0xff] ^ ctx->Te2[(t2 >>  8) & 0xff] ^ ctx->Te3[t3 & 0xff] ^ rk[48];
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	0e1b      	lsrs	r3, r3, #24
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4413      	add	r3, r2
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	0c1b      	lsrs	r3, r3, #16
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	440b      	add	r3, r1
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	405a      	eors	r2, r3
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	0a1b      	lsrs	r3, r3, #8
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	440b      	add	r3, r1
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	405a      	eors	r2, r3
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	440b      	add	r3, r1
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	405a      	eors	r2, r3
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	33c0      	adds	r3, #192	; 0xc0
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4053      	eors	r3, r2
 800d1dc:	61fb      	str	r3, [r7, #28]
            s1 = ctx->Te0[t1 >> 24] ^ ctx->Te1[(t2 >> 16) & 0xff] ^ ctx->Te2[(t3 >>  8) & 0xff] ^ ctx->Te3[t0 & 0xff] ^ rk[49];
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e6:	0e1b      	lsrs	r3, r3, #24
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	4413      	add	r3, r2
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	0c1b      	lsrs	r3, r3, #16
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	440b      	add	r3, r1
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	405a      	eors	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	0a1b      	lsrs	r3, r3, #8
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	440b      	add	r3, r1
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	405a      	eors	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	440b      	add	r3, r1
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	405a      	eors	r2, r3
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	33c4      	adds	r3, #196	; 0xc4
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4053      	eors	r3, r2
 800d230:	61bb      	str	r3, [r7, #24]
            s2 = ctx->Te0[t2 >> 24] ^ ctx->Te1[(t3 >> 16) & 0xff] ^ ctx->Te2[(t0 >>  8) & 0xff] ^ ctx->Te3[t1 & 0xff] ^ rk[50];
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23a:	0e1b      	lsrs	r3, r3, #24
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4413      	add	r3, r2
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	0c1b      	lsrs	r3, r3, #16
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	440b      	add	r3, r1
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	405a      	eors	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	0a1b      	lsrs	r3, r3, #8
 800d260:	b2db      	uxtb	r3, r3
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	440b      	add	r3, r1
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	405a      	eors	r2, r3
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	b2db      	uxtb	r3, r3
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	440b      	add	r3, r1
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	405a      	eors	r2, r3
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	33c8      	adds	r3, #200	; 0xc8
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4053      	eors	r3, r2
 800d284:	617b      	str	r3, [r7, #20]
            s3 = ctx->Te0[t3 >> 24] ^ ctx->Te1[(t0 >> 16) & 0xff] ^ ctx->Te2[(t1 >>  8) & 0xff] ^ ctx->Te3[t2 & 0xff] ^ rk[51];
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	0e1b      	lsrs	r3, r3, #24
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4413      	add	r3, r2
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29e:	0c1b      	lsrs	r3, r3, #16
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	440b      	add	r3, r1
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	405a      	eors	r2, r3
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	0a1b      	lsrs	r3, r3, #8
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	440b      	add	r3, r1
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	405a      	eors	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	440b      	add	r3, r1
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	405a      	eors	r2, r3
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	33cc      	adds	r3, #204	; 0xcc
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4053      	eors	r3, r2
 800d2d8:	613b      	str	r3, [r7, #16]
            /* round 13: */
            t0 = ctx->Te0[s0 >> 24] ^ ctx->Te1[(s1 >> 16) & 0xff] ^ ctx->Te2[(s2 >>  8) & 0xff] ^ ctx->Te3[s3 & 0xff] ^ rk[52];
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	0e1b      	lsrs	r3, r3, #24
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	0c1b      	lsrs	r3, r3, #16
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	440b      	add	r3, r1
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	405a      	eors	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	0a1b      	lsrs	r3, r3, #8
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	440b      	add	r3, r1
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	405a      	eors	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	440b      	add	r3, r1
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	405a      	eors	r2, r3
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	33d0      	adds	r3, #208	; 0xd0
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4053      	eors	r3, r2
 800d32c:	62fb      	str	r3, [r7, #44]	; 0x2c
            t1 = ctx->Te0[s1 >> 24] ^ ctx->Te1[(s2 >> 16) & 0xff] ^ ctx->Te2[(s3 >>  8) & 0xff] ^ ctx->Te3[s0 & 0xff] ^ rk[53];
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	0e1b      	lsrs	r3, r3, #24
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	0c1b      	lsrs	r3, r3, #16
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	440b      	add	r3, r1
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	405a      	eors	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	0a1b      	lsrs	r3, r3, #8
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	440b      	add	r3, r1
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	405a      	eors	r2, r3
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	440b      	add	r3, r1
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	405a      	eors	r2, r3
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	33d4      	adds	r3, #212	; 0xd4
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4053      	eors	r3, r2
 800d380:	62bb      	str	r3, [r7, #40]	; 0x28
            t2 = ctx->Te0[s2 >> 24] ^ ctx->Te1[(s3 >> 16) & 0xff] ^ ctx->Te2[(s0 >>  8) & 0xff] ^ ctx->Te3[s1 & 0xff] ^ rk[54];
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	0e1b      	lsrs	r3, r3, #24
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	0c1b      	lsrs	r3, r3, #16
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	440b      	add	r3, r1
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	405a      	eors	r2, r3
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	0a1b      	lsrs	r3, r3, #8
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	440b      	add	r3, r1
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	405a      	eors	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	440b      	add	r3, r1
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	405a      	eors	r2, r3
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	33d8      	adds	r3, #216	; 0xd8
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4053      	eors	r3, r2
 800d3d4:	627b      	str	r3, [r7, #36]	; 0x24
            t3 = ctx->Te0[s3 >> 24] ^ ctx->Te1[(s0 >> 16) & 0xff] ^ ctx->Te2[(s1 >>  8) & 0xff] ^ ctx->Te3[s2 & 0xff] ^ rk[55];
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	0e1b      	lsrs	r3, r3, #24
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4413      	add	r3, r2
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	0c1b      	lsrs	r3, r3, #16
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	440b      	add	r3, r1
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	405a      	eors	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	0a1b      	lsrs	r3, r3, #8
 800d404:	b2db      	uxtb	r3, r3
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	440b      	add	r3, r1
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	405a      	eors	r2, r3
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	b2db      	uxtb	r3, r3
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	440b      	add	r3, r1
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	405a      	eors	r2, r3
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	33dc      	adds	r3, #220	; 0xdc
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4053      	eors	r3, r2
 800d428:	623b      	str	r3, [r7, #32]
        }
    }
    rk += Nr << 2;
 800d42a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	68ba      	ldr	r2, [r7, #8]
 800d434:	4413      	add	r3, r2
 800d436:	60bb      	str	r3, [r7, #8]
    /*
     * apply last round and
     * map cipher Te to Te array block:
     */
    s0 =
            (ctx->Te4[(t0 >> 24)       ] & 0xff000000) ^
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d440:	0e1b      	lsrs	r3, r3, #24
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
            (ctx->Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d454:	0c1b      	lsrs	r3, r3, #16
 800d456:	b2db      	uxtb	r3, r3
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	440b      	add	r3, r1
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
            (ctx->Te4[(t0 >> 24)       ] & 0xff000000) ^
 800d462:	431a      	orrs	r2, r3
            (ctx->Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	0a1b      	lsrs	r3, r3, #8
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	440b      	add	r3, r1
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            (ctx->Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
 800d47a:	405a      	eors	r2, r3
            (ctx->Te4[(t3      ) & 0xff] & 0x000000ff) ^
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d482:	6a3b      	ldr	r3, [r7, #32]
 800d484:	b2db      	uxtb	r3, r3
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	440b      	add	r3, r1
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	b2db      	uxtb	r3, r3
            (ctx->Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
 800d48e:	405a      	eors	r2, r3
            rk[0];
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	681b      	ldr	r3, [r3, #0]
    s0 =
 800d494:	4053      	eors	r3, r2
 800d496:	61fb      	str	r3, [r7, #28]
    B5_AES256_PUTUINT32(ct     , s0);
 800d498:	69f9      	ldr	r1, [r7, #28]
 800d49a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d49c:	f7fe fadd 	bl	800ba5a <B5_AES256_PUTUINT32>
    s1 =
            (ctx->Te4[(t1 >> 24)       ] & 0xff000000) ^
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	0e1b      	lsrs	r3, r3, #24
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	4413      	add	r3, r2
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
            (ctx->Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	0c1b      	lsrs	r3, r3, #16
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	440b      	add	r3, r1
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
            (ctx->Te4[(t1 >> 24)       ] & 0xff000000) ^
 800d4ca:	431a      	orrs	r2, r3
            (ctx->Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	0a1b      	lsrs	r3, r3, #8
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	440b      	add	r3, r1
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            (ctx->Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
 800d4e2:	405a      	eors	r2, r3
            (ctx->Te4[(t0      ) & 0xff] & 0x000000ff) ^
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	440b      	add	r3, r1
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	b2db      	uxtb	r3, r3
            (ctx->Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
 800d4f6:	405a      	eors	r2, r3
            rk[1];
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	681b      	ldr	r3, [r3, #0]
    s1 =
 800d4fe:	4053      	eors	r3, r2
 800d500:	61bb      	str	r3, [r7, #24]
    B5_AES256_PUTUINT32(ct +  4, s1);
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	3304      	adds	r3, #4
 800d506:	69b9      	ldr	r1, [r7, #24]
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fe faa6 	bl	800ba5a <B5_AES256_PUTUINT32>
    s2 =
            (ctx->Te4[(t2 >> 24)       ] & 0xff000000) ^
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	0e1b      	lsrs	r3, r3, #24
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4413      	add	r3, r2
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
            (ctx->Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d528:	6a3b      	ldr	r3, [r7, #32]
 800d52a:	0c1b      	lsrs	r3, r3, #16
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	440b      	add	r3, r1
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
            (ctx->Te4[(t2 >> 24)       ] & 0xff000000) ^
 800d538:	431a      	orrs	r2, r3
            (ctx->Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d542:	0a1b      	lsrs	r3, r3, #8
 800d544:	b2db      	uxtb	r3, r3
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	440b      	add	r3, r1
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            (ctx->Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
 800d550:	405a      	eors	r2, r3
            (ctx->Te4[(t1      ) & 0xff] & 0x000000ff) ^
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	440b      	add	r3, r1
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	b2db      	uxtb	r3, r3
            (ctx->Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800d564:	405a      	eors	r2, r3
            rk[2];
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	3308      	adds	r3, #8
 800d56a:	681b      	ldr	r3, [r3, #0]
    s2 =
 800d56c:	4053      	eors	r3, r2
 800d56e:	617b      	str	r3, [r7, #20]
    B5_AES256_PUTUINT32(ct +  8, s2);
 800d570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d572:	3308      	adds	r3, #8
 800d574:	6979      	ldr	r1, [r7, #20]
 800d576:	4618      	mov	r0, r3
 800d578:	f7fe fa6f 	bl	800ba5a <B5_AES256_PUTUINT32>
    s3 =
            (ctx->Te4[(t3 >> 24)       ] & 0xff000000) ^
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	0e1b      	lsrs	r3, r3, #24
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
            (ctx->Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d598:	0c1b      	lsrs	r3, r3, #16
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	440b      	add	r3, r1
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
            (ctx->Te4[(t3 >> 24)       ] & 0xff000000) ^
 800d5a6:	431a      	orrs	r2, r3
            (ctx->Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b0:	0a1b      	lsrs	r3, r3, #8
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	440b      	add	r3, r1
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            (ctx->Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800d5be:	405a      	eors	r2, r3
            (ctx->Te4[(t2      ) & 0xff] & 0x000000ff) ^
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	440b      	add	r3, r1
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	b2db      	uxtb	r3, r3
            (ctx->Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
 800d5d2:	405a      	eors	r2, r3
            rk[3];
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	330c      	adds	r3, #12
 800d5d8:	681b      	ldr	r3, [r3, #0]
    s3 =
 800d5da:	4053      	eors	r3, r2
 800d5dc:	613b      	str	r3, [r7, #16]
    B5_AES256_PUTUINT32(ct + 12, s3);
 800d5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e0:	330c      	adds	r3, #12
 800d5e2:	6939      	ldr	r1, [r7, #16]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe fa38 	bl	800ba5a <B5_AES256_PUTUINT32>
}
 800d5ea:	bf00      	nop
 800d5ec:	3730      	adds	r7, #48	; 0x30
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <B5_rijndaelDecrypt>:
 * @param Nr number of rounds (depends on the original key length)
 * @param ct output block
 * @param pt input block
 */
void B5_rijndaelDecrypt (B5_tAesCtx *ctx, uint32_t *rk, int16_t Nr, const uint8_t *ct, uint8_t *pt)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b08c      	sub	sp, #48	; 0x30
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	60f8      	str	r0, [r7, #12]
 800d5fa:	60b9      	str	r1, [r7, #8]
 800d5fc:	603b      	str	r3, [r7, #0]
 800d5fe:	4613      	mov	r3, r2
 800d600:	80fb      	strh	r3, [r7, #6]
    
    /*
     map byte array block to cipher state
     and add initial round key:
     */
    s0 = B5_AES256_GETUINT32(ct     ) ^ rk[0];
 800d602:	6838      	ldr	r0, [r7, #0]
 800d604:	f7fe fa00 	bl	800ba08 <B5_AES256_GETUINT32>
 800d608:	4602      	mov	r2, r0
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4053      	eors	r3, r2
 800d610:	61fb      	str	r3, [r7, #28]
    s1 = B5_AES256_GETUINT32(ct +  4) ^ rk[1];
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	3304      	adds	r3, #4
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe f9f6 	bl	800ba08 <B5_AES256_GETUINT32>
 800d61c:	4602      	mov	r2, r0
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	3304      	adds	r3, #4
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4053      	eors	r3, r2
 800d626:	61bb      	str	r3, [r7, #24]
    s2 = B5_AES256_GETUINT32(ct +  8) ^ rk[2];
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	3308      	adds	r3, #8
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe f9eb 	bl	800ba08 <B5_AES256_GETUINT32>
 800d632:	4602      	mov	r2, r0
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	3308      	adds	r3, #8
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4053      	eors	r3, r2
 800d63c:	617b      	str	r3, [r7, #20]
    s3 = B5_AES256_GETUINT32(ct + 12) ^ rk[3];
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	330c      	adds	r3, #12
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe f9e0 	bl	800ba08 <B5_AES256_GETUINT32>
 800d648:	4602      	mov	r2, r0
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	330c      	adds	r3, #12
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4053      	eors	r3, r2
 800d652:	613b      	str	r3, [r7, #16]
    
    
    /* round 1: */
    t0 = ctx->Td0[s0 >> 24] ^ ctx->Td1[(s3 >> 16) & 0xff] ^ ctx->Td2[(s2 >>  8) & 0xff] ^ ctx->Td3[s1 & 0xff] ^ rk[ 4];
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	0e1b      	lsrs	r3, r3, #24
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	0c1b      	lsrs	r3, r3, #16
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	440b      	add	r3, r1
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	405a      	eors	r2, r3
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	0a1b      	lsrs	r3, r3, #8
 800d682:	b2db      	uxtb	r3, r3
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	440b      	add	r3, r1
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	405a      	eors	r2, r3
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	b2db      	uxtb	r3, r3
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	440b      	add	r3, r1
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	405a      	eors	r2, r3
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	3310      	adds	r3, #16
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4053      	eors	r3, r2
 800d6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Td0[s1 >> 24] ^ ctx->Td1[(s0 >> 16) & 0xff] ^ ctx->Td2[(s3 >>  8) & 0xff] ^ ctx->Td3[s2 & 0xff] ^ rk[ 5];
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	0e1b      	lsrs	r3, r3, #24
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	4413      	add	r3, r2
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	0c1b      	lsrs	r3, r3, #16
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	440b      	add	r3, r1
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	405a      	eors	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	0a1b      	lsrs	r3, r3, #8
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	440b      	add	r3, r1
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	405a      	eors	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	440b      	add	r3, r1
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	405a      	eors	r2, r3
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	3314      	adds	r3, #20
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4053      	eors	r3, r2
 800d6fa:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Td0[s2 >> 24] ^ ctx->Td1[(s1 >> 16) & 0xff] ^ ctx->Td2[(s0 >>  8) & 0xff] ^ ctx->Td3[s3 & 0xff] ^ rk[ 6];
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	0e1b      	lsrs	r3, r3, #24
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	4413      	add	r3, r2
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	0c1b      	lsrs	r3, r3, #16
 800d716:	b2db      	uxtb	r3, r3
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	440b      	add	r3, r1
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	405a      	eors	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	0a1b      	lsrs	r3, r3, #8
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	440b      	add	r3, r1
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	405a      	eors	r2, r3
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	440b      	add	r3, r1
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	405a      	eors	r2, r3
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	3318      	adds	r3, #24
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4053      	eors	r3, r2
 800d74e:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Td0[s3 >> 24] ^ ctx->Td1[(s2 >> 16) & 0xff] ^ ctx->Td2[(s1 >>  8) & 0xff] ^ ctx->Td3[s0 & 0xff] ^ rk[ 7];
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	0e1b      	lsrs	r3, r3, #24
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	4413      	add	r3, r2
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	0c1b      	lsrs	r3, r3, #16
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	440b      	add	r3, r1
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	405a      	eors	r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	0a1b      	lsrs	r3, r3, #8
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	440b      	add	r3, r1
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	405a      	eors	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	b2db      	uxtb	r3, r3
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	440b      	add	r3, r1
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	405a      	eors	r2, r3
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	331c      	adds	r3, #28
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4053      	eors	r3, r2
 800d7a2:	623b      	str	r3, [r7, #32]
    /* round 2: */
    s0 = ctx->Td0[t0 >> 24] ^ ctx->Td1[(t3 >> 16) & 0xff] ^ ctx->Td2[(t2 >>  8) & 0xff] ^ ctx->Td3[t1 & 0xff] ^ rk[ 8];
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	0e1b      	lsrs	r3, r3, #24
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d7ba:	6a3b      	ldr	r3, [r7, #32]
 800d7bc:	0c1b      	lsrs	r3, r3, #16
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	440b      	add	r3, r1
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	405a      	eors	r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d0:	0a1b      	lsrs	r3, r3, #8
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	440b      	add	r3, r1
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	405a      	eors	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	440b      	add	r3, r1
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	405a      	eors	r2, r3
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	3320      	adds	r3, #32
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4053      	eors	r3, r2
 800d7f6:	61fb      	str	r3, [r7, #28]
    s1 = ctx->Td0[t1 >> 24] ^ ctx->Td1[(t0 >> 16) & 0xff] ^ ctx->Td2[(t3 >>  8) & 0xff] ^ ctx->Td3[t2 & 0xff] ^ rk[ 9];
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d800:	0e1b      	lsrs	r3, r3, #24
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	4413      	add	r3, r2
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	0c1b      	lsrs	r3, r3, #16
 800d812:	b2db      	uxtb	r3, r3
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	440b      	add	r3, r1
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	405a      	eors	r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	0a1b      	lsrs	r3, r3, #8
 800d826:	b2db      	uxtb	r3, r3
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	440b      	add	r3, r1
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	405a      	eors	r2, r3
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	440b      	add	r3, r1
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	405a      	eors	r2, r3
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	3324      	adds	r3, #36	; 0x24
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4053      	eors	r3, r2
 800d84a:	61bb      	str	r3, [r7, #24]
    s2 = ctx->Td0[t2 >> 24] ^ ctx->Td1[(t1 >> 16) & 0xff] ^ ctx->Td2[(t0 >>  8) & 0xff] ^ ctx->Td3[t3 & 0xff] ^ rk[10];
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	0e1b      	lsrs	r3, r3, #24
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	0c1b      	lsrs	r3, r3, #16
 800d866:	b2db      	uxtb	r3, r3
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	440b      	add	r3, r1
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	405a      	eors	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	0a1b      	lsrs	r3, r3, #8
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	440b      	add	r3, r1
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	405a      	eors	r2, r3
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	440b      	add	r3, r1
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	405a      	eors	r2, r3
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	3328      	adds	r3, #40	; 0x28
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4053      	eors	r3, r2
 800d89e:	617b      	str	r3, [r7, #20]
    s3 = ctx->Td0[t3 >> 24] ^ ctx->Td1[(t2 >> 16) & 0xff] ^ ctx->Td2[(t1 >>  8) & 0xff] ^ ctx->Td3[t0 & 0xff] ^ rk[11];
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	0e1b      	lsrs	r3, r3, #24
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	4413      	add	r3, r2
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b8:	0c1b      	lsrs	r3, r3, #16
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	440b      	add	r3, r1
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	405a      	eors	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	0a1b      	lsrs	r3, r3, #8
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	440b      	add	r3, r1
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	405a      	eors	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	440b      	add	r3, r1
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	405a      	eors	r2, r3
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	332c      	adds	r3, #44	; 0x2c
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4053      	eors	r3, r2
 800d8f2:	613b      	str	r3, [r7, #16]
    /* round 3: */
    t0 = ctx->Td0[s0 >> 24] ^ ctx->Td1[(s3 >> 16) & 0xff] ^ ctx->Td2[(s2 >>  8) & 0xff] ^ ctx->Td3[s1 & 0xff] ^ rk[12];
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	0e1b      	lsrs	r3, r3, #24
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	4413      	add	r3, r2
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	0c1b      	lsrs	r3, r3, #16
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	440b      	add	r3, r1
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	405a      	eors	r2, r3
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	0a1b      	lsrs	r3, r3, #8
 800d922:	b2db      	uxtb	r3, r3
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	440b      	add	r3, r1
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	405a      	eors	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	b2db      	uxtb	r3, r3
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	440b      	add	r3, r1
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	405a      	eors	r2, r3
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	3330      	adds	r3, #48	; 0x30
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4053      	eors	r3, r2
 800d946:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Td0[s1 >> 24] ^ ctx->Td1[(s0 >> 16) & 0xff] ^ ctx->Td2[(s3 >>  8) & 0xff] ^ ctx->Td3[s2 & 0xff] ^ rk[13];
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	0e1b      	lsrs	r3, r3, #24
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	0c1b      	lsrs	r3, r3, #16
 800d962:	b2db      	uxtb	r3, r3
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	440b      	add	r3, r1
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	405a      	eors	r2, r3
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	0a1b      	lsrs	r3, r3, #8
 800d976:	b2db      	uxtb	r3, r3
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	440b      	add	r3, r1
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	405a      	eors	r2, r3
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	440b      	add	r3, r1
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	405a      	eors	r2, r3
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	3334      	adds	r3, #52	; 0x34
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4053      	eors	r3, r2
 800d99a:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Td0[s2 >> 24] ^ ctx->Td1[(s1 >> 16) & 0xff] ^ ctx->Td2[(s0 >>  8) & 0xff] ^ ctx->Td3[s3 & 0xff] ^ rk[14];
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	0e1b      	lsrs	r3, r3, #24
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	4413      	add	r3, r2
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	0c1b      	lsrs	r3, r3, #16
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	440b      	add	r3, r1
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	405a      	eors	r2, r3
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	0a1b      	lsrs	r3, r3, #8
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	440b      	add	r3, r1
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	405a      	eors	r2, r3
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	440b      	add	r3, r1
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	405a      	eors	r2, r3
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	3338      	adds	r3, #56	; 0x38
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4053      	eors	r3, r2
 800d9ee:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Td0[s3 >> 24] ^ ctx->Td1[(s2 >> 16) & 0xff] ^ ctx->Td2[(s1 >>  8) & 0xff] ^ ctx->Td3[s0 & 0xff] ^ rk[15];
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	0e1b      	lsrs	r3, r3, #24
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	0c1b      	lsrs	r3, r3, #16
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	009b      	lsls	r3, r3, #2
 800da0e:	440b      	add	r3, r1
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	405a      	eors	r2, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	0a1b      	lsrs	r3, r3, #8
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	440b      	add	r3, r1
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	405a      	eors	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	b2db      	uxtb	r3, r3
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	440b      	add	r3, r1
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	405a      	eors	r2, r3
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	333c      	adds	r3, #60	; 0x3c
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4053      	eors	r3, r2
 800da42:	623b      	str	r3, [r7, #32]
    /* round 4: */
    s0 = ctx->Td0[t0 >> 24] ^ ctx->Td1[(t3 >> 16) & 0xff] ^ ctx->Td2[(t2 >>  8) & 0xff] ^ ctx->Td3[t1 & 0xff] ^ rk[16];
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800da4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4c:	0e1b      	lsrs	r3, r3, #24
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4413      	add	r3, r2
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800da5a:	6a3b      	ldr	r3, [r7, #32]
 800da5c:	0c1b      	lsrs	r3, r3, #16
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	440b      	add	r3, r1
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	405a      	eors	r2, r3
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800da6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da70:	0a1b      	lsrs	r3, r3, #8
 800da72:	b2db      	uxtb	r3, r3
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	440b      	add	r3, r1
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	405a      	eors	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800da82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da84:	b2db      	uxtb	r3, r3
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	440b      	add	r3, r1
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	405a      	eors	r2, r3
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	3340      	adds	r3, #64	; 0x40
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4053      	eors	r3, r2
 800da96:	61fb      	str	r3, [r7, #28]
    s1 = ctx->Td0[t1 >> 24] ^ ctx->Td1[(t0 >> 16) & 0xff] ^ ctx->Td2[(t3 >>  8) & 0xff] ^ ctx->Td3[t2 & 0xff] ^ rk[17];
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa0:	0e1b      	lsrs	r3, r3, #24
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	4413      	add	r3, r2
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800daae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab0:	0c1b      	lsrs	r3, r3, #16
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	440b      	add	r3, r1
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	405a      	eors	r2, r3
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	0a1b      	lsrs	r3, r3, #8
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	440b      	add	r3, r1
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	405a      	eors	r2, r3
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	440b      	add	r3, r1
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	405a      	eors	r2, r3
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	3344      	adds	r3, #68	; 0x44
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4053      	eors	r3, r2
 800daea:	61bb      	str	r3, [r7, #24]
    s2 = ctx->Td0[t2 >> 24] ^ ctx->Td1[(t1 >> 16) & 0xff] ^ ctx->Td2[(t0 >>  8) & 0xff] ^ ctx->Td3[t3 & 0xff] ^ rk[18];
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf4:	0e1b      	lsrs	r3, r3, #24
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800db02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db04:	0c1b      	lsrs	r3, r3, #16
 800db06:	b2db      	uxtb	r3, r3
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	440b      	add	r3, r1
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	405a      	eors	r2, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db18:	0a1b      	lsrs	r3, r3, #8
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	440b      	add	r3, r1
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	405a      	eors	r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	440b      	add	r3, r1
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	405a      	eors	r2, r3
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	3348      	adds	r3, #72	; 0x48
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4053      	eors	r3, r2
 800db3e:	617b      	str	r3, [r7, #20]
    s3 = ctx->Td0[t3 >> 24] ^ ctx->Td1[(t2 >> 16) & 0xff] ^ ctx->Td2[(t1 >>  8) & 0xff] ^ ctx->Td3[t0 & 0xff] ^ rk[19];
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800db46:	6a3b      	ldr	r3, [r7, #32]
 800db48:	0e1b      	lsrs	r3, r3, #24
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	4413      	add	r3, r2
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	0c1b      	lsrs	r3, r3, #16
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	440b      	add	r3, r1
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	405a      	eors	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800db6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6c:	0a1b      	lsrs	r3, r3, #8
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	440b      	add	r3, r1
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	405a      	eors	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800db7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db80:	b2db      	uxtb	r3, r3
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	440b      	add	r3, r1
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	405a      	eors	r2, r3
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	334c      	adds	r3, #76	; 0x4c
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4053      	eors	r3, r2
 800db92:	613b      	str	r3, [r7, #16]
    /* round 5: */
    t0 = ctx->Td0[s0 >> 24] ^ ctx->Td1[(s3 >> 16) & 0xff] ^ ctx->Td2[(s2 >>  8) & 0xff] ^ ctx->Td3[s1 & 0xff] ^ rk[20];
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	0e1b      	lsrs	r3, r3, #24
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	4413      	add	r3, r2
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	0c1b      	lsrs	r3, r3, #16
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	009b      	lsls	r3, r3, #2
 800dbb2:	440b      	add	r3, r1
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	405a      	eors	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	0a1b      	lsrs	r3, r3, #8
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	440b      	add	r3, r1
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	405a      	eors	r2, r3
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	440b      	add	r3, r1
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	405a      	eors	r2, r3
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	3350      	adds	r3, #80	; 0x50
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4053      	eors	r3, r2
 800dbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Td0[s1 >> 24] ^ ctx->Td1[(s0 >> 16) & 0xff] ^ ctx->Td2[(s3 >>  8) & 0xff] ^ ctx->Td3[s2 & 0xff] ^ rk[21];
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	0e1b      	lsrs	r3, r3, #24
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	0c1b      	lsrs	r3, r3, #16
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	440b      	add	r3, r1
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	405a      	eors	r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	0a1b      	lsrs	r3, r3, #8
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	440b      	add	r3, r1
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	405a      	eors	r2, r3
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	440b      	add	r3, r1
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	405a      	eors	r2, r3
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	3354      	adds	r3, #84	; 0x54
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4053      	eors	r3, r2
 800dc3a:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Td0[s2 >> 24] ^ ctx->Td1[(s1 >> 16) & 0xff] ^ ctx->Td2[(s0 >>  8) & 0xff] ^ ctx->Td3[s3 & 0xff] ^ rk[22];
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	0e1b      	lsrs	r3, r3, #24
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4413      	add	r3, r2
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	0c1b      	lsrs	r3, r3, #16
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	440b      	add	r3, r1
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	405a      	eors	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	0a1b      	lsrs	r3, r3, #8
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	440b      	add	r3, r1
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	405a      	eors	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	440b      	add	r3, r1
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	405a      	eors	r2, r3
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	3358      	adds	r3, #88	; 0x58
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4053      	eors	r3, r2
 800dc8e:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Td0[s3 >> 24] ^ ctx->Td1[(s2 >> 16) & 0xff] ^ ctx->Td2[(s1 >>  8) & 0xff] ^ ctx->Td3[s0 & 0xff] ^ rk[23];
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	0e1b      	lsrs	r3, r3, #24
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	0c1b      	lsrs	r3, r3, #16
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	440b      	add	r3, r1
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	405a      	eors	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	0a1b      	lsrs	r3, r3, #8
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	440b      	add	r3, r1
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	405a      	eors	r2, r3
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	440b      	add	r3, r1
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	405a      	eors	r2, r3
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	335c      	adds	r3, #92	; 0x5c
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4053      	eors	r3, r2
 800dce2:	623b      	str	r3, [r7, #32]
    /* round 6: */
    s0 = ctx->Td0[t0 >> 24] ^ ctx->Td1[(t3 >> 16) & 0xff] ^ ctx->Td2[(t2 >>  8) & 0xff] ^ ctx->Td3[t1 & 0xff] ^ rk[24];
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	0e1b      	lsrs	r3, r3, #24
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	0c1b      	lsrs	r3, r3, #16
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	440b      	add	r3, r1
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	405a      	eors	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	0a1b      	lsrs	r3, r3, #8
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	440b      	add	r3, r1
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	405a      	eors	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	440b      	add	r3, r1
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	405a      	eors	r2, r3
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	3360      	adds	r3, #96	; 0x60
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4053      	eors	r3, r2
 800dd36:	61fb      	str	r3, [r7, #28]
    s1 = ctx->Td0[t1 >> 24] ^ ctx->Td1[(t0 >> 16) & 0xff] ^ ctx->Td2[(t3 >>  8) & 0xff] ^ ctx->Td3[t2 & 0xff] ^ rk[25];
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	0e1b      	lsrs	r3, r3, #24
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800dd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd50:	0c1b      	lsrs	r3, r3, #16
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	440b      	add	r3, r1
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	405a      	eors	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	0a1b      	lsrs	r3, r3, #8
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	440b      	add	r3, r1
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	405a      	eors	r2, r3
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	440b      	add	r3, r1
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	405a      	eors	r2, r3
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	3364      	adds	r3, #100	; 0x64
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4053      	eors	r3, r2
 800dd8a:	61bb      	str	r3, [r7, #24]
    s2 = ctx->Td0[t2 >> 24] ^ ctx->Td1[(t1 >> 16) & 0xff] ^ ctx->Td2[(t0 >>  8) & 0xff] ^ ctx->Td3[t3 & 0xff] ^ rk[26];
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	0e1b      	lsrs	r3, r3, #24
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	0c1b      	lsrs	r3, r3, #16
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	440b      	add	r3, r1
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	405a      	eors	r2, r3
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	0a1b      	lsrs	r3, r3, #8
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	440b      	add	r3, r1
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	405a      	eors	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800ddca:	6a3b      	ldr	r3, [r7, #32]
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	440b      	add	r3, r1
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	405a      	eors	r2, r3
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	3368      	adds	r3, #104	; 0x68
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4053      	eors	r3, r2
 800ddde:	617b      	str	r3, [r7, #20]
    s3 = ctx->Td0[t3 >> 24] ^ ctx->Td1[(t2 >> 16) & 0xff] ^ ctx->Td2[(t1 >>  8) & 0xff] ^ ctx->Td3[t0 & 0xff] ^ rk[27];
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	0e1b      	lsrs	r3, r3, #24
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4413      	add	r3, r2
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	0c1b      	lsrs	r3, r3, #16
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	440b      	add	r3, r1
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	405a      	eors	r2, r3
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800de0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0c:	0a1b      	lsrs	r3, r3, #8
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	440b      	add	r3, r1
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	405a      	eors	r2, r3
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800de1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de20:	b2db      	uxtb	r3, r3
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	440b      	add	r3, r1
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	405a      	eors	r2, r3
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	336c      	adds	r3, #108	; 0x6c
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4053      	eors	r3, r2
 800de32:	613b      	str	r3, [r7, #16]
    /* round 7: */
    t0 = ctx->Td0[s0 >> 24] ^ ctx->Td1[(s3 >> 16) & 0xff] ^ ctx->Td2[(s2 >>  8) & 0xff] ^ ctx->Td3[s1 & 0xff] ^ rk[28];
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	0e1b      	lsrs	r3, r3, #24
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	0c1b      	lsrs	r3, r3, #16
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	440b      	add	r3, r1
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	405a      	eors	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	0a1b      	lsrs	r3, r3, #8
 800de62:	b2db      	uxtb	r3, r3
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	440b      	add	r3, r1
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	405a      	eors	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	b2db      	uxtb	r3, r3
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	440b      	add	r3, r1
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	405a      	eors	r2, r3
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	3370      	adds	r3, #112	; 0x70
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4053      	eors	r3, r2
 800de86:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Td0[s1 >> 24] ^ ctx->Td1[(s0 >> 16) & 0xff] ^ ctx->Td2[(s3 >>  8) & 0xff] ^ ctx->Td3[s2 & 0xff] ^ rk[29];
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	0e1b      	lsrs	r3, r3, #24
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	4413      	add	r3, r2
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	0c1b      	lsrs	r3, r3, #16
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	440b      	add	r3, r1
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	405a      	eors	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	0a1b      	lsrs	r3, r3, #8
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	440b      	add	r3, r1
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	405a      	eors	r2, r3
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	440b      	add	r3, r1
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	405a      	eors	r2, r3
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	3374      	adds	r3, #116	; 0x74
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4053      	eors	r3, r2
 800deda:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Td0[s2 >> 24] ^ ctx->Td1[(s1 >> 16) & 0xff] ^ ctx->Td2[(s0 >>  8) & 0xff] ^ ctx->Td3[s3 & 0xff] ^ rk[30];
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	0e1b      	lsrs	r3, r3, #24
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	0c1b      	lsrs	r3, r3, #16
 800def6:	b2db      	uxtb	r3, r3
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	440b      	add	r3, r1
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	405a      	eors	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	0a1b      	lsrs	r3, r3, #8
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	440b      	add	r3, r1
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	405a      	eors	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	440b      	add	r3, r1
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	405a      	eors	r2, r3
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	3378      	adds	r3, #120	; 0x78
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4053      	eors	r3, r2
 800df2e:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Td0[s3 >> 24] ^ ctx->Td1[(s2 >> 16) & 0xff] ^ ctx->Td2[(s1 >>  8) & 0xff] ^ ctx->Td3[s0 & 0xff] ^ rk[31];
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	0e1b      	lsrs	r3, r3, #24
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	4413      	add	r3, r2
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	0c1b      	lsrs	r3, r3, #16
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	440b      	add	r3, r1
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	405a      	eors	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	0a1b      	lsrs	r3, r3, #8
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	440b      	add	r3, r1
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	405a      	eors	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	b2db      	uxtb	r3, r3
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	440b      	add	r3, r1
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	405a      	eors	r2, r3
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	337c      	adds	r3, #124	; 0x7c
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4053      	eors	r3, r2
 800df82:	623b      	str	r3, [r7, #32]
    /* round 8: */
    s0 = ctx->Td0[t0 >> 24] ^ ctx->Td1[(t3 >> 16) & 0xff] ^ ctx->Td2[(t2 >>  8) & 0xff] ^ ctx->Td3[t1 & 0xff] ^ rk[32];
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800df8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8c:	0e1b      	lsrs	r3, r3, #24
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	0c1b      	lsrs	r3, r3, #16
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	440b      	add	r3, r1
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	405a      	eors	r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	0a1b      	lsrs	r3, r3, #8
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	440b      	add	r3, r1
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	405a      	eors	r2, r3
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	440b      	add	r3, r1
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	405a      	eors	r2, r3
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	3380      	adds	r3, #128	; 0x80
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4053      	eors	r3, r2
 800dfd6:	61fb      	str	r3, [r7, #28]
    s1 = ctx->Td0[t1 >> 24] ^ ctx->Td1[(t0 >> 16) & 0xff] ^ ctx->Td2[(t3 >>  8) & 0xff] ^ ctx->Td3[t2 & 0xff] ^ rk[33];
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe0:	0e1b      	lsrs	r3, r3, #24
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4413      	add	r3, r2
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800dfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff0:	0c1b      	lsrs	r3, r3, #16
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	440b      	add	r3, r1
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	405a      	eors	r2, r3
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	0a1b      	lsrs	r3, r3, #8
 800e006:	b2db      	uxtb	r3, r3
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	440b      	add	r3, r1
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	405a      	eors	r2, r3
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	440b      	add	r3, r1
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	405a      	eors	r2, r3
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	3384      	adds	r3, #132	; 0x84
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4053      	eors	r3, r2
 800e02a:	61bb      	str	r3, [r7, #24]
    s2 = ctx->Td0[t2 >> 24] ^ ctx->Td1[(t1 >> 16) & 0xff] ^ ctx->Td2[(t0 >>  8) & 0xff] ^ ctx->Td3[t3 & 0xff] ^ rk[34];
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	0e1b      	lsrs	r3, r3, #24
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e044:	0c1b      	lsrs	r3, r3, #16
 800e046:	b2db      	uxtb	r3, r3
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	440b      	add	r3, r1
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	405a      	eors	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	0a1b      	lsrs	r3, r3, #8
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	440b      	add	r3, r1
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	405a      	eors	r2, r3
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	440b      	add	r3, r1
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	405a      	eors	r2, r3
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	3388      	adds	r3, #136	; 0x88
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4053      	eors	r3, r2
 800e07e:	617b      	str	r3, [r7, #20]
    s3 = ctx->Td0[t3 >> 24] ^ ctx->Td1[(t2 >> 16) & 0xff] ^ ctx->Td2[(t1 >>  8) & 0xff] ^ ctx->Td3[t0 & 0xff] ^ rk[35];
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	0e1b      	lsrs	r3, r3, #24
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	0c1b      	lsrs	r3, r3, #16
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	440b      	add	r3, r1
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	405a      	eors	r2, r3
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	0a1b      	lsrs	r3, r3, #8
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	440b      	add	r3, r1
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	405a      	eors	r2, r3
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	440b      	add	r3, r1
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	405a      	eors	r2, r3
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	338c      	adds	r3, #140	; 0x8c
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4053      	eors	r3, r2
 800e0d2:	613b      	str	r3, [r7, #16]
    /* round 9: */
    t0 = ctx->Td0[s0 >> 24] ^ ctx->Td1[(s3 >> 16) & 0xff] ^ ctx->Td2[(s2 >>  8) & 0xff] ^ ctx->Td3[s1 & 0xff] ^ rk[36];
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	0e1b      	lsrs	r3, r3, #24
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	0c1b      	lsrs	r3, r3, #16
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	440b      	add	r3, r1
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	405a      	eors	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	0a1b      	lsrs	r3, r3, #8
 800e102:	b2db      	uxtb	r3, r3
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	440b      	add	r3, r1
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	405a      	eors	r2, r3
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	b2db      	uxtb	r3, r3
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	440b      	add	r3, r1
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	405a      	eors	r2, r3
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	3390      	adds	r3, #144	; 0x90
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4053      	eors	r3, r2
 800e126:	62fb      	str	r3, [r7, #44]	; 0x2c
    t1 = ctx->Td0[s1 >> 24] ^ ctx->Td1[(s0 >> 16) & 0xff] ^ ctx->Td2[(s3 >>  8) & 0xff] ^ ctx->Td3[s2 & 0xff] ^ rk[37];
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	0e1b      	lsrs	r3, r3, #24
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	0c1b      	lsrs	r3, r3, #16
 800e142:	b2db      	uxtb	r3, r3
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	440b      	add	r3, r1
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	405a      	eors	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	0a1b      	lsrs	r3, r3, #8
 800e156:	b2db      	uxtb	r3, r3
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	440b      	add	r3, r1
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	405a      	eors	r2, r3
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	440b      	add	r3, r1
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	405a      	eors	r2, r3
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	3394      	adds	r3, #148	; 0x94
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4053      	eors	r3, r2
 800e17a:	62bb      	str	r3, [r7, #40]	; 0x28
    t2 = ctx->Td0[s2 >> 24] ^ ctx->Td1[(s1 >> 16) & 0xff] ^ ctx->Td2[(s0 >>  8) & 0xff] ^ ctx->Td3[s3 & 0xff] ^ rk[38];
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	0e1b      	lsrs	r3, r3, #24
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4413      	add	r3, r2
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	0c1b      	lsrs	r3, r3, #16
 800e196:	b2db      	uxtb	r3, r3
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	440b      	add	r3, r1
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	405a      	eors	r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	0a1b      	lsrs	r3, r3, #8
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	440b      	add	r3, r1
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	405a      	eors	r2, r3
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	440b      	add	r3, r1
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	405a      	eors	r2, r3
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	3398      	adds	r3, #152	; 0x98
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4053      	eors	r3, r2
 800e1ce:	627b      	str	r3, [r7, #36]	; 0x24
    t3 = ctx->Td0[s3 >> 24] ^ ctx->Td1[(s2 >> 16) & 0xff] ^ ctx->Td2[(s1 >>  8) & 0xff] ^ ctx->Td3[s0 & 0xff] ^ rk[39];
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	0e1b      	lsrs	r3, r3, #24
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	0c1b      	lsrs	r3, r3, #16
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	440b      	add	r3, r1
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	405a      	eors	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	0a1b      	lsrs	r3, r3, #8
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	440b      	add	r3, r1
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	405a      	eors	r2, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	b2db      	uxtb	r3, r3
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	440b      	add	r3, r1
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	405a      	eors	r2, r3
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	339c      	adds	r3, #156	; 0x9c
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4053      	eors	r3, r2
 800e222:	623b      	str	r3, [r7, #32]
    if (Nr > 10) {
 800e224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e228:	2b0a      	cmp	r3, #10
 800e22a:	f340 82a5 	ble.w	800e778 <B5_rijndaelDecrypt+0x1186>
        /* round 10: */
        s0 = ctx->Td0[t0 >> 24] ^ ctx->Td1[(t3 >> 16) & 0xff] ^ ctx->Td2[(t2 >>  8) & 0xff] ^ ctx->Td3[t1 & 0xff] ^ rk[40];
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	0e1b      	lsrs	r3, r3, #24
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	0c1b      	lsrs	r3, r3, #16
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	440b      	add	r3, r1
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	405a      	eors	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	0a1b      	lsrs	r3, r3, #8
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	440b      	add	r3, r1
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	405a      	eors	r2, r3
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	440b      	add	r3, r1
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	405a      	eors	r2, r3
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	33a0      	adds	r3, #160	; 0xa0
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4053      	eors	r3, r2
 800e280:	61fb      	str	r3, [r7, #28]
        s1 = ctx->Td0[t1 >> 24] ^ ctx->Td1[(t0 >> 16) & 0xff] ^ ctx->Td2[(t3 >>  8) & 0xff] ^ ctx->Td3[t2 & 0xff] ^ rk[41];
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28a:	0e1b      	lsrs	r3, r3, #24
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4413      	add	r3, r2
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29a:	0c1b      	lsrs	r3, r3, #16
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	440b      	add	r3, r1
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	405a      	eors	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
 800e2ae:	0a1b      	lsrs	r3, r3, #8
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	440b      	add	r3, r1
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	405a      	eors	r2, r3
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	440b      	add	r3, r1
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	405a      	eors	r2, r3
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	33a4      	adds	r3, #164	; 0xa4
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4053      	eors	r3, r2
 800e2d4:	61bb      	str	r3, [r7, #24]
        s2 = ctx->Td0[t2 >> 24] ^ ctx->Td1[(t1 >> 16) & 0xff] ^ ctx->Td2[(t0 >>  8) & 0xff] ^ ctx->Td3[t3 & 0xff] ^ rk[42];
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	0e1b      	lsrs	r3, r3, #24
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ee:	0c1b      	lsrs	r3, r3, #16
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	440b      	add	r3, r1
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	405a      	eors	r2, r3
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	0a1b      	lsrs	r3, r3, #8
 800e304:	b2db      	uxtb	r3, r3
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	440b      	add	r3, r1
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	405a      	eors	r2, r3
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	b2db      	uxtb	r3, r3
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	440b      	add	r3, r1
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	405a      	eors	r2, r3
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	33a8      	adds	r3, #168	; 0xa8
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4053      	eors	r3, r2
 800e328:	617b      	str	r3, [r7, #20]
        s3 = ctx->Td0[t3 >> 24] ^ ctx->Td1[(t2 >> 16) & 0xff] ^ ctx->Td2[(t1 >>  8) & 0xff] ^ ctx->Td3[t0 & 0xff] ^ rk[43];
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	0e1b      	lsrs	r3, r3, #24
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	0c1b      	lsrs	r3, r3, #16
 800e344:	b2db      	uxtb	r3, r3
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	440b      	add	r3, r1
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	405a      	eors	r2, r3
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	0a1b      	lsrs	r3, r3, #8
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	440b      	add	r3, r1
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	405a      	eors	r2, r3
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	440b      	add	r3, r1
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	405a      	eors	r2, r3
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	33ac      	adds	r3, #172	; 0xac
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4053      	eors	r3, r2
 800e37c:	613b      	str	r3, [r7, #16]
        /* round 11: */
        t0 = ctx->Td0[s0 >> 24] ^ ctx->Td1[(s3 >> 16) & 0xff] ^ ctx->Td2[(s2 >>  8) & 0xff] ^ ctx->Td3[s1 & 0xff] ^ rk[44];
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	0e1b      	lsrs	r3, r3, #24
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	0c1b      	lsrs	r3, r3, #16
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	440b      	add	r3, r1
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	405a      	eors	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	0a1b      	lsrs	r3, r3, #8
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	440b      	add	r3, r1
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	405a      	eors	r2, r3
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	440b      	add	r3, r1
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	405a      	eors	r2, r3
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	33b0      	adds	r3, #176	; 0xb0
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4053      	eors	r3, r2
 800e3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        t1 = ctx->Td0[s1 >> 24] ^ ctx->Td1[(s0 >> 16) & 0xff] ^ ctx->Td2[(s3 >>  8) & 0xff] ^ ctx->Td3[s2 & 0xff] ^ rk[45];
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	0e1b      	lsrs	r3, r3, #24
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	0c1b      	lsrs	r3, r3, #16
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	440b      	add	r3, r1
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	405a      	eors	r2, r3
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	0a1b      	lsrs	r3, r3, #8
 800e400:	b2db      	uxtb	r3, r3
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	440b      	add	r3, r1
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	405a      	eors	r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	440b      	add	r3, r1
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	405a      	eors	r2, r3
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	33b4      	adds	r3, #180	; 0xb4
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4053      	eors	r3, r2
 800e424:	62bb      	str	r3, [r7, #40]	; 0x28
        t2 = ctx->Td0[s2 >> 24] ^ ctx->Td1[(s1 >> 16) & 0xff] ^ ctx->Td2[(s0 >>  8) & 0xff] ^ ctx->Td3[s3 & 0xff] ^ rk[46];
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	0e1b      	lsrs	r3, r3, #24
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4413      	add	r3, r2
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	0c1b      	lsrs	r3, r3, #16
 800e440:	b2db      	uxtb	r3, r3
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	440b      	add	r3, r1
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	405a      	eors	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	0a1b      	lsrs	r3, r3, #8
 800e454:	b2db      	uxtb	r3, r3
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	440b      	add	r3, r1
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	405a      	eors	r2, r3
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	b2db      	uxtb	r3, r3
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	440b      	add	r3, r1
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	405a      	eors	r2, r3
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	33b8      	adds	r3, #184	; 0xb8
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4053      	eors	r3, r2
 800e478:	627b      	str	r3, [r7, #36]	; 0x24
        t3 = ctx->Td0[s3 >> 24] ^ ctx->Td1[(s2 >> 16) & 0xff] ^ ctx->Td2[(s1 >>  8) & 0xff] ^ ctx->Td3[s0 & 0xff] ^ rk[47];
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	0e1b      	lsrs	r3, r3, #24
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	0c1b      	lsrs	r3, r3, #16
 800e494:	b2db      	uxtb	r3, r3
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	440b      	add	r3, r1
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	405a      	eors	r2, r3
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	0a1b      	lsrs	r3, r3, #8
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	440b      	add	r3, r1
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	405a      	eors	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	440b      	add	r3, r1
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	405a      	eors	r2, r3
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	33bc      	adds	r3, #188	; 0xbc
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4053      	eors	r3, r2
 800e4cc:	623b      	str	r3, [r7, #32]
        if (Nr > 12) {
 800e4ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e4d2:	2b0c      	cmp	r3, #12
 800e4d4:	f340 8150 	ble.w	800e778 <B5_rijndaelDecrypt+0x1186>
            /* round 12: */
            s0 = ctx->Td0[t0 >> 24] ^ ctx->Td1[(t3 >> 16) & 0xff] ^ ctx->Td2[(t2 >>  8) & 0xff] ^ ctx->Td3[t1 & 0xff] ^ rk[48];
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e0:	0e1b      	lsrs	r3, r3, #24
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e4ee:	6a3b      	ldr	r3, [r7, #32]
 800e4f0:	0c1b      	lsrs	r3, r3, #16
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	440b      	add	r3, r1
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	405a      	eors	r2, r3
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	0a1b      	lsrs	r3, r3, #8
 800e506:	b2db      	uxtb	r3, r3
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	440b      	add	r3, r1
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	405a      	eors	r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	440b      	add	r3, r1
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	405a      	eors	r2, r3
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	33c0      	adds	r3, #192	; 0xc0
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4053      	eors	r3, r2
 800e52a:	61fb      	str	r3, [r7, #28]
            s1 = ctx->Td0[t1 >> 24] ^ ctx->Td1[(t0 >> 16) & 0xff] ^ ctx->Td2[(t3 >>  8) & 0xff] ^ ctx->Td3[t2 & 0xff] ^ rk[49];
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e534:	0e1b      	lsrs	r3, r3, #24
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	4413      	add	r3, r2
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e544:	0c1b      	lsrs	r3, r3, #16
 800e546:	b2db      	uxtb	r3, r3
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	440b      	add	r3, r1
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	405a      	eors	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	0a1b      	lsrs	r3, r3, #8
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	440b      	add	r3, r1
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	405a      	eors	r2, r3
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	440b      	add	r3, r1
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	405a      	eors	r2, r3
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	33c4      	adds	r3, #196	; 0xc4
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4053      	eors	r3, r2
 800e57e:	61bb      	str	r3, [r7, #24]
            s2 = ctx->Td0[t2 >> 24] ^ ctx->Td1[(t1 >> 16) & 0xff] ^ ctx->Td2[(t0 >>  8) & 0xff] ^ ctx->Td3[t3 & 0xff] ^ rk[50];
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e588:	0e1b      	lsrs	r3, r3, #24
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	4413      	add	r3, r2
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e598:	0c1b      	lsrs	r3, r3, #16
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	440b      	add	r3, r1
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	405a      	eors	r2, r3
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ac:	0a1b      	lsrs	r3, r3, #8
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	440b      	add	r3, r1
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	405a      	eors	r2, r3
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e5be:	6a3b      	ldr	r3, [r7, #32]
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	440b      	add	r3, r1
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	405a      	eors	r2, r3
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	33c8      	adds	r3, #200	; 0xc8
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4053      	eors	r3, r2
 800e5d2:	617b      	str	r3, [r7, #20]
            s3 = ctx->Td0[t3 >> 24] ^ ctx->Td1[(t2 >> 16) & 0xff] ^ ctx->Td2[(t1 >>  8) & 0xff] ^ ctx->Td3[t0 & 0xff] ^ rk[51];
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e5da:	6a3b      	ldr	r3, [r7, #32]
 800e5dc:	0e1b      	lsrs	r3, r3, #24
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	0c1b      	lsrs	r3, r3, #16
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	440b      	add	r3, r1
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	405a      	eors	r2, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	0a1b      	lsrs	r3, r3, #8
 800e602:	b2db      	uxtb	r3, r3
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	440b      	add	r3, r1
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	405a      	eors	r2, r3
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	b2db      	uxtb	r3, r3
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	440b      	add	r3, r1
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	405a      	eors	r2, r3
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	33cc      	adds	r3, #204	; 0xcc
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4053      	eors	r3, r2
 800e626:	613b      	str	r3, [r7, #16]
            /* round 13: */
            t0 = ctx->Td0[s0 >> 24] ^ ctx->Td1[(s3 >> 16) & 0xff] ^ ctx->Td2[(s2 >>  8) & 0xff] ^ ctx->Td3[s1 & 0xff] ^ rk[52];
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	0e1b      	lsrs	r3, r3, #24
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	0c1b      	lsrs	r3, r3, #16
 800e642:	b2db      	uxtb	r3, r3
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	440b      	add	r3, r1
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	405a      	eors	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	0a1b      	lsrs	r3, r3, #8
 800e656:	b2db      	uxtb	r3, r3
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	440b      	add	r3, r1
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	405a      	eors	r2, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	440b      	add	r3, r1
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	405a      	eors	r2, r3
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	33d0      	adds	r3, #208	; 0xd0
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4053      	eors	r3, r2
 800e67a:	62fb      	str	r3, [r7, #44]	; 0x2c
            t1 = ctx->Td0[s1 >> 24] ^ ctx->Td1[(s0 >> 16) & 0xff] ^ ctx->Td2[(s3 >>  8) & 0xff] ^ ctx->Td3[s2 & 0xff] ^ rk[53];
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	0e1b      	lsrs	r3, r3, #24
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	4413      	add	r3, r2
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	0c1b      	lsrs	r3, r3, #16
 800e696:	b2db      	uxtb	r3, r3
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	440b      	add	r3, r1
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	405a      	eors	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	0a1b      	lsrs	r3, r3, #8
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	440b      	add	r3, r1
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	405a      	eors	r2, r3
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	440b      	add	r3, r1
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	405a      	eors	r2, r3
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	33d4      	adds	r3, #212	; 0xd4
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4053      	eors	r3, r2
 800e6ce:	62bb      	str	r3, [r7, #40]	; 0x28
            t2 = ctx->Td0[s2 >> 24] ^ ctx->Td1[(s1 >> 16) & 0xff] ^ ctx->Td2[(s0 >>  8) & 0xff] ^ ctx->Td3[s3 & 0xff] ^ rk[54];
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	0e1b      	lsrs	r3, r3, #24
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	4413      	add	r3, r2
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	0c1b      	lsrs	r3, r3, #16
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	440b      	add	r3, r1
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	405a      	eors	r2, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	0a1b      	lsrs	r3, r3, #8
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	440b      	add	r3, r1
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	405a      	eors	r2, r3
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	b2db      	uxtb	r3, r3
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	440b      	add	r3, r1
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	405a      	eors	r2, r3
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	33d8      	adds	r3, #216	; 0xd8
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4053      	eors	r3, r2
 800e722:	627b      	str	r3, [r7, #36]	; 0x24
            t3 = ctx->Td0[s3 >> 24] ^ ctx->Td1[(s2 >> 16) & 0xff] ^ ctx->Td2[(s1 >>  8) & 0xff] ^ ctx->Td3[s0 & 0xff] ^ rk[55];
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	0e1b      	lsrs	r3, r3, #24
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	4413      	add	r3, r2
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	0c1b      	lsrs	r3, r3, #16
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	440b      	add	r3, r1
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	405a      	eors	r2, r3
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	0a1b      	lsrs	r3, r3, #8
 800e752:	b2db      	uxtb	r3, r3
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	440b      	add	r3, r1
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	405a      	eors	r2, r3
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	b2db      	uxtb	r3, r3
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	440b      	add	r3, r1
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	405a      	eors	r2, r3
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	33dc      	adds	r3, #220	; 0xdc
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4053      	eors	r3, r2
 800e776:	623b      	str	r3, [r7, #32]
        }
    }
    rk += Nr << 2;
 800e778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	68ba      	ldr	r2, [r7, #8]
 800e782:	4413      	add	r3, r2
 800e784:	60bb      	str	r3, [r7, #8]
    /*
     * apply last round and
     * map cipher state to byte array block:
     */
    s0 =
            (ctx->Td4[(t0 >> 24)       ] & 0xff000000) ^
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	0e1b      	lsrs	r3, r3, #24
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4413      	add	r3, r2
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
            (ctx->Td4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	0c1b      	lsrs	r3, r3, #16
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	440b      	add	r3, r1
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
            (ctx->Td4[(t0 >> 24)       ] & 0xff000000) ^
 800e7b0:	431a      	orrs	r2, r3
            (ctx->Td4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ba:	0a1b      	lsrs	r3, r3, #8
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	440b      	add	r3, r1
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            (ctx->Td4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
 800e7c8:	405a      	eors	r2, r3
            (ctx->Td4[(t1      ) & 0xff] & 0x000000ff) ^
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	440b      	add	r3, r1
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	b2db      	uxtb	r3, r3
            (ctx->Td4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
 800e7dc:	405a      	eors	r2, r3
            rk[0];
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	681b      	ldr	r3, [r3, #0]
    s0 =
 800e7e2:	4053      	eors	r3, r2
 800e7e4:	61fb      	str	r3, [r7, #28]
    B5_AES256_PUTUINT32(pt     , s0);
 800e7e6:	69f9      	ldr	r1, [r7, #28]
 800e7e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7ea:	f7fd f936 	bl	800ba5a <B5_AES256_PUTUINT32>
    s1 =
            (ctx->Td4[(t1 >> 24)       ] & 0xff000000) ^
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	0e1b      	lsrs	r3, r3, #24
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	4413      	add	r3, r2
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
            (ctx->Td4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80a:	0c1b      	lsrs	r3, r3, #16
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	440b      	add	r3, r1
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
            (ctx->Td4[(t1 >> 24)       ] & 0xff000000) ^
 800e818:	431a      	orrs	r2, r3
            (ctx->Td4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e820:	6a3b      	ldr	r3, [r7, #32]
 800e822:	0a1b      	lsrs	r3, r3, #8
 800e824:	b2db      	uxtb	r3, r3
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	440b      	add	r3, r1
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            (ctx->Td4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800e830:	405a      	eors	r2, r3
            (ctx->Td4[(t2      ) & 0xff] & 0x000000ff) ^
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	440b      	add	r3, r1
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	b2db      	uxtb	r3, r3
            (ctx->Td4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
 800e844:	405a      	eors	r2, r3
            rk[1];
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	3304      	adds	r3, #4
 800e84a:	681b      	ldr	r3, [r3, #0]
    s1 =
 800e84c:	4053      	eors	r3, r2
 800e84e:	61bb      	str	r3, [r7, #24]
    B5_AES256_PUTUINT32(pt +  4, s1);
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	3304      	adds	r3, #4
 800e854:	69b9      	ldr	r1, [r7, #24]
 800e856:	4618      	mov	r0, r3
 800e858:	f7fd f8ff 	bl	800ba5a <B5_AES256_PUTUINT32>
    s2 =
            (ctx->Td4[(t2 >> 24)       ] & 0xff000000) ^
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	0e1b      	lsrs	r3, r3, #24
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4413      	add	r3, r2
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
            (ctx->Td4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e878:	0c1b      	lsrs	r3, r3, #16
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	440b      	add	r3, r1
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
            (ctx->Td4[(t2 >> 24)       ] & 0xff000000) ^
 800e886:	431a      	orrs	r2, r3
            (ctx->Td4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	0a1b      	lsrs	r3, r3, #8
 800e892:	b2db      	uxtb	r3, r3
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	440b      	add	r3, r1
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            (ctx->Td4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
 800e89e:	405a      	eors	r2, r3
            (ctx->Td4[(t3      ) & 0xff] & 0x000000ff) ^
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	440b      	add	r3, r1
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	b2db      	uxtb	r3, r3
            (ctx->Td4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800e8b2:	405a      	eors	r2, r3
            rk[2];
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	3308      	adds	r3, #8
 800e8b8:	681b      	ldr	r3, [r3, #0]
    s2 =
 800e8ba:	4053      	eors	r3, r2
 800e8bc:	617b      	str	r3, [r7, #20]
    B5_AES256_PUTUINT32(pt +  8, s2);
 800e8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	6979      	ldr	r1, [r7, #20]
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fd f8c8 	bl	800ba5a <B5_AES256_PUTUINT32>
    s3 =
            (ctx->Td4[(t3 >> 24)       ] & 0xff000000) ^
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	0e1b      	lsrs	r3, r3, #24
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
            (ctx->Td4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	0c1b      	lsrs	r3, r3, #16
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	440b      	add	r3, r1
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
            (ctx->Td4[(t3 >> 24)       ] & 0xff000000) ^
 800e8f4:	431a      	orrs	r2, r3
            (ctx->Td4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fe:	0a1b      	lsrs	r3, r3, #8
 800e900:	b2db      	uxtb	r3, r3
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	440b      	add	r3, r1
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            (ctx->Td4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
 800e90c:	405a      	eors	r2, r3
            (ctx->Td4[(t0      ) & 0xff] & 0x000000ff) ^
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	b2db      	uxtb	r3, r3
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	440b      	add	r3, r1
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	b2db      	uxtb	r3, r3
            (ctx->Td4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
 800e920:	405a      	eors	r2, r3
            rk[3];
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	330c      	adds	r3, #12
 800e926:	681b      	ldr	r3, [r3, #0]
    s3 =
 800e928:	4053      	eors	r3, r2
 800e92a:	613b      	str	r3, [r7, #16]
    B5_AES256_PUTUINT32(pt + 12, s3);
 800e92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92e:	330c      	adds	r3, #12
 800e930:	6939      	ldr	r1, [r7, #16]
 800e932:	4618      	mov	r0, r3
 800e934:	f7fd f891 	bl	800ba5a <B5_AES256_PUTUINT32>
}
 800e938:	bf00      	nop
 800e93a:	3730      	adds	r7, #48	; 0x30
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <B5_Aes256_Init>:

int32_t B5_Aes256_Init (B5_tAesCtx *ctx, const uint8_t *Key, int16_t keySize, uint8_t aesMode)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	4611      	mov	r1, r2
 800e94c:	461a      	mov	r2, r3
 800e94e:	460b      	mov	r3, r1
 800e950:	80fb      	strh	r3, [r7, #6]
 800e952:	4613      	mov	r3, r2
 800e954:	717b      	strb	r3, [r7, #5]
    if(Key == NULL) 
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d102      	bne.n	800e962 <B5_Aes256_Init+0x22>
        return B5_AES256_RES_INVALID_ARGUMENT;
 800e95c:	f06f 0303 	mvn.w	r3, #3
 800e960:	e0a0      	b.n	800eaa4 <B5_Aes256_Init+0x164>
    
    if(ctx == NULL)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d102      	bne.n	800e96e <B5_Aes256_Init+0x2e>
        return  B5_AES256_RES_INVALID_CONTEXT;
 800e968:	f04f 33ff 	mov.w	r3, #4294967295
 800e96c:	e09a      	b.n	800eaa4 <B5_Aes256_Init+0x164>
    
    memset(ctx, 0, sizeof(B5_tAesCtx));
 800e96e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e972:	2100      	movs	r1, #0
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f008 fd5b 	bl	8017430 <memset>
    
    if ((aesMode < B5_AES256_OFB) || (aesMode > B5_AES256_CTR ))
 800e97a:	797b      	ldrb	r3, [r7, #5]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d002      	beq.n	800e986 <B5_Aes256_Init+0x46>
 800e980:	797b      	ldrb	r3, [r7, #5]
 800e982:	2b08      	cmp	r3, #8
 800e984:	d902      	bls.n	800e98c <B5_Aes256_Init+0x4c>
        return B5_AES256_RES_INVALID_MODE;
 800e986:	f06f 0304 	mvn.w	r3, #4
 800e98a:	e08b      	b.n	800eaa4 <B5_Aes256_Init+0x164>
    
    if((keySize != B5_AES_128) && (keySize != B5_AES_192) && (keySize != B5_AES_256)) 
 800e98c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e990:	2b10      	cmp	r3, #16
 800e992:	d00a      	beq.n	800e9aa <B5_Aes256_Init+0x6a>
 800e994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e998:	2b18      	cmp	r3, #24
 800e99a:	d006      	beq.n	800e9aa <B5_Aes256_Init+0x6a>
 800e99c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9a0:	2b20      	cmp	r3, #32
 800e9a2:	d002      	beq.n	800e9aa <B5_Aes256_Init+0x6a>
        return B5_AES256_RES_INVALID_KEY_SIZE;
 800e9a4:	f06f 0302 	mvn.w	r3, #2
 800e9a8:	e07c      	b.n	800eaa4 <B5_Aes256_Init+0x164>
    
    ctx->mode = aesMode;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	797a      	ldrb	r2, [r7, #5]
 800e9ae:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
    
    ctx->Te0 = B5Te0_S;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	4a3d      	ldr	r2, [pc, #244]	; (800eaac <B5_Aes256_Init+0x16c>)
 800e9b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ctx->Te1 = B5Te1_S;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	4a3c      	ldr	r2, [pc, #240]	; (800eab0 <B5_Aes256_Init+0x170>)
 800e9be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    ctx->Te2 = B5Te2_S;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	4a3b      	ldr	r2, [pc, #236]	; (800eab4 <B5_Aes256_Init+0x174>)
 800e9c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    ctx->Te3 = B5Te3_S;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	4a3a      	ldr	r2, [pc, #232]	; (800eab8 <B5_Aes256_Init+0x178>)
 800e9ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ctx->Te4 = B5Te4_S;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	4a39      	ldr	r2, [pc, #228]	; (800eabc <B5_Aes256_Init+0x17c>)
 800e9d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    ctx->Td0 = B5Td0_S;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	4a38      	ldr	r2, [pc, #224]	; (800eac0 <B5_Aes256_Init+0x180>)
 800e9de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    ctx->Td1 = B5Td1_S;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	4a37      	ldr	r2, [pc, #220]	; (800eac4 <B5_Aes256_Init+0x184>)
 800e9e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    ctx->Td2 = B5Td2_S;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	4a36      	ldr	r2, [pc, #216]	; (800eac8 <B5_Aes256_Init+0x188>)
 800e9ee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    ctx->Td3 = B5Td3_S;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	4a35      	ldr	r2, [pc, #212]	; (800eacc <B5_Aes256_Init+0x18c>)
 800e9f6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    ctx->Td4 = B5Td4_S;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	4a34      	ldr	r2, [pc, #208]	; (800ead0 <B5_Aes256_Init+0x190>)
 800e9fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    
    memset(ctx->InitVector, 0x55, B5_AES_IV_SIZE);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	33f1      	adds	r3, #241	; 0xf1
 800ea06:	2210      	movs	r2, #16
 800ea08:	2155      	movs	r1, #85	; 0x55
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f008 fd10 	bl	8017430 <memset>
    
    if ((ctx->mode == B5_AES256_ECB_ENC) || (ctx->mode == B5_AES256_OFB) || (ctx->mode == B5_AES256_CBC_ENC) || (ctx->mode == B5_AES256_CTR) || (ctx->mode == B5_AES256_CFB_ENC) || (ctx->mode == B5_AES256_CFB_DEC)) 
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ea16:	2b02      	cmp	r3, #2
 800ea18:	d018      	beq.n	800ea4c <B5_Aes256_Init+0x10c>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d013      	beq.n	800ea4c <B5_Aes256_Init+0x10c>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ea2a:	2b04      	cmp	r3, #4
 800ea2c:	d00e      	beq.n	800ea4c <B5_Aes256_Init+0x10c>
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ea34:	2b08      	cmp	r3, #8
 800ea36:	d009      	beq.n	800ea4c <B5_Aes256_Init+0x10c>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ea3e:	2b06      	cmp	r3, #6
 800ea40:	d004      	beq.n	800ea4c <B5_Aes256_Init+0x10c>
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ea48:	2b07      	cmp	r3, #7
 800ea4a:	d10e      	bne.n	800ea6a <B5_Aes256_Init+0x12a>
    {
        ctx->Nr = B5_rijndaelKeySetupEnc(ctx, ctx->rk, Key, keySize<<3);
 800ea4c:	68f9      	ldr	r1, [r7, #12]
 800ea4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea52:	00db      	lsls	r3, r3, #3
 800ea54:	b21b      	sxth	r3, r3
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7fd f81f 	bl	800ba9c <B5_rijndaelKeySetupEnc>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	461a      	mov	r2, r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 800ea68:	e01b      	b.n	800eaa2 <B5_Aes256_Init+0x162>
    } 
    else if ((ctx->mode == B5_AES256_ECB_DEC) || (ctx->mode == B5_AES256_CBC_DEC) )  
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ea70:	2b03      	cmp	r3, #3
 800ea72:	d004      	beq.n	800ea7e <B5_Aes256_Init+0x13e>
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ea7a:	2b05      	cmp	r3, #5
 800ea7c:	d10e      	bne.n	800ea9c <B5_Aes256_Init+0x15c>
    {
        ctx->Nr = B5_rijndaelKeySetupDec(ctx, ctx->rk, Key, keySize<<3);
 800ea7e:	68f9      	ldr	r1, [r7, #12]
 800ea80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	b21b      	sxth	r3, r3
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	68f8      	ldr	r0, [r7, #12]
 800ea8c:	f7fd fa44 	bl	800bf18 <B5_rijndaelKeySetupDec>
 800ea90:	4603      	mov	r3, r0
 800ea92:	461a      	mov	r2, r3
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 800ea9a:	e002      	b.n	800eaa2 <B5_Aes256_Init+0x162>
    }
    else
    {
        return B5_AES256_RES_INVALID_MODE;        
 800ea9c:	f06f 0304 	mvn.w	r3, #4
 800eaa0:	e000      	b.n	800eaa4 <B5_Aes256_Init+0x164>
    }
    
    return B5_AES256_RES_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	080176c0 	.word	0x080176c0
 800eab0:	08017ac0 	.word	0x08017ac0
 800eab4:	08017ec0 	.word	0x08017ec0
 800eab8:	080182c0 	.word	0x080182c0
 800eabc:	080186c0 	.word	0x080186c0
 800eac0:	08018ac0 	.word	0x08018ac0
 800eac4:	08018ec0 	.word	0x08018ec0
 800eac8:	080192c0 	.word	0x080192c0
 800eacc:	080196c0 	.word	0x080196c0
 800ead0:	08019ac0 	.word	0x08019ac0

0800ead4 <B5_Aes256_SetIV>:

int32_t B5_Aes256_SetIV (B5_tAesCtx    *ctx, const uint8_t *IV)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
    if(ctx == NULL)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d102      	bne.n	800eaea <B5_Aes256_SetIV+0x16>
        return  B5_AES256_RES_INVALID_CONTEXT;
 800eae4:	f04f 33ff 	mov.w	r3, #4294967295
 800eae8:	e02e      	b.n	800eb48 <B5_Aes256_SetIV+0x74>
    
    
    if(IV == NULL) 
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d102      	bne.n	800eaf6 <B5_Aes256_SetIV+0x22>
        return B5_AES256_RES_INVALID_ARGUMENT;
 800eaf0:	f06f 0303 	mvn.w	r3, #3
 800eaf4:	e028      	b.n	800eb48 <B5_Aes256_SetIV+0x74>
    
    
    if ( (ctx->mode != B5_AES256_OFB) && (ctx->mode != B5_AES256_CBC_ENC) && (ctx->mode != B5_AES256_CBC_DEC) && (ctx->mode != B5_AES256_CTR) && 
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d01b      	beq.n	800eb38 <B5_Aes256_SetIV+0x64>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800eb06:	2b04      	cmp	r3, #4
 800eb08:	d016      	beq.n	800eb38 <B5_Aes256_SetIV+0x64>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800eb10:	2b05      	cmp	r3, #5
 800eb12:	d011      	beq.n	800eb38 <B5_Aes256_SetIV+0x64>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800eb1a:	2b08      	cmp	r3, #8
 800eb1c:	d00c      	beq.n	800eb38 <B5_Aes256_SetIV+0x64>
         (ctx->mode != B5_AES256_CFB_ENC) &&  (ctx->mode != B5_AES256_CFB_DEC))    
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
    if ( (ctx->mode != B5_AES256_OFB) && (ctx->mode != B5_AES256_CBC_ENC) && (ctx->mode != B5_AES256_CBC_DEC) && (ctx->mode != B5_AES256_CTR) && 
 800eb24:	2b06      	cmp	r3, #6
 800eb26:	d007      	beq.n	800eb38 <B5_Aes256_SetIV+0x64>
         (ctx->mode != B5_AES256_CFB_ENC) &&  (ctx->mode != B5_AES256_CFB_DEC))    
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800eb2e:	2b07      	cmp	r3, #7
 800eb30:	d002      	beq.n	800eb38 <B5_Aes256_SetIV+0x64>
        return B5_AES256_RES_INVALID_MODE; 
 800eb32:	f06f 0304 	mvn.w	r3, #4
 800eb36:	e007      	b.n	800eb48 <B5_Aes256_SetIV+0x74>
    
    memcpy(ctx->InitVector, IV, B5_AES_IV_SIZE);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	33f1      	adds	r3, #241	; 0xf1
 800eb3c:	2210      	movs	r2, #16
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f008 fc4d 	bl	80173e0 <memcpy>
    
    return B5_AES256_RES_OK;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <B5_Aes256_Update>:

int32_t B5_Aes256_Update (B5_tAesCtx	*ctx, uint8_t *encData, uint8_t *clrData, int16_t nBlk)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b08c      	sub	sp, #48	; 0x30
 800eb54:	af02      	add	r7, sp, #8
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	807b      	strh	r3, [r7, #2]
    int16_t    i, j, cb;
    uint8_t    tmp[B5_AES_BLK_SIZE];
    
    
    
    if(ctx == NULL)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d102      	bne.n	800eb6a <B5_Aes256_Update+0x1a>
        return  B5_AES256_RES_INVALID_CONTEXT;
 800eb64:	f04f 33ff 	mov.w	r3, #4294967295
 800eb68:	e26e      	b.n	800f048 <B5_Aes256_Update+0x4f8>
    
    
    if((encData == NULL) || (clrData == NULL) || (nBlk <= 0))
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d006      	beq.n	800eb7e <B5_Aes256_Update+0x2e>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d003      	beq.n	800eb7e <B5_Aes256_Update+0x2e>
 800eb76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	dc02      	bgt.n	800eb84 <B5_Aes256_Update+0x34>
        return B5_AES256_RES_INVALID_ARGUMENT;
 800eb7e:	f06f 0303 	mvn.w	r3, #3
 800eb82:	e261      	b.n	800f048 <B5_Aes256_Update+0x4f8>
    
    
    switch(ctx->mode) {
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	2b07      	cmp	r3, #7
 800eb8e:	f200 8257 	bhi.w	800f040 <B5_Aes256_Update+0x4f0>
 800eb92:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <B5_Aes256_Update+0x48>)
 800eb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb98:	0800ec79 	.word	0x0800ec79
 800eb9c:	0800ecf1 	.word	0x0800ecf1
 800eba0:	0800ed33 	.word	0x0800ed33
 800eba4:	0800ed75 	.word	0x0800ed75
 800eba8:	0800ee2f 	.word	0x0800ee2f
 800ebac:	0800eefd 	.word	0x0800eefd
 800ebb0:	0800ef9f 	.word	0x0800ef9f
 800ebb4:	0800ebb9 	.word	0x0800ebb9
        
        
        case B5_AES256_CTR: 
        {
            for (i = 0; i < nBlk; i++) 
 800ebb8:	2300      	movs	r3, #0
 800ebba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ebbc:	e055      	b.n	800ec6a <B5_Aes256_Update+0x11a>
            {
                B5_rijndaelEncrypt(ctx, ctx->rk, ctx->Nr, ctx->InitVector, encData);
 800ebbe:	68f9      	ldr	r1, [r7, #12]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ebc6:	b21a      	sxth	r2, r3
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7fd fb65 	bl	800c2a4 <B5_rijndaelEncrypt>
                for (j = 0; j < B5_AES_BLK_SIZE; j++) 
 800ebda:	2300      	movs	r3, #0
 800ebdc:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ebde:	e013      	b.n	800ec08 <B5_Aes256_Update+0xb8>
                {
                    //*encData = *clrData++ ^ encData[j];
                    //*encData++;
                    /*Working*/
					*encData = *encData ^ *clrData;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	781a      	ldrb	r2, [r3, #0]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	4053      	eors	r3, r2
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	701a      	strb	r2, [r3, #0]
					encData++;
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	60bb      	str	r3, [r7, #8]
					clrData++;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	607b      	str	r3, [r7, #4]
                for (j = 0; j < B5_AES_BLK_SIZE; j++) 
 800ebfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	3301      	adds	r3, #1
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ec08:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ec0c:	2b0f      	cmp	r3, #15
 800ec0e:	dde7      	ble.n	800ebe0 <B5_Aes256_Update+0x90>
                }
                
                j = 15;
 800ec10:	230f      	movs	r3, #15
 800ec12:	84bb      	strh	r3, [r7, #36]	; 0x24
                do {
                    ctx->InitVector[j]++;
 800ec14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	441a      	add	r2, r3
 800ec1c:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
 800ec20:	3201      	adds	r2, #1
 800ec22:	b2d1      	uxtb	r1, r2
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4413      	add	r3, r2
 800ec28:	460a      	mov	r2, r1
 800ec2a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                    cb = ctx->InitVector[j] == 0;
 800ec2e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4413      	add	r3, r2
 800ec36:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	bf0c      	ite	eq
 800ec3e:	2301      	moveq	r3, #1
 800ec40:	2300      	movne	r3, #0
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	847b      	strh	r3, [r7, #34]	; 0x22
                } while( j-- && cb ); 
 800ec46:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	3a01      	subs	r2, #1
 800ec4e:	b292      	uxth	r2, r2
 800ec50:	84ba      	strh	r2, [r7, #36]	; 0x24
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d003      	beq.n	800ec5e <B5_Aes256_Update+0x10e>
 800ec56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1da      	bne.n	800ec14 <B5_Aes256_Update+0xc4>
            for (i = 0; i < nBlk; i++) 
 800ec5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	3301      	adds	r3, #1
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ec6a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ec6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	dba3      	blt.n	800ebbe <B5_Aes256_Update+0x6e>
            }
            
            break;
 800ec76:	e1e6      	b.n	800f046 <B5_Aes256_Update+0x4f6>
        }
        
        
        case B5_AES256_OFB: 
        {
            for (i = 0; i < nBlk; i++) 
 800ec78:	2300      	movs	r3, #0
 800ec7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ec7c:	e031      	b.n	800ece2 <B5_Aes256_Update+0x192>
            {
                B5_rijndaelEncrypt(ctx, ctx->rk, ctx->Nr, ctx->InitVector, ctx->InitVector);
 800ec7e:	68f9      	ldr	r1, [r7, #12]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ec86:	b21a      	sxth	r2, r3
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	33f1      	adds	r3, #241	; 0xf1
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	4603      	mov	r3, r0
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f7fd fb04 	bl	800c2a4 <B5_rijndaelEncrypt>
                for (j = 0; j < 16; j++) 
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800eca0:	e015      	b.n	800ecce <B5_Aes256_Update+0x17e>
                {
                    *encData++ = *clrData++ ^ ctx->InitVector[j];
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	1c5a      	adds	r2, r3, #1
 800eca6:	607a      	str	r2, [r7, #4]
 800eca8:	7819      	ldrb	r1, [r3, #0]
 800ecaa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	f893 20f1 	ldrb.w	r2, [r3, #241]	; 0xf1
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	1c58      	adds	r0, r3, #1
 800ecba:	60b8      	str	r0, [r7, #8]
 800ecbc:	404a      	eors	r2, r1
 800ecbe:	b2d2      	uxtb	r2, r2
 800ecc0:	701a      	strb	r2, [r3, #0]
                for (j = 0; j < 16; j++) 
 800ecc2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	3301      	adds	r3, #1
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ecce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ecd2:	2b0f      	cmp	r3, #15
 800ecd4:	dde5      	ble.n	800eca2 <B5_Aes256_Update+0x152>
            for (i = 0; i < nBlk; i++) 
 800ecd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	3301      	adds	r3, #1
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ece2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ece6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	dbc7      	blt.n	800ec7e <B5_Aes256_Update+0x12e>
                }
            }
            
            break;
 800ecee:	e1aa      	b.n	800f046 <B5_Aes256_Update+0x4f6>
        
        
        
        case B5_AES256_ECB_ENC:
        {
            for (i = 0; i < nBlk; i++) 
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ecf4:	e016      	b.n	800ed24 <B5_Aes256_Update+0x1d4>
            {
                B5_rijndaelEncrypt(ctx, ctx->rk, ctx->Nr, clrData, encData);
 800ecf6:	68f9      	ldr	r1, [r7, #12]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ecfe:	b21a      	sxth	r2, r3
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f7fd facc 	bl	800c2a4 <B5_rijndaelEncrypt>
                clrData += 16;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	3310      	adds	r3, #16
 800ed10:	607b      	str	r3, [r7, #4]
                encData += 16;
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	3310      	adds	r3, #16
 800ed16:	60bb      	str	r3, [r7, #8]
            for (i = 0; i < nBlk; i++) 
 800ed18:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	3301      	adds	r3, #1
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ed24:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ed28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	dbe2      	blt.n	800ecf6 <B5_Aes256_Update+0x1a6>
            }
            
            break;
 800ed30:	e189      	b.n	800f046 <B5_Aes256_Update+0x4f6>
        }
        
        
        case B5_AES256_ECB_DEC:
        {
            for (i = 0; i < nBlk; i++) 
 800ed32:	2300      	movs	r3, #0
 800ed34:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ed36:	e016      	b.n	800ed66 <B5_Aes256_Update+0x216>
            {
                B5_rijndaelDecrypt(ctx, ctx->rk, ctx->Nr, encData, clrData);
 800ed38:	68f9      	ldr	r1, [r7, #12]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ed40:	b21a      	sxth	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f7fe fc52 	bl	800d5f2 <B5_rijndaelDecrypt>
                clrData += 16;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	3310      	adds	r3, #16
 800ed52:	607b      	str	r3, [r7, #4]
                encData += 16;
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	3310      	adds	r3, #16
 800ed58:	60bb      	str	r3, [r7, #8]
            for (i = 0; i < nBlk; i++) 
 800ed5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	3301      	adds	r3, #1
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ed66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ed6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	dbe2      	blt.n	800ed38 <B5_Aes256_Update+0x1e8>
            }
            
            break;
 800ed72:	e168      	b.n	800f046 <B5_Aes256_Update+0x4f6>
        }
        
        
        case B5_AES256_CBC_ENC:
        {
            for (i = 0; i < nBlk; i++) 
 800ed74:	2300      	movs	r3, #0
 800ed76:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ed78:	e052      	b.n	800ee20 <B5_Aes256_Update+0x2d0>
            {
                for (j = 0; j < 16; j++) 
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ed7e:	e019      	b.n	800edb4 <B5_Aes256_Update+0x264>
                {
                    tmp[j] = clrData[j] ^ ctx->InitVector[j];
 800ed80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	4413      	add	r3, r2
 800ed88:	7819      	ldrb	r1, [r3, #0]
 800ed8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ed8e:	68fa      	ldr	r2, [r7, #12]
 800ed90:	4413      	add	r3, r2
 800ed92:	f893 20f1 	ldrb.w	r2, [r3, #241]	; 0xf1
 800ed96:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ed9a:	404a      	eors	r2, r1
 800ed9c:	b2d2      	uxtb	r2, r2
 800ed9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eda2:	440b      	add	r3, r1
 800eda4:	f803 2c18 	strb.w	r2, [r3, #-24]
                for (j = 0; j < 16; j++) 
 800eda8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800edac:	b29b      	uxth	r3, r3
 800edae:	3301      	adds	r3, #1
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800edb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800edb8:	2b0f      	cmp	r3, #15
 800edba:	dde1      	ble.n	800ed80 <B5_Aes256_Update+0x230>
                }      
                
                B5_rijndaelEncrypt(ctx, ctx->rk, ctx->Nr, tmp, encData);
 800edbc:	68f9      	ldr	r1, [r7, #12]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800edc4:	b21a      	sxth	r2, r3
 800edc6:	f107 0010 	add.w	r0, r7, #16
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	4603      	mov	r3, r0
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f7fd fa67 	bl	800c2a4 <B5_rijndaelEncrypt>
                for (j = 0; j < 16; j++) 
 800edd6:	2300      	movs	r3, #0
 800edd8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800edda:	e011      	b.n	800ee00 <B5_Aes256_Update+0x2b0>
                {
                    ctx->InitVector[j] = encData[j];
 800eddc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ede0:	68ba      	ldr	r2, [r7, #8]
 800ede2:	441a      	add	r2, r3
 800ede4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ede8:	7811      	ldrb	r1, [r2, #0]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	4413      	add	r3, r2
 800edee:	460a      	mov	r2, r1
 800edf0:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                for (j = 0; j < 16; j++) 
 800edf4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	3301      	adds	r3, #1
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee04:	2b0f      	cmp	r3, #15
 800ee06:	dde9      	ble.n	800eddc <B5_Aes256_Update+0x28c>
                }
                
                clrData += 16;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	3310      	adds	r3, #16
 800ee0c:	607b      	str	r3, [r7, #4]
                encData += 16;
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	3310      	adds	r3, #16
 800ee12:	60bb      	str	r3, [r7, #8]
            for (i = 0; i < nBlk; i++) 
 800ee14:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee20:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ee24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	dba6      	blt.n	800ed7a <B5_Aes256_Update+0x22a>
            }
            
            break;
 800ee2c:	e10b      	b.n	800f046 <B5_Aes256_Update+0x4f6>
        }
        
        
        case B5_AES256_CBC_DEC:
        {
            for (i = 0; i < nBlk; i++) 
 800ee2e:	2300      	movs	r3, #0
 800ee30:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee32:	e05c      	b.n	800eeee <B5_Aes256_Update+0x39e>
            {
                for (j = 0; j < 16; j++) 
 800ee34:	2300      	movs	r3, #0
 800ee36:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee38:	e011      	b.n	800ee5e <B5_Aes256_Update+0x30e>
                {
                    tmp[j] = encData[j];
 800ee3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	441a      	add	r2, r3
 800ee42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee46:	7812      	ldrb	r2, [r2, #0]
 800ee48:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ee4c:	440b      	add	r3, r1
 800ee4e:	f803 2c18 	strb.w	r2, [r3, #-24]
                for (j = 0; j < 16; j++) 
 800ee52:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	3301      	adds	r3, #1
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee5e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee62:	2b0f      	cmp	r3, #15
 800ee64:	dde9      	ble.n	800ee3a <B5_Aes256_Update+0x2ea>
                }
                
                B5_rijndaelDecrypt(ctx, ctx->rk, ctx->Nr, encData, clrData);
 800ee66:	68f9      	ldr	r1, [r7, #12]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ee6e:	b21a      	sxth	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f7fe fbbb 	bl	800d5f2 <B5_rijndaelDecrypt>
                for (j = 0; j < 16; j++) 
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee80:	e025      	b.n	800eece <B5_Aes256_Update+0x37e>
                {
                    clrData[j] ^= ctx->InitVector[j];
 800ee82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	4413      	add	r3, r2
 800ee8a:	7819      	ldrb	r1, [r3, #0]
 800ee8c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	4413      	add	r3, r2
 800ee94:	f893 20f1 	ldrb.w	r2, [r3, #241]	; 0xf1
 800ee98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	4403      	add	r3, r0
 800eea0:	404a      	eors	r2, r1
 800eea2:	b2d2      	uxtb	r2, r2
 800eea4:	701a      	strb	r2, [r3, #0]
                    ctx->InitVector[j] = tmp[j];
 800eea6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800eeaa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800eeae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eeb2:	440a      	add	r2, r1
 800eeb4:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	4413      	add	r3, r2
 800eebc:	460a      	mov	r2, r1
 800eebe:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                for (j = 0; j < 16; j++) 
 800eec2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	3301      	adds	r3, #1
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	84bb      	strh	r3, [r7, #36]	; 0x24
 800eece:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800eed2:	2b0f      	cmp	r3, #15
 800eed4:	ddd5      	ble.n	800ee82 <B5_Aes256_Update+0x332>
                }            
                
                clrData += 16;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3310      	adds	r3, #16
 800eeda:	607b      	str	r3, [r7, #4]
                encData += 16;
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	3310      	adds	r3, #16
 800eee0:	60bb      	str	r3, [r7, #8]
            for (i = 0; i < nBlk; i++) 
 800eee2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	3301      	adds	r3, #1
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eeee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800eef2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	db9c      	blt.n	800ee34 <B5_Aes256_Update+0x2e4>
            }
            
            break;
 800eefa:	e0a4      	b.n	800f046 <B5_Aes256_Update+0x4f6>
        }
        
        
        case B5_AES256_CFB_ENC:
        {
            for (i = 0; i < nBlk; i++) 
 800eefc:	2300      	movs	r3, #0
 800eefe:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ef00:	e046      	b.n	800ef90 <B5_Aes256_Update+0x440>
            {
                B5_rijndaelEncrypt(ctx, ctx->rk, ctx->Nr, ctx->InitVector, tmp);             
 800ef02:	68f9      	ldr	r1, [r7, #12]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ef0a:	b21a      	sxth	r2, r3
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 800ef12:	f107 0310 	add.w	r3, r7, #16
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	4603      	mov	r3, r0
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f7fd f9c2 	bl	800c2a4 <B5_rijndaelEncrypt>
                for (j = 0; j < 16; j++) 
 800ef20:	2300      	movs	r3, #0
 800ef22:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ef24:	e024      	b.n	800ef70 <B5_Aes256_Update+0x420>
                {
                    encData[j] = clrData[j] ^ tmp[j];
 800ef26:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	7819      	ldrb	r1, [r3, #0]
 800ef30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ef34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ef38:	4413      	add	r3, r2
 800ef3a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800ef3e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ef42:	68b8      	ldr	r0, [r7, #8]
 800ef44:	4403      	add	r3, r0
 800ef46:	404a      	eors	r2, r1
 800ef48:	b2d2      	uxtb	r2, r2
 800ef4a:	701a      	strb	r2, [r3, #0]
                    ctx->InitVector[j] = encData[j]; 
 800ef4c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ef50:	68ba      	ldr	r2, [r7, #8]
 800ef52:	441a      	add	r2, r3
 800ef54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ef58:	7811      	ldrb	r1, [r2, #0]
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	460a      	mov	r2, r1
 800ef60:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                for (j = 0; j < 16; j++) 
 800ef64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ef70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ef74:	2b0f      	cmp	r3, #15
 800ef76:	ddd6      	ble.n	800ef26 <B5_Aes256_Update+0x3d6>
                }      
                
                
                clrData += 16;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3310      	adds	r3, #16
 800ef7c:	607b      	str	r3, [r7, #4]
                encData += 16;
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	3310      	adds	r3, #16
 800ef82:	60bb      	str	r3, [r7, #8]
            for (i = 0; i < nBlk; i++) 
 800ef84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ef90:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ef94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	dbb2      	blt.n	800ef02 <B5_Aes256_Update+0x3b2>
            }
            
            break;
 800ef9c:	e053      	b.n	800f046 <B5_Aes256_Update+0x4f6>
        }
        
        
        case B5_AES256_CFB_DEC:
        {
            for (i = 0; i < nBlk; i++) 
 800ef9e:	2300      	movs	r3, #0
 800efa0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800efa2:	e046      	b.n	800f032 <B5_Aes256_Update+0x4e2>
            {
                B5_rijndaelEncrypt(ctx, ctx->rk, ctx->Nr, ctx->InitVector, tmp);
 800efa4:	68f9      	ldr	r1, [r7, #12]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800efac:	b21a      	sxth	r2, r3
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 800efb4:	f107 0310 	add.w	r3, r7, #16
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	4603      	mov	r3, r0
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f7fd f971 	bl	800c2a4 <B5_rijndaelEncrypt>
                for (j = 0; j < 16; j++) 
 800efc2:	2300      	movs	r3, #0
 800efc4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800efc6:	e024      	b.n	800f012 <B5_Aes256_Update+0x4c2>
                {
                    ctx->InitVector[j] = encData[j];
 800efc8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	441a      	add	r2, r3
 800efd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800efd4:	7811      	ldrb	r1, [r2, #0]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	4413      	add	r3, r2
 800efda:	460a      	mov	r2, r1
 800efdc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                    clrData[j] = encData[j] ^ tmp[j];
 800efe0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	4413      	add	r3, r2
 800efe8:	7819      	ldrb	r1, [r3, #0]
 800efea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800efee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eff2:	4413      	add	r3, r2
 800eff4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800eff8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	4403      	add	r3, r0
 800f000:	404a      	eors	r2, r1
 800f002:	b2d2      	uxtb	r2, r2
 800f004:	701a      	strb	r2, [r3, #0]
                for (j = 0; j < 16; j++) 
 800f006:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	3301      	adds	r3, #1
 800f00e:	b29b      	uxth	r3, r3
 800f010:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f012:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f016:	2b0f      	cmp	r3, #15
 800f018:	ddd6      	ble.n	800efc8 <B5_Aes256_Update+0x478>
                }            
                
                clrData += 16;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	3310      	adds	r3, #16
 800f01e:	607b      	str	r3, [r7, #4]
                encData += 16;
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	3310      	adds	r3, #16
 800f024:	60bb      	str	r3, [r7, #8]
            for (i = 0; i < nBlk; i++) 
 800f026:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	3301      	adds	r3, #1
 800f02e:	b29b      	uxth	r3, r3
 800f030:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f032:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f036:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	dbb2      	blt.n	800efa4 <B5_Aes256_Update+0x454>
            }
            
            break;
 800f03e:	e002      	b.n	800f046 <B5_Aes256_Update+0x4f6>
        
        
        default:
        {
            
            return B5_AES256_RES_INVALID_MODE;
 800f040:	f06f 0304 	mvn.w	r3, #4
 800f044:	e000      	b.n	800f048 <B5_Aes256_Update+0x4f8>
        }
        
    }
    
    
    return B5_AES256_RES_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3728      	adds	r7, #40	; 0x28
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <B5_Aes256_Finit>:

int32_t B5_Aes256_Finit (B5_tAesCtx    *ctx)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
    return B5_AES256_RES_OK;
 800f058:	2300      	movs	r3, #0
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr

0800f066 <xor_bb>:
#include "pbkdf2.h"

/** out = x ^ y.
*  out, x and y may alias. */
static  void xor_bb(uint8_t *out, const uint8_t *x, const uint8_t *y, size_t len)
{
 800f066:	b480      	push	{r7}
 800f068:	b087      	sub	sp, #28
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	60f8      	str	r0, [r7, #12]
 800f06e:	60b9      	str	r1, [r7, #8]
 800f070:	607a      	str	r2, [r7, #4]
 800f072:	603b      	str	r3, [r7, #0]
	size_t i;
	for (i = 0; i < len; i++)
 800f074:	2300      	movs	r3, #0
 800f076:	617b      	str	r3, [r7, #20]
 800f078:	e010      	b.n	800f09c <xor_bb+0x36>
		out[i] = x[i] ^ y[i];
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	4413      	add	r3, r2
 800f080:	7819      	ldrb	r1, [r3, #0]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	4413      	add	r3, r2
 800f088:	781a      	ldrb	r2, [r3, #0]
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	4403      	add	r3, r0
 800f090:	404a      	eors	r2, r1
 800f092:	b2d2      	uxtb	r2, r2
 800f094:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++)
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	3301      	adds	r3, #1
 800f09a:	617b      	str	r3, [r7, #20]
 800f09c:	697a      	ldr	r2, [r7, #20]
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d3ea      	bcc.n	800f07a <xor_bb+0x14>
}
 800f0a4:	bf00      	nop
 800f0a6:	bf00      	nop
 800f0a8:	371c      	adds	r7, #28
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr

0800f0b2 <F>:
static void F(const B5_tHmacSha256Ctx *startctx,
	uint32_t counter,
	const uint8_t *salt, size_t nsalt,
	uint32_t iterations,
	uint8_t *out)
{
 800f0b2:	b5b0      	push	{r4, r5, r7, lr}
 800f0b4:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	f107 040c 	add.w	r4, r7, #12
 800f0be:	6020      	str	r0, [r4, #0]
 800f0c0:	f107 0008 	add.w	r0, r7, #8
 800f0c4:	6001      	str	r1, [r0, #0]
 800f0c6:	1d39      	adds	r1, r7, #4
 800f0c8:	600a      	str	r2, [r1, #0]
 800f0ca:	463a      	mov	r2, r7
 800f0cc:	6013      	str	r3, [r2, #0]
	uint8_t U[B5_SHA256_DIGEST_SIZE];
	B5_tHmacSha256Ctx ctx = *startctx;
 800f0ce:	f107 0214 	add.w	r2, r7, #20
 800f0d2:	f107 030c 	add.w	r3, r7, #12
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4610      	mov	r0, r2
 800f0da:	4619      	mov	r1, r3
 800f0dc:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	f008 f97d 	bl	80173e0 <memcpy>
	uint8_t countbuf[4];
	uint32_t i;
	countbuf[0] = ((counter >> 3 * 8) & 0xFF);
 800f0e6:	f107 0308 	add.w	r3, r7, #8
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	0e1b      	lsrs	r3, r3, #24
 800f0ee:	b2da      	uxtb	r2, r3
 800f0f0:	f107 0310 	add.w	r3, r7, #16
 800f0f4:	701a      	strb	r2, [r3, #0]
	countbuf[1] = ((counter >> 2 * 8) & 0xFF);
 800f0f6:	f107 0308 	add.w	r3, r7, #8
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	0c1b      	lsrs	r3, r3, #16
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	f107 0310 	add.w	r3, r7, #16
 800f104:	705a      	strb	r2, [r3, #1]
	countbuf[2] = ((counter >> 1 * 8) & 0xFF);
 800f106:	f107 0308 	add.w	r3, r7, #8
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	0a1b      	lsrs	r3, r3, #8
 800f10e:	b2da      	uxtb	r2, r3
 800f110:	f107 0310 	add.w	r3, r7, #16
 800f114:	709a      	strb	r2, [r3, #2]
	countbuf[3] = (counter & 0xFF);
 800f116:	f107 0308 	add.w	r3, r7, #8
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	f107 0310 	add.w	r3, r7, #16
 800f122:	70da      	strb	r2, [r3, #3]

	/* First iteration:
	*   U_1 = PRF(P, S || INT_32_BE(i))
	*/
	
	B5_HmacSha256_Update(&ctx, salt, nsalt);
 800f124:	463b      	mov	r3, r7
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	1d3b      	adds	r3, r7, #4
 800f12a:	f107 0014 	add.w	r0, r7, #20
 800f12e:	6819      	ldr	r1, [r3, #0]
 800f130:	f002 fbf4 	bl	801191c <B5_HmacSha256_Update>
	B5_HmacSha256_Update(&ctx, countbuf, sizeof(countbuf));
 800f134:	f107 0110 	add.w	r1, r7, #16
 800f138:	f107 0314 	add.w	r3, r7, #20
 800f13c:	2204      	movs	r2, #4
 800f13e:	4618      	mov	r0, r3
 800f140:	f002 fbec 	bl	801191c <B5_HmacSha256_Update>
	B5_HmacSha256_Finit(&ctx, U);
 800f144:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 800f148:	f107 0314 	add.w	r3, r7, #20
 800f14c:	4611      	mov	r1, r2
 800f14e:	4618      	mov	r0, r3
 800f150:	f002 fc09 	bl	8011966 <B5_HmacSha256_Finit>
	memcpy(out, U, B5_SHA256_DIGEST_SIZE);
 800f154:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800f158:	461d      	mov	r5, r3
 800f15a:	f507 74fe 	add.w	r4, r7, #508	; 0x1fc
 800f15e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f160:	6028      	str	r0, [r5, #0]
 800f162:	6069      	str	r1, [r5, #4]
 800f164:	60aa      	str	r2, [r5, #8]
 800f166:	60eb      	str	r3, [r5, #12]
 800f168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f16a:	6128      	str	r0, [r5, #16]
 800f16c:	6169      	str	r1, [r5, #20]
 800f16e:	61aa      	str	r2, [r5, #24]
 800f170:	61eb      	str	r3, [r5, #28]

	/* Subsequent iterations:
	*   U_c = PRF(P, U_{c-1})
	*/
	for (i = 1; i < iterations; i++)
 800f172:	2301      	movs	r3, #1
 800f174:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800f178:	e029      	b.n	800f1ce <F+0x11c>
	{
		ctx = *startctx;
 800f17a:	f107 0214 	add.w	r2, r7, #20
 800f17e:	f107 030c 	add.w	r3, r7, #12
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4610      	mov	r0, r2
 800f186:	4619      	mov	r1, r3
 800f188:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 800f18c:	461a      	mov	r2, r3
 800f18e:	f008 f927 	bl	80173e0 <memcpy>
		B5_HmacSha256_Update(&ctx, U, B5_SHA256_DIGEST_SIZE);
 800f192:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 800f196:	f107 0314 	add.w	r3, r7, #20
 800f19a:	2220      	movs	r2, #32
 800f19c:	4618      	mov	r0, r3
 800f19e:	f002 fbbd 	bl	801191c <B5_HmacSha256_Update>
		B5_HmacSha256_Finit(&ctx, U);
 800f1a2:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 800f1a6:	f107 0314 	add.w	r3, r7, #20
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f002 fbda 	bl	8011966 <B5_HmacSha256_Finit>
		xor_bb(out, out, U, B5_SHA256_DIGEST_SIZE);
 800f1b2:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 800f1b6:	2320      	movs	r3, #32
 800f1b8:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800f1bc:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 800f1c0:	f7ff ff51 	bl	800f066 <xor_bb>
	for (i = 1; i < iterations; i++)
 800f1c4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800f1ce:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800f1d2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d3cf      	bcc.n	800f17a <F+0xc8>
	}
}
 800f1da:	bf00      	nop
 800f1dc:	bf00      	nop
 800f1de:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bdb0      	pop	{r4, r5, r7, pc}

0800f1e6 <PBKDF2HmacSha256>:
void PBKDF2HmacSha256(
	const uint8_t *pw, size_t npw,
	const uint8_t *salt, size_t nsalt,
	uint32_t iterations,
	uint8_t *out, size_t nout)
{
 800f1e6:	b590      	push	{r4, r7, lr}
 800f1e8:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800f1ec:	af02      	add	r7, sp, #8
 800f1ee:	f107 040c 	add.w	r4, r7, #12
 800f1f2:	6020      	str	r0, [r4, #0]
 800f1f4:	f107 0008 	add.w	r0, r7, #8
 800f1f8:	6001      	str	r1, [r0, #0]
 800f1fa:	1d39      	adds	r1, r7, #4
 800f1fc:	600a      	str	r2, [r1, #0]
 800f1fe:	463a      	mov	r2, r7
 800f200:	6013      	str	r3, [r2, #0]
	uint32_t counter = 1;
 800f202:	2301      	movs	r3, #1
 800f204:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	uint8_t block[B5_SHA256_DIGEST_SIZE];
	size_t taken;

	/* Starting point for inner loop. */
	B5_tHmacSha256Ctx ctx;
	B5_HmacSha256_Init(&ctx, pw, (int16_t)npw);
 800f208:	f107 0308 	add.w	r3, r7, #8
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	b21a      	sxth	r2, r3
 800f210:	f107 030c 	add.w	r3, r7, #12
 800f214:	f107 0010 	add.w	r0, r7, #16
 800f218:	6819      	ldr	r1, [r3, #0]
 800f21a:	f002 faf9 	bl	8011810 <B5_HmacSha256_Init>

	while(nout)
 800f21e:	e032      	b.n	800f286 <PBKDF2HmacSha256+0xa0>
	{
		F(&ctx, counter, salt, nsalt, iterations, block);
 800f220:	463b      	mov	r3, r7
 800f222:	1d3a      	adds	r2, r7, #4
 800f224:	f107 0010 	add.w	r0, r7, #16
 800f228:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 800f22c:	9101      	str	r1, [sp, #4]
 800f22e:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800f232:	9100      	str	r1, [sp, #0]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	6812      	ldr	r2, [r2, #0]
 800f238:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800f23c:	f7ff ff39 	bl	800f0b2 <F>
		taken = (nout < B5_SHA256_DIGEST_SIZE)?(nout):(B5_SHA256_DIGEST_SIZE);
 800f240:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f244:	2b20      	cmp	r3, #32
 800f246:	bf28      	it	cs
 800f248:	2320      	movcs	r3, #32
 800f24a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		memcpy(out, block, taken);
 800f24e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800f252:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800f256:	4619      	mov	r1, r3
 800f258:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 800f25c:	f008 f8c0 	bl	80173e0 <memcpy>
		out += taken;
 800f260:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800f264:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800f268:	4413      	add	r3, r2
 800f26a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
		nout -= taken;
 800f26e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800f272:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		counter++;
 800f27c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800f280:	3301      	adds	r3, #1
 800f282:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	while(nout)
 800f286:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1c8      	bne.n	800f220 <PBKDF2HmacSha256+0x3a>
	}
}
 800f28e:	bf00      	nop
 800f290:	bf00      	nop
 800f292:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800f296:	46bd      	mov	sp, r7
 800f298:	bd90      	pop	{r4, r7, pc}

0800f29a <se3_req_len_data>:

SE3_SERIAL serial;
uint16_t hwerror;

uint16_t se3_req_len_data(uint16_t len_data_and_headers)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b085      	sub	sp, #20
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	80fb      	strh	r3, [r7, #6]
    uint16_t nblocks;
    if (len_data_and_headers < SE3_REQ_SIZE_HEADER) {
 800f2a4:	88fb      	ldrh	r3, [r7, #6]
 800f2a6:	2b0f      	cmp	r3, #15
 800f2a8:	d801      	bhi.n	800f2ae <se3_req_len_data+0x14>
        return 0;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	e01a      	b.n	800f2e4 <se3_req_len_data+0x4a>
    }
    nblocks = len_data_and_headers/SE3_COMM_BLOCK;
 800f2ae:	88fb      	ldrh	r3, [r7, #6]
 800f2b0:	0a5b      	lsrs	r3, r3, #9
 800f2b2:	81fb      	strh	r3, [r7, #14]
    if (len_data_and_headers % SE3_COMM_BLOCK != 0) {
 800f2b4:	88fb      	ldrh	r3, [r7, #6]
 800f2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d002      	beq.n	800f2c6 <se3_req_len_data+0x2c>
        nblocks++;
 800f2c0:	89fb      	ldrh	r3, [r7, #14]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	81fb      	strh	r3, [r7, #14]
    }
    if (nblocks == 0)return 0;
 800f2c6:	89fb      	ldrh	r3, [r7, #14]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d101      	bne.n	800f2d0 <se3_req_len_data+0x36>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	e009      	b.n	800f2e4 <se3_req_len_data+0x4a>
    return len_data_and_headers - SE3_REQ_SIZE_HEADER - (nblocks - 1)*SE3_REQDATA_SIZE_HEADER;
 800f2d0:	89fb      	ldrh	r3, [r7, #14]
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	88fa      	ldrh	r2, [r7, #6]
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	3b10      	subs	r3, #16
 800f2e2:	b29b      	uxth	r3, r3
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3714      	adds	r7, #20
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <se3_resp_len_data_and_headers>:
    if (nblocks == 0)return 0;
    return len_data_and_headers - SE3_RESP_SIZE_HEADER - (nblocks - 1)*SE3_RESPDATA_SIZE_HEADER;
}

uint16_t se3_resp_len_data_and_headers(uint16_t len_data)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	80fb      	strh	r3, [r7, #6]
    uint16_t ndatablocks;
    if (len_data <= SE3_COMM_BLOCK - SE3_RESP_SIZE_HEADER) {
 800f2fa:	88fb      	ldrh	r3, [r7, #6]
 800f2fc:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 800f300:	d803      	bhi.n	800f30a <se3_resp_len_data_and_headers+0x1a>
        return len_data + SE3_RESP_SIZE_HEADER;
 800f302:	88fb      	ldrh	r3, [r7, #6]
 800f304:	3310      	adds	r3, #16
 800f306:	b29b      	uxth	r3, r3
 800f308:	e024      	b.n	800f354 <se3_resp_len_data_and_headers+0x64>
    }
    len_data -= (SE3_COMM_BLOCK - SE3_REQ_SIZE_HEADER);
 800f30a:	88fb      	ldrh	r3, [r7, #6]
 800f30c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800f310:	80fb      	strh	r3, [r7, #6]
    ndatablocks = len_data / (SE3_COMM_BLOCK - SE3_RESPDATA_SIZE_HEADER);
 800f312:	88fb      	ldrh	r3, [r7, #6]
 800f314:	089b      	lsrs	r3, r3, #2
 800f316:	4a12      	ldr	r2, [pc, #72]	; (800f360 <se3_resp_len_data_and_headers+0x70>)
 800f318:	fba2 2303 	umull	r2, r3, r2, r3
 800f31c:	095b      	lsrs	r3, r3, #5
 800f31e:	81fb      	strh	r3, [r7, #14]
    if (len_data % (SE3_COMM_BLOCK - SE3_RESPDATA_SIZE_HEADER) != 0) {
 800f320:	88fa      	ldrh	r2, [r7, #6]
 800f322:	0893      	lsrs	r3, r2, #2
 800f324:	490e      	ldr	r1, [pc, #56]	; (800f360 <se3_resp_len_data_and_headers+0x70>)
 800f326:	fba1 1303 	umull	r1, r3, r1, r3
 800f32a:	0959      	lsrs	r1, r3, #5
 800f32c:	460b      	mov	r3, r1
 800f32e:	01db      	lsls	r3, r3, #7
 800f330:	1a5b      	subs	r3, r3, r1
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	1ad3      	subs	r3, r2, r3
 800f336:	b29b      	uxth	r3, r3
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <se3_resp_len_data_and_headers+0x52>
        ndatablocks++;
 800f33c:	89fb      	ldrh	r3, [r7, #14]
 800f33e:	3301      	adds	r3, #1
 800f340:	81fb      	strh	r3, [r7, #14]
    }
    return SE3_COMM_BLOCK + len_data + ndatablocks*SE3_RESPDATA_SIZE_HEADER;
 800f342:	89fb      	ldrh	r3, [r7, #14]
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	b29a      	uxth	r2, r3
 800f348:	88fb      	ldrh	r3, [r7, #6]
 800f34a:	4413      	add	r3, r2
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f352:	b29b      	uxth	r3, r3
}
 800f354:	4618      	mov	r0, r3
 800f356:	3714      	adds	r7, #20
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr
 800f360:	40810205 	.word	0x40810205

0800f364 <B5_SHA256_GETUINT32>:
 */

#include "sha256.h"

void B5_SHA256_GETUINT32(uint32_t *n,const uint8_t *b, int32_t i)
{
 800f364:	b480      	push	{r7}
 800f366:	b085      	sub	sp, #20
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
    *n =      ( (uint32_t) b[i    ] << 24 )
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	4413      	add	r3, r2
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	061a      	lsls	r2, r3, #24
            | ( (uint32_t) b[i + 1] << 16 )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	3301      	adds	r3, #1
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	440b      	add	r3, r1
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	041b      	lsls	r3, r3, #16
 800f386:	431a      	orrs	r2, r3
            | ( (uint32_t) b[i + 2] <<  8 )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	3302      	adds	r3, #2
 800f38c:	68b9      	ldr	r1, [r7, #8]
 800f38e:	440b      	add	r3, r1
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	021b      	lsls	r3, r3, #8
 800f394:	4313      	orrs	r3, r2
            | ( (uint32_t) b[i + 3]       );
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	3203      	adds	r2, #3
 800f39a:	68b9      	ldr	r1, [r7, #8]
 800f39c:	440a      	add	r2, r1
 800f39e:	7812      	ldrb	r2, [r2, #0]
 800f3a0:	431a      	orrs	r2, r3
    *n =      ( (uint32_t) b[i    ] << 24 )
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	601a      	str	r2, [r3, #0]
}
 800f3a6:	bf00      	nop
 800f3a8:	3714      	adds	r7, #20
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <B5_SHA256_PUTUINT32>:

void B5_SHA256_PUTUINT32(uint32_t n,uint8_t *b, int32_t i)                       
{                                               
 800f3b2:	b480      	push	{r7}
 800f3b4:	b085      	sub	sp, #20
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	60f8      	str	r0, [r7, #12]
 800f3ba:	60b9      	str	r1, [r7, #8]
 800f3bc:	607a      	str	r2, [r7, #4]
    b[i    ] = (uint8_t) ( n >> 24 );      
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	0e19      	lsrs	r1, r3, #24
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68ba      	ldr	r2, [r7, #8]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	b2ca      	uxtb	r2, r1
 800f3ca:	701a      	strb	r2, [r3, #0]
    b[i + 1] = (uint8_t) ( n >> 16 );      
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	0c19      	lsrs	r1, r3, #16
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	b2ca      	uxtb	r2, r1
 800f3da:	701a      	strb	r2, [r3, #0]
    b[i + 2] = (uint8_t) ( n >>  8 );      
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	0a19      	lsrs	r1, r3, #8
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	3302      	adds	r3, #2
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	b2ca      	uxtb	r2, r1
 800f3ea:	701a      	strb	r2, [r3, #0]
    b[i + 3] = (uint8_t) ( n       );
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3303      	adds	r3, #3
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	b2d2      	uxtb	r2, r2
 800f3f8:	701a      	strb	r2, [r3, #0]
}
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <B5_SHA256_P>:
    ctx->W[t] = B5_SHA256_S1(ctx->W[t -  2]) + ctx->W[t -  7] +   \
           B5_SHA256_S0(ctx->W[t - 15]) + ctx->W[t - 16]          \
)

void B5_SHA256_P(uint32_t a,uint32_t b,uint32_t c,uint32_t *d,uint32_t e,uint32_t f,uint32_t g,uint32_t *h,uint32_t x,uint32_t K)
{
 800f406:	b480      	push	{r7}
 800f408:	b087      	sub	sp, #28
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	60f8      	str	r0, [r7, #12]
 800f40e:	60b9      	str	r1, [r7, #8]
 800f410:	607a      	str	r2, [r7, #4]
 800f412:	603b      	str	r3, [r7, #0]
uint32_t temp1, temp2;
    temp1 = *h + B5_SHA256_S3(e) + B5_SHA256_F1(e,f,g) + K + x;      
 800f414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	6a3b      	ldr	r3, [r7, #32]
 800f41a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800f41e:	6a3b      	ldr	r3, [r7, #32]
 800f420:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800f424:	4059      	eors	r1, r3
 800f426:	6a3b      	ldr	r3, [r7, #32]
 800f428:	ea4f 6373 	mov.w	r3, r3, ror #25
 800f42c:	404b      	eors	r3, r1
 800f42e:	441a      	add	r2, r3
 800f430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f434:	4059      	eors	r1, r3
 800f436:	6a3b      	ldr	r3, [r7, #32]
 800f438:	4019      	ands	r1, r3
 800f43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43c:	404b      	eors	r3, r1
 800f43e:	441a      	add	r2, r3
 800f440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f442:	4413      	add	r3, r2
 800f444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f446:	4413      	add	r3, r2
 800f448:	617b      	str	r3, [r7, #20]
    temp2 = B5_SHA256_S2(a) + B5_SHA256_F0(a,b,c);                  
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	ea4f 3373 	mov.w	r3, r3, ror #13
 800f456:	405a      	eors	r2, r3
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f45e:	405a      	eors	r2, r3
 800f460:	68f9      	ldr	r1, [r7, #12]
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	4019      	ands	r1, r3
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	4318      	orrs	r0, r3
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4003      	ands	r3, r0
 800f470:	430b      	orrs	r3, r1
 800f472:	4413      	add	r3, r2
 800f474:	613b      	str	r3, [r7, #16]
    *d += temp1; *h = temp1 + temp2;        
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	441a      	add	r2, r3
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	697a      	ldr	r2, [r7, #20]
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	441a      	add	r2, r3
 800f488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48a:	601a      	str	r2, [r3, #0]
}
 800f48c:	bf00      	nop
 800f48e:	371c      	adds	r7, #28
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <B5_Sha256ProcessBlock>:

// Outer padding (opad)
#define B5_HMAC_OPAD 0x5C

static void B5_Sha256ProcessBlock(B5_tSha256Ctx *ctx, const uint8_t *data)
{
 800f498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f49a:	b093      	sub	sp, #76	; 0x4c
 800f49c:	af06      	add	r7, sp, #24
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
    uint32_t A, B, C, D, E, F, G, H;

    B5_SHA256_GETUINT32( &ctx->W[0],  data,  0 );
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3368      	adds	r3, #104	; 0x68
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	68b9      	ldr	r1, [r7, #8]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7ff ff5a 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[1],  data,  4 );
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	336c      	adds	r3, #108	; 0x6c
 800f4b4:	2204      	movs	r2, #4
 800f4b6:	68b9      	ldr	r1, [r7, #8]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7ff ff53 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[2],  data,  8 );
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3370      	adds	r3, #112	; 0x70
 800f4c2:	2208      	movs	r2, #8
 800f4c4:	68b9      	ldr	r1, [r7, #8]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7ff ff4c 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[3],  data, 12 );
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	3374      	adds	r3, #116	; 0x74
 800f4d0:	220c      	movs	r2, #12
 800f4d2:	68b9      	ldr	r1, [r7, #8]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7ff ff45 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[4],  data, 16 );
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	3378      	adds	r3, #120	; 0x78
 800f4de:	2210      	movs	r2, #16
 800f4e0:	68b9      	ldr	r1, [r7, #8]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7ff ff3e 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[5],  data, 20 );
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	337c      	adds	r3, #124	; 0x7c
 800f4ec:	2214      	movs	r2, #20
 800f4ee:	68b9      	ldr	r1, [r7, #8]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7ff ff37 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[6],  data, 24 );
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	3380      	adds	r3, #128	; 0x80
 800f4fa:	2218      	movs	r2, #24
 800f4fc:	68b9      	ldr	r1, [r7, #8]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7ff ff30 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[7],  data, 28 );
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	3384      	adds	r3, #132	; 0x84
 800f508:	221c      	movs	r2, #28
 800f50a:	68b9      	ldr	r1, [r7, #8]
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff ff29 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[8],  data, 32 );
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3388      	adds	r3, #136	; 0x88
 800f516:	2220      	movs	r2, #32
 800f518:	68b9      	ldr	r1, [r7, #8]
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7ff ff22 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[9],  data, 36 );
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	338c      	adds	r3, #140	; 0x8c
 800f524:	2224      	movs	r2, #36	; 0x24
 800f526:	68b9      	ldr	r1, [r7, #8]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7ff ff1b 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[10], data, 40 );
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3390      	adds	r3, #144	; 0x90
 800f532:	2228      	movs	r2, #40	; 0x28
 800f534:	68b9      	ldr	r1, [r7, #8]
 800f536:	4618      	mov	r0, r3
 800f538:	f7ff ff14 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[11], data, 44 );
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	3394      	adds	r3, #148	; 0x94
 800f540:	222c      	movs	r2, #44	; 0x2c
 800f542:	68b9      	ldr	r1, [r7, #8]
 800f544:	4618      	mov	r0, r3
 800f546:	f7ff ff0d 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[12], data, 48 );
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	3398      	adds	r3, #152	; 0x98
 800f54e:	2230      	movs	r2, #48	; 0x30
 800f550:	68b9      	ldr	r1, [r7, #8]
 800f552:	4618      	mov	r0, r3
 800f554:	f7ff ff06 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[13], data, 52 );
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	339c      	adds	r3, #156	; 0x9c
 800f55c:	2234      	movs	r2, #52	; 0x34
 800f55e:	68b9      	ldr	r1, [r7, #8]
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff feff 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[14], data, 56 );
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	33a0      	adds	r3, #160	; 0xa0
 800f56a:	2238      	movs	r2, #56	; 0x38
 800f56c:	68b9      	ldr	r1, [r7, #8]
 800f56e:	4618      	mov	r0, r3
 800f570:	f7ff fef8 	bl	800f364 <B5_SHA256_GETUINT32>
    B5_SHA256_GETUINT32( &ctx->W[15], data, 60 );
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	33a4      	adds	r3, #164	; 0xa4
 800f578:	223c      	movs	r2, #60	; 0x3c
 800f57a:	68b9      	ldr	r1, [r7, #8]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7ff fef1 	bl	800f364 <B5_SHA256_GETUINT32>


    A = ctx->state[0];
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	62fb      	str	r3, [r7, #44]	; 0x2c
    B = ctx->state[1];
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	62bb      	str	r3, [r7, #40]	; 0x28
    C = ctx->state[2];
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	627b      	str	r3, [r7, #36]	; 0x24
    D = ctx->state[3];
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	695b      	ldr	r3, [r3, #20]
 800f598:	623b      	str	r3, [r7, #32]
    E = ctx->state[4];
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	699b      	ldr	r3, [r3, #24]
 800f59e:	61fb      	str	r3, [r7, #28]
    F = ctx->state[5];
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	69db      	ldr	r3, [r3, #28]
 800f5a4:	61bb      	str	r3, [r7, #24]
    G = ctx->state[6];
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6a1b      	ldr	r3, [r3, #32]
 800f5aa:	617b      	str	r3, [r7, #20]
    H = ctx->state[7];
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b0:	613b      	str	r3, [r7, #16]


    B5_SHA256_P( A, B, C, &D, E, F, G, &H, ctx->W[ 0], 0x428A2F98 );
 800f5b2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800f5b4:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f5b6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	607b      	str	r3, [r7, #4]
 800f5bc:	69ba      	ldr	r2, [r7, #24]
 800f5be:	6979      	ldr	r1, [r7, #20]
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f5c4:	f107 0c20 	add.w	ip, r7, #32
 800f5c8:	4b9f      	ldr	r3, [pc, #636]	; (800f848 <B5_Sha256ProcessBlock+0x3b0>)
 800f5ca:	9305      	str	r3, [sp, #20]
 800f5cc:	9004      	str	r0, [sp, #16]
 800f5ce:	f107 0010 	add.w	r0, r7, #16
 800f5d2:	9003      	str	r0, [sp, #12]
 800f5d4:	9102      	str	r1, [sp, #8]
 800f5d6:	9201      	str	r2, [sp, #4]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	4663      	mov	r3, ip
 800f5de:	4632      	mov	r2, r6
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f7ff ff0f 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( H, A, B, &C, D, E, F, &G, ctx->W[ 1], 0x71374491 );
 800f5e8:	693c      	ldr	r4, [r7, #16]
 800f5ea:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f5ec:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800f5ee:	6a3b      	ldr	r3, [r7, #32]
 800f5f0:	607b      	str	r3, [r7, #4]
 800f5f2:	69fa      	ldr	r2, [r7, #28]
 800f5f4:	69b9      	ldr	r1, [r7, #24]
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f5fa:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 800f5fe:	4b93      	ldr	r3, [pc, #588]	; (800f84c <B5_Sha256ProcessBlock+0x3b4>)
 800f600:	9305      	str	r3, [sp, #20]
 800f602:	9004      	str	r0, [sp, #16]
 800f604:	f107 0014 	add.w	r0, r7, #20
 800f608:	9003      	str	r0, [sp, #12]
 800f60a:	9102      	str	r1, [sp, #8]
 800f60c:	9201      	str	r2, [sp, #4]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	4663      	mov	r3, ip
 800f614:	4632      	mov	r2, r6
 800f616:	4629      	mov	r1, r5
 800f618:	4620      	mov	r0, r4
 800f61a:	f7ff fef4 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( G, H, A, &B, C, D, E, &F, ctx->W[ 2], 0xB5C0FBCF );
 800f61e:	697c      	ldr	r4, [r7, #20]
 800f620:	693d      	ldr	r5, [r7, #16]
 800f622:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	607b      	str	r3, [r7, #4]
 800f628:	6a3a      	ldr	r2, [r7, #32]
 800f62a:	69f9      	ldr	r1, [r7, #28]
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f630:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800f634:	4b86      	ldr	r3, [pc, #536]	; (800f850 <B5_Sha256ProcessBlock+0x3b8>)
 800f636:	9305      	str	r3, [sp, #20]
 800f638:	9004      	str	r0, [sp, #16]
 800f63a:	f107 0018 	add.w	r0, r7, #24
 800f63e:	9003      	str	r0, [sp, #12]
 800f640:	9102      	str	r1, [sp, #8]
 800f642:	9201      	str	r2, [sp, #4]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	4663      	mov	r3, ip
 800f64a:	4632      	mov	r2, r6
 800f64c:	4629      	mov	r1, r5
 800f64e:	4620      	mov	r0, r4
 800f650:	f7ff fed9 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( F, G, H, &A, B, C, D, &E, ctx->W[ 3], 0xE9B5DBA5 );
 800f654:	69bc      	ldr	r4, [r7, #24]
 800f656:	697d      	ldr	r5, [r7, #20]
 800f658:	693e      	ldr	r6, [r7, #16]
 800f65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65c:	607b      	str	r3, [r7, #4]
 800f65e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f660:	6a39      	ldr	r1, [r7, #32]
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800f666:	f107 0c2c 	add.w	ip, r7, #44	; 0x2c
 800f66a:	4b7a      	ldr	r3, [pc, #488]	; (800f854 <B5_Sha256ProcessBlock+0x3bc>)
 800f66c:	9305      	str	r3, [sp, #20]
 800f66e:	9004      	str	r0, [sp, #16]
 800f670:	f107 001c 	add.w	r0, r7, #28
 800f674:	9003      	str	r0, [sp, #12]
 800f676:	9102      	str	r1, [sp, #8]
 800f678:	9201      	str	r2, [sp, #4]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	4663      	mov	r3, ip
 800f680:	4632      	mov	r2, r6
 800f682:	4629      	mov	r1, r5
 800f684:	4620      	mov	r0, r4
 800f686:	f7ff febe 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( E, F, G, &H, A, B, C, &D, ctx->W[ 4], 0x3956C25B );
 800f68a:	69fc      	ldr	r4, [r7, #28]
 800f68c:	69bd      	ldr	r5, [r7, #24]
 800f68e:	697e      	ldr	r6, [r7, #20]
 800f690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f692:	607b      	str	r3, [r7, #4]
 800f694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800f69c:	f107 0c10 	add.w	ip, r7, #16
 800f6a0:	4b6d      	ldr	r3, [pc, #436]	; (800f858 <B5_Sha256ProcessBlock+0x3c0>)
 800f6a2:	9305      	str	r3, [sp, #20]
 800f6a4:	9004      	str	r0, [sp, #16]
 800f6a6:	f107 0020 	add.w	r0, r7, #32
 800f6aa:	9003      	str	r0, [sp, #12]
 800f6ac:	9102      	str	r1, [sp, #8]
 800f6ae:	9201      	str	r2, [sp, #4]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	4663      	mov	r3, ip
 800f6b6:	4632      	mov	r2, r6
 800f6b8:	4629      	mov	r1, r5
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f7ff fea3 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( D, E, F, &G, H, A, B, &C, ctx->W[ 5], 0x59F111F1 );
 800f6c0:	6a3c      	ldr	r4, [r7, #32]
 800f6c2:	69fd      	ldr	r5, [r7, #28]
 800f6c4:	69be      	ldr	r6, [r7, #24]
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	607b      	str	r3, [r7, #4]
 800f6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800f6d2:	f107 0c14 	add.w	ip, r7, #20
 800f6d6:	4b61      	ldr	r3, [pc, #388]	; (800f85c <B5_Sha256ProcessBlock+0x3c4>)
 800f6d8:	9305      	str	r3, [sp, #20]
 800f6da:	9004      	str	r0, [sp, #16]
 800f6dc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f6e0:	9003      	str	r0, [sp, #12]
 800f6e2:	9102      	str	r1, [sp, #8]
 800f6e4:	9201      	str	r2, [sp, #4]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	9300      	str	r3, [sp, #0]
 800f6ea:	4663      	mov	r3, ip
 800f6ec:	4632      	mov	r2, r6
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f7ff fe88 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( C, D, E, &F, G, H, A, &B, ctx->W[ 6], 0x923F82A4 );
 800f6f6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f6f8:	6a3d      	ldr	r5, [r7, #32]
 800f6fa:	69fe      	ldr	r6, [r7, #28]
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	607b      	str	r3, [r7, #4]
 800f700:	693a      	ldr	r2, [r7, #16]
 800f702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800f70a:	f107 0c18 	add.w	ip, r7, #24
 800f70e:	4b54      	ldr	r3, [pc, #336]	; (800f860 <B5_Sha256ProcessBlock+0x3c8>)
 800f710:	9305      	str	r3, [sp, #20]
 800f712:	9004      	str	r0, [sp, #16]
 800f714:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f718:	9003      	str	r0, [sp, #12]
 800f71a:	9102      	str	r1, [sp, #8]
 800f71c:	9201      	str	r2, [sp, #4]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	9300      	str	r3, [sp, #0]
 800f722:	4663      	mov	r3, ip
 800f724:	4632      	mov	r2, r6
 800f726:	4629      	mov	r1, r5
 800f728:	4620      	mov	r0, r4
 800f72a:	f7ff fe6c 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( B, C, D, &E, F, G, H, &A, ctx->W[ 7], 0xAB1C5ED5 );
 800f72e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f730:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f732:	6a3e      	ldr	r6, [r7, #32]
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	607b      	str	r3, [r7, #4]
 800f738:	697a      	ldr	r2, [r7, #20]
 800f73a:	6939      	ldr	r1, [r7, #16]
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800f742:	f107 0c1c 	add.w	ip, r7, #28
 800f746:	4b47      	ldr	r3, [pc, #284]	; (800f864 <B5_Sha256ProcessBlock+0x3cc>)
 800f748:	9305      	str	r3, [sp, #20]
 800f74a:	9004      	str	r0, [sp, #16]
 800f74c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800f750:	9003      	str	r0, [sp, #12]
 800f752:	9102      	str	r1, [sp, #8]
 800f754:	9201      	str	r2, [sp, #4]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	4663      	mov	r3, ip
 800f75c:	4632      	mov	r2, r6
 800f75e:	4629      	mov	r1, r5
 800f760:	4620      	mov	r0, r4
 800f762:	f7ff fe50 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( A, B, C, &D, E, F, G, &H, ctx->W[ 8], 0xD807AA98 );
 800f766:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800f768:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f76a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	607b      	str	r3, [r7, #4]
 800f770:	69ba      	ldr	r2, [r7, #24]
 800f772:	6979      	ldr	r1, [r7, #20]
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800f77a:	f107 0c20 	add.w	ip, r7, #32
 800f77e:	4b3a      	ldr	r3, [pc, #232]	; (800f868 <B5_Sha256ProcessBlock+0x3d0>)
 800f780:	9305      	str	r3, [sp, #20]
 800f782:	9004      	str	r0, [sp, #16]
 800f784:	f107 0010 	add.w	r0, r7, #16
 800f788:	9003      	str	r0, [sp, #12]
 800f78a:	9102      	str	r1, [sp, #8]
 800f78c:	9201      	str	r2, [sp, #4]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	9300      	str	r3, [sp, #0]
 800f792:	4663      	mov	r3, ip
 800f794:	4632      	mov	r2, r6
 800f796:	4629      	mov	r1, r5
 800f798:	4620      	mov	r0, r4
 800f79a:	f7ff fe34 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( H, A, B, &C, D, E, F, &G, ctx->W[ 9], 0x12835B01 );
 800f79e:	693c      	ldr	r4, [r7, #16]
 800f7a0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f7a2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800f7a4:	6a3b      	ldr	r3, [r7, #32]
 800f7a6:	607b      	str	r3, [r7, #4]
 800f7a8:	69fa      	ldr	r2, [r7, #28]
 800f7aa:	69b9      	ldr	r1, [r7, #24]
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800f7b2:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 800f7b6:	4b2d      	ldr	r3, [pc, #180]	; (800f86c <B5_Sha256ProcessBlock+0x3d4>)
 800f7b8:	9305      	str	r3, [sp, #20]
 800f7ba:	9004      	str	r0, [sp, #16]
 800f7bc:	f107 0014 	add.w	r0, r7, #20
 800f7c0:	9003      	str	r0, [sp, #12]
 800f7c2:	9102      	str	r1, [sp, #8]
 800f7c4:	9201      	str	r2, [sp, #4]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	9300      	str	r3, [sp, #0]
 800f7ca:	4663      	mov	r3, ip
 800f7cc:	4632      	mov	r2, r6
 800f7ce:	4629      	mov	r1, r5
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	f7ff fe18 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( G, H, A, &B, C, D, E, &F, ctx->W[10], 0x243185BE );
 800f7d6:	697c      	ldr	r4, [r7, #20]
 800f7d8:	693d      	ldr	r5, [r7, #16]
 800f7da:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800f7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7de:	607b      	str	r3, [r7, #4]
 800f7e0:	6a3a      	ldr	r2, [r7, #32]
 800f7e2:	69f9      	ldr	r1, [r7, #28]
 800f7e4:	68f8      	ldr	r0, [r7, #12]
 800f7e6:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 800f7ea:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800f7ee:	4b20      	ldr	r3, [pc, #128]	; (800f870 <B5_Sha256ProcessBlock+0x3d8>)
 800f7f0:	9305      	str	r3, [sp, #20]
 800f7f2:	9004      	str	r0, [sp, #16]
 800f7f4:	f107 0018 	add.w	r0, r7, #24
 800f7f8:	9003      	str	r0, [sp, #12]
 800f7fa:	9102      	str	r1, [sp, #8]
 800f7fc:	9201      	str	r2, [sp, #4]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	4663      	mov	r3, ip
 800f804:	4632      	mov	r2, r6
 800f806:	4629      	mov	r1, r5
 800f808:	4620      	mov	r0, r4
 800f80a:	f7ff fdfc 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( F, G, H, &A, B, C, D, &E, ctx->W[11], 0x550C7DC3 );
 800f80e:	69bc      	ldr	r4, [r7, #24]
 800f810:	697d      	ldr	r5, [r7, #20]
 800f812:	693e      	ldr	r6, [r7, #16]
 800f814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f816:	607b      	str	r3, [r7, #4]
 800f818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f81a:	6a39      	ldr	r1, [r7, #32]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800f822:	f107 0c2c 	add.w	ip, r7, #44	; 0x2c
 800f826:	4b13      	ldr	r3, [pc, #76]	; (800f874 <B5_Sha256ProcessBlock+0x3dc>)
 800f828:	9305      	str	r3, [sp, #20]
 800f82a:	9004      	str	r0, [sp, #16]
 800f82c:	f107 001c 	add.w	r0, r7, #28
 800f830:	9003      	str	r0, [sp, #12]
 800f832:	9102      	str	r1, [sp, #8]
 800f834:	9201      	str	r2, [sp, #4]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	9300      	str	r3, [sp, #0]
 800f83a:	4663      	mov	r3, ip
 800f83c:	4632      	mov	r2, r6
 800f83e:	4629      	mov	r1, r5
 800f840:	4620      	mov	r0, r4
 800f842:	f7ff fde0 	bl	800f406 <B5_SHA256_P>
 800f846:	e017      	b.n	800f878 <B5_Sha256ProcessBlock+0x3e0>
 800f848:	428a2f98 	.word	0x428a2f98
 800f84c:	71374491 	.word	0x71374491
 800f850:	b5c0fbcf 	.word	0xb5c0fbcf
 800f854:	e9b5dba5 	.word	0xe9b5dba5
 800f858:	3956c25b 	.word	0x3956c25b
 800f85c:	59f111f1 	.word	0x59f111f1
 800f860:	923f82a4 	.word	0x923f82a4
 800f864:	ab1c5ed5 	.word	0xab1c5ed5
 800f868:	d807aa98 	.word	0xd807aa98
 800f86c:	12835b01 	.word	0x12835b01
 800f870:	243185be 	.word	0x243185be
 800f874:	550c7dc3 	.word	0x550c7dc3
    B5_SHA256_P( E, F, G, &H, A, B, C, &D, ctx->W[12], 0x72BE5D74 );
 800f878:	69fc      	ldr	r4, [r7, #28]
 800f87a:	69bd      	ldr	r5, [r7, #24]
 800f87c:	697e      	ldr	r6, [r7, #20]
 800f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f880:	607b      	str	r3, [r7, #4]
 800f882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800f88c:	f107 0c10 	add.w	ip, r7, #16
 800f890:	4bab      	ldr	r3, [pc, #684]	; (800fb40 <B5_Sha256ProcessBlock+0x6a8>)
 800f892:	9305      	str	r3, [sp, #20]
 800f894:	9004      	str	r0, [sp, #16]
 800f896:	f107 0020 	add.w	r0, r7, #32
 800f89a:	9003      	str	r0, [sp, #12]
 800f89c:	9102      	str	r1, [sp, #8]
 800f89e:	9201      	str	r2, [sp, #4]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	4663      	mov	r3, ip
 800f8a6:	4632      	mov	r2, r6
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f7ff fdab 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( D, E, F, &G, H, A, B, &C, ctx->W[13], 0x80DEB1FE );
 800f8b0:	6a3c      	ldr	r4, [r7, #32]
 800f8b2:	69fd      	ldr	r5, [r7, #28]
 800f8b4:	69be      	ldr	r6, [r7, #24]
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	607b      	str	r3, [r7, #4]
 800f8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f8be:	68f8      	ldr	r0, [r7, #12]
 800f8c0:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 800f8c4:	f107 0c14 	add.w	ip, r7, #20
 800f8c8:	4b9e      	ldr	r3, [pc, #632]	; (800fb44 <B5_Sha256ProcessBlock+0x6ac>)
 800f8ca:	9305      	str	r3, [sp, #20]
 800f8cc:	9004      	str	r0, [sp, #16]
 800f8ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f8d2:	9003      	str	r0, [sp, #12]
 800f8d4:	9102      	str	r1, [sp, #8]
 800f8d6:	9201      	str	r2, [sp, #4]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	9300      	str	r3, [sp, #0]
 800f8dc:	4663      	mov	r3, ip
 800f8de:	4632      	mov	r2, r6
 800f8e0:	4629      	mov	r1, r5
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f7ff fd8f 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( C, D, E, &F, G, H, A, &B, ctx->W[14], 0x9BDC06A7 );
 800f8e8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f8ea:	6a3d      	ldr	r5, [r7, #32]
 800f8ec:	69fe      	ldr	r6, [r7, #28]
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	607b      	str	r3, [r7, #4]
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 800f8fc:	f107 0c18 	add.w	ip, r7, #24
 800f900:	4b91      	ldr	r3, [pc, #580]	; (800fb48 <B5_Sha256ProcessBlock+0x6b0>)
 800f902:	9305      	str	r3, [sp, #20]
 800f904:	9004      	str	r0, [sp, #16]
 800f906:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f90a:	9003      	str	r0, [sp, #12]
 800f90c:	9102      	str	r1, [sp, #8]
 800f90e:	9201      	str	r2, [sp, #4]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	9300      	str	r3, [sp, #0]
 800f914:	4663      	mov	r3, ip
 800f916:	4632      	mov	r2, r6
 800f918:	4629      	mov	r1, r5
 800f91a:	4620      	mov	r0, r4
 800f91c:	f7ff fd73 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( B, C, D, &E, F, G, H, &A, ctx->W[15], 0xC19BF174 );
 800f920:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f922:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f924:	6a3e      	ldr	r6, [r7, #32]
 800f926:	69bb      	ldr	r3, [r7, #24]
 800f928:	607b      	str	r3, [r7, #4]
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	6939      	ldr	r1, [r7, #16]
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 800f934:	f107 0c1c 	add.w	ip, r7, #28
 800f938:	4b84      	ldr	r3, [pc, #528]	; (800fb4c <B5_Sha256ProcessBlock+0x6b4>)
 800f93a:	9305      	str	r3, [sp, #20]
 800f93c:	9004      	str	r0, [sp, #16]
 800f93e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800f942:	9003      	str	r0, [sp, #12]
 800f944:	9102      	str	r1, [sp, #8]
 800f946:	9201      	str	r2, [sp, #4]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	4663      	mov	r3, ip
 800f94e:	4632      	mov	r2, r6
 800f950:	4629      	mov	r1, r5
 800f952:	4620      	mov	r0, r4
 800f954:	f7ff fd57 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( A, B, C, &D, E, F, G, &H, B5_SHA256_R(16), 0xE49B69C1 );
 800f958:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800f95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f95c:	607b      	str	r3, [r7, #4]
 800f95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f960:	603a      	str	r2, [r7, #0]
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	69ba      	ldr	r2, [r7, #24]
 800f966:	6979      	ldr	r1, [r7, #20]
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 800f96e:	ea4f 4470 	mov.w	r4, r0, ror #17
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 800f978:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800f97c:	4044      	eors	r4, r0
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 800f984:	0a80      	lsrs	r0, r0, #10
 800f986:	4044      	eors	r4, r0
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800f98e:	4404      	add	r4, r0
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f994:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f99c:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800f9a0:	4045      	eors	r5, r0
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f9a6:	08c0      	lsrs	r0, r0, #3
 800f9a8:	4068      	eors	r0, r5
 800f9aa:	4404      	add	r4, r0
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f9b0:	4404      	add	r4, r0
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800f9be:	f107 0420 	add.w	r4, r7, #32
 800f9c2:	4d63      	ldr	r5, [pc, #396]	; (800fb50 <B5_Sha256ProcessBlock+0x6b8>)
 800f9c4:	9505      	str	r5, [sp, #20]
 800f9c6:	9004      	str	r0, [sp, #16]
 800f9c8:	f107 0010 	add.w	r0, r7, #16
 800f9cc:	9003      	str	r0, [sp, #12]
 800f9ce:	9102      	str	r1, [sp, #8]
 800f9d0:	9201      	str	r2, [sp, #4]
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	4623      	mov	r3, r4
 800f9d6:	683a      	ldr	r2, [r7, #0]
 800f9d8:	6879      	ldr	r1, [r7, #4]
 800f9da:	4630      	mov	r0, r6
 800f9dc:	f7ff fd13 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( H, A, B, &C, D, E, F, &G, B5_SHA256_R(17), 0xEFBE4786 );
 800f9e0:	693e      	ldr	r6, [r7, #16]
 800f9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e4:	607b      	str	r3, [r7, #4]
 800f9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9e8:	603a      	str	r2, [r7, #0]
 800f9ea:	6a3b      	ldr	r3, [r7, #32]
 800f9ec:	69fa      	ldr	r2, [r7, #28]
 800f9ee:	69b9      	ldr	r1, [r7, #24]
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 800f9f6:	ea4f 4470 	mov.w	r4, r0, ror #17
 800f9fa:	68f8      	ldr	r0, [r7, #12]
 800f9fc:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 800fa00:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fa04:	4044      	eors	r4, r0
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 800fa0c:	0a80      	lsrs	r0, r0, #10
 800fa0e:	4044      	eors	r4, r0
 800fa10:	68f8      	ldr	r0, [r7, #12]
 800fa12:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 800fa16:	4404      	add	r4, r0
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800fa1c:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800fa24:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fa28:	4045      	eors	r5, r0
 800fa2a:	68f8      	ldr	r0, [r7, #12]
 800fa2c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800fa2e:	08c0      	lsrs	r0, r0, #3
 800fa30:	4068      	eors	r0, r5
 800fa32:	4404      	add	r4, r0
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800fa38:	4404      	add	r4, r0
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800fa46:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800fa4a:	4d42      	ldr	r5, [pc, #264]	; (800fb54 <B5_Sha256ProcessBlock+0x6bc>)
 800fa4c:	9505      	str	r5, [sp, #20]
 800fa4e:	9004      	str	r0, [sp, #16]
 800fa50:	f107 0014 	add.w	r0, r7, #20
 800fa54:	9003      	str	r0, [sp, #12]
 800fa56:	9102      	str	r1, [sp, #8]
 800fa58:	9201      	str	r2, [sp, #4]
 800fa5a:	9300      	str	r3, [sp, #0]
 800fa5c:	4623      	mov	r3, r4
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	6879      	ldr	r1, [r7, #4]
 800fa62:	4630      	mov	r0, r6
 800fa64:	f7ff fccf 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( G, H, A, &B, C, D, E, &F, B5_SHA256_R(18), 0x0FC19DC6 );
 800fa68:	697e      	ldr	r6, [r7, #20]
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	607b      	str	r3, [r7, #4]
 800fa6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa70:	603a      	str	r2, [r7, #0]
 800fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa74:	6a3a      	ldr	r2, [r7, #32]
 800fa76:	69f9      	ldr	r1, [r7, #28]
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800fa7e:	ea4f 4470 	mov.w	r4, r0, ror #17
 800fa82:	68f8      	ldr	r0, [r7, #12]
 800fa84:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800fa88:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fa8c:	4044      	eors	r4, r0
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800fa94:	0a80      	lsrs	r0, r0, #10
 800fa96:	4044      	eors	r4, r0
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800fa9e:	4404      	add	r4, r0
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800faa4:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800faa8:	68f8      	ldr	r0, [r7, #12]
 800faaa:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800faac:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fab0:	4045      	eors	r5, r0
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800fab6:	08c0      	lsrs	r0, r0, #3
 800fab8:	4068      	eors	r0, r5
 800faba:	4404      	add	r4, r0
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800fac0:	4404      	add	r4, r0
 800fac2:	68f8      	ldr	r0, [r7, #12]
 800fac4:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 800face:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800fad2:	4d21      	ldr	r5, [pc, #132]	; (800fb58 <B5_Sha256ProcessBlock+0x6c0>)
 800fad4:	9505      	str	r5, [sp, #20]
 800fad6:	9004      	str	r0, [sp, #16]
 800fad8:	f107 0018 	add.w	r0, r7, #24
 800fadc:	9003      	str	r0, [sp, #12]
 800fade:	9102      	str	r1, [sp, #8]
 800fae0:	9201      	str	r2, [sp, #4]
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	4623      	mov	r3, r4
 800fae6:	683a      	ldr	r2, [r7, #0]
 800fae8:	6879      	ldr	r1, [r7, #4]
 800faea:	4630      	mov	r0, r6
 800faec:	f7ff fc8b 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( F, G, H, &A, B, C, D, &E, B5_SHA256_R(19), 0x240CA1CC );
 800faf0:	69be      	ldr	r6, [r7, #24]
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	607b      	str	r3, [r7, #4]
 800faf6:	693a      	ldr	r2, [r7, #16]
 800faf8:	603a      	str	r2, [r7, #0]
 800fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fafe:	6a39      	ldr	r1, [r7, #32]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800fb06:	ea4f 4470 	mov.w	r4, r0, ror #17
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800fb10:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fb14:	4044      	eors	r4, r0
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800fb1c:	0a80      	lsrs	r0, r0, #10
 800fb1e:	4044      	eors	r4, r0
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800fb26:	4404      	add	r4, r0
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800fb2c:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800fb34:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fb38:	4045      	eors	r5, r0
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	e00e      	b.n	800fb5c <B5_Sha256ProcessBlock+0x6c4>
 800fb3e:	bf00      	nop
 800fb40:	72be5d74 	.word	0x72be5d74
 800fb44:	80deb1fe 	.word	0x80deb1fe
 800fb48:	9bdc06a7 	.word	0x9bdc06a7
 800fb4c:	c19bf174 	.word	0xc19bf174
 800fb50:	e49b69c1 	.word	0xe49b69c1
 800fb54:	efbe4786 	.word	0xefbe4786
 800fb58:	0fc19dc6 	.word	0x0fc19dc6
 800fb5c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800fb5e:	08c0      	lsrs	r0, r0, #3
 800fb60:	4068      	eors	r0, r5
 800fb62:	4404      	add	r4, r0
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800fb68:	4404      	add	r4, r0
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	f8c0 40b4 	str.w	r4, [r0, #180]	; 0xb4
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 800fb76:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800fb7a:	4db5      	ldr	r5, [pc, #724]	; (800fe50 <B5_Sha256ProcessBlock+0x9b8>)
 800fb7c:	9505      	str	r5, [sp, #20]
 800fb7e:	9004      	str	r0, [sp, #16]
 800fb80:	f107 001c 	add.w	r0, r7, #28
 800fb84:	9003      	str	r0, [sp, #12]
 800fb86:	9102      	str	r1, [sp, #8]
 800fb88:	9201      	str	r2, [sp, #4]
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	4623      	mov	r3, r4
 800fb8e:	683a      	ldr	r2, [r7, #0]
 800fb90:	6879      	ldr	r1, [r7, #4]
 800fb92:	4630      	mov	r0, r6
 800fb94:	f7ff fc37 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( E, F, G, &H, A, B, C, &D, B5_SHA256_R(20), 0x2DE92C6F );
 800fb98:	69fe      	ldr	r6, [r7, #28]
 800fb9a:	69bb      	ldr	r3, [r7, #24]
 800fb9c:	607b      	str	r3, [r7, #4]
 800fb9e:	697a      	ldr	r2, [r7, #20]
 800fba0:	603a      	str	r2, [r7, #0]
 800fba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 800fbae:	ea4f 4470 	mov.w	r4, r0, ror #17
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 800fbb8:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fbbc:	4044      	eors	r4, r0
 800fbbe:	68f8      	ldr	r0, [r7, #12]
 800fbc0:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 800fbc4:	0a80      	lsrs	r0, r0, #10
 800fbc6:	4044      	eors	r4, r0
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 800fbce:	4404      	add	r4, r0
 800fbd0:	68f8      	ldr	r0, [r7, #12]
 800fbd2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800fbd4:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800fbdc:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fbe0:	4045      	eors	r5, r0
 800fbe2:	68f8      	ldr	r0, [r7, #12]
 800fbe4:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800fbe6:	08c0      	lsrs	r0, r0, #3
 800fbe8:	4068      	eors	r0, r5
 800fbea:	4404      	add	r4, r0
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800fbf0:	4404      	add	r4, r0
 800fbf2:	68f8      	ldr	r0, [r7, #12]
 800fbf4:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800fbfe:	f107 0410 	add.w	r4, r7, #16
 800fc02:	4d94      	ldr	r5, [pc, #592]	; (800fe54 <B5_Sha256ProcessBlock+0x9bc>)
 800fc04:	9505      	str	r5, [sp, #20]
 800fc06:	9004      	str	r0, [sp, #16]
 800fc08:	f107 0020 	add.w	r0, r7, #32
 800fc0c:	9003      	str	r0, [sp, #12]
 800fc0e:	9102      	str	r1, [sp, #8]
 800fc10:	9201      	str	r2, [sp, #4]
 800fc12:	9300      	str	r3, [sp, #0]
 800fc14:	4623      	mov	r3, r4
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	6879      	ldr	r1, [r7, #4]
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	f7ff fbf3 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( D, E, F, &G, H, A, B, &C, B5_SHA256_R(21), 0x4A7484AA );
 800fc20:	6a3e      	ldr	r6, [r7, #32]
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	607b      	str	r3, [r7, #4]
 800fc26:	69ba      	ldr	r2, [r7, #24]
 800fc28:	603a      	str	r2, [r7, #0]
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 800fc36:	ea4f 4470 	mov.w	r4, r0, ror #17
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 800fc40:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fc44:	4044      	eors	r4, r0
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 800fc4c:	0a80      	lsrs	r0, r0, #10
 800fc4e:	4044      	eors	r4, r0
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 800fc56:	4404      	add	r4, r0
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800fc5e:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800fc68:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fc6c:	4045      	eors	r5, r0
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800fc74:	08c0      	lsrs	r0, r0, #3
 800fc76:	4068      	eors	r0, r5
 800fc78:	4404      	add	r4, r0
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800fc7e:	4404      	add	r4, r0
 800fc80:	68f8      	ldr	r0, [r7, #12]
 800fc82:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 800fc8c:	f107 0414 	add.w	r4, r7, #20
 800fc90:	4d71      	ldr	r5, [pc, #452]	; (800fe58 <B5_Sha256ProcessBlock+0x9c0>)
 800fc92:	9505      	str	r5, [sp, #20]
 800fc94:	9004      	str	r0, [sp, #16]
 800fc96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fc9a:	9003      	str	r0, [sp, #12]
 800fc9c:	9102      	str	r1, [sp, #8]
 800fc9e:	9201      	str	r2, [sp, #4]
 800fca0:	9300      	str	r3, [sp, #0]
 800fca2:	4623      	mov	r3, r4
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	6879      	ldr	r1, [r7, #4]
 800fca8:	4630      	mov	r0, r6
 800fcaa:	f7ff fbac 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( C, D, E, &F, G, H, A, &B, B5_SHA256_R(22), 0x5CB0A9DC );
 800fcae:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800fcb0:	6a3b      	ldr	r3, [r7, #32]
 800fcb2:	607b      	str	r3, [r7, #4]
 800fcb4:	69fa      	ldr	r2, [r7, #28]
 800fcb6:	603a      	str	r2, [r7, #0]
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	693a      	ldr	r2, [r7, #16]
 800fcbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800fcc4:	ea4f 4470 	mov.w	r4, r0, ror #17
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800fcce:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fcd2:	4044      	eors	r4, r0
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800fcda:	0a80      	lsrs	r0, r0, #10
 800fcdc:	4044      	eors	r4, r0
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 800fce4:	4404      	add	r4, r0
 800fce6:	68f8      	ldr	r0, [r7, #12]
 800fce8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800fcec:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800fcf6:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fcfa:	4045      	eors	r5, r0
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800fd02:	08c0      	lsrs	r0, r0, #3
 800fd04:	4068      	eors	r0, r5
 800fd06:	4404      	add	r4, r0
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800fd0e:	4404      	add	r4, r0
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800fd1c:	f107 0418 	add.w	r4, r7, #24
 800fd20:	4d4e      	ldr	r5, [pc, #312]	; (800fe5c <B5_Sha256ProcessBlock+0x9c4>)
 800fd22:	9505      	str	r5, [sp, #20]
 800fd24:	9004      	str	r0, [sp, #16]
 800fd26:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fd2a:	9003      	str	r0, [sp, #12]
 800fd2c:	9102      	str	r1, [sp, #8]
 800fd2e:	9201      	str	r2, [sp, #4]
 800fd30:	9300      	str	r3, [sp, #0]
 800fd32:	4623      	mov	r3, r4
 800fd34:	683a      	ldr	r2, [r7, #0]
 800fd36:	6879      	ldr	r1, [r7, #4]
 800fd38:	4630      	mov	r0, r6
 800fd3a:	f7ff fb64 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( B, C, D, &E, F, G, H, &A, B5_SHA256_R(23), 0x76F988DA );
 800fd3e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	607b      	str	r3, [r7, #4]
 800fd44:	6a3a      	ldr	r2, [r7, #32]
 800fd46:	603a      	str	r2, [r7, #0]
 800fd48:	69bb      	ldr	r3, [r7, #24]
 800fd4a:	697a      	ldr	r2, [r7, #20]
 800fd4c:	6939      	ldr	r1, [r7, #16]
 800fd4e:	68f8      	ldr	r0, [r7, #12]
 800fd50:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 800fd54:	ea4f 4470 	mov.w	r4, r0, ror #17
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 800fd5e:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fd62:	4044      	eors	r4, r0
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 800fd6a:	0a80      	lsrs	r0, r0, #10
 800fd6c:	4044      	eors	r4, r0
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800fd74:	4404      	add	r4, r0
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800fd7c:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800fd86:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fd8a:	4045      	eors	r5, r0
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800fd92:	08c0      	lsrs	r0, r0, #3
 800fd94:	4068      	eors	r0, r5
 800fd96:	4404      	add	r4, r0
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800fd9e:	4404      	add	r4, r0
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f8c0 40c4 	str.w	r4, [r0, #196]	; 0xc4
 800fda6:	68f8      	ldr	r0, [r7, #12]
 800fda8:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800fdac:	f107 041c 	add.w	r4, r7, #28
 800fdb0:	4d2b      	ldr	r5, [pc, #172]	; (800fe60 <B5_Sha256ProcessBlock+0x9c8>)
 800fdb2:	9505      	str	r5, [sp, #20]
 800fdb4:	9004      	str	r0, [sp, #16]
 800fdb6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800fdba:	9003      	str	r0, [sp, #12]
 800fdbc:	9102      	str	r1, [sp, #8]
 800fdbe:	9201      	str	r2, [sp, #4]
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	4623      	mov	r3, r4
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	6879      	ldr	r1, [r7, #4]
 800fdc8:	4630      	mov	r0, r6
 800fdca:	f7ff fb1c 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( A, B, C, &D, E, F, G, &H, B5_SHA256_R(24), 0x983E5152 );
 800fdce:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd2:	607b      	str	r3, [r7, #4]
 800fdd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdd6:	603a      	str	r2, [r7, #0]
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	69ba      	ldr	r2, [r7, #24]
 800fddc:	6979      	ldr	r1, [r7, #20]
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800fde4:	ea4f 4470 	mov.w	r4, r0, ror #17
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800fdee:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fdf2:	4044      	eors	r4, r0
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800fdfa:	0a80      	lsrs	r0, r0, #10
 800fdfc:	4044      	eors	r4, r0
 800fdfe:	68f8      	ldr	r0, [r7, #12]
 800fe00:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800fe04:	4404      	add	r4, r0
 800fe06:	68f8      	ldr	r0, [r7, #12]
 800fe08:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800fe0c:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800fe16:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fe1a:	4045      	eors	r5, r0
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800fe22:	08c0      	lsrs	r0, r0, #3
 800fe24:	4068      	eors	r0, r5
 800fe26:	4404      	add	r4, r0
 800fe28:	68f8      	ldr	r0, [r7, #12]
 800fe2a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800fe2e:	4404      	add	r4, r0
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f8c0 40c8 	str.w	r4, [r0, #200]	; 0xc8
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800fe3c:	f107 0420 	add.w	r4, r7, #32
 800fe40:	4d08      	ldr	r5, [pc, #32]	; (800fe64 <B5_Sha256ProcessBlock+0x9cc>)
 800fe42:	9505      	str	r5, [sp, #20]
 800fe44:	9004      	str	r0, [sp, #16]
 800fe46:	f107 0010 	add.w	r0, r7, #16
 800fe4a:	9003      	str	r0, [sp, #12]
 800fe4c:	9102      	str	r1, [sp, #8]
 800fe4e:	e00b      	b.n	800fe68 <B5_Sha256ProcessBlock+0x9d0>
 800fe50:	240ca1cc 	.word	0x240ca1cc
 800fe54:	2de92c6f 	.word	0x2de92c6f
 800fe58:	4a7484aa 	.word	0x4a7484aa
 800fe5c:	5cb0a9dc 	.word	0x5cb0a9dc
 800fe60:	76f988da 	.word	0x76f988da
 800fe64:	983e5152 	.word	0x983e5152
 800fe68:	9201      	str	r2, [sp, #4]
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	4623      	mov	r3, r4
 800fe6e:	683a      	ldr	r2, [r7, #0]
 800fe70:	6879      	ldr	r1, [r7, #4]
 800fe72:	4630      	mov	r0, r6
 800fe74:	f7ff fac7 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( H, A, B, &C, D, E, F, &G, B5_SHA256_R(25), 0xA831C66D );
 800fe78:	693e      	ldr	r6, [r7, #16]
 800fe7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7c:	607b      	str	r3, [r7, #4]
 800fe7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe80:	603a      	str	r2, [r7, #0]
 800fe82:	6a3b      	ldr	r3, [r7, #32]
 800fe84:	69fa      	ldr	r2, [r7, #28]
 800fe86:	69b9      	ldr	r1, [r7, #24]
 800fe88:	68f8      	ldr	r0, [r7, #12]
 800fe8a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800fe8e:	ea4f 4470 	mov.w	r4, r0, ror #17
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800fe98:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800fe9c:	4044      	eors	r4, r0
 800fe9e:	68f8      	ldr	r0, [r7, #12]
 800fea0:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800fea4:	0a80      	lsrs	r0, r0, #10
 800fea6:	4044      	eors	r4, r0
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 800feae:	4404      	add	r4, r0
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 800feb6:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 800fec0:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800fec4:	4045      	eors	r5, r0
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 800fecc:	08c0      	lsrs	r0, r0, #3
 800fece:	4068      	eors	r0, r5
 800fed0:	4404      	add	r4, r0
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800fed8:	4404      	add	r4, r0
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f8c0 40cc 	str.w	r4, [r0, #204]	; 0xcc
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800fee6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800feea:	4db8      	ldr	r5, [pc, #736]	; (80101cc <B5_Sha256ProcessBlock+0xd34>)
 800feec:	9505      	str	r5, [sp, #20]
 800feee:	9004      	str	r0, [sp, #16]
 800fef0:	f107 0014 	add.w	r0, r7, #20
 800fef4:	9003      	str	r0, [sp, #12]
 800fef6:	9102      	str	r1, [sp, #8]
 800fef8:	9201      	str	r2, [sp, #4]
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	4623      	mov	r3, r4
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	6879      	ldr	r1, [r7, #4]
 800ff02:	4630      	mov	r0, r6
 800ff04:	f7ff fa7f 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( G, H, A, &B, C, D, E, &F, B5_SHA256_R(26), 0xB00327C8 );
 800ff08:	697e      	ldr	r6, [r7, #20]
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	607b      	str	r3, [r7, #4]
 800ff0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff10:	603a      	str	r2, [r7, #0]
 800ff12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff14:	6a3a      	ldr	r2, [r7, #32]
 800ff16:	69f9      	ldr	r1, [r7, #28]
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800ff1e:	ea4f 4470 	mov.w	r4, r0, ror #17
 800ff22:	68f8      	ldr	r0, [r7, #12]
 800ff24:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800ff28:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800ff2c:	4044      	eors	r4, r0
 800ff2e:	68f8      	ldr	r0, [r7, #12]
 800ff30:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800ff34:	0a80      	lsrs	r0, r0, #10
 800ff36:	4044      	eors	r4, r0
 800ff38:	68f8      	ldr	r0, [r7, #12]
 800ff3a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 800ff3e:	4404      	add	r4, r0
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800ff46:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800ff50:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800ff54:	4045      	eors	r5, r0
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800ff5c:	08c0      	lsrs	r0, r0, #3
 800ff5e:	4068      	eors	r0, r5
 800ff60:	4404      	add	r4, r0
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 800ff68:	4404      	add	r4, r0
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 800ff76:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ff7a:	4d95      	ldr	r5, [pc, #596]	; (80101d0 <B5_Sha256ProcessBlock+0xd38>)
 800ff7c:	9505      	str	r5, [sp, #20]
 800ff7e:	9004      	str	r0, [sp, #16]
 800ff80:	f107 0018 	add.w	r0, r7, #24
 800ff84:	9003      	str	r0, [sp, #12]
 800ff86:	9102      	str	r1, [sp, #8]
 800ff88:	9201      	str	r2, [sp, #4]
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	4623      	mov	r3, r4
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	6879      	ldr	r1, [r7, #4]
 800ff92:	4630      	mov	r0, r6
 800ff94:	f7ff fa37 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( F, G, H, &A, B, C, D, &E, B5_SHA256_R(27), 0xBF597FC7 );
 800ff98:	69be      	ldr	r6, [r7, #24]
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	607b      	str	r3, [r7, #4]
 800ff9e:	693a      	ldr	r2, [r7, #16]
 800ffa0:	603a      	str	r2, [r7, #0]
 800ffa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffa6:	6a39      	ldr	r1, [r7, #32]
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800ffae:	ea4f 4470 	mov.w	r4, r0, ror #17
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800ffb8:	ea4f 40f0 	mov.w	r0, r0, ror #19
 800ffbc:	4044      	eors	r4, r0
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800ffc4:	0a80      	lsrs	r0, r0, #10
 800ffc6:	4044      	eors	r4, r0
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800ffce:	4404      	add	r4, r0
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800ffd6:	ea4f 15f0 	mov.w	r5, r0, ror #7
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800ffe0:	ea4f 40b0 	mov.w	r0, r0, ror #18
 800ffe4:	4045      	eors	r5, r0
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800ffec:	08c0      	lsrs	r0, r0, #3
 800ffee:	4068      	eors	r0, r5
 800fff0:	4404      	add	r4, r0
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800fff8:	4404      	add	r4, r0
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f8c0 40d4 	str.w	r4, [r0, #212]	; 0xd4
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8010006:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801000a:	4d72      	ldr	r5, [pc, #456]	; (80101d4 <B5_Sha256ProcessBlock+0xd3c>)
 801000c:	9505      	str	r5, [sp, #20]
 801000e:	9004      	str	r0, [sp, #16]
 8010010:	f107 001c 	add.w	r0, r7, #28
 8010014:	9003      	str	r0, [sp, #12]
 8010016:	9102      	str	r1, [sp, #8]
 8010018:	9201      	str	r2, [sp, #4]
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	4623      	mov	r3, r4
 801001e:	683a      	ldr	r2, [r7, #0]
 8010020:	6879      	ldr	r1, [r7, #4]
 8010022:	4630      	mov	r0, r6
 8010024:	f7ff f9ef 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( E, F, G, &H, A, B, C, &D, B5_SHA256_R(28), 0xC6E00BF3 );
 8010028:	69fe      	ldr	r6, [r7, #28]
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	607b      	str	r3, [r7, #4]
 801002e:	697a      	ldr	r2, [r7, #20]
 8010030:	603a      	str	r2, [r7, #0]
 8010032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010038:	68f8      	ldr	r0, [r7, #12]
 801003a:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 801003e:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 8010048:	ea4f 40f0 	mov.w	r0, r0, ror #19
 801004c:	4044      	eors	r4, r0
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 8010054:	0a80      	lsrs	r0, r0, #10
 8010056:	4044      	eors	r4, r0
 8010058:	68f8      	ldr	r0, [r7, #12]
 801005a:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 801005e:	4404      	add	r4, r0
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 8010066:	ea4f 15f0 	mov.w	r5, r0, ror #7
 801006a:	68f8      	ldr	r0, [r7, #12]
 801006c:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 8010070:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010074:	4045      	eors	r5, r0
 8010076:	68f8      	ldr	r0, [r7, #12]
 8010078:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 801007c:	08c0      	lsrs	r0, r0, #3
 801007e:	4068      	eors	r0, r5
 8010080:	4404      	add	r4, r0
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 8010088:	4404      	add	r4, r0
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	f8c0 40d8 	str.w	r4, [r0, #216]	; 0xd8
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 8010096:	f107 0410 	add.w	r4, r7, #16
 801009a:	4d4f      	ldr	r5, [pc, #316]	; (80101d8 <B5_Sha256ProcessBlock+0xd40>)
 801009c:	9505      	str	r5, [sp, #20]
 801009e:	9004      	str	r0, [sp, #16]
 80100a0:	f107 0020 	add.w	r0, r7, #32
 80100a4:	9003      	str	r0, [sp, #12]
 80100a6:	9102      	str	r1, [sp, #8]
 80100a8:	9201      	str	r2, [sp, #4]
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	4623      	mov	r3, r4
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	6879      	ldr	r1, [r7, #4]
 80100b2:	4630      	mov	r0, r6
 80100b4:	f7ff f9a7 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( D, E, F, &G, H, A, B, &C, B5_SHA256_R(29), 0xD5A79147 );
 80100b8:	6a3e      	ldr	r6, [r7, #32]
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	607b      	str	r3, [r7, #4]
 80100be:	69ba      	ldr	r2, [r7, #24]
 80100c0:	603a      	str	r2, [r7, #0]
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 80100ce:	ea4f 4470 	mov.w	r4, r0, ror #17
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 80100d8:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80100dc:	4044      	eors	r4, r0
 80100de:	68f8      	ldr	r0, [r7, #12]
 80100e0:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 80100e4:	0a80      	lsrs	r0, r0, #10
 80100e6:	4044      	eors	r4, r0
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80100ee:	4404      	add	r4, r0
 80100f0:	68f8      	ldr	r0, [r7, #12]
 80100f2:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 80100f6:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80100fa:	68f8      	ldr	r0, [r7, #12]
 80100fc:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 8010100:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010104:	4045      	eors	r5, r0
 8010106:	68f8      	ldr	r0, [r7, #12]
 8010108:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 801010c:	08c0      	lsrs	r0, r0, #3
 801010e:	4068      	eors	r0, r5
 8010110:	4404      	add	r4, r0
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 8010118:	4404      	add	r4, r0
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f8c0 40dc 	str.w	r4, [r0, #220]	; 0xdc
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 8010126:	f107 0414 	add.w	r4, r7, #20
 801012a:	4d2c      	ldr	r5, [pc, #176]	; (80101dc <B5_Sha256ProcessBlock+0xd44>)
 801012c:	9505      	str	r5, [sp, #20]
 801012e:	9004      	str	r0, [sp, #16]
 8010130:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010134:	9003      	str	r0, [sp, #12]
 8010136:	9102      	str	r1, [sp, #8]
 8010138:	9201      	str	r2, [sp, #4]
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	4623      	mov	r3, r4
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	6879      	ldr	r1, [r7, #4]
 8010142:	4630      	mov	r0, r6
 8010144:	f7ff f95f 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( C, D, E, &F, G, H, A, &B, B5_SHA256_R(30), 0x06CA6351 );
 8010148:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 801014a:	6a3b      	ldr	r3, [r7, #32]
 801014c:	607b      	str	r3, [r7, #4]
 801014e:	69fa      	ldr	r2, [r7, #28]
 8010150:	603a      	str	r2, [r7, #0]
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	693a      	ldr	r2, [r7, #16]
 8010156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010158:	68f8      	ldr	r0, [r7, #12]
 801015a:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 801015e:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 8010168:	ea4f 40f0 	mov.w	r0, r0, ror #19
 801016c:	4044      	eors	r4, r0
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 8010174:	0a80      	lsrs	r0, r0, #10
 8010176:	4044      	eors	r4, r0
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 801017e:	4404      	add	r4, r0
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8010186:	ea4f 15f0 	mov.w	r5, r0, ror #7
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8010190:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010194:	4045      	eors	r5, r0
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 801019c:	08c0      	lsrs	r0, r0, #3
 801019e:	4068      	eors	r0, r5
 80101a0:	4404      	add	r4, r0
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 80101a8:	4404      	add	r4, r0
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f8c0 40e0 	str.w	r4, [r0, #224]	; 0xe0
 80101b0:	68f8      	ldr	r0, [r7, #12]
 80101b2:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 80101b6:	f107 0418 	add.w	r4, r7, #24
 80101ba:	4d09      	ldr	r5, [pc, #36]	; (80101e0 <B5_Sha256ProcessBlock+0xd48>)
 80101bc:	9505      	str	r5, [sp, #20]
 80101be:	9004      	str	r0, [sp, #16]
 80101c0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80101c4:	9003      	str	r0, [sp, #12]
 80101c6:	9102      	str	r1, [sp, #8]
 80101c8:	e00c      	b.n	80101e4 <B5_Sha256ProcessBlock+0xd4c>
 80101ca:	bf00      	nop
 80101cc:	a831c66d 	.word	0xa831c66d
 80101d0:	b00327c8 	.word	0xb00327c8
 80101d4:	bf597fc7 	.word	0xbf597fc7
 80101d8:	c6e00bf3 	.word	0xc6e00bf3
 80101dc:	d5a79147 	.word	0xd5a79147
 80101e0:	06ca6351 	.word	0x06ca6351
 80101e4:	9201      	str	r2, [sp, #4]
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	4623      	mov	r3, r4
 80101ea:	683a      	ldr	r2, [r7, #0]
 80101ec:	6879      	ldr	r1, [r7, #4]
 80101ee:	4630      	mov	r0, r6
 80101f0:	f7ff f909 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( B, C, D, &E, F, G, H, &A, B5_SHA256_R(31), 0x14292967 );
 80101f4:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	607b      	str	r3, [r7, #4]
 80101fa:	6a3a      	ldr	r2, [r7, #32]
 80101fc:	603a      	str	r2, [r7, #0]
 80101fe:	69bb      	ldr	r3, [r7, #24]
 8010200:	697a      	ldr	r2, [r7, #20]
 8010202:	6939      	ldr	r1, [r7, #16]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 801020a:	ea4f 4470 	mov.w	r4, r0, ror #17
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 8010214:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010218:	4044      	eors	r4, r0
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 8010220:	0a80      	lsrs	r0, r0, #10
 8010222:	4044      	eors	r4, r0
 8010224:	68f8      	ldr	r0, [r7, #12]
 8010226:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 801022a:	4404      	add	r4, r0
 801022c:	68f8      	ldr	r0, [r7, #12]
 801022e:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8010232:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010236:	68f8      	ldr	r0, [r7, #12]
 8010238:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 801023c:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010240:	4045      	eors	r5, r0
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8010248:	08c0      	lsrs	r0, r0, #3
 801024a:	4068      	eors	r0, r5
 801024c:	4404      	add	r4, r0
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8010254:	4404      	add	r4, r0
 8010256:	68f8      	ldr	r0, [r7, #12]
 8010258:	f8c0 40e4 	str.w	r4, [r0, #228]	; 0xe4
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8010262:	f107 041c 	add.w	r4, r7, #28
 8010266:	4db8      	ldr	r5, [pc, #736]	; (8010548 <B5_Sha256ProcessBlock+0x10b0>)
 8010268:	9505      	str	r5, [sp, #20]
 801026a:	9004      	str	r0, [sp, #16]
 801026c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010270:	9003      	str	r0, [sp, #12]
 8010272:	9102      	str	r1, [sp, #8]
 8010274:	9201      	str	r2, [sp, #4]
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	4623      	mov	r3, r4
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	6879      	ldr	r1, [r7, #4]
 801027e:	4630      	mov	r0, r6
 8010280:	f7ff f8c1 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( A, B, C, &D, E, F, G, &H, B5_SHA256_R(32), 0x27B70A85 );
 8010284:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8010286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010288:	607b      	str	r3, [r7, #4]
 801028a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801028c:	603a      	str	r2, [r7, #0]
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	69ba      	ldr	r2, [r7, #24]
 8010292:	6979      	ldr	r1, [r7, #20]
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 801029a:	ea4f 4470 	mov.w	r4, r0, ror #17
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 80102a4:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80102a8:	4044      	eors	r4, r0
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 80102b0:	0a80      	lsrs	r0, r0, #10
 80102b2:	4044      	eors	r4, r0
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 80102ba:	4404      	add	r4, r0
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 80102c2:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 80102cc:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80102d0:	4045      	eors	r5, r0
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 80102d8:	08c0      	lsrs	r0, r0, #3
 80102da:	4068      	eors	r0, r5
 80102dc:	4404      	add	r4, r0
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 80102e4:	4404      	add	r4, r0
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f8c0 40e8 	str.w	r4, [r0, #232]	; 0xe8
 80102ec:	68f8      	ldr	r0, [r7, #12]
 80102ee:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 80102f2:	f107 0420 	add.w	r4, r7, #32
 80102f6:	4d95      	ldr	r5, [pc, #596]	; (801054c <B5_Sha256ProcessBlock+0x10b4>)
 80102f8:	9505      	str	r5, [sp, #20]
 80102fa:	9004      	str	r0, [sp, #16]
 80102fc:	f107 0010 	add.w	r0, r7, #16
 8010300:	9003      	str	r0, [sp, #12]
 8010302:	9102      	str	r1, [sp, #8]
 8010304:	9201      	str	r2, [sp, #4]
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	4623      	mov	r3, r4
 801030a:	683a      	ldr	r2, [r7, #0]
 801030c:	6879      	ldr	r1, [r7, #4]
 801030e:	4630      	mov	r0, r6
 8010310:	f7ff f879 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( H, A, B, &C, D, E, F, &G, B5_SHA256_R(33), 0x2E1B2138 );
 8010314:	693e      	ldr	r6, [r7, #16]
 8010316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010318:	607b      	str	r3, [r7, #4]
 801031a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801031c:	603a      	str	r2, [r7, #0]
 801031e:	6a3b      	ldr	r3, [r7, #32]
 8010320:	69fa      	ldr	r2, [r7, #28]
 8010322:	69b9      	ldr	r1, [r7, #24]
 8010324:	68f8      	ldr	r0, [r7, #12]
 8010326:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 801032a:	ea4f 4470 	mov.w	r4, r0, ror #17
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8010334:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010338:	4044      	eors	r4, r0
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8010340:	0a80      	lsrs	r0, r0, #10
 8010342:	4044      	eors	r4, r0
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 801034a:	4404      	add	r4, r0
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 8010352:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 801035c:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010360:	4045      	eors	r5, r0
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 8010368:	08c0      	lsrs	r0, r0, #3
 801036a:	4068      	eors	r0, r5
 801036c:	4404      	add	r4, r0
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8010374:	4404      	add	r4, r0
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f8c0 40ec 	str.w	r4, [r0, #236]	; 0xec
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010382:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8010386:	4d72      	ldr	r5, [pc, #456]	; (8010550 <B5_Sha256ProcessBlock+0x10b8>)
 8010388:	9505      	str	r5, [sp, #20]
 801038a:	9004      	str	r0, [sp, #16]
 801038c:	f107 0014 	add.w	r0, r7, #20
 8010390:	9003      	str	r0, [sp, #12]
 8010392:	9102      	str	r1, [sp, #8]
 8010394:	9201      	str	r2, [sp, #4]
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	4623      	mov	r3, r4
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	6879      	ldr	r1, [r7, #4]
 801039e:	4630      	mov	r0, r6
 80103a0:	f7ff f831 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( G, H, A, &B, C, D, E, &F, B5_SHA256_R(34), 0x4D2C6DFC );
 80103a4:	697e      	ldr	r6, [r7, #20]
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	607b      	str	r3, [r7, #4]
 80103aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103ac:	603a      	str	r2, [r7, #0]
 80103ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b0:	6a3a      	ldr	r2, [r7, #32]
 80103b2:	69f9      	ldr	r1, [r7, #28]
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 80103ba:	ea4f 4470 	mov.w	r4, r0, ror #17
 80103be:	68f8      	ldr	r0, [r7, #12]
 80103c0:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 80103c4:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80103c8:	4044      	eors	r4, r0
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 80103d0:	0a80      	lsrs	r0, r0, #10
 80103d2:	4044      	eors	r4, r0
 80103d4:	68f8      	ldr	r0, [r7, #12]
 80103d6:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 80103da:	4404      	add	r4, r0
 80103dc:	68f8      	ldr	r0, [r7, #12]
 80103de:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80103e2:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80103ec:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80103f0:	4045      	eors	r5, r0
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80103f8:	08c0      	lsrs	r0, r0, #3
 80103fa:	4068      	eors	r0, r5
 80103fc:	4404      	add	r4, r0
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 8010404:	4404      	add	r4, r0
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8010412:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010416:	4d4f      	ldr	r5, [pc, #316]	; (8010554 <B5_Sha256ProcessBlock+0x10bc>)
 8010418:	9505      	str	r5, [sp, #20]
 801041a:	9004      	str	r0, [sp, #16]
 801041c:	f107 0018 	add.w	r0, r7, #24
 8010420:	9003      	str	r0, [sp, #12]
 8010422:	9102      	str	r1, [sp, #8]
 8010424:	9201      	str	r2, [sp, #4]
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	4623      	mov	r3, r4
 801042a:	683a      	ldr	r2, [r7, #0]
 801042c:	6879      	ldr	r1, [r7, #4]
 801042e:	4630      	mov	r0, r6
 8010430:	f7fe ffe9 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( F, G, H, &A, B, C, D, &E, B5_SHA256_R(35), 0x53380D13 );
 8010434:	69be      	ldr	r6, [r7, #24]
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	607b      	str	r3, [r7, #4]
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	603a      	str	r2, [r7, #0]
 801043e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010442:	6a39      	ldr	r1, [r7, #32]
 8010444:	68f8      	ldr	r0, [r7, #12]
 8010446:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801044a:	ea4f 4470 	mov.w	r4, r0, ror #17
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010454:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010458:	4044      	eors	r4, r0
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010460:	0a80      	lsrs	r0, r0, #10
 8010462:	4044      	eors	r4, r0
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 801046a:	4404      	add	r4, r0
 801046c:	68f8      	ldr	r0, [r7, #12]
 801046e:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8010472:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801047c:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010480:	4045      	eors	r5, r0
 8010482:	68f8      	ldr	r0, [r7, #12]
 8010484:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8010488:	08c0      	lsrs	r0, r0, #3
 801048a:	4068      	eors	r0, r5
 801048c:	4404      	add	r4, r0
 801048e:	68f8      	ldr	r0, [r7, #12]
 8010490:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8010494:	4404      	add	r4, r0
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	f8c0 40f4 	str.w	r4, [r0, #244]	; 0xf4
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 80104a2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80104a6:	4d2c      	ldr	r5, [pc, #176]	; (8010558 <B5_Sha256ProcessBlock+0x10c0>)
 80104a8:	9505      	str	r5, [sp, #20]
 80104aa:	9004      	str	r0, [sp, #16]
 80104ac:	f107 001c 	add.w	r0, r7, #28
 80104b0:	9003      	str	r0, [sp, #12]
 80104b2:	9102      	str	r1, [sp, #8]
 80104b4:	9201      	str	r2, [sp, #4]
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	4623      	mov	r3, r4
 80104ba:	683a      	ldr	r2, [r7, #0]
 80104bc:	6879      	ldr	r1, [r7, #4]
 80104be:	4630      	mov	r0, r6
 80104c0:	f7fe ffa1 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( E, F, G, &H, A, B, C, &D, B5_SHA256_R(36), 0x650A7354 );
 80104c4:	69fe      	ldr	r6, [r7, #28]
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	607b      	str	r3, [r7, #4]
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	603a      	str	r2, [r7, #0]
 80104ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 80104da:	ea4f 4470 	mov.w	r4, r0, ror #17
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 80104e4:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80104e8:	4044      	eors	r4, r0
 80104ea:	68f8      	ldr	r0, [r7, #12]
 80104ec:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 80104f0:	0a80      	lsrs	r0, r0, #10
 80104f2:	4044      	eors	r4, r0
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 80104fa:	4404      	add	r4, r0
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 8010502:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 801050c:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010510:	4045      	eors	r5, r0
 8010512:	68f8      	ldr	r0, [r7, #12]
 8010514:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 8010518:	08c0      	lsrs	r0, r0, #3
 801051a:	4068      	eors	r0, r5
 801051c:	4404      	add	r4, r0
 801051e:	68f8      	ldr	r0, [r7, #12]
 8010520:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8010524:	4404      	add	r4, r0
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f8c0 40f8 	str.w	r4, [r0, #248]	; 0xf8
 801052c:	68f8      	ldr	r0, [r7, #12]
 801052e:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010532:	f107 0410 	add.w	r4, r7, #16
 8010536:	4d09      	ldr	r5, [pc, #36]	; (801055c <B5_Sha256ProcessBlock+0x10c4>)
 8010538:	9505      	str	r5, [sp, #20]
 801053a:	9004      	str	r0, [sp, #16]
 801053c:	f107 0020 	add.w	r0, r7, #32
 8010540:	9003      	str	r0, [sp, #12]
 8010542:	9102      	str	r1, [sp, #8]
 8010544:	e00c      	b.n	8010560 <B5_Sha256ProcessBlock+0x10c8>
 8010546:	bf00      	nop
 8010548:	14292967 	.word	0x14292967
 801054c:	27b70a85 	.word	0x27b70a85
 8010550:	2e1b2138 	.word	0x2e1b2138
 8010554:	4d2c6dfc 	.word	0x4d2c6dfc
 8010558:	53380d13 	.word	0x53380d13
 801055c:	650a7354 	.word	0x650a7354
 8010560:	9201      	str	r2, [sp, #4]
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	4623      	mov	r3, r4
 8010566:	683a      	ldr	r2, [r7, #0]
 8010568:	6879      	ldr	r1, [r7, #4]
 801056a:	4630      	mov	r0, r6
 801056c:	f7fe ff4b 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( D, E, F, &G, H, A, B, &C, B5_SHA256_R(37), 0x766A0ABB );
 8010570:	6a3e      	ldr	r6, [r7, #32]
 8010572:	69fb      	ldr	r3, [r7, #28]
 8010574:	607b      	str	r3, [r7, #4]
 8010576:	69ba      	ldr	r2, [r7, #24]
 8010578:	603a      	str	r2, [r7, #0]
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801057e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010580:	68f8      	ldr	r0, [r7, #12]
 8010582:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010586:	ea4f 4470 	mov.w	r4, r0, ror #17
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010590:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010594:	4044      	eors	r4, r0
 8010596:	68f8      	ldr	r0, [r7, #12]
 8010598:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 801059c:	0a80      	lsrs	r0, r0, #10
 801059e:	4044      	eors	r4, r0
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 80105a6:	4404      	add	r4, r0
 80105a8:	68f8      	ldr	r0, [r7, #12]
 80105aa:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80105ae:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80105b8:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80105bc:	4045      	eors	r5, r0
 80105be:	68f8      	ldr	r0, [r7, #12]
 80105c0:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80105c4:	08c0      	lsrs	r0, r0, #3
 80105c6:	4068      	eors	r0, r5
 80105c8:	4404      	add	r4, r0
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 80105d0:	4404      	add	r4, r0
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f8c0 40fc 	str.w	r4, [r0, #252]	; 0xfc
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80105de:	f107 0414 	add.w	r4, r7, #20
 80105e2:	4db8      	ldr	r5, [pc, #736]	; (80108c4 <B5_Sha256ProcessBlock+0x142c>)
 80105e4:	9505      	str	r5, [sp, #20]
 80105e6:	9004      	str	r0, [sp, #16]
 80105e8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80105ec:	9003      	str	r0, [sp, #12]
 80105ee:	9102      	str	r1, [sp, #8]
 80105f0:	9201      	str	r2, [sp, #4]
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	4623      	mov	r3, r4
 80105f6:	683a      	ldr	r2, [r7, #0]
 80105f8:	6879      	ldr	r1, [r7, #4]
 80105fa:	4630      	mov	r0, r6
 80105fc:	f7fe ff03 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( C, D, E, &F, G, H, A, &B, B5_SHA256_R(38), 0x81C2C92E );
 8010600:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8010602:	6a3b      	ldr	r3, [r7, #32]
 8010604:	607b      	str	r3, [r7, #4]
 8010606:	69fa      	ldr	r2, [r7, #28]
 8010608:	603a      	str	r2, [r7, #0]
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	693a      	ldr	r2, [r7, #16]
 801060e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010616:	ea4f 4470 	mov.w	r4, r0, ror #17
 801061a:	68f8      	ldr	r0, [r7, #12]
 801061c:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010620:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010624:	4044      	eors	r4, r0
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 801062c:	0a80      	lsrs	r0, r0, #10
 801062e:	4044      	eors	r4, r0
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8010636:	4404      	add	r4, r0
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 801063e:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8010648:	ea4f 40b0 	mov.w	r0, r0, ror #18
 801064c:	4045      	eors	r5, r0
 801064e:	68f8      	ldr	r0, [r7, #12]
 8010650:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8010654:	08c0      	lsrs	r0, r0, #3
 8010656:	4068      	eors	r0, r5
 8010658:	4404      	add	r4, r0
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8010660:	4404      	add	r4, r0
 8010662:	68f8      	ldr	r0, [r7, #12]
 8010664:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 801066e:	f107 0418 	add.w	r4, r7, #24
 8010672:	4d95      	ldr	r5, [pc, #596]	; (80108c8 <B5_Sha256ProcessBlock+0x1430>)
 8010674:	9505      	str	r5, [sp, #20]
 8010676:	9004      	str	r0, [sp, #16]
 8010678:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801067c:	9003      	str	r0, [sp, #12]
 801067e:	9102      	str	r1, [sp, #8]
 8010680:	9201      	str	r2, [sp, #4]
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	4623      	mov	r3, r4
 8010686:	683a      	ldr	r2, [r7, #0]
 8010688:	6879      	ldr	r1, [r7, #4]
 801068a:	4630      	mov	r0, r6
 801068c:	f7fe febb 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( B, C, D, &E, F, G, H, &A, B5_SHA256_R(39), 0x92722C85 );
 8010690:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8010692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010694:	607b      	str	r3, [r7, #4]
 8010696:	6a3a      	ldr	r2, [r7, #32]
 8010698:	603a      	str	r2, [r7, #0]
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	6939      	ldr	r1, [r7, #16]
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80106a6:	ea4f 4470 	mov.w	r4, r0, ror #17
 80106aa:	68f8      	ldr	r0, [r7, #12]
 80106ac:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80106b0:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80106b4:	4044      	eors	r4, r0
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80106bc:	0a80      	lsrs	r0, r0, #10
 80106be:	4044      	eors	r4, r0
 80106c0:	68f8      	ldr	r0, [r7, #12]
 80106c2:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 80106c6:	4404      	add	r4, r0
 80106c8:	68f8      	ldr	r0, [r7, #12]
 80106ca:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 80106ce:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 80106d8:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80106dc:	4045      	eors	r5, r0
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 80106e4:	08c0      	lsrs	r0, r0, #3
 80106e6:	4068      	eors	r0, r5
 80106e8:	4404      	add	r4, r0
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 80106f0:	4404      	add	r4, r0
 80106f2:	68f8      	ldr	r0, [r7, #12]
 80106f4:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 80106fe:	f107 041c 	add.w	r4, r7, #28
 8010702:	4d72      	ldr	r5, [pc, #456]	; (80108cc <B5_Sha256ProcessBlock+0x1434>)
 8010704:	9505      	str	r5, [sp, #20]
 8010706:	9004      	str	r0, [sp, #16]
 8010708:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801070c:	9003      	str	r0, [sp, #12]
 801070e:	9102      	str	r1, [sp, #8]
 8010710:	9201      	str	r2, [sp, #4]
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	4623      	mov	r3, r4
 8010716:	683a      	ldr	r2, [r7, #0]
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	4630      	mov	r0, r6
 801071c:	f7fe fe73 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( A, B, C, &D, E, F, G, &H, B5_SHA256_R(40), 0xA2BFE8A1 );
 8010720:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8010722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010724:	607b      	str	r3, [r7, #4]
 8010726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010728:	603a      	str	r2, [r7, #0]
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	69ba      	ldr	r2, [r7, #24]
 801072e:	6979      	ldr	r1, [r7, #20]
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8010736:	ea4f 4470 	mov.w	r4, r0, ror #17
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8010740:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010744:	4044      	eors	r4, r0
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 801074c:	0a80      	lsrs	r0, r0, #10
 801074e:	4044      	eors	r4, r0
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010756:	4404      	add	r4, r0
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 801075e:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010762:	68f8      	ldr	r0, [r7, #12]
 8010764:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8010768:	ea4f 40b0 	mov.w	r0, r0, ror #18
 801076c:	4045      	eors	r5, r0
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8010774:	08c0      	lsrs	r0, r0, #3
 8010776:	4068      	eors	r0, r5
 8010778:	4404      	add	r4, r0
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8010780:	4404      	add	r4, r0
 8010782:	68f8      	ldr	r0, [r7, #12]
 8010784:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801078e:	f107 0420 	add.w	r4, r7, #32
 8010792:	4d4f      	ldr	r5, [pc, #316]	; (80108d0 <B5_Sha256ProcessBlock+0x1438>)
 8010794:	9505      	str	r5, [sp, #20]
 8010796:	9004      	str	r0, [sp, #16]
 8010798:	f107 0010 	add.w	r0, r7, #16
 801079c:	9003      	str	r0, [sp, #12]
 801079e:	9102      	str	r1, [sp, #8]
 80107a0:	9201      	str	r2, [sp, #4]
 80107a2:	9300      	str	r3, [sp, #0]
 80107a4:	4623      	mov	r3, r4
 80107a6:	683a      	ldr	r2, [r7, #0]
 80107a8:	6879      	ldr	r1, [r7, #4]
 80107aa:	4630      	mov	r0, r6
 80107ac:	f7fe fe2b 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( H, A, B, &C, D, E, F, &G, B5_SHA256_R(41), 0xA81A664B );
 80107b0:	693e      	ldr	r6, [r7, #16]
 80107b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b4:	607b      	str	r3, [r7, #4]
 80107b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107b8:	603a      	str	r2, [r7, #0]
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	69fa      	ldr	r2, [r7, #28]
 80107be:	69b9      	ldr	r1, [r7, #24]
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 80107c6:	ea4f 4470 	mov.w	r4, r0, ror #17
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 80107d0:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80107d4:	4044      	eors	r4, r0
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 80107dc:	0a80      	lsrs	r0, r0, #10
 80107de:	4044      	eors	r4, r0
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 80107e6:	4404      	add	r4, r0
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 80107ee:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 80107f8:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80107fc:	4045      	eors	r5, r0
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 8010804:	08c0      	lsrs	r0, r0, #3
 8010806:	4068      	eors	r0, r5
 8010808:	4404      	add	r4, r0
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8010810:	4404      	add	r4, r0
 8010812:	68f8      	ldr	r0, [r7, #12]
 8010814:	f8c0 410c 	str.w	r4, [r0, #268]	; 0x10c
 8010818:	68f8      	ldr	r0, [r7, #12]
 801081a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 801081e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8010822:	4d2c      	ldr	r5, [pc, #176]	; (80108d4 <B5_Sha256ProcessBlock+0x143c>)
 8010824:	9505      	str	r5, [sp, #20]
 8010826:	9004      	str	r0, [sp, #16]
 8010828:	f107 0014 	add.w	r0, r7, #20
 801082c:	9003      	str	r0, [sp, #12]
 801082e:	9102      	str	r1, [sp, #8]
 8010830:	9201      	str	r2, [sp, #4]
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	4623      	mov	r3, r4
 8010836:	683a      	ldr	r2, [r7, #0]
 8010838:	6879      	ldr	r1, [r7, #4]
 801083a:	4630      	mov	r0, r6
 801083c:	f7fe fde3 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( G, H, A, &B, C, D, E, &F, B5_SHA256_R(42), 0xC24B8B70 );
 8010840:	697e      	ldr	r6, [r7, #20]
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	607b      	str	r3, [r7, #4]
 8010846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010848:	603a      	str	r2, [r7, #0]
 801084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084c:	6a3a      	ldr	r2, [r7, #32]
 801084e:	69f9      	ldr	r1, [r7, #28]
 8010850:	68f8      	ldr	r0, [r7, #12]
 8010852:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010856:	ea4f 4470 	mov.w	r4, r0, ror #17
 801085a:	68f8      	ldr	r0, [r7, #12]
 801085c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010860:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010864:	4044      	eors	r4, r0
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801086c:	0a80      	lsrs	r0, r0, #10
 801086e:	4044      	eors	r4, r0
 8010870:	68f8      	ldr	r0, [r7, #12]
 8010872:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010876:	4404      	add	r4, r0
 8010878:	68f8      	ldr	r0, [r7, #12]
 801087a:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 801087e:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8010888:	ea4f 40b0 	mov.w	r0, r0, ror #18
 801088c:	4045      	eors	r5, r0
 801088e:	68f8      	ldr	r0, [r7, #12]
 8010890:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8010894:	08c0      	lsrs	r0, r0, #3
 8010896:	4068      	eors	r0, r5
 8010898:	4404      	add	r4, r0
 801089a:	68f8      	ldr	r0, [r7, #12]
 801089c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 80108a0:	4404      	add	r4, r0
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 80108ae:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80108b2:	4d09      	ldr	r5, [pc, #36]	; (80108d8 <B5_Sha256ProcessBlock+0x1440>)
 80108b4:	9505      	str	r5, [sp, #20]
 80108b6:	9004      	str	r0, [sp, #16]
 80108b8:	f107 0018 	add.w	r0, r7, #24
 80108bc:	9003      	str	r0, [sp, #12]
 80108be:	9102      	str	r1, [sp, #8]
 80108c0:	e00c      	b.n	80108dc <B5_Sha256ProcessBlock+0x1444>
 80108c2:	bf00      	nop
 80108c4:	766a0abb 	.word	0x766a0abb
 80108c8:	81c2c92e 	.word	0x81c2c92e
 80108cc:	92722c85 	.word	0x92722c85
 80108d0:	a2bfe8a1 	.word	0xa2bfe8a1
 80108d4:	a81a664b 	.word	0xa81a664b
 80108d8:	c24b8b70 	.word	0xc24b8b70
 80108dc:	9201      	str	r2, [sp, #4]
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	4623      	mov	r3, r4
 80108e2:	683a      	ldr	r2, [r7, #0]
 80108e4:	6879      	ldr	r1, [r7, #4]
 80108e6:	4630      	mov	r0, r6
 80108e8:	f7fe fd8d 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( F, G, H, &A, B, C, D, &E, B5_SHA256_R(43), 0xC76C51A3 );
 80108ec:	69be      	ldr	r6, [r7, #24]
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	607b      	str	r3, [r7, #4]
 80108f2:	693a      	ldr	r2, [r7, #16]
 80108f4:	603a      	str	r2, [r7, #0]
 80108f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108fa:	6a39      	ldr	r1, [r7, #32]
 80108fc:	68f8      	ldr	r0, [r7, #12]
 80108fe:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 8010902:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010906:	68f8      	ldr	r0, [r7, #12]
 8010908:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 801090c:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010910:	4044      	eors	r4, r0
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 8010918:	0a80      	lsrs	r0, r0, #10
 801091a:	4044      	eors	r4, r0
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010922:	4404      	add	r4, r0
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 801092a:	ea4f 15f0 	mov.w	r5, r0, ror #7
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 8010934:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010938:	4045      	eors	r5, r0
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 8010940:	08c0      	lsrs	r0, r0, #3
 8010942:	4068      	eors	r0, r5
 8010944:	4404      	add	r4, r0
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 801094c:	4404      	add	r4, r0
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 801095a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801095e:	4db8      	ldr	r5, [pc, #736]	; (8010c40 <B5_Sha256ProcessBlock+0x17a8>)
 8010960:	9505      	str	r5, [sp, #20]
 8010962:	9004      	str	r0, [sp, #16]
 8010964:	f107 001c 	add.w	r0, r7, #28
 8010968:	9003      	str	r0, [sp, #12]
 801096a:	9102      	str	r1, [sp, #8]
 801096c:	9201      	str	r2, [sp, #4]
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	4623      	mov	r3, r4
 8010972:	683a      	ldr	r2, [r7, #0]
 8010974:	6879      	ldr	r1, [r7, #4]
 8010976:	4630      	mov	r0, r6
 8010978:	f7fe fd45 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( E, F, G, &H, A, B, C, &D, B5_SHA256_R(44), 0xD192E819 );
 801097c:	69fe      	ldr	r6, [r7, #28]
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	607b      	str	r3, [r7, #4]
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	603a      	str	r2, [r7, #0]
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801098a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801098c:	68f8      	ldr	r0, [r7, #12]
 801098e:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8010992:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 801099c:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80109a0:	4044      	eors	r4, r0
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 80109a8:	0a80      	lsrs	r0, r0, #10
 80109aa:	4044      	eors	r4, r0
 80109ac:	68f8      	ldr	r0, [r7, #12]
 80109ae:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80109b2:	4404      	add	r4, r0
 80109b4:	68f8      	ldr	r0, [r7, #12]
 80109b6:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 80109ba:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 80109c4:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80109c8:	4045      	eors	r5, r0
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 80109d0:	08c0      	lsrs	r0, r0, #3
 80109d2:	4068      	eors	r0, r5
 80109d4:	4404      	add	r4, r0
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 80109dc:	4404      	add	r4, r0
 80109de:	68f8      	ldr	r0, [r7, #12]
 80109e0:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 80109ea:	f107 0410 	add.w	r4, r7, #16
 80109ee:	4d95      	ldr	r5, [pc, #596]	; (8010c44 <B5_Sha256ProcessBlock+0x17ac>)
 80109f0:	9505      	str	r5, [sp, #20]
 80109f2:	9004      	str	r0, [sp, #16]
 80109f4:	f107 0020 	add.w	r0, r7, #32
 80109f8:	9003      	str	r0, [sp, #12]
 80109fa:	9102      	str	r1, [sp, #8]
 80109fc:	9201      	str	r2, [sp, #4]
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	4623      	mov	r3, r4
 8010a02:	683a      	ldr	r2, [r7, #0]
 8010a04:	6879      	ldr	r1, [r7, #4]
 8010a06:	4630      	mov	r0, r6
 8010a08:	f7fe fcfd 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( D, E, F, &G, H, A, B, &C, B5_SHA256_R(45), 0xD6990624 );
 8010a0c:	6a3e      	ldr	r6, [r7, #32]
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	607b      	str	r3, [r7, #4]
 8010a12:	69ba      	ldr	r2, [r7, #24]
 8010a14:	603a      	str	r2, [r7, #0]
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8010a22:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010a26:	68f8      	ldr	r0, [r7, #12]
 8010a28:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8010a2c:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010a30:	4044      	eors	r4, r0
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8010a38:	0a80      	lsrs	r0, r0, #10
 8010a3a:	4044      	eors	r4, r0
 8010a3c:	68f8      	ldr	r0, [r7, #12]
 8010a3e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8010a42:	4404      	add	r4, r0
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8010a4a:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8010a54:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010a58:	4045      	eors	r5, r0
 8010a5a:	68f8      	ldr	r0, [r7, #12]
 8010a5c:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8010a60:	08c0      	lsrs	r0, r0, #3
 8010a62:	4068      	eors	r0, r5
 8010a64:	4404      	add	r4, r0
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 8010a6c:	4404      	add	r4, r0
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 8010a7a:	f107 0414 	add.w	r4, r7, #20
 8010a7e:	4d72      	ldr	r5, [pc, #456]	; (8010c48 <B5_Sha256ProcessBlock+0x17b0>)
 8010a80:	9505      	str	r5, [sp, #20]
 8010a82:	9004      	str	r0, [sp, #16]
 8010a84:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010a88:	9003      	str	r0, [sp, #12]
 8010a8a:	9102      	str	r1, [sp, #8]
 8010a8c:	9201      	str	r2, [sp, #4]
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	4623      	mov	r3, r4
 8010a92:	683a      	ldr	r2, [r7, #0]
 8010a94:	6879      	ldr	r1, [r7, #4]
 8010a96:	4630      	mov	r0, r6
 8010a98:	f7fe fcb5 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( C, D, E, &F, G, H, A, &B, B5_SHA256_R(46), 0xF40E3585 );
 8010a9c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8010a9e:	6a3b      	ldr	r3, [r7, #32]
 8010aa0:	607b      	str	r3, [r7, #4]
 8010aa2:	69fa      	ldr	r2, [r7, #28]
 8010aa4:	603a      	str	r2, [r7, #0]
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	693a      	ldr	r2, [r7, #16]
 8010aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8010ab2:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010ab6:	68f8      	ldr	r0, [r7, #12]
 8010ab8:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8010abc:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010ac0:	4044      	eors	r4, r0
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8010ac8:	0a80      	lsrs	r0, r0, #10
 8010aca:	4044      	eors	r4, r0
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 8010ad2:	4404      	add	r4, r0
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8010ada:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010ade:	68f8      	ldr	r0, [r7, #12]
 8010ae0:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8010ae4:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010ae8:	4045      	eors	r5, r0
 8010aea:	68f8      	ldr	r0, [r7, #12]
 8010aec:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8010af0:	08c0      	lsrs	r0, r0, #3
 8010af2:	4068      	eors	r0, r5
 8010af4:	4404      	add	r4, r0
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8010afc:	4404      	add	r4, r0
 8010afe:	68f8      	ldr	r0, [r7, #12]
 8010b00:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8010b0a:	f107 0418 	add.w	r4, r7, #24
 8010b0e:	4d4f      	ldr	r5, [pc, #316]	; (8010c4c <B5_Sha256ProcessBlock+0x17b4>)
 8010b10:	9505      	str	r5, [sp, #20]
 8010b12:	9004      	str	r0, [sp, #16]
 8010b14:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010b18:	9003      	str	r0, [sp, #12]
 8010b1a:	9102      	str	r1, [sp, #8]
 8010b1c:	9201      	str	r2, [sp, #4]
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	4623      	mov	r3, r4
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	6879      	ldr	r1, [r7, #4]
 8010b26:	4630      	mov	r0, r6
 8010b28:	f7fe fc6d 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( B, C, D, &E, F, G, H, &A, B5_SHA256_R(47), 0x106AA070 );
 8010b2c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8010b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b30:	607b      	str	r3, [r7, #4]
 8010b32:	6a3a      	ldr	r2, [r7, #32]
 8010b34:	603a      	str	r2, [r7, #0]
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	697a      	ldr	r2, [r7, #20]
 8010b3a:	6939      	ldr	r1, [r7, #16]
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 8010b42:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 8010b4c:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010b50:	4044      	eors	r4, r0
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 8010b58:	0a80      	lsrs	r0, r0, #10
 8010b5a:	4044      	eors	r4, r0
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010b62:	4404      	add	r4, r0
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 8010b6a:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 8010b74:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010b78:	4045      	eors	r5, r0
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 8010b80:	08c0      	lsrs	r0, r0, #3
 8010b82:	4068      	eors	r0, r5
 8010b84:	4404      	add	r4, r0
 8010b86:	68f8      	ldr	r0, [r7, #12]
 8010b88:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8010b8c:	4404      	add	r4, r0
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 8010b9a:	f107 041c 	add.w	r4, r7, #28
 8010b9e:	4d2c      	ldr	r5, [pc, #176]	; (8010c50 <B5_Sha256ProcessBlock+0x17b8>)
 8010ba0:	9505      	str	r5, [sp, #20]
 8010ba2:	9004      	str	r0, [sp, #16]
 8010ba4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010ba8:	9003      	str	r0, [sp, #12]
 8010baa:	9102      	str	r1, [sp, #8]
 8010bac:	9201      	str	r2, [sp, #4]
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	4623      	mov	r3, r4
 8010bb2:	683a      	ldr	r2, [r7, #0]
 8010bb4:	6879      	ldr	r1, [r7, #4]
 8010bb6:	4630      	mov	r0, r6
 8010bb8:	f7fe fc25 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( A, B, C, &D, E, F, G, &H, B5_SHA256_R(48), 0x19A4C116 );
 8010bbc:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	607b      	str	r3, [r7, #4]
 8010bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bc4:	603a      	str	r2, [r7, #0]
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	69ba      	ldr	r2, [r7, #24]
 8010bca:	6979      	ldr	r1, [r7, #20]
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8010bd2:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010bd6:	68f8      	ldr	r0, [r7, #12]
 8010bd8:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8010bdc:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010be0:	4044      	eors	r4, r0
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8010be8:	0a80      	lsrs	r0, r0, #10
 8010bea:	4044      	eors	r4, r0
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 8010bf2:	4404      	add	r4, r0
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010bfa:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010c04:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010c08:	4045      	eors	r5, r0
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010c10:	08c0      	lsrs	r0, r0, #3
 8010c12:	4068      	eors	r0, r5
 8010c14:	4404      	add	r4, r0
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 8010c1c:	4404      	add	r4, r0
 8010c1e:	68f8      	ldr	r0, [r7, #12]
 8010c20:	f8c0 4128 	str.w	r4, [r0, #296]	; 0x128
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 8010c2a:	f107 0420 	add.w	r4, r7, #32
 8010c2e:	4d09      	ldr	r5, [pc, #36]	; (8010c54 <B5_Sha256ProcessBlock+0x17bc>)
 8010c30:	9505      	str	r5, [sp, #20]
 8010c32:	9004      	str	r0, [sp, #16]
 8010c34:	f107 0010 	add.w	r0, r7, #16
 8010c38:	9003      	str	r0, [sp, #12]
 8010c3a:	9102      	str	r1, [sp, #8]
 8010c3c:	e00c      	b.n	8010c58 <B5_Sha256ProcessBlock+0x17c0>
 8010c3e:	bf00      	nop
 8010c40:	c76c51a3 	.word	0xc76c51a3
 8010c44:	d192e819 	.word	0xd192e819
 8010c48:	d6990624 	.word	0xd6990624
 8010c4c:	f40e3585 	.word	0xf40e3585
 8010c50:	106aa070 	.word	0x106aa070
 8010c54:	19a4c116 	.word	0x19a4c116
 8010c58:	9201      	str	r2, [sp, #4]
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	4623      	mov	r3, r4
 8010c5e:	683a      	ldr	r2, [r7, #0]
 8010c60:	6879      	ldr	r1, [r7, #4]
 8010c62:	4630      	mov	r0, r6
 8010c64:	f7fe fbcf 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( H, A, B, &C, D, E, F, &G, B5_SHA256_R(49), 0x1E376C08 );
 8010c68:	693e      	ldr	r6, [r7, #16]
 8010c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6c:	607b      	str	r3, [r7, #4]
 8010c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c70:	603a      	str	r2, [r7, #0]
 8010c72:	6a3b      	ldr	r3, [r7, #32]
 8010c74:	69fa      	ldr	r2, [r7, #28]
 8010c76:	69b9      	ldr	r1, [r7, #24]
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 8010c7e:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010c82:	68f8      	ldr	r0, [r7, #12]
 8010c84:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 8010c88:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010c8c:	4044      	eors	r4, r0
 8010c8e:	68f8      	ldr	r0, [r7, #12]
 8010c90:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 8010c94:	0a80      	lsrs	r0, r0, #10
 8010c96:	4044      	eors	r4, r0
 8010c98:	68f8      	ldr	r0, [r7, #12]
 8010c9a:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8010c9e:	4404      	add	r4, r0
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8010ca6:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010caa:	68f8      	ldr	r0, [r7, #12]
 8010cac:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8010cb0:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010cb4:	4045      	eors	r5, r0
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8010cbc:	08c0      	lsrs	r0, r0, #3
 8010cbe:	4068      	eors	r0, r5
 8010cc0:	4404      	add	r4, r0
 8010cc2:	68f8      	ldr	r0, [r7, #12]
 8010cc4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010cc8:	4404      	add	r4, r0
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f8c0 412c 	str.w	r4, [r0, #300]	; 0x12c
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8010cd6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8010cda:	4db8      	ldr	r5, [pc, #736]	; (8010fbc <B5_Sha256ProcessBlock+0x1b24>)
 8010cdc:	9505      	str	r5, [sp, #20]
 8010cde:	9004      	str	r0, [sp, #16]
 8010ce0:	f107 0014 	add.w	r0, r7, #20
 8010ce4:	9003      	str	r0, [sp, #12]
 8010ce6:	9102      	str	r1, [sp, #8]
 8010ce8:	9201      	str	r2, [sp, #4]
 8010cea:	9300      	str	r3, [sp, #0]
 8010cec:	4623      	mov	r3, r4
 8010cee:	683a      	ldr	r2, [r7, #0]
 8010cf0:	6879      	ldr	r1, [r7, #4]
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	f7fe fb87 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( G, H, A, &B, C, D, E, &F, B5_SHA256_R(50), 0x2748774C );
 8010cf8:	697e      	ldr	r6, [r7, #20]
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	607b      	str	r3, [r7, #4]
 8010cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d00:	603a      	str	r2, [r7, #0]
 8010d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d04:	6a3a      	ldr	r2, [r7, #32]
 8010d06:	69f9      	ldr	r1, [r7, #28]
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 8010d0e:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010d12:	68f8      	ldr	r0, [r7, #12]
 8010d14:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 8010d18:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010d1c:	4044      	eors	r4, r0
 8010d1e:	68f8      	ldr	r0, [r7, #12]
 8010d20:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 8010d24:	0a80      	lsrs	r0, r0, #10
 8010d26:	4044      	eors	r4, r0
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8010d2e:	4404      	add	r4, r0
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010d36:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010d3a:	68f8      	ldr	r0, [r7, #12]
 8010d3c:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010d40:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010d44:	4045      	eors	r5, r0
 8010d46:	68f8      	ldr	r0, [r7, #12]
 8010d48:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010d4c:	08c0      	lsrs	r0, r0, #3
 8010d4e:	4068      	eors	r0, r5
 8010d50:	4404      	add	r4, r0
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8010d58:	4404      	add	r4, r0
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f8c0 4130 	str.w	r4, [r0, #304]	; 0x130
 8010d60:	68f8      	ldr	r0, [r7, #12]
 8010d62:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8010d66:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010d6a:	4d95      	ldr	r5, [pc, #596]	; (8010fc0 <B5_Sha256ProcessBlock+0x1b28>)
 8010d6c:	9505      	str	r5, [sp, #20]
 8010d6e:	9004      	str	r0, [sp, #16]
 8010d70:	f107 0018 	add.w	r0, r7, #24
 8010d74:	9003      	str	r0, [sp, #12]
 8010d76:	9102      	str	r1, [sp, #8]
 8010d78:	9201      	str	r2, [sp, #4]
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	4623      	mov	r3, r4
 8010d7e:	683a      	ldr	r2, [r7, #0]
 8010d80:	6879      	ldr	r1, [r7, #4]
 8010d82:	4630      	mov	r0, r6
 8010d84:	f7fe fb3f 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( F, G, H, &A, B, C, D, &E, B5_SHA256_R(51), 0x34B0BCB5 );
 8010d88:	69be      	ldr	r6, [r7, #24]
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	607b      	str	r3, [r7, #4]
 8010d8e:	693a      	ldr	r2, [r7, #16]
 8010d90:	603a      	str	r2, [r7, #0]
 8010d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d96:	6a39      	ldr	r1, [r7, #32]
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8010d9e:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010da2:	68f8      	ldr	r0, [r7, #12]
 8010da4:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8010da8:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010dac:	4044      	eors	r4, r0
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8010db4:	0a80      	lsrs	r0, r0, #10
 8010db6:	4044      	eors	r4, r0
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8010dbe:	4404      	add	r4, r0
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010dc6:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010dd0:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010dd4:	4045      	eors	r5, r0
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010ddc:	08c0      	lsrs	r0, r0, #3
 8010dde:	4068      	eors	r0, r5
 8010de0:	4404      	add	r4, r0
 8010de2:	68f8      	ldr	r0, [r7, #12]
 8010de4:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010de8:	4404      	add	r4, r0
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8010df6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8010dfa:	4d72      	ldr	r5, [pc, #456]	; (8010fc4 <B5_Sha256ProcessBlock+0x1b2c>)
 8010dfc:	9505      	str	r5, [sp, #20]
 8010dfe:	9004      	str	r0, [sp, #16]
 8010e00:	f107 001c 	add.w	r0, r7, #28
 8010e04:	9003      	str	r0, [sp, #12]
 8010e06:	9102      	str	r1, [sp, #8]
 8010e08:	9201      	str	r2, [sp, #4]
 8010e0a:	9300      	str	r3, [sp, #0]
 8010e0c:	4623      	mov	r3, r4
 8010e0e:	683a      	ldr	r2, [r7, #0]
 8010e10:	6879      	ldr	r1, [r7, #4]
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7fe faf7 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( E, F, G, &H, A, B, C, &D, B5_SHA256_R(52), 0x391C0CB3 );
 8010e18:	69fe      	ldr	r6, [r7, #28]
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	607b      	str	r3, [r7, #4]
 8010e1e:	697a      	ldr	r2, [r7, #20]
 8010e20:	603a      	str	r2, [r7, #0]
 8010e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e28:	68f8      	ldr	r0, [r7, #12]
 8010e2a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8010e2e:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8010e38:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010e3c:	4044      	eors	r4, r0
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8010e44:	0a80      	lsrs	r0, r0, #10
 8010e46:	4044      	eors	r4, r0
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 8010e4e:	4404      	add	r4, r0
 8010e50:	68f8      	ldr	r0, [r7, #12]
 8010e52:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8010e56:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010e5a:	68f8      	ldr	r0, [r7, #12]
 8010e5c:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8010e60:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010e64:	4045      	eors	r5, r0
 8010e66:	68f8      	ldr	r0, [r7, #12]
 8010e68:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8010e6c:	08c0      	lsrs	r0, r0, #3
 8010e6e:	4068      	eors	r0, r5
 8010e70:	4404      	add	r4, r0
 8010e72:	68f8      	ldr	r0, [r7, #12]
 8010e74:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010e78:	4404      	add	r4, r0
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f8c0 4138 	str.w	r4, [r0, #312]	; 0x138
 8010e80:	68f8      	ldr	r0, [r7, #12]
 8010e82:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8010e86:	f107 0410 	add.w	r4, r7, #16
 8010e8a:	4d4f      	ldr	r5, [pc, #316]	; (8010fc8 <B5_Sha256ProcessBlock+0x1b30>)
 8010e8c:	9505      	str	r5, [sp, #20]
 8010e8e:	9004      	str	r0, [sp, #16]
 8010e90:	f107 0020 	add.w	r0, r7, #32
 8010e94:	9003      	str	r0, [sp, #12]
 8010e96:	9102      	str	r1, [sp, #8]
 8010e98:	9201      	str	r2, [sp, #4]
 8010e9a:	9300      	str	r3, [sp, #0]
 8010e9c:	4623      	mov	r3, r4
 8010e9e:	683a      	ldr	r2, [r7, #0]
 8010ea0:	6879      	ldr	r1, [r7, #4]
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	f7fe faaf 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( D, E, F, &G, H, A, B, &C, B5_SHA256_R(53), 0x4ED8AA4A );
 8010ea8:	6a3e      	ldr	r6, [r7, #32]
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	607b      	str	r3, [r7, #4]
 8010eae:	69ba      	ldr	r2, [r7, #24]
 8010eb0:	603a      	str	r2, [r7, #0]
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8010ebe:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8010ec8:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010ecc:	4044      	eors	r4, r0
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8010ed4:	0a80      	lsrs	r0, r0, #10
 8010ed6:	4044      	eors	r4, r0
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8010ede:	4404      	add	r4, r0
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8010ee6:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8010ef0:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010ef4:	4045      	eors	r5, r0
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8010efc:	08c0      	lsrs	r0, r0, #3
 8010efe:	4068      	eors	r0, r5
 8010f00:	4404      	add	r4, r0
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8010f08:	4404      	add	r4, r0
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	f8c0 413c 	str.w	r4, [r0, #316]	; 0x13c
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8010f16:	f107 0414 	add.w	r4, r7, #20
 8010f1a:	4d2c      	ldr	r5, [pc, #176]	; (8010fcc <B5_Sha256ProcessBlock+0x1b34>)
 8010f1c:	9505      	str	r5, [sp, #20]
 8010f1e:	9004      	str	r0, [sp, #16]
 8010f20:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010f24:	9003      	str	r0, [sp, #12]
 8010f26:	9102      	str	r1, [sp, #8]
 8010f28:	9201      	str	r2, [sp, #4]
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	4623      	mov	r3, r4
 8010f2e:	683a      	ldr	r2, [r7, #0]
 8010f30:	6879      	ldr	r1, [r7, #4]
 8010f32:	4630      	mov	r0, r6
 8010f34:	f7fe fa67 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( C, D, E, &F, G, H, A, &B, B5_SHA256_R(54), 0x5B9CCA4F );
 8010f38:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8010f3a:	6a3b      	ldr	r3, [r7, #32]
 8010f3c:	607b      	str	r3, [r7, #4]
 8010f3e:	69fa      	ldr	r2, [r7, #28]
 8010f40:	603a      	str	r2, [r7, #0]
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8010f4e:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8010f58:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8010f5c:	4044      	eors	r4, r0
 8010f5e:	68f8      	ldr	r0, [r7, #12]
 8010f60:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8010f64:	0a80      	lsrs	r0, r0, #10
 8010f66:	4044      	eors	r4, r0
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 8010f6e:	4404      	add	r4, r0
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 8010f76:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 8010f80:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8010f84:	4045      	eors	r5, r0
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 8010f8c:	08c0      	lsrs	r0, r0, #3
 8010f8e:	4068      	eors	r0, r5
 8010f90:	4404      	add	r4, r0
 8010f92:	68f8      	ldr	r0, [r7, #12]
 8010f94:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8010f98:	4404      	add	r4, r0
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
 8010fa0:	68f8      	ldr	r0, [r7, #12]
 8010fa2:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8010fa6:	f107 0418 	add.w	r4, r7, #24
 8010faa:	4d09      	ldr	r5, [pc, #36]	; (8010fd0 <B5_Sha256ProcessBlock+0x1b38>)
 8010fac:	9505      	str	r5, [sp, #20]
 8010fae:	9004      	str	r0, [sp, #16]
 8010fb0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010fb4:	9003      	str	r0, [sp, #12]
 8010fb6:	9102      	str	r1, [sp, #8]
 8010fb8:	e00c      	b.n	8010fd4 <B5_Sha256ProcessBlock+0x1b3c>
 8010fba:	bf00      	nop
 8010fbc:	1e376c08 	.word	0x1e376c08
 8010fc0:	2748774c 	.word	0x2748774c
 8010fc4:	34b0bcb5 	.word	0x34b0bcb5
 8010fc8:	391c0cb3 	.word	0x391c0cb3
 8010fcc:	4ed8aa4a 	.word	0x4ed8aa4a
 8010fd0:	5b9cca4f 	.word	0x5b9cca4f
 8010fd4:	9201      	str	r2, [sp, #4]
 8010fd6:	9300      	str	r3, [sp, #0]
 8010fd8:	4623      	mov	r3, r4
 8010fda:	683a      	ldr	r2, [r7, #0]
 8010fdc:	6879      	ldr	r1, [r7, #4]
 8010fde:	4630      	mov	r0, r6
 8010fe0:	f7fe fa11 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( B, C, D, &E, F, G, H, &A, B5_SHA256_R(55), 0x682E6FF3 );
 8010fe4:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe8:	607b      	str	r3, [r7, #4]
 8010fea:	6a3a      	ldr	r2, [r7, #32]
 8010fec:	603a      	str	r2, [r7, #0]
 8010fee:	69bb      	ldr	r3, [r7, #24]
 8010ff0:	697a      	ldr	r2, [r7, #20]
 8010ff2:	6939      	ldr	r1, [r7, #16]
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8010ffa:	ea4f 4470 	mov.w	r4, r0, ror #17
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8011004:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8011008:	4044      	eors	r4, r0
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8011010:	0a80      	lsrs	r0, r0, #10
 8011012:	4044      	eors	r4, r0
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 801101a:	4404      	add	r4, r0
 801101c:	68f8      	ldr	r0, [r7, #12]
 801101e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011022:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801102c:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8011030:	4045      	eors	r5, r0
 8011032:	68f8      	ldr	r0, [r7, #12]
 8011034:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011038:	08c0      	lsrs	r0, r0, #3
 801103a:	4068      	eors	r0, r5
 801103c:	4404      	add	r4, r0
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 8011044:	4404      	add	r4, r0
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8011052:	f107 041c 	add.w	r4, r7, #28
 8011056:	4db8      	ldr	r5, [pc, #736]	; (8011338 <B5_Sha256ProcessBlock+0x1ea0>)
 8011058:	9505      	str	r5, [sp, #20]
 801105a:	9004      	str	r0, [sp, #16]
 801105c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8011060:	9003      	str	r0, [sp, #12]
 8011062:	9102      	str	r1, [sp, #8]
 8011064:	9201      	str	r2, [sp, #4]
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	4623      	mov	r3, r4
 801106a:	683a      	ldr	r2, [r7, #0]
 801106c:	6879      	ldr	r1, [r7, #4]
 801106e:	4630      	mov	r0, r6
 8011070:	f7fe f9c9 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( A, B, C, &D, E, F, G, &H, B5_SHA256_R(56), 0x748F82EE );
 8011074:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8011076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011078:	607b      	str	r3, [r7, #4]
 801107a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801107c:	603a      	str	r2, [r7, #0]
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	69ba      	ldr	r2, [r7, #24]
 8011082:	6979      	ldr	r1, [r7, #20]
 8011084:	68f8      	ldr	r0, [r7, #12]
 8011086:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 801108a:	ea4f 4470 	mov.w	r4, r0, ror #17
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8011094:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8011098:	4044      	eors	r4, r0
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 80110a0:	0a80      	lsrs	r0, r0, #10
 80110a2:	4044      	eors	r4, r0
 80110a4:	68f8      	ldr	r0, [r7, #12]
 80110a6:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 80110aa:	4404      	add	r4, r0
 80110ac:	68f8      	ldr	r0, [r7, #12]
 80110ae:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 80110b2:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 80110bc:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80110c0:	4045      	eors	r5, r0
 80110c2:	68f8      	ldr	r0, [r7, #12]
 80110c4:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 80110c8:	08c0      	lsrs	r0, r0, #3
 80110ca:	4068      	eors	r0, r5
 80110cc:	4404      	add	r4, r0
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80110d4:	4404      	add	r4, r0
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80110e2:	f107 0420 	add.w	r4, r7, #32
 80110e6:	4d95      	ldr	r5, [pc, #596]	; (801133c <B5_Sha256ProcessBlock+0x1ea4>)
 80110e8:	9505      	str	r5, [sp, #20]
 80110ea:	9004      	str	r0, [sp, #16]
 80110ec:	f107 0010 	add.w	r0, r7, #16
 80110f0:	9003      	str	r0, [sp, #12]
 80110f2:	9102      	str	r1, [sp, #8]
 80110f4:	9201      	str	r2, [sp, #4]
 80110f6:	9300      	str	r3, [sp, #0]
 80110f8:	4623      	mov	r3, r4
 80110fa:	683a      	ldr	r2, [r7, #0]
 80110fc:	6879      	ldr	r1, [r7, #4]
 80110fe:	4630      	mov	r0, r6
 8011100:	f7fe f981 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( H, A, B, &C, D, E, F, &G, B5_SHA256_R(57), 0x78A5636F );
 8011104:	693e      	ldr	r6, [r7, #16]
 8011106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011108:	607b      	str	r3, [r7, #4]
 801110a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801110c:	603a      	str	r2, [r7, #0]
 801110e:	6a3b      	ldr	r3, [r7, #32]
 8011110:	69fa      	ldr	r2, [r7, #28]
 8011112:	69b9      	ldr	r1, [r7, #24]
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 801111a:	ea4f 4470 	mov.w	r4, r0, ror #17
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8011124:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8011128:	4044      	eors	r4, r0
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8011130:	0a80      	lsrs	r0, r0, #10
 8011132:	4044      	eors	r4, r0
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 801113a:	4404      	add	r4, r0
 801113c:	68f8      	ldr	r0, [r7, #12]
 801113e:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8011142:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 801114c:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8011150:	4045      	eors	r5, r0
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8011158:	08c0      	lsrs	r0, r0, #3
 801115a:	4068      	eors	r0, r5
 801115c:	4404      	add	r4, r0
 801115e:	68f8      	ldr	r0, [r7, #12]
 8011160:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
 8011164:	4404      	add	r4, r0
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8011172:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8011176:	4d72      	ldr	r5, [pc, #456]	; (8011340 <B5_Sha256ProcessBlock+0x1ea8>)
 8011178:	9505      	str	r5, [sp, #20]
 801117a:	9004      	str	r0, [sp, #16]
 801117c:	f107 0014 	add.w	r0, r7, #20
 8011180:	9003      	str	r0, [sp, #12]
 8011182:	9102      	str	r1, [sp, #8]
 8011184:	9201      	str	r2, [sp, #4]
 8011186:	9300      	str	r3, [sp, #0]
 8011188:	4623      	mov	r3, r4
 801118a:	683a      	ldr	r2, [r7, #0]
 801118c:	6879      	ldr	r1, [r7, #4]
 801118e:	4630      	mov	r0, r6
 8011190:	f7fe f939 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( G, H, A, &B, C, D, E, &F, B5_SHA256_R(58), 0x84C87814 );
 8011194:	697e      	ldr	r6, [r7, #20]
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	607b      	str	r3, [r7, #4]
 801119a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801119c:	603a      	str	r2, [r7, #0]
 801119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a0:	6a3a      	ldr	r2, [r7, #32]
 80111a2:	69f9      	ldr	r1, [r7, #28]
 80111a4:	68f8      	ldr	r0, [r7, #12]
 80111a6:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80111aa:	ea4f 4470 	mov.w	r4, r0, ror #17
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80111b4:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80111b8:	4044      	eors	r4, r0
 80111ba:	68f8      	ldr	r0, [r7, #12]
 80111bc:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80111c0:	0a80      	lsrs	r0, r0, #10
 80111c2:	4044      	eors	r4, r0
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 80111ca:	4404      	add	r4, r0
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 80111d2:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 80111dc:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80111e0:	4045      	eors	r5, r0
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 80111e8:	08c0      	lsrs	r0, r0, #3
 80111ea:	4068      	eors	r0, r5
 80111ec:	4404      	add	r4, r0
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 80111f4:	4404      	add	r4, r0
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f8c0 4150 	str.w	r4, [r0, #336]	; 0x150
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
 8011202:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8011206:	4d4f      	ldr	r5, [pc, #316]	; (8011344 <B5_Sha256ProcessBlock+0x1eac>)
 8011208:	9505      	str	r5, [sp, #20]
 801120a:	9004      	str	r0, [sp, #16]
 801120c:	f107 0018 	add.w	r0, r7, #24
 8011210:	9003      	str	r0, [sp, #12]
 8011212:	9102      	str	r1, [sp, #8]
 8011214:	9201      	str	r2, [sp, #4]
 8011216:	9300      	str	r3, [sp, #0]
 8011218:	4623      	mov	r3, r4
 801121a:	683a      	ldr	r2, [r7, #0]
 801121c:	6879      	ldr	r1, [r7, #4]
 801121e:	4630      	mov	r0, r6
 8011220:	f7fe f8f1 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( F, G, H, &A, B, C, D, &E, B5_SHA256_R(59), 0x8CC70208 );
 8011224:	69be      	ldr	r6, [r7, #24]
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	607b      	str	r3, [r7, #4]
 801122a:	693a      	ldr	r2, [r7, #16]
 801122c:	603a      	str	r2, [r7, #0]
 801122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011232:	6a39      	ldr	r1, [r7, #32]
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801123a:	ea4f 4470 	mov.w	r4, r0, ror #17
 801123e:	68f8      	ldr	r0, [r7, #12]
 8011240:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8011244:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8011248:	4044      	eors	r4, r0
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8011250:	0a80      	lsrs	r0, r0, #10
 8011252:	4044      	eors	r4, r0
 8011254:	68f8      	ldr	r0, [r7, #12]
 8011256:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 801125a:	4404      	add	r4, r0
 801125c:	68f8      	ldr	r0, [r7, #12]
 801125e:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8011262:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 801126c:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8011270:	4045      	eors	r5, r0
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8011278:	08c0      	lsrs	r0, r0, #3
 801127a:	4068      	eors	r0, r5
 801127c:	4404      	add	r4, r0
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8011284:	4404      	add	r4, r0
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f8c0 4154 	str.w	r4, [r0, #340]	; 0x154
 801128c:	68f8      	ldr	r0, [r7, #12]
 801128e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8011292:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8011296:	4d2c      	ldr	r5, [pc, #176]	; (8011348 <B5_Sha256ProcessBlock+0x1eb0>)
 8011298:	9505      	str	r5, [sp, #20]
 801129a:	9004      	str	r0, [sp, #16]
 801129c:	f107 001c 	add.w	r0, r7, #28
 80112a0:	9003      	str	r0, [sp, #12]
 80112a2:	9102      	str	r1, [sp, #8]
 80112a4:	9201      	str	r2, [sp, #4]
 80112a6:	9300      	str	r3, [sp, #0]
 80112a8:	4623      	mov	r3, r4
 80112aa:	683a      	ldr	r2, [r7, #0]
 80112ac:	6879      	ldr	r1, [r7, #4]
 80112ae:	4630      	mov	r0, r6
 80112b0:	f7fe f8a9 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( E, F, G, &H, A, B, C, &D, B5_SHA256_R(60), 0x90BEFFFA );
 80112b4:	69fe      	ldr	r6, [r7, #28]
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	607b      	str	r3, [r7, #4]
 80112ba:	697a      	ldr	r2, [r7, #20]
 80112bc:	603a      	str	r2, [r7, #0]
 80112be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
 80112ca:	ea4f 4470 	mov.w	r4, r0, ror #17
 80112ce:	68f8      	ldr	r0, [r7, #12]
 80112d0:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
 80112d4:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80112d8:	4044      	eors	r4, r0
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
 80112e0:	0a80      	lsrs	r0, r0, #10
 80112e2:	4044      	eors	r4, r0
 80112e4:	68f8      	ldr	r0, [r7, #12]
 80112e6:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80112ea:	4404      	add	r4, r0
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 80112f2:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80112f6:	68f8      	ldr	r0, [r7, #12]
 80112f8:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 80112fc:	ea4f 40b0 	mov.w	r0, r0, ror #18
 8011300:	4045      	eors	r5, r0
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 8011308:	08c0      	lsrs	r0, r0, #3
 801130a:	4068      	eors	r0, r5
 801130c:	4404      	add	r4, r0
 801130e:	68f8      	ldr	r0, [r7, #12]
 8011310:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8011314:	4404      	add	r4, r0
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	f8c0 4158 	str.w	r4, [r0, #344]	; 0x158
 801131c:	68f8      	ldr	r0, [r7, #12]
 801131e:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8011322:	f107 0410 	add.w	r4, r7, #16
 8011326:	4d09      	ldr	r5, [pc, #36]	; (801134c <B5_Sha256ProcessBlock+0x1eb4>)
 8011328:	9505      	str	r5, [sp, #20]
 801132a:	9004      	str	r0, [sp, #16]
 801132c:	f107 0020 	add.w	r0, r7, #32
 8011330:	9003      	str	r0, [sp, #12]
 8011332:	9102      	str	r1, [sp, #8]
 8011334:	e00c      	b.n	8011350 <B5_Sha256ProcessBlock+0x1eb8>
 8011336:	bf00      	nop
 8011338:	682e6ff3 	.word	0x682e6ff3
 801133c:	748f82ee 	.word	0x748f82ee
 8011340:	78a5636f 	.word	0x78a5636f
 8011344:	84c87814 	.word	0x84c87814
 8011348:	8cc70208 	.word	0x8cc70208
 801134c:	90befffa 	.word	0x90befffa
 8011350:	9201      	str	r2, [sp, #4]
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	4623      	mov	r3, r4
 8011356:	683a      	ldr	r2, [r7, #0]
 8011358:	6879      	ldr	r1, [r7, #4]
 801135a:	4630      	mov	r0, r6
 801135c:	f7fe f853 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( D, E, F, &G, H, A, B, &C, B5_SHA256_R(61), 0xA4506CEB );
 8011360:	6a3e      	ldr	r6, [r7, #32]
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	607b      	str	r3, [r7, #4]
 8011366:	69ba      	ldr	r2, [r7, #24]
 8011368:	603a      	str	r2, [r7, #0]
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801136e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8011376:	ea4f 4470 	mov.w	r4, r0, ror #17
 801137a:	68f8      	ldr	r0, [r7, #12]
 801137c:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8011380:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8011384:	4044      	eors	r4, r0
 8011386:	68f8      	ldr	r0, [r7, #12]
 8011388:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 801138c:	0a80      	lsrs	r0, r0, #10
 801138e:	4044      	eors	r4, r0
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8011396:	4404      	add	r4, r0
 8011398:	68f8      	ldr	r0, [r7, #12]
 801139a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 801139e:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80113a2:	68f8      	ldr	r0, [r7, #12]
 80113a4:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 80113a8:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80113ac:	4045      	eors	r5, r0
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 80113b4:	08c0      	lsrs	r0, r0, #3
 80113b6:	4068      	eors	r0, r5
 80113b8:	4404      	add	r4, r0
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 80113c0:	4404      	add	r4, r0
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f8c0 415c 	str.w	r4, [r0, #348]	; 0x15c
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 80113ce:	f107 0414 	add.w	r4, r7, #20
 80113d2:	4d69      	ldr	r5, [pc, #420]	; (8011578 <B5_Sha256ProcessBlock+0x20e0>)
 80113d4:	9505      	str	r5, [sp, #20]
 80113d6:	9004      	str	r0, [sp, #16]
 80113d8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80113dc:	9003      	str	r0, [sp, #12]
 80113de:	9102      	str	r1, [sp, #8]
 80113e0:	9201      	str	r2, [sp, #4]
 80113e2:	9300      	str	r3, [sp, #0]
 80113e4:	4623      	mov	r3, r4
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	6879      	ldr	r1, [r7, #4]
 80113ea:	4630      	mov	r0, r6
 80113ec:	f7fe f80b 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( C, D, E, &F, G, H, A, &B, B5_SHA256_R(62), 0xBEF9A3F7 );
 80113f0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80113f2:	6a3b      	ldr	r3, [r7, #32]
 80113f4:	607b      	str	r3, [r7, #4]
 80113f6:	69fa      	ldr	r2, [r7, #28]
 80113f8:	603a      	str	r2, [r7, #0]
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	693a      	ldr	r2, [r7, #16]
 80113fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011400:	68f8      	ldr	r0, [r7, #12]
 8011402:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8011406:	ea4f 4470 	mov.w	r4, r0, ror #17
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8011410:	ea4f 40f0 	mov.w	r0, r0, ror #19
 8011414:	4044      	eors	r4, r0
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 801141c:	0a80      	lsrs	r0, r0, #10
 801141e:	4044      	eors	r4, r0
 8011420:	68f8      	ldr	r0, [r7, #12]
 8011422:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8011426:	4404      	add	r4, r0
 8011428:	68f8      	ldr	r0, [r7, #12]
 801142a:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 801142e:	ea4f 15f0 	mov.w	r5, r0, ror #7
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 8011438:	ea4f 40b0 	mov.w	r0, r0, ror #18
 801143c:	4045      	eors	r5, r0
 801143e:	68f8      	ldr	r0, [r7, #12]
 8011440:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 8011444:	08c0      	lsrs	r0, r0, #3
 8011446:	4068      	eors	r0, r5
 8011448:	4404      	add	r4, r0
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8011450:	4404      	add	r4, r0
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f8c0 4160 	str.w	r4, [r0, #352]	; 0x160
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
 801145e:	f107 0418 	add.w	r4, r7, #24
 8011462:	4d46      	ldr	r5, [pc, #280]	; (801157c <B5_Sha256ProcessBlock+0x20e4>)
 8011464:	9505      	str	r5, [sp, #20]
 8011466:	9004      	str	r0, [sp, #16]
 8011468:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801146c:	9003      	str	r0, [sp, #12]
 801146e:	9102      	str	r1, [sp, #8]
 8011470:	9201      	str	r2, [sp, #4]
 8011472:	9300      	str	r3, [sp, #0]
 8011474:	4623      	mov	r3, r4
 8011476:	683a      	ldr	r2, [r7, #0]
 8011478:	6879      	ldr	r1, [r7, #4]
 801147a:	4630      	mov	r0, r6
 801147c:	f7fd ffc3 	bl	800f406 <B5_SHA256_P>
    B5_SHA256_P( B, C, D, &E, F, G, H, &A, B5_SHA256_R(63), 0xC67178F2 );
 8011480:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8011482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011484:	607b      	str	r3, [r7, #4]
 8011486:	6a3a      	ldr	r2, [r7, #32]
 8011488:	603a      	str	r2, [r7, #0]
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	697a      	ldr	r2, [r7, #20]
 801148e:	6939      	ldr	r1, [r7, #16]
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 8011496:	ea4f 4470 	mov.w	r4, r0, ror #17
 801149a:	68f8      	ldr	r0, [r7, #12]
 801149c:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 80114a0:	ea4f 40f0 	mov.w	r0, r0, ror #19
 80114a4:	4044      	eors	r4, r0
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 80114ac:	0a80      	lsrs	r0, r0, #10
 80114ae:	4044      	eors	r4, r0
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80114b6:	4404      	add	r4, r0
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 80114be:	ea4f 15f0 	mov.w	r5, r0, ror #7
 80114c2:	68f8      	ldr	r0, [r7, #12]
 80114c4:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 80114c8:	ea4f 40b0 	mov.w	r0, r0, ror #18
 80114cc:	4045      	eors	r5, r0
 80114ce:	68f8      	ldr	r0, [r7, #12]
 80114d0:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 80114d4:	08c0      	lsrs	r0, r0, #3
 80114d6:	4068      	eors	r0, r5
 80114d8:	4404      	add	r4, r0
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 80114e0:	4404      	add	r4, r0
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f8c0 4164 	str.w	r4, [r0, #356]	; 0x164
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f8d0 0164 	ldr.w	r0, [r0, #356]	; 0x164
 80114ee:	f107 041c 	add.w	r4, r7, #28
 80114f2:	4d23      	ldr	r5, [pc, #140]	; (8011580 <B5_Sha256ProcessBlock+0x20e8>)
 80114f4:	9505      	str	r5, [sp, #20]
 80114f6:	9004      	str	r0, [sp, #16]
 80114f8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80114fc:	9003      	str	r0, [sp, #12]
 80114fe:	9102      	str	r1, [sp, #8]
 8011500:	9201      	str	r2, [sp, #4]
 8011502:	9300      	str	r3, [sp, #0]
 8011504:	4623      	mov	r3, r4
 8011506:	683a      	ldr	r2, [r7, #0]
 8011508:	6879      	ldr	r1, [r7, #4]
 801150a:	4630      	mov	r0, r6
 801150c:	f7fd ff7b 	bl	800f406 <B5_SHA256_P>

    ctx->state[0] += A;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	689a      	ldr	r2, [r3, #8]
 8011514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011516:	441a      	add	r2, r3
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	68da      	ldr	r2, [r3, #12]
 8011520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011522:	441a      	add	r2, r3
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	691a      	ldr	r2, [r3, #16]
 801152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152e:	441a      	add	r2, r3
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	695a      	ldr	r2, [r3, #20]
 8011538:	6a3b      	ldr	r3, [r7, #32]
 801153a:	441a      	add	r2, r3
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	615a      	str	r2, [r3, #20]
    ctx->state[4] += E;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	699a      	ldr	r2, [r3, #24]
 8011544:	69fb      	ldr	r3, [r7, #28]
 8011546:	441a      	add	r2, r3
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	619a      	str	r2, [r3, #24]
    ctx->state[5] += F;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	69da      	ldr	r2, [r3, #28]
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	441a      	add	r2, r3
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	61da      	str	r2, [r3, #28]
    ctx->state[6] += G;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	6a1a      	ldr	r2, [r3, #32]
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	441a      	add	r2, r3
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	621a      	str	r2, [r3, #32]
    ctx->state[7] += H;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	441a      	add	r2, r3
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011570:	bf00      	nop
 8011572:	3734      	adds	r7, #52	; 0x34
 8011574:	46bd      	mov	sp, r7
 8011576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011578:	a4506ceb 	.word	0xa4506ceb
 801157c:	bef9a3f7 	.word	0xbef9a3f7
 8011580:	c67178f2 	.word	0xc67178f2

08011584 <B5_Sha256_Init>:

int32_t B5_Sha256_Init (B5_tSha256Ctx *ctx)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
    
    if(ctx == NULL)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d102      	bne.n	8011598 <B5_Sha256_Init+0x14>
        return  B5_SHA256_RES_INVALID_CONTEXT;
 8011592:	f04f 33ff 	mov.w	r3, #4294967295
 8011596:	e024      	b.n	80115e2 <B5_Sha256_Init+0x5e>
    
    memset(ctx, 0, sizeof(B5_tSha256Ctx));
 8011598:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801159c:	2100      	movs	r1, #0
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f005 ff46 	bl	8017430 <memset>
        
   
    // Set initial hash value
    ctx->total[0] = 0;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2200      	movs	r2, #0
 80115a8:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2200      	movs	r2, #0
 80115ae:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x6A09E667;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	4a0e      	ldr	r2, [pc, #56]	; (80115ec <B5_Sha256_Init+0x68>)
 80115b4:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xBB67AE85;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4a0d      	ldr	r2, [pc, #52]	; (80115f0 <B5_Sha256_Init+0x6c>)
 80115ba:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x3C6EF372;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4a0d      	ldr	r2, [pc, #52]	; (80115f4 <B5_Sha256_Init+0x70>)
 80115c0:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0xA54FF53A;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4a0c      	ldr	r2, [pc, #48]	; (80115f8 <B5_Sha256_Init+0x74>)
 80115c6:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0x510E527F;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	4a0c      	ldr	r2, [pc, #48]	; (80115fc <B5_Sha256_Init+0x78>)
 80115cc:	619a      	str	r2, [r3, #24]
    ctx->state[5] = 0x9B05688C;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	4a0b      	ldr	r2, [pc, #44]	; (8011600 <B5_Sha256_Init+0x7c>)
 80115d2:	61da      	str	r2, [r3, #28]
    ctx->state[6] = 0x1F83D9AB;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	4a0b      	ldr	r2, [pc, #44]	; (8011604 <B5_Sha256_Init+0x80>)
 80115d8:	621a      	str	r2, [r3, #32]
    ctx->state[7] = 0x5BE0CD19;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4a0a      	ldr	r2, [pc, #40]	; (8011608 <B5_Sha256_Init+0x84>)
 80115de:	625a      	str	r2, [r3, #36]	; 0x24
    
   return B5_SHA256_RES_OK;
 80115e0:	2300      	movs	r3, #0
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3708      	adds	r7, #8
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	6a09e667 	.word	0x6a09e667
 80115f0:	bb67ae85 	.word	0xbb67ae85
 80115f4:	3c6ef372 	.word	0x3c6ef372
 80115f8:	a54ff53a 	.word	0xa54ff53a
 80115fc:	510e527f 	.word	0x510e527f
 8011600:	9b05688c 	.word	0x9b05688c
 8011604:	1f83d9ab 	.word	0x1f83d9ab
 8011608:	5be0cd19 	.word	0x5be0cd19

0801160c <B5_Sha256_Update>:

int32_t B5_Sha256_Update (B5_tSha256Ctx *ctx, const uint8_t* data, int32_t dataLen) 
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b086      	sub	sp, #24
 8011610:	af00      	add	r7, sp, #0
 8011612:	60f8      	str	r0, [r7, #12]
 8011614:	60b9      	str	r1, [r7, #8]
 8011616:	607a      	str	r2, [r7, #4]
    uint32_t left, fill;
    
    if(ctx == NULL)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d102      	bne.n	8011624 <B5_Sha256_Update+0x18>
        return  B5_SHA256_RES_INVALID_CONTEXT;
 801161e:	f04f 33ff 	mov.w	r3, #4294967295
 8011622:	e062      	b.n	80116ea <B5_Sha256_Update+0xde>
    
    if((data == NULL) || (dataLen < 0))
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d002      	beq.n	8011630 <B5_Sha256_Update+0x24>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2b00      	cmp	r3, #0
 801162e:	da02      	bge.n	8011636 <B5_Sha256_Update+0x2a>
        return B5_SHA256_RES_INVALID_ARGUMENT;
 8011630:	f06f 0302 	mvn.w	r3, #2
 8011634:	e059      	b.n	80116ea <B5_Sha256_Update+0xde>
        


    left = ctx->total[0] & 0x3F;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801163e:	617b      	str	r3, [r7, #20]
    fill = 64 - left;
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8011646:	613b      	str	r3, [r7, #16]

    ctx->total[0] += dataLen;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	441a      	add	r2, r3
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) dataLen )
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	429a      	cmp	r2, r3
 8011664:	d204      	bcs.n	8011670 <B5_Sha256_Update+0x64>
        ctx->total[1]++;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	1c5a      	adds	r2, r3, #1
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	605a      	str	r2, [r3, #4]

    if( left && ((uint32_t) dataLen >= fill) )
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d028      	beq.n	80116c8 <B5_Sha256_Update+0xbc>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	693a      	ldr	r2, [r7, #16]
 801167a:	429a      	cmp	r2, r3
 801167c:	d824      	bhi.n	80116c8 <B5_Sha256_Update+0xbc>
    {
        memcpy( (void *) (ctx->buffer + left),
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	4413      	add	r3, r2
 8011688:	693a      	ldr	r2, [r7, #16]
 801168a:	68b9      	ldr	r1, [r7, #8]
 801168c:	4618      	mov	r0, r3
 801168e:	f005 fea7 	bl	80173e0 <memcpy>
                (void *) data, fill );
        B5_Sha256ProcessBlock( ctx, ctx->buffer );
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	3328      	adds	r3, #40	; 0x28
 8011696:	4619      	mov	r1, r3
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f7fd fefd 	bl	800f498 <B5_Sha256ProcessBlock>
        dataLen -= fill;
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	607b      	str	r3, [r7, #4]
        data  += fill;
 80116a6:	68ba      	ldr	r2, [r7, #8]
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	4413      	add	r3, r2
 80116ac:	60bb      	str	r3, [r7, #8]
        left = 0;
 80116ae:	2300      	movs	r3, #0
 80116b0:	617b      	str	r3, [r7, #20]
    }

    while( dataLen >= 64 )
 80116b2:	e009      	b.n	80116c8 <B5_Sha256_Update+0xbc>
    {
        B5_Sha256ProcessBlock( ctx, data );
 80116b4:	68b9      	ldr	r1, [r7, #8]
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f7fd feee 	bl	800f498 <B5_Sha256ProcessBlock>
        dataLen -= 64;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	3b40      	subs	r3, #64	; 0x40
 80116c0:	607b      	str	r3, [r7, #4]
        data  += 64;
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	3340      	adds	r3, #64	; 0x40
 80116c6:	60bb      	str	r3, [r7, #8]
    while( dataLen >= 64 )
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b3f      	cmp	r3, #63	; 0x3f
 80116cc:	dcf2      	bgt.n	80116b4 <B5_Sha256_Update+0xa8>
    }

    if( dataLen )
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d009      	beq.n	80116e8 <B5_Sha256_Update+0xdc>
    {
        memcpy( (void *) (ctx->buffer + left),
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	4413      	add	r3, r2
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	68b9      	ldr	r1, [r7, #8]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f005 fe7c 	bl	80173e0 <memcpy>
                (void *) data, dataLen );
    }
    
    
   return B5_SHA256_RES_OK;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3718      	adds	r7, #24
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <B5_Sha256_Finit>:

int32_t B5_Sha256_Finit (B5_tSha256Ctx *ctx, uint8_t* rDigest)
{
 80116f2:	b580      	push	{r7, lr}
 80116f4:	b098      	sub	sp, #96	; 0x60
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	6039      	str	r1, [r7, #0]
    uint32_t   last, padn;
    uint32_t   high, low;
    uint8_t    msglen[8];
    
    
    if(ctx == NULL)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d102      	bne.n	8011708 <B5_Sha256_Finit+0x16>
        return B5_SHA256_RES_INVALID_CONTEXT;
 8011702:	f04f 33ff 	mov.w	r3, #4294967295
 8011706:	e07f      	b.n	8011808 <B5_Sha256_Finit+0x116>
    
    if(rDigest == NULL)
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d102      	bne.n	8011714 <B5_Sha256_Finit+0x22>
        return B5_SHA256_RES_INVALID_ARGUMENT;
 801170e:	f06f 0302 	mvn.w	r3, #2
 8011712:	e079      	b.n	8011808 <B5_Sha256_Finit+0x116>
    
   

    memset(sha2_padding,0x00,64);
 8011714:	f107 0310 	add.w	r3, r7, #16
 8011718:	2240      	movs	r2, #64	; 0x40
 801171a:	2100      	movs	r1, #0
 801171c:	4618      	mov	r0, r3
 801171e:	f005 fe87 	bl	8017430 <memset>
    sha2_padding[0] = 0x80;
 8011722:	2380      	movs	r3, #128	; 0x80
 8011724:	743b      	strb	r3, [r7, #16]


    high = ( ctx->total[0] >> 29 )
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8011732:	4313      	orrs	r3, r2
 8011734:	65fb      	str	r3, [r7, #92]	; 0x5c
    low  = ( ctx->total[0] <<  3 );
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	00db      	lsls	r3, r3, #3
 801173c:	65bb      	str	r3, [r7, #88]	; 0x58

    B5_SHA256_PUTUINT32( high, msglen, 0 );
 801173e:	f107 0308 	add.w	r3, r7, #8
 8011742:	2200      	movs	r2, #0
 8011744:	4619      	mov	r1, r3
 8011746:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011748:	f7fd fe33 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    B5_SHA256_PUTUINT32( low,  msglen, 4 );
 801174c:	f107 0308 	add.w	r3, r7, #8
 8011750:	2204      	movs	r2, #4
 8011752:	4619      	mov	r1, r3
 8011754:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011756:	f7fd fe2c 	bl	800f3b2 <B5_SHA256_PUTUINT32>

    last = ctx->total[0] & 0x3F;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011762:	657b      	str	r3, [r7, #84]	; 0x54
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8011764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011766:	2b37      	cmp	r3, #55	; 0x37
 8011768:	d803      	bhi.n	8011772 <B5_Sha256_Finit+0x80>
 801176a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801176c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011770:	e002      	b.n	8011778 <B5_Sha256_Finit+0x86>
 8011772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011774:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8011778:	653b      	str	r3, [r7, #80]	; 0x50

    B5_Sha256_Update(ctx, sha2_padding, padn );
 801177a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801177c:	f107 0310 	add.w	r3, r7, #16
 8011780:	4619      	mov	r1, r3
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f7ff ff42 	bl	801160c <B5_Sha256_Update>
    B5_Sha256_Update(ctx, msglen, 8 );
 8011788:	f107 0308 	add.w	r3, r7, #8
 801178c:	2208      	movs	r2, #8
 801178e:	4619      	mov	r1, r3
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f7ff ff3b 	bl	801160c <B5_Sha256_Update>
		

    B5_SHA256_PUTUINT32( ctx->state[0], rDigest,  0 );
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	2200      	movs	r2, #0
 801179c:	6839      	ldr	r1, [r7, #0]
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fd fe07 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    B5_SHA256_PUTUINT32( ctx->state[1], rDigest,  4 );
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	2204      	movs	r2, #4
 80117aa:	6839      	ldr	r1, [r7, #0]
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7fd fe00 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    B5_SHA256_PUTUINT32( ctx->state[2], rDigest,  8 );
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	691b      	ldr	r3, [r3, #16]
 80117b6:	2208      	movs	r2, #8
 80117b8:	6839      	ldr	r1, [r7, #0]
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7fd fdf9 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    B5_SHA256_PUTUINT32( ctx->state[3], rDigest, 12 );
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	695b      	ldr	r3, [r3, #20]
 80117c4:	220c      	movs	r2, #12
 80117c6:	6839      	ldr	r1, [r7, #0]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fd fdf2 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    B5_SHA256_PUTUINT32( ctx->state[4], rDigest, 16 );
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	699b      	ldr	r3, [r3, #24]
 80117d2:	2210      	movs	r2, #16
 80117d4:	6839      	ldr	r1, [r7, #0]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fd fdeb 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    B5_SHA256_PUTUINT32( ctx->state[5], rDigest, 20 );
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	69db      	ldr	r3, [r3, #28]
 80117e0:	2214      	movs	r2, #20
 80117e2:	6839      	ldr	r1, [r7, #0]
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fd fde4 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    B5_SHA256_PUTUINT32( ctx->state[6], rDigest, 24 );
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a1b      	ldr	r3, [r3, #32]
 80117ee:	2218      	movs	r2, #24
 80117f0:	6839      	ldr	r1, [r7, #0]
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fd fddd 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    B5_SHA256_PUTUINT32( ctx->state[7], rDigest, 28 );
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fc:	221c      	movs	r2, #28
 80117fe:	6839      	ldr	r1, [r7, #0]
 8011800:	4618      	mov	r0, r3
 8011802:	f7fd fdd6 	bl	800f3b2 <B5_SHA256_PUTUINT32>
    return B5_SHA256_RES_OK;
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	3760      	adds	r7, #96	; 0x60
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <B5_HmacSha256_Init>:

int32_t B5_HmacSha256_Init (B5_tHmacSha256Ctx *ctx, const uint8_t *Key, int16_t keySize)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b08e      	sub	sp, #56	; 0x38
 8011814:	af00      	add	r7, sp, #0
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	4613      	mov	r3, r2
 801181c:	80fb      	strh	r3, [r7, #6]
    int32_t   i;
    uint8_t    digest[B5_SHA256_DIGEST_SIZE];

    
    if(Key == NULL) 
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d102      	bne.n	801182a <B5_HmacSha256_Init+0x1a>
        return B5_HMAC_SHA256_RES_INVALID_ARGUMENT;
 8011824:	f06f 0302 	mvn.w	r3, #2
 8011828:	e074      	b.n	8011914 <B5_HmacSha256_Init+0x104>
    
    if(ctx == NULL)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d102      	bne.n	8011836 <B5_HmacSha256_Init+0x26>
        return  B5_HMAC_SHA256_RES_INVALID_CONTEXT;
 8011830:	f04f 33ff 	mov.w	r3, #4294967295
 8011834:	e06e      	b.n	8011914 <B5_HmacSha256_Init+0x104>
    
    memset(ctx, 0, sizeof(B5_tHmacSha256Ctx));
 8011836:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801183a:	2100      	movs	r1, #0
 801183c:	68f8      	ldr	r0, [r7, #12]
 801183e:	f005 fdf7 	bl	8017430 <memset>
    
    //The key is longer than the block size?
    if(keySize > B5_SHA256_BLOCK_SIZE)
 8011842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011846:	2b40      	cmp	r3, #64	; 0x40
 8011848:	dd16      	ble.n	8011878 <B5_HmacSha256_Init+0x68>
    {
        // Initialize the hash function context
        B5_Sha256_Init(&ctx->shaCtx);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	4618      	mov	r0, r3
 801184e:	f7ff fe99 	bl	8011584 <B5_Sha256_Init>
        // Digest the original key
        B5_Sha256_Update(&ctx->shaCtx, Key, keySize);
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011858:	68b9      	ldr	r1, [r7, #8]
 801185a:	4618      	mov	r0, r3
 801185c:	f7ff fed6 	bl	801160c <B5_Sha256_Update>
        // Finalize the message digest computation
        B5_Sha256_Finit(&ctx->shaCtx, digest);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	f107 0214 	add.w	r2, r7, #20
 8011866:	4611      	mov	r1, r2
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff ff42 	bl	80116f2 <B5_Sha256_Finit>
        
        Key = digest;
 801186e:	f107 0314 	add.w	r3, r7, #20
 8011872:	60bb      	str	r3, [r7, #8]
        keySize = B5_SHA256_DIGEST_SIZE;
 8011874:	2320      	movs	r3, #32
 8011876:	80fb      	strh	r3, [r7, #6]
    }
 
    
    memset( ctx->iPad, B5_HMAC_IPAD, 64 );
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801187e:	2240      	movs	r2, #64	; 0x40
 8011880:	2136      	movs	r1, #54	; 0x36
 8011882:	4618      	mov	r0, r3
 8011884:	f005 fdd4 	bl	8017430 <memset>
    memset( ctx->oPad, B5_HMAC_OPAD, 64 );
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801188e:	2240      	movs	r2, #64	; 0x40
 8011890:	215c      	movs	r1, #92	; 0x5c
 8011892:	4618      	mov	r0, r3
 8011894:	f005 fdcc 	bl	8017430 <memset>
    
    
    for( i = 0; i < keySize; i++ )
 8011898:	2300      	movs	r3, #0
 801189a:	637b      	str	r3, [r7, #52]	; 0x34
 801189c:	e028      	b.n	80118f0 <B5_HmacSha256_Init+0xe0>
    {
        ctx->iPad[i] = (unsigned char)( ctx->iPad[i] ^ Key[i] );
 801189e:	68fa      	ldr	r2, [r7, #12]
 80118a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a2:	4413      	add	r3, r2
 80118a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80118a8:	781a      	ldrb	r2, [r3, #0]
 80118aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ac:	68b9      	ldr	r1, [r7, #8]
 80118ae:	440b      	add	r3, r1
 80118b0:	781b      	ldrb	r3, [r3, #0]
 80118b2:	4053      	eors	r3, r2
 80118b4:	b2d9      	uxtb	r1, r3
 80118b6:	68fa      	ldr	r2, [r7, #12]
 80118b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ba:	4413      	add	r3, r2
 80118bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80118c0:	460a      	mov	r2, r1
 80118c2:	701a      	strb	r2, [r3, #0]
        ctx->oPad[i] = (unsigned char)( ctx->oPad[i] ^ Key[i] );
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118c8:	4413      	add	r3, r2
 80118ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80118ce:	781a      	ldrb	r2, [r3, #0]
 80118d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d2:	68b9      	ldr	r1, [r7, #8]
 80118d4:	440b      	add	r3, r1
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	4053      	eors	r3, r2
 80118da:	b2d9      	uxtb	r1, r3
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e0:	4413      	add	r3, r2
 80118e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80118e6:	460a      	mov	r2, r1
 80118e8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keySize; i++ )
 80118ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ec:	3301      	adds	r3, #1
 80118ee:	637b      	str	r3, [r7, #52]	; 0x34
 80118f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80118f6:	429a      	cmp	r2, r3
 80118f8:	dbd1      	blt.n	801189e <B5_HmacSha256_Init+0x8e>
    }
    
    
    // Initialize context for the first pass
		B5_Sha256_Init(&ctx->shaCtx);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7ff fe41 	bl	8011584 <B5_Sha256_Init>
    
    // Start with the inner pad
    B5_Sha256_Update(&ctx->shaCtx, ctx->iPad, B5_SHA256_BLOCK_SIZE);    
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801190a:	2240      	movs	r2, #64	; 0x40
 801190c:	4619      	mov	r1, r3
 801190e:	f7ff fe7d 	bl	801160c <B5_Sha256_Update>
    
    return B5_HMAC_SHA256_RES_OK;
 8011912:	2300      	movs	r3, #0
}
 8011914:	4618      	mov	r0, r3
 8011916:	3738      	adds	r7, #56	; 0x38
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <B5_HmacSha256_Update>:

int32_t B5_HmacSha256_Update (B5_tHmacSha256Ctx *ctx, const uint8_t *data, int32_t dataLen)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]
    if(ctx == NULL){
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d102      	bne.n	8011934 <B5_HmacSha256_Update+0x18>
        return  B5_HMAC_SHA256_RES_INVALID_CONTEXT;
 801192e:	f04f 33ff 	mov.w	r3, #4294967295
 8011932:	e014      	b.n	801195e <B5_HmacSha256_Update+0x42>
    }
    
    
    if((data == NULL) || (dataLen < 0)){
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d002      	beq.n	8011940 <B5_HmacSha256_Update+0x24>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2b00      	cmp	r3, #0
 801193e:	da02      	bge.n	8011946 <B5_HmacSha256_Update+0x2a>
        return B5_HMAC_SHA256_RES_INVALID_ARGUMENT;
 8011940:	f06f 0302 	mvn.w	r3, #2
 8011944:	e00b      	b.n	801195e <B5_HmacSha256_Update+0x42>
    }
    
    
    if(dataLen == 0)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d101      	bne.n	8011950 <B5_HmacSha256_Update+0x34>
        return B5_HMAC_SHA256_RES_OK;
 801194c:	2300      	movs	r3, #0
 801194e:	e006      	b.n	801195e <B5_HmacSha256_Update+0x42>
    
    
    // Digest the message (first pass)
    B5_Sha256_Update(&ctx->shaCtx, data, dataLen);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	68b9      	ldr	r1, [r7, #8]
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff fe58 	bl	801160c <B5_Sha256_Update>
    
    return B5_HMAC_SHA256_RES_OK;
 801195c:	2300      	movs	r3, #0
}
 801195e:	4618      	mov	r0, r3
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}

08011966 <B5_HmacSha256_Finit>:

int32_t B5_HmacSha256_Finit (B5_tHmacSha256Ctx *ctx, uint8_t *rDigest)
{
 8011966:	b580      	push	{r7, lr}
 8011968:	b08a      	sub	sp, #40	; 0x28
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
 801196e:	6039      	str	r1, [r7, #0]
    uint8_t    digest[B5_SHA256_DIGEST_SIZE];

    if(ctx == NULL)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d102      	bne.n	801197c <B5_HmacSha256_Finit+0x16>
        return  B5_HMAC_SHA256_RES_INVALID_CONTEXT;
 8011976:	f04f 33ff 	mov.w	r3, #4294967295
 801197a:	e025      	b.n	80119c8 <B5_HmacSha256_Finit+0x62>
    
    if(rDigest == NULL)
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d102      	bne.n	8011988 <B5_HmacSha256_Finit+0x22>
        return B5_HMAC_SHA256_RES_INVALID_ARGUMENT;
 8011982:	f06f 0302 	mvn.w	r3, #2
 8011986:	e01f      	b.n	80119c8 <B5_HmacSha256_Finit+0x62>
    
    
    // Finish the first pass
		B5_Sha256_Finit(&ctx->shaCtx, digest);    
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f107 0208 	add.w	r2, r7, #8
 801198e:	4611      	mov	r1, r2
 8011990:	4618      	mov	r0, r3
 8011992:	f7ff feae 	bl	80116f2 <B5_Sha256_Finit>
    
    // Initialize context for the second pass
		B5_Sha256_Init(&ctx->shaCtx);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	4618      	mov	r0, r3
 801199a:	f7ff fdf3 	bl	8011584 <B5_Sha256_Init>
    // Start with outer pad
    B5_Sha256_Update(&ctx->shaCtx, ctx->oPad, B5_SHA256_BLOCK_SIZE);
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80119a6:	2240      	movs	r2, #64	; 0x40
 80119a8:	4619      	mov	r1, r3
 80119aa:	f7ff fe2f 	bl	801160c <B5_Sha256_Update>
    // Then digest the result of the first hash
    B5_Sha256_Update(&ctx->shaCtx, digest, B5_SHA256_DIGEST_SIZE);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f107 0108 	add.w	r1, r7, #8
 80119b4:	2220      	movs	r2, #32
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7ff fe28 	bl	801160c <B5_Sha256_Update>
    // Finish the second pass
    B5_Sha256_Finit(&ctx->shaCtx, rDigest);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6839      	ldr	r1, [r7, #0]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff fe96 	bl	80116f2 <B5_Sha256_Finit>
    return B5_HMAC_SHA256_RES_OK;
 80119c6:	2300      	movs	r3, #0
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3728      	adds	r7, #40	; 0x28
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <readPort>:




uint8_t readPort()
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
	uint8_t ucRet = 0;
 80119d6:	2300      	movs	r3, #0
 80119d8:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET)
 80119da:	2104      	movs	r1, #4
 80119dc:	4807      	ldr	r0, [pc, #28]	; (80119fc <readPort+0x2c>)
 80119de:	f7ef ff9d 	bl	800191c <HAL_GPIO_ReadPin>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d102      	bne.n	80119ee <readPort+0x1e>
			ucRet = 0x01;
 80119e8:	2301      	movs	r3, #1
 80119ea:	71fb      	strb	r3, [r7, #7]
 80119ec:	e001      	b.n	80119f2 <readPort+0x22>
	else
			ucRet = 0x00;
 80119ee:	2300      	movs	r3, #0
 80119f0:	71fb      	strb	r3, [r7, #7]


	return ( ucRet );
 80119f2:	79fb      	ldrb	r3, [r7, #7]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3708      	adds	r7, #8
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	40021000 	.word	0x40021000

08011a00 <writePort>:


void writePort( uint8_t a_ucPins, uint8_t a_ucValue )
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	4603      	mov	r3, r0
 8011a08:	460a      	mov	r2, r1
 8011a0a:	71fb      	strb	r3, [r7, #7]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	71bb      	strb	r3, [r7, #6]

	if(a_ucValue)
 8011a10:	79bb      	ldrb	r3, [r7, #6]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d01a      	beq.n	8011a4c <writePort+0x4c>
	{
		if(a_ucPins == pinTDI)
 8011a16:	79fb      	ldrb	r3, [r7, #7]
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d105      	bne.n	8011a28 <writePort+0x28>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	2108      	movs	r1, #8
 8011a20:	4819      	ldr	r0, [pc, #100]	; (8011a88 <writePort+0x88>)
 8011a22:	f7ef ff93 	bl	800194c <HAL_GPIO_WritePin>
		else if(a_ucPins == pinTCK)
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
		else if(a_ucPins == pinTMS)
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 8011a26:	e02b      	b.n	8011a80 <writePort+0x80>
		else if(a_ucPins == pinTCK)
 8011a28:	79fb      	ldrb	r3, [r7, #7]
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d105      	bne.n	8011a3a <writePort+0x3a>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8011a2e:	2201      	movs	r2, #1
 8011a30:	2110      	movs	r1, #16
 8011a32:	4815      	ldr	r0, [pc, #84]	; (8011a88 <writePort+0x88>)
 8011a34:	f7ef ff8a 	bl	800194c <HAL_GPIO_WritePin>
}
 8011a38:	e022      	b.n	8011a80 <writePort+0x80>
		else if(a_ucPins == pinTMS)
 8011a3a:	79fb      	ldrb	r3, [r7, #7]
 8011a3c:	2b04      	cmp	r3, #4
 8011a3e:	d11f      	bne.n	8011a80 <writePort+0x80>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8011a40:	2201      	movs	r2, #1
 8011a42:	2120      	movs	r1, #32
 8011a44:	4810      	ldr	r0, [pc, #64]	; (8011a88 <writePort+0x88>)
 8011a46:	f7ef ff81 	bl	800194c <HAL_GPIO_WritePin>
}
 8011a4a:	e019      	b.n	8011a80 <writePort+0x80>
		if(a_ucPins == pinTDI)
 8011a4c:	79fb      	ldrb	r3, [r7, #7]
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d105      	bne.n	8011a5e <writePort+0x5e>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8011a52:	2200      	movs	r2, #0
 8011a54:	2108      	movs	r1, #8
 8011a56:	480c      	ldr	r0, [pc, #48]	; (8011a88 <writePort+0x88>)
 8011a58:	f7ef ff78 	bl	800194c <HAL_GPIO_WritePin>
}
 8011a5c:	e010      	b.n	8011a80 <writePort+0x80>
		else if(a_ucPins == pinTCK)
 8011a5e:	79fb      	ldrb	r3, [r7, #7]
 8011a60:	2b02      	cmp	r3, #2
 8011a62:	d105      	bne.n	8011a70 <writePort+0x70>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8011a64:	2200      	movs	r2, #0
 8011a66:	2110      	movs	r1, #16
 8011a68:	4807      	ldr	r0, [pc, #28]	; (8011a88 <writePort+0x88>)
 8011a6a:	f7ef ff6f 	bl	800194c <HAL_GPIO_WritePin>
}
 8011a6e:	e007      	b.n	8011a80 <writePort+0x80>
		else if(a_ucPins == pinTMS)
 8011a70:	79fb      	ldrb	r3, [r7, #7]
 8011a72:	2b04      	cmp	r3, #4
 8011a74:	d104      	bne.n	8011a80 <writePort+0x80>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8011a76:	2200      	movs	r2, #0
 8011a78:	2120      	movs	r1, #32
 8011a7a:	4803      	ldr	r0, [pc, #12]	; (8011a88 <writePort+0x88>)
 8011a7c:	f7ef ff66 	bl	800194c <HAL_GPIO_WritePin>
}
 8011a80:	bf00      	nop
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	40021000 	.word	0x40021000

08011a8c <ispVMDelay>:



void ispVMDelay( uint32_t a_msecDelay )
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
	uint32_t start = HAL_GetTick();
 8011a94:	f7ee fbf6 	bl	8000284 <HAL_GetTick>
 8011a98:	60f8      	str	r0, [r7, #12]

	while ((HAL_GetTick() - start) <= a_msecDelay){
 8011a9a:	bf00      	nop
 8011a9c:	f7ee fbf2 	bl	8000284 <HAL_GetTick>
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	1ad3      	subs	r3, r2, r3
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	d2f7      	bcs.n	8011a9c <ispVMDelay+0x10>

	}
}
 8011aac:	bf00      	nop
 8011aae:	bf00      	nop
 8011ab0:	3710      	adds	r7, #16
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}

08011ab6 <EnableHardware>:




void EnableHardware()
{
 8011ab6:	b580      	push	{r7, lr}
 8011ab8:	af00      	add	r7, sp, #0
	ispVMStateMachine(RESET);
 8011aba:	2000      	movs	r0, #0
 8011abc:	f000 feca 	bl	8012854 <ispVMStateMachine>
}
 8011ac0:	bf00      	nop
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <DisableHardware>:




void DisableHardware()
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	af00      	add	r7, sp, #0
	ispVMStateMachine(RESET);
 8011ac8:	2000      	movs	r0, #0
 8011aca:	f000 fec3 	bl	8012854 <ispVMStateMachine>
}
 8011ace:	bf00      	nop
 8011ad0:	bd80      	pop	{r7, pc}
	...

08011ad4 <ispProcessVME>:
*     appropriate functions to process them.                 *
*                                                            *
*************************************************************/

int16_t ispProcessVME()
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af00      	add	r7, sp, #0
	uint8_t ucOpcode        = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	72fb      	strb	r3, [r7, #11]
	uint8_t ucState         = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	72bb      	strb	r3, [r7, #10]
	int16_t siRetCode           = 0;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	82fb      	strh	r3, [r7, #22]
	static char cProgram          = 0;
	uint32_t uiDataSize       = 0;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	613b      	str	r3, [r7, #16]
	int32_t iLoopCount                = 0;
 8011aea:	2300      	movs	r3, #0
 8011aec:	60fb      	str	r3, [r7, #12]
	uint32_t iMovingAlgoIndex = 0;
 8011aee:	2300      	movs	r3, #0
 8011af0:	607b      	str	r3, [r7, #4]
	*                                                            *
	* Begin processing the vme algorithm and data files.         *
	*                                                            *
	*************************************************************/

	while ((ucOpcode = GetByte(g_iMovingAlgoIndex++, 1)) != 0xFF)
 8011af2:	e2ed      	b.n	80120d0 <ispProcessVME+0x5fc>
		* This switch statement is the main switch that represents   *
		* the core of the embedded processor.                        *
		*                                                            *
		*************************************************************/

		switch (ucOpcode)
 8011af4:	7afb      	ldrb	r3, [r7, #11]
 8011af6:	3b02      	subs	r3, #2
 8011af8:	2b9f      	cmp	r3, #159	; 0x9f
 8011afa:	f200 82d8 	bhi.w	80120ae <ispProcessVME+0x5da>
 8011afe:	a201      	add	r2, pc, #4	; (adr r2, 8011b04 <ispProcessVME+0x30>)
 8011b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b04:	08011dcb 	.word	0x08011dcb
 8011b08:	08011de7 	.word	0x08011de7
 8011b0c:	080120af 	.word	0x080120af
 8011b10:	080120af 	.word	0x080120af
 8011b14:	08011e03 	.word	0x08011e03
 8011b18:	08011e11 	.word	0x08011e11
 8011b1c:	08011e1f 	.word	0x08011e1f
 8011b20:	08011e2d 	.word	0x08011e2d
 8011b24:	080120af 	.word	0x080120af
 8011b28:	080120af 	.word	0x080120af
 8011b2c:	080120af 	.word	0x080120af
 8011b30:	080120af 	.word	0x080120af
 8011b34:	080120af 	.word	0x080120af
 8011b38:	080120af 	.word	0x080120af
 8011b3c:	08011d85 	.word	0x08011d85
 8011b40:	08011da1 	.word	0x08011da1
 8011b44:	08011da1 	.word	0x08011da1
 8011b48:	080120af 	.word	0x080120af
 8011b4c:	080120af 	.word	0x080120af
 8011b50:	080120af 	.word	0x080120af
 8011b54:	080120af 	.word	0x080120af
 8011b58:	080120af 	.word	0x080120af
 8011b5c:	080120af 	.word	0x080120af
 8011b60:	080120af 	.word	0x080120af
 8011b64:	08011dbd 	.word	0x08011dbd
 8011b68:	08011daf 	.word	0x08011daf
 8011b6c:	08011ff1 	.word	0x08011ff1
 8011b70:	080120af 	.word	0x080120af
 8011b74:	080120af 	.word	0x080120af
 8011b78:	080120af 	.word	0x080120af
 8011b7c:	08012079 	.word	0x08012079
 8011b80:	080120af 	.word	0x080120af
 8011b84:	080120af 	.word	0x080120af
 8011b88:	080120af 	.word	0x080120af
 8011b8c:	080120af 	.word	0x080120af
 8011b90:	080120af 	.word	0x080120af
 8011b94:	080120af 	.word	0x080120af
 8011b98:	080120af 	.word	0x080120af
 8011b9c:	080120af 	.word	0x080120af
 8011ba0:	080120af 	.word	0x080120af
 8011ba4:	080120af 	.word	0x080120af
 8011ba8:	080120af 	.word	0x080120af
 8011bac:	080120af 	.word	0x080120af
 8011bb0:	080120af 	.word	0x080120af
 8011bb4:	080120af 	.word	0x080120af
 8011bb8:	080120af 	.word	0x080120af
 8011bbc:	080120af 	.word	0x080120af
 8011bc0:	080120af 	.word	0x080120af
 8011bc4:	080120af 	.word	0x080120af
 8011bc8:	080120af 	.word	0x080120af
 8011bcc:	080120af 	.word	0x080120af
 8011bd0:	080120af 	.word	0x080120af
 8011bd4:	080120af 	.word	0x080120af
 8011bd8:	080120af 	.word	0x080120af
 8011bdc:	080120af 	.word	0x080120af
 8011be0:	080120af 	.word	0x080120af
 8011be4:	080120af 	.word	0x080120af
 8011be8:	080120af 	.word	0x080120af
 8011bec:	080120af 	.word	0x080120af
 8011bf0:	080120af 	.word	0x080120af
 8011bf4:	080120af 	.word	0x080120af
 8011bf8:	080120af 	.word	0x080120af
 8011bfc:	080120af 	.word	0x080120af
 8011c00:	080120af 	.word	0x080120af
 8011c04:	080120af 	.word	0x080120af
 8011c08:	080120af 	.word	0x080120af
 8011c0c:	080120af 	.word	0x080120af
 8011c10:	080120af 	.word	0x080120af
 8011c14:	080120af 	.word	0x080120af
 8011c18:	080120af 	.word	0x080120af
 8011c1c:	080120af 	.word	0x080120af
 8011c20:	080120af 	.word	0x080120af
 8011c24:	080120af 	.word	0x080120af
 8011c28:	080120af 	.word	0x080120af
 8011c2c:	080120af 	.word	0x080120af
 8011c30:	080120af 	.word	0x080120af
 8011c34:	080120af 	.word	0x080120af
 8011c38:	080120af 	.word	0x080120af
 8011c3c:	080120af 	.word	0x080120af
 8011c40:	080120af 	.word	0x080120af
 8011c44:	080120af 	.word	0x080120af
 8011c48:	080120af 	.word	0x080120af
 8011c4c:	080120af 	.word	0x080120af
 8011c50:	080120af 	.word	0x080120af
 8011c54:	080120af 	.word	0x080120af
 8011c58:	080120af 	.word	0x080120af
 8011c5c:	08011ec1 	.word	0x08011ec1
 8011c60:	08011f3d 	.word	0x08011f3d
 8011c64:	080120af 	.word	0x080120af
 8011c68:	080120af 	.word	0x080120af
 8011c6c:	080120af 	.word	0x080120af
 8011c70:	080120af 	.word	0x080120af
 8011c74:	080120af 	.word	0x080120af
 8011c78:	080120af 	.word	0x080120af
 8011c7c:	080120af 	.word	0x080120af
 8011c80:	080120af 	.word	0x080120af
 8011c84:	080120af 	.word	0x080120af
 8011c88:	080120af 	.word	0x080120af
 8011c8c:	080120af 	.word	0x080120af
 8011c90:	080120af 	.word	0x080120af
 8011c94:	08011f63 	.word	0x08011f63
 8011c98:	08011f73 	.word	0x08011f73
 8011c9c:	08011f79 	.word	0x08011f79
 8011ca0:	080120af 	.word	0x080120af
 8011ca4:	080120af 	.word	0x080120af
 8011ca8:	080120af 	.word	0x080120af
 8011cac:	080120af 	.word	0x080120af
 8011cb0:	080120af 	.word	0x080120af
 8011cb4:	080120af 	.word	0x080120af
 8011cb8:	080120af 	.word	0x080120af
 8011cbc:	080120af 	.word	0x080120af
 8011cc0:	080120af 	.word	0x080120af
 8011cc4:	080120af 	.word	0x080120af
 8011cc8:	080120af 	.word	0x080120af
 8011ccc:	080120af 	.word	0x080120af
 8011cd0:	080120af 	.word	0x080120af
 8011cd4:	080120af 	.word	0x080120af
 8011cd8:	080120af 	.word	0x080120af
 8011cdc:	080120af 	.word	0x080120af
 8011ce0:	080120af 	.word	0x080120af
 8011ce4:	080120af 	.word	0x080120af
 8011ce8:	080120af 	.word	0x080120af
 8011cec:	080120af 	.word	0x080120af
 8011cf0:	080120af 	.word	0x080120af
 8011cf4:	080120af 	.word	0x080120af
 8011cf8:	08011f4d 	.word	0x08011f4d
 8011cfc:	080120af 	.word	0x080120af
 8011d00:	080120af 	.word	0x080120af
 8011d04:	080120af 	.word	0x080120af
 8011d08:	080120af 	.word	0x080120af
 8011d0c:	080120af 	.word	0x080120af
 8011d10:	080120af 	.word	0x080120af
 8011d14:	080120af 	.word	0x080120af
 8011d18:	080120af 	.word	0x080120af
 8011d1c:	080120af 	.word	0x080120af
 8011d20:	080120af 	.word	0x080120af
 8011d24:	080120af 	.word	0x080120af
 8011d28:	080120af 	.word	0x080120af
 8011d2c:	080120af 	.word	0x080120af
 8011d30:	080120af 	.word	0x080120af
 8011d34:	080120af 	.word	0x080120af
 8011d38:	080120af 	.word	0x080120af
 8011d3c:	080120af 	.word	0x080120af
 8011d40:	080120af 	.word	0x080120af
 8011d44:	080120af 	.word	0x080120af
 8011d48:	080120af 	.word	0x080120af
 8011d4c:	080120af 	.word	0x080120af
 8011d50:	080120af 	.word	0x080120af
 8011d54:	080120af 	.word	0x080120af
 8011d58:	080120af 	.word	0x080120af
 8011d5c:	080120af 	.word	0x080120af
 8011d60:	080120af 	.word	0x080120af
 8011d64:	080120af 	.word	0x080120af
 8011d68:	080120af 	.word	0x080120af
 8011d6c:	080120af 	.word	0x080120af
 8011d70:	080120af 	.word	0x080120af
 8011d74:	080120af 	.word	0x080120af
 8011d78:	080120af 	.word	0x080120af
 8011d7c:	08011e3b 	.word	0x08011e3b
 8011d80:	08011ebb 	.word	0x08011ebb
			/*************************************************************
			*                                                            *
			* Move the state.                                            *
			*                                                            *
			*************************************************************/
			ispVMStateMachine(GetByte(g_iMovingAlgoIndex++, 1));
 8011d84:	4ba8      	ldr	r3, [pc, #672]	; (8012028 <ispProcessVME+0x554>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	1c5a      	adds	r2, r3, #1
 8011d8a:	49a7      	ldr	r1, [pc, #668]	; (8012028 <ispProcessVME+0x554>)
 8011d8c:	600a      	str	r2, [r1, #0]
 8011d8e:	2101      	movs	r1, #1
 8011d90:	4618      	mov	r0, r3
 8011d92:	f000 fbbb 	bl	801250c <GetByte>
 8011d96:	4603      	mov	r3, r0
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f000 fd5b 	bl	8012854 <ispVMStateMachine>
			break;
 8011d9e:	e190      	b.n	80120c2 <ispProcessVME+0x5ee>
			/*************************************************************
			*                                                            *
			* Execute SIR/SDR command.                                   *
			*                                                            *
			*************************************************************/
			siRetCode = ispVMShift(ucOpcode);
 8011da0:	7afb      	ldrb	r3, [r7, #11]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f000 fad2 	bl	801234c <ispVMShift>
 8011da8:	4603      	mov	r3, r0
 8011daa:	82fb      	strh	r3, [r7, #22]
			break;
 8011dac:	e189      	b.n	80120c2 <ispProcessVME+0x5ee>
			/*************************************************************
			*                                                            *
			* Pulse TCK signal the specified time.                       *
			*                                                            *
			*************************************************************/
			ispVMClocks(ispVMDataSize());
 8011dae:	f000 f9a7 	bl	8012100 <ispVMDataSize>
 8011db2:	4603      	mov	r3, r0
 8011db4:	4618      	mov	r0, r3
 8011db6:	f000 fdbd 	bl	8012934 <ispVMClocks>
			break;
 8011dba:	e182      	b.n	80120c2 <ispProcessVME+0x5ee>
			/*************************************************************
			*                                                            *
			* Issue delay in specified time.                             *
			*                                                            *
			*************************************************************/
			ispVMDelay(ispVMDataSize());
 8011dbc:	f000 f9a0 	bl	8012100 <ispVMDataSize>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7ff fe62 	bl	8011a8c <ispVMDelay>
			break;
 8011dc8:	e17b      	b.n	80120c2 <ispProcessVME+0x5ee>
			/*************************************************************
			*                                                            *
			* Get the ENDDR state and store in global variable.          *
			*                                                            *
			*************************************************************/
			g_cEndDR = GetByte(g_iMovingAlgoIndex++, 1);
 8011dca:	4b97      	ldr	r3, [pc, #604]	; (8012028 <ispProcessVME+0x554>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	1c5a      	adds	r2, r3, #1
 8011dd0:	4995      	ldr	r1, [pc, #596]	; (8012028 <ispProcessVME+0x554>)
 8011dd2:	600a      	str	r2, [r1, #0]
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f000 fb98 	bl	801250c <GetByte>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	461a      	mov	r2, r3
 8011de0:	4b92      	ldr	r3, [pc, #584]	; (801202c <ispProcessVME+0x558>)
 8011de2:	701a      	strb	r2, [r3, #0]
			break;
 8011de4:	e16d      	b.n	80120c2 <ispProcessVME+0x5ee>
			/*************************************************************
			*                                                            *
			* Get the ENDIR state and store in global variable.          *
			*                                                            *
			*************************************************************/
			g_cEndIR = GetByte(g_iMovingAlgoIndex++, 1);
 8011de6:	4b90      	ldr	r3, [pc, #576]	; (8012028 <ispProcessVME+0x554>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	1c5a      	adds	r2, r3, #1
 8011dec:	498e      	ldr	r1, [pc, #568]	; (8012028 <ispProcessVME+0x554>)
 8011dee:	600a      	str	r2, [r1, #0]
 8011df0:	2101      	movs	r1, #1
 8011df2:	4618      	mov	r0, r3
 8011df4:	f000 fb8a 	bl	801250c <GetByte>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	4b8c      	ldr	r3, [pc, #560]	; (8012030 <ispProcessVME+0x55c>)
 8011dfe:	701a      	strb	r2, [r3, #0]
			break;
 8011e00:	e15f      	b.n	80120c2 <ispProcessVME+0x5ee>
		case HIR:
			g_siHeadIR = (int16_t) ispVMDataSize();
 8011e02:	f000 f97d 	bl	8012100 <ispVMDataSize>
 8011e06:	4603      	mov	r3, r0
 8011e08:	b21a      	sxth	r2, r3
 8011e0a:	4b8a      	ldr	r3, [pc, #552]	; (8012034 <ispProcessVME+0x560>)
 8011e0c:	801a      	strh	r2, [r3, #0]
			break;
 8011e0e:	e158      	b.n	80120c2 <ispProcessVME+0x5ee>
		case TIR:
			g_siTailIR = (int16_t) ispVMDataSize();
 8011e10:	f000 f976 	bl	8012100 <ispVMDataSize>
 8011e14:	4603      	mov	r3, r0
 8011e16:	b21a      	sxth	r2, r3
 8011e18:	4b87      	ldr	r3, [pc, #540]	; (8012038 <ispProcessVME+0x564>)
 8011e1a:	801a      	strh	r2, [r3, #0]
			break;
 8011e1c:	e151      	b.n	80120c2 <ispProcessVME+0x5ee>
		case HDR:
			g_siHeadDR = (int16_t) ispVMDataSize();
 8011e1e:	f000 f96f 	bl	8012100 <ispVMDataSize>
 8011e22:	4603      	mov	r3, r0
 8011e24:	b21a      	sxth	r2, r3
 8011e26:	4b85      	ldr	r3, [pc, #532]	; (801203c <ispProcessVME+0x568>)
 8011e28:	801a      	strh	r2, [r3, #0]

			break;
 8011e2a:	e14a      	b.n	80120c2 <ispProcessVME+0x5ee>
		case TDR:
			g_siTailDR = (int16_t) ispVMDataSize();
 8011e2c:	f000 f968 	bl	8012100 <ispVMDataSize>
 8011e30:	4603      	mov	r3, r0
 8011e32:	b21a      	sxth	r2, r3
 8011e34:	4b82      	ldr	r3, [pc, #520]	; (8012040 <ispProcessVME+0x56c>)
 8011e36:	801a      	strh	r2, [r3, #0]

			break;
 8011e38:	e143      	b.n	80120c2 <ispProcessVME+0x5ee>
			*                                                            *
			* Execute repeat loop.                                       *
			*                                                            *
			*************************************************************/

			uiDataSize = ispVMDataSize();
 8011e3a:	f000 f961 	bl	8012100 <ispVMDataSize>
 8011e3e:	6138      	str	r0, [r7, #16]

			switch (GetByte(g_iMovingAlgoIndex++, 1))
 8011e40:	4b79      	ldr	r3, [pc, #484]	; (8012028 <ispProcessVME+0x554>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	1c5a      	adds	r2, r3, #1
 8011e46:	4978      	ldr	r1, [pc, #480]	; (8012028 <ispProcessVME+0x554>)
 8011e48:	600a      	str	r2, [r1, #0]
 8011e4a:	2101      	movs	r1, #1
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f000 fb5d 	bl	801250c <GetByte>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2ba4      	cmp	r3, #164	; 0xa4
 8011e56:	d002      	beq.n	8011e5e <ispProcessVME+0x38a>
 8011e58:	2ba5      	cmp	r3, #165	; 0xa5
 8011e5a:	d008      	beq.n	8011e6e <ispProcessVME+0x39a>
 8011e5c:	e013      	b.n	8011e86 <ispProcessVME+0x3b2>
				* the VERIFY0 flow later that a programming flow has been     *
				* completed so the moving data index must return to the      *
				* main data index.                                           *
				*                                                            *
				*************************************************************/
				g_iMainDataIndex = g_iMovingDataIndex;
 8011e5e:	4b79      	ldr	r3, [pc, #484]	; (8012044 <ispProcessVME+0x570>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	4a79      	ldr	r2, [pc, #484]	; (8012048 <ispProcessVME+0x574>)
 8011e64:	6013      	str	r3, [r2, #0]
				cProgram = 1;
 8011e66:	4b79      	ldr	r3, [pc, #484]	; (801204c <ispProcessVME+0x578>)
 8011e68:	2201      	movs	r2, #1
 8011e6a:	701a      	strb	r2, [r3, #0]
				break;
 8011e6c:	e00b      	b.n	8011e86 <ispProcessVME+0x3b2>
				* is a erase, program, VERIFY0 operation.  If the programming *
				* flag is not set, then this is a VERIFY0 only operation thus *
				* no need to return the moving data index.                   *
				*                                                            *
				*************************************************************/
				if (cProgram)
 8011e6e:	4b77      	ldr	r3, [pc, #476]	; (801204c <ispProcessVME+0x578>)
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d006      	beq.n	8011e84 <ispProcessVME+0x3b0>
				{
					g_iMovingDataIndex = g_iMainDataIndex;
 8011e76:	4b74      	ldr	r3, [pc, #464]	; (8012048 <ispProcessVME+0x574>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	4a72      	ldr	r2, [pc, #456]	; (8012044 <ispProcessVME+0x570>)
 8011e7c:	6013      	str	r3, [r2, #0]
					cProgram = 0;
 8011e7e:	4b73      	ldr	r3, [pc, #460]	; (801204c <ispProcessVME+0x578>)
 8011e80:	2200      	movs	r2, #0
 8011e82:	701a      	strb	r2, [r3, #0]
				}
				break;
 8011e84:	bf00      	nop
			*                                                            *
			* Set the repeat index to the first byte in the repeat loop. *
			*                                                            *
			*************************************************************/

			g_iRepeatIndex = g_iMovingAlgoIndex;
 8011e86:	4b68      	ldr	r3, [pc, #416]	; (8012028 <ispProcessVME+0x554>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	4a71      	ldr	r2, [pc, #452]	; (8012050 <ispProcessVME+0x57c>)
 8011e8c:	6013      	str	r3, [r2, #0]

			for (; uiDataSize > 0; uiDataSize--)
 8011e8e:	e00e      	b.n	8011eae <ispProcessVME+0x3da>
				* Initialize the current algorithm index to the beginning of *
				* the repeat index before each repeat loop.                  *
				*                                                            *
				*************************************************************/

				g_iMovingAlgoIndex = g_iRepeatIndex;
 8011e90:	4b6f      	ldr	r3, [pc, #444]	; (8012050 <ispProcessVME+0x57c>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	4a64      	ldr	r2, [pc, #400]	; (8012028 <ispProcessVME+0x554>)
 8011e96:	6013      	str	r3, [r2, #0]
				*                                                            *
				* Make recursive call.                                       *
				*                                                            *
				*************************************************************/

				siRetCode = ispProcessVME();
 8011e98:	f7ff fe1c 	bl	8011ad4 <ispProcessVME>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	82fb      	strh	r3, [r7, #22]
				if (siRetCode < 0)
 8011ea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	db06      	blt.n	8011eb6 <ispProcessVME+0x3e2>
			for (; uiDataSize > 0; uiDataSize--)
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	3b01      	subs	r3, #1
 8011eac:	613b      	str	r3, [r7, #16]
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d1ed      	bne.n	8011e90 <ispProcessVME+0x3bc>
				{
					break;
				}
			}
			break;
 8011eb4:	e105      	b.n	80120c2 <ispProcessVME+0x5ee>
					break;
 8011eb6:	bf00      	nop
			break;
 8011eb8:	e103      	b.n	80120c2 <ispProcessVME+0x5ee>
				/*************************************************************
				*                                                            *
				* Exit the current repeat frame.                             *
				*                                                            *
				*************************************************************/
					return siRetCode;
 8011eba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011ebe:	e118      	b.n	80120f2 <ispProcessVME+0x61e>
				*                                                            *
				* Execute repeat loop.                                       *
				*                                                            *
				*************************************************************/

				g_usLCOUNTSize = (int16_t)ispVMDataSize();
 8011ec0:	f000 f91e 	bl	8012100 <ispVMDataSize>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	4b62      	ldr	r3, [pc, #392]	; (8012054 <ispProcessVME+0x580>)
 8011eca:	801a      	strh	r2, [r3, #0]
				*                                                            *
				* Set the repeat index to the first byte in the repeat loop. *
				*                                                            *
				*************************************************************/

				g_iLoopMovingIndex = g_iMovingAlgoIndex;
 8011ecc:	4b56      	ldr	r3, [pc, #344]	; (8012028 <ispProcessVME+0x554>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4a61      	ldr	r2, [pc, #388]	; (8012058 <ispProcessVME+0x584>)
 8011ed2:	6013      	str	r3, [r2, #0]
				g_iLoopDataMovingIndex = g_iMovingDataIndex;
 8011ed4:	4b5b      	ldr	r3, [pc, #364]	; (8012044 <ispProcessVME+0x570>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	4a60      	ldr	r2, [pc, #384]	; (801205c <ispProcessVME+0x588>)
 8011eda:	6013      	str	r3, [r2, #0]


				for ( g_iLoopIndex = 0 ; g_iLoopIndex < g_usLCOUNTSize; g_iLoopIndex++ ) {
 8011edc:	4b60      	ldr	r3, [pc, #384]	; (8012060 <ispProcessVME+0x58c>)
 8011ede:	2200      	movs	r2, #0
 8011ee0:	601a      	str	r2, [r3, #0]
 8011ee2:	e017      	b.n	8011f14 <ispProcessVME+0x440>
					m_loopState = 1;
 8011ee4:	4b5f      	ldr	r3, [pc, #380]	; (8012064 <ispProcessVME+0x590>)
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	801a      	strh	r2, [r3, #0]
					* Initialize the current algorithm index to the beginning of *
					* the repeat index before each repeat loop.                  *
					*                                                            *
					*************************************************************/

					g_iMovingAlgoIndex = g_iLoopMovingIndex;
 8011eea:	4b5b      	ldr	r3, [pc, #364]	; (8012058 <ispProcessVME+0x584>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	4a4e      	ldr	r2, [pc, #312]	; (8012028 <ispProcessVME+0x554>)
 8011ef0:	6013      	str	r3, [r2, #0]
					g_iMovingDataIndex = g_iLoopDataMovingIndex;
 8011ef2:	4b5a      	ldr	r3, [pc, #360]	; (801205c <ispProcessVME+0x588>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4a53      	ldr	r2, [pc, #332]	; (8012044 <ispProcessVME+0x570>)
 8011ef8:	6013      	str	r3, [r2, #0]
					*                                                            *
					* Make recursive call.                                       *
					*                                                            *
					*************************************************************/

					siRetCode = ispProcessVME();
 8011efa:	f7ff fdeb 	bl	8011ad4 <ispProcessVME>
 8011efe:	4603      	mov	r3, r0
 8011f00:	82fb      	strh	r3, [r7, #22]
					if ( !siRetCode ) {
 8011f02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00c      	beq.n	8011f24 <ispProcessVME+0x450>
				for ( g_iLoopIndex = 0 ; g_iLoopIndex < g_usLCOUNTSize; g_iLoopIndex++ ) {
 8011f0a:	4b55      	ldr	r3, [pc, #340]	; (8012060 <ispProcessVME+0x58c>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	4a53      	ldr	r2, [pc, #332]	; (8012060 <ispProcessVME+0x58c>)
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	4b4f      	ldr	r3, [pc, #316]	; (8012054 <ispProcessVME+0x580>)
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	461a      	mov	r2, r3
 8011f1a:	4b51      	ldr	r3, [pc, #324]	; (8012060 <ispProcessVME+0x58c>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	dce0      	bgt.n	8011ee4 <ispProcessVME+0x410>
 8011f22:	e000      	b.n	8011f26 <ispProcessVME+0x452>
						*                                                            *
						* Stop if the complete status matched.                       *
						*                                                            *
						*************************************************************/

						break;
 8011f24:	bf00      	nop
					}
				}
				m_loopState = 0;
 8011f26:	4b4f      	ldr	r3, [pc, #316]	; (8012064 <ispProcessVME+0x590>)
 8011f28:	2200      	movs	r2, #0
 8011f2a:	801a      	strh	r2, [r3, #0]

				if (siRetCode != 0) {
 8011f2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	f000 80bf 	beq.w	80120b4 <ispProcessVME+0x5e0>
					/*************************************************************
					*                                                            *
					* Return if the complete status error.                       *
					*                                                            *
					*************************************************************/
					return (siRetCode);
 8011f36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f3a:	e0da      	b.n	80120f2 <ispProcessVME+0x61e>
				/*************************************************************
				*                                                            *
				* End the current loop.                                      *
				*                                                            *
				*************************************************************/
				if(m_loopState)
 8011f3c:	4b49      	ldr	r3, [pc, #292]	; (8012064 <ispProcessVME+0x590>)
 8011f3e:	881b      	ldrh	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	f000 80b9 	beq.w	80120b8 <ispProcessVME+0x5e4>
					return siRetCode;
 8011f46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f4a:	e0d2      	b.n	80120f2 <ispProcessVME+0x61e>
				* the end of the chain.  If g_iMovingAlgoIndex is less than  *
				* g_iAlgoSize, then that indicates that there are still more *
				* devices to be processed.                                   *
				*                                                            *
				*************************************************************/
				if (g_iMovingAlgoIndex >= g_iAlgoSize)
 8011f4c:	4b36      	ldr	r3, [pc, #216]	; (8012028 <ispProcessVME+0x554>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	461a      	mov	r2, r3
 8011f52:	4b45      	ldr	r3, [pc, #276]	; (8012068 <ispProcessVME+0x594>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	f0c0 80b0 	bcc.w	80120bc <ispProcessVME+0x5e8>
				{
					return siRetCode;
 8011f5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f60:	e0c7      	b.n	80120f2 <ispProcessVME+0x61e>
				/*************************************************************
				*                                                            *
				* Get the Maximum LoopCount and store in global variable.    *
				*                                                            *
				*************************************************************/
				ispVMLCOUNT((uint16_t) ispVMDataSize());
 8011f62:	f000 f8cd 	bl	8012100 <ispVMDataSize>
 8011f66:	4603      	mov	r3, r0
 8011f68:	b29b      	uxth	r3, r3
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f000 fd0e 	bl	801298c <ispVMLCOUNT>
				break;
 8011f70:	e0a7      	b.n	80120c2 <ispProcessVME+0x5ee>
				*                                                            *
				* Get the State,TCK number and Delay time for the poling loop*
				* and store in global variable.                              *
				*                                                            *
				*************************************************************/
				ispVMLDELAY();
 8011f72:	f000 fd1b 	bl	80129ac <ispVMLDELAY>
				break;
 8011f76:	e0a4      	b.n	80120c2 <ispProcessVME+0x5ee>
				/*************************************************************
				*                                                            *
				* Execute repeat poling status loop.                         *
				*                                                            *
				*************************************************************/
				iMovingAlgoIndex = g_iMovingAlgoIndex;
 8011f78:	4b2b      	ldr	r3, [pc, #172]	; (8012028 <ispProcessVME+0x554>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	607b      	str	r3, [r7, #4]
				for (iLoopCount = 0; iLoopCount < g_usLCOUNTSize; iLoopCount++)
 8011f7e:	2300      	movs	r3, #0
 8011f80:	60fb      	str	r3, [r7, #12]
 8011f82:	e026      	b.n	8011fd2 <ispProcessVME+0x4fe>
				{
					siRetCode = ispVMShift(SDR);
 8011f84:	2012      	movs	r0, #18
 8011f86:	f000 f9e1 	bl	801234c <ispVMShift>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	82fb      	strh	r3, [r7, #22]
					if (!siRetCode)
 8011f8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d024      	beq.n	8011fe0 <ispProcessVME+0x50c>
					*                                                            *
					* If the status is not done, then move to the setting State  *
					* execute the delay and come back and do the checking again  *
					*                                                            *
					*************************************************************/
					g_iMovingAlgoIndex = iMovingAlgoIndex;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	4a23      	ldr	r2, [pc, #140]	; (8012028 <ispProcessVME+0x554>)
 8011f9a:	6013      	str	r3, [r2, #0]
					ispVMStateMachine(DRPAUSE);
 8011f9c:	2003      	movs	r0, #3
 8011f9e:	f000 fc59 	bl	8012854 <ispVMStateMachine>
					m_loopState = 1;
 8011fa2:	4b30      	ldr	r3, [pc, #192]	; (8012064 <ispProcessVME+0x590>)
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	801a      	strh	r2, [r3, #0]
					ispVMStateMachine(g_ucLDELAYState);
 8011fa8:	4b30      	ldr	r3, [pc, #192]	; (801206c <ispProcessVME+0x598>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	4618      	mov	r0, r3
 8011fae:	f000 fc51 	bl	8012854 <ispVMStateMachine>
					m_loopState = 0;
 8011fb2:	4b2c      	ldr	r3, [pc, #176]	; (8012064 <ispProcessVME+0x590>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	801a      	strh	r2, [r3, #0]
					ispVMClocks(g_ucLDELAYTCK);
 8011fb8:	4b2d      	ldr	r3, [pc, #180]	; (8012070 <ispProcessVME+0x59c>)
 8011fba:	881b      	ldrh	r3, [r3, #0]
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f000 fcb9 	bl	8012934 <ispVMClocks>
					ispVMDelay(g_ucLDELAYDelay);
 8011fc2:	4b2c      	ldr	r3, [pc, #176]	; (8012074 <ispProcessVME+0x5a0>)
 8011fc4:	881b      	ldrh	r3, [r3, #0]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7ff fd60 	bl	8011a8c <ispVMDelay>
				for (iLoopCount = 0; iLoopCount < g_usLCOUNTSize; iLoopCount++)
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	3301      	adds	r3, #1
 8011fd0:	60fb      	str	r3, [r7, #12]
 8011fd2:	4b20      	ldr	r3, [pc, #128]	; (8012054 <ispProcessVME+0x580>)
 8011fd4:	881b      	ldrh	r3, [r3, #0]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	dbd2      	blt.n	8011f84 <ispProcessVME+0x4b0>
 8011fde:	e000      	b.n	8011fe2 <ispProcessVME+0x50e>
						break;
 8011fe0:	bf00      	nop
				}
				if (siRetCode != 0)
 8011fe2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d06a      	beq.n	80120c0 <ispProcessVME+0x5ec>
				{
					return (siRetCode);
 8011fea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011fee:	e080      	b.n	80120f2 <ispProcessVME+0x61e>
			case signalENABLE:
				/******************************************************************
				* Toggle ispENABLE signal                                         *
				*                                                                 *
				******************************************************************/
				ucState = GetByte(g_iMovingAlgoIndex++, 1);
 8011ff0:	4b0d      	ldr	r3, [pc, #52]	; (8012028 <ispProcessVME+0x554>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	1c5a      	adds	r2, r3, #1
 8011ff6:	490c      	ldr	r1, [pc, #48]	; (8012028 <ispProcessVME+0x554>)
 8011ff8:	600a      	str	r2, [r1, #0]
 8011ffa:	2101      	movs	r1, #1
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f000 fa85 	bl	801250c <GetByte>
 8012002:	4603      	mov	r3, r0
 8012004:	72bb      	strb	r3, [r7, #10]
				if (ucState == 0x01)
 8012006:	7abb      	ldrb	r3, [r7, #10]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d104      	bne.n	8012016 <ispProcessVME+0x542>
					writePort(pinENABLE, 0x01);
 801200c:	2101      	movs	r1, #1
 801200e:	2008      	movs	r0, #8
 8012010:	f7ff fcf6 	bl	8011a00 <writePort>
 8012014:	e003      	b.n	801201e <ispProcessVME+0x54a>
				else
					writePort(pinENABLE, 0x00);
 8012016:	2100      	movs	r1, #0
 8012018:	2008      	movs	r0, #8
 801201a:	f7ff fcf1 	bl	8011a00 <writePort>
				ispVMDelay(1);
 801201e:	2001      	movs	r0, #1
 8012020:	f7ff fd34 	bl	8011a8c <ispVMDelay>
				break;
 8012024:	e04d      	b.n	80120c2 <ispProcessVME+0x5ee>
 8012026:	bf00      	nop
 8012028:	200003d8 	.word	0x200003d8
 801202c:	200003e2 	.word	0x200003e2
 8012030:	200003e3 	.word	0x200003e3
 8012034:	200003e6 	.word	0x200003e6
 8012038:	200003ea 	.word	0x200003ea
 801203c:	200003e4 	.word	0x200003e4
 8012040:	200003e8 	.word	0x200003e8
 8012044:	200003dc 	.word	0x200003dc
 8012048:	200003ec 	.word	0x200003ec
 801204c:	20000418 	.word	0x20000418
 8012050:	200003f0 	.word	0x200003f0
 8012054:	20000410 	.word	0x20000410
 8012058:	20000408 	.word	0x20000408
 801205c:	2000040c 	.word	0x2000040c
 8012060:	20000404 	.word	0x20000404
 8012064:	20000416 	.word	0x20000416
 8012068:	200000fc 	.word	0x200000fc
 801206c:	20000104 	.word	0x20000104
 8012070:	20000412 	.word	0x20000412
 8012074:	20000414 	.word	0x20000414
			case signalTRST:
				/******************************************************************
				* Toggle TRST signal                                              *
				*                                                                 *
				******************************************************************/
				ucState = GetByte(g_iMovingAlgoIndex++, 1);
 8012078:	4b20      	ldr	r3, [pc, #128]	; (80120fc <ispProcessVME+0x628>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	1c5a      	adds	r2, r3, #1
 801207e:	491f      	ldr	r1, [pc, #124]	; (80120fc <ispProcessVME+0x628>)
 8012080:	600a      	str	r2, [r1, #0]
 8012082:	2101      	movs	r1, #1
 8012084:	4618      	mov	r0, r3
 8012086:	f000 fa41 	bl	801250c <GetByte>
 801208a:	4603      	mov	r3, r0
 801208c:	72bb      	strb	r3, [r7, #10]
				if (ucState == 0x01)
 801208e:	7abb      	ldrb	r3, [r7, #10]
 8012090:	2b01      	cmp	r3, #1
 8012092:	d104      	bne.n	801209e <ispProcessVME+0x5ca>
					writePort(pinTRST, 0x01);
 8012094:	2101      	movs	r1, #1
 8012096:	2010      	movs	r0, #16
 8012098:	f7ff fcb2 	bl	8011a00 <writePort>
 801209c:	e003      	b.n	80120a6 <ispProcessVME+0x5d2>
				else
					writePort(pinTRST, 0x00);
 801209e:	2100      	movs	r1, #0
 80120a0:	2010      	movs	r0, #16
 80120a2:	f7ff fcad 	bl	8011a00 <writePort>
				ispVMDelay(1);
 80120a6:	2001      	movs	r0, #1
 80120a8:	f7ff fcf0 	bl	8011a8c <ispVMDelay>
				break;
 80120ac:	e009      	b.n	80120c2 <ispProcessVME+0x5ee>
				/*************************************************************
				*                                                            *
				* Unrecognized opcode.  Return with file error.              *
				*                                                            *
				*************************************************************/
				return ERR_ALGO_FILE_ERROR;
 80120ae:	f06f 0304 	mvn.w	r3, #4
 80120b2:	e01e      	b.n	80120f2 <ispProcessVME+0x61e>
				break;
 80120b4:	bf00      	nop
 80120b6:	e004      	b.n	80120c2 <ispProcessVME+0x5ee>
				break;
 80120b8:	bf00      	nop
 80120ba:	e002      	b.n	80120c2 <ispProcessVME+0x5ee>
				break;
 80120bc:	bf00      	nop
 80120be:	e000      	b.n	80120c2 <ispProcessVME+0x5ee>
				break;
 80120c0:	bf00      	nop
		}

		if (siRetCode < 0)
 80120c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	da02      	bge.n	80120d0 <ispProcessVME+0x5fc>
		{
			return siRetCode;
 80120ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80120ce:	e010      	b.n	80120f2 <ispProcessVME+0x61e>
	while ((ucOpcode = GetByte(g_iMovingAlgoIndex++, 1)) != 0xFF)
 80120d0:	4b0a      	ldr	r3, [pc, #40]	; (80120fc <ispProcessVME+0x628>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	1c5a      	adds	r2, r3, #1
 80120d6:	4909      	ldr	r1, [pc, #36]	; (80120fc <ispProcessVME+0x628>)
 80120d8:	600a      	str	r2, [r1, #0]
 80120da:	2101      	movs	r1, #1
 80120dc:	4618      	mov	r0, r3
 80120de:	f000 fa15 	bl	801250c <GetByte>
 80120e2:	4603      	mov	r3, r0
 80120e4:	72fb      	strb	r3, [r7, #11]
 80120e6:	7afb      	ldrb	r3, [r7, #11]
 80120e8:	2bff      	cmp	r3, #255	; 0xff
 80120ea:	f47f ad03 	bne.w	8011af4 <ispProcessVME+0x20>
		}
	}

	return ERR_ALGO_FILE_ERROR;
 80120ee:	f06f 0304 	mvn.w	r3, #4
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3718      	adds	r7, #24
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	200003d8 	.word	0x200003d8

08012100 <ispVMDataSize>:
*     The return value would be 200.                         *
*                                                            *
*************************************************************/

uint32_t ispVMDataSize()
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
	uint32_t uiSize = 0;
 8012106:	2300      	movs	r3, #0
 8012108:	607b      	str	r3, [r7, #4]
	uint8_t ucCurrentByte = 0;
 801210a:	2300      	movs	r3, #0
 801210c:	70bb      	strb	r3, [r7, #2]
	uint8_t ucIndex = 0;
 801210e:	2300      	movs	r3, #0
 8012110:	70fb      	strb	r3, [r7, #3]

	while ((ucCurrentByte = GetByte(g_iMovingAlgoIndex++, 1)) & 0x80)
 8012112:	e00b      	b.n	801212c <ispVMDataSize+0x2c>
	{
		uiSize |=((uint32_t)(ucCurrentByte & 0x7F)) << ucIndex;
 8012114:	78bb      	ldrb	r3, [r7, #2]
 8012116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801211a:	78fb      	ldrb	r3, [r7, #3]
 801211c:	fa02 f303 	lsl.w	r3, r2, r3
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	4313      	orrs	r3, r2
 8012124:	607b      	str	r3, [r7, #4]
		ucIndex += 7;
 8012126:	78fb      	ldrb	r3, [r7, #3]
 8012128:	3307      	adds	r3, #7
 801212a:	70fb      	strb	r3, [r7, #3]
	while ((ucCurrentByte = GetByte(g_iMovingAlgoIndex++, 1)) & 0x80)
 801212c:	4b0e      	ldr	r3, [pc, #56]	; (8012168 <ispVMDataSize+0x68>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	1c5a      	adds	r2, r3, #1
 8012132:	490d      	ldr	r1, [pc, #52]	; (8012168 <ispVMDataSize+0x68>)
 8012134:	600a      	str	r2, [r1, #0]
 8012136:	2101      	movs	r1, #1
 8012138:	4618      	mov	r0, r3
 801213a:	f000 f9e7 	bl	801250c <GetByte>
 801213e:	4603      	mov	r3, r0
 8012140:	70bb      	strb	r3, [r7, #2]
 8012142:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012146:	2b00      	cmp	r3, #0
 8012148:	dbe4      	blt.n	8012114 <ispVMDataSize+0x14>
	}
	uiSize |=((uint32_t)(ucCurrentByte & 0x7F)) << ucIndex;
 801214a:	78bb      	ldrb	r3, [r7, #2]
 801214c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012150:	78fb      	ldrb	r3, [r7, #3]
 8012152:	fa02 f303 	lsl.w	r3, r2, r3
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	4313      	orrs	r3, r2
 801215a:	607b      	str	r3, [r7, #4]
	return uiSize;
 801215c:	687b      	ldr	r3, [r7, #4]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3708      	adds	r7, #8
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	200003d8 	.word	0x200003d8

0801216c <ispVMShiftExec>:
*     only comes after TDI, DTDI, TDO, DTDO, and MASK.       *
*                                                            *
*************************************************************/

int16_t ispVMShiftExec(uint32_t a_uiDataSize)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
	uint8_t ucDataByte = 0;
 8012174:	2300      	movs	r3, #0
 8012176:	73fb      	strb	r3, [r7, #15]
	*                                                            *
	* Reset the data type register.                              *
	*                                                            *
	*************************************************************/

	g_usDataType &= ~(TDI_DATA + TDO_DATA + MASK_DATA + DTDI_DATA + DTDO_DATA + COMPRESS_FRAME);
 8012178:	4b6e      	ldr	r3, [pc, #440]	; (8012334 <ispVMShiftExec+0x1c8>)
 801217a:	881b      	ldrh	r3, [r3, #0]
 801217c:	f423 73be 	bic.w	r3, r3, #380	; 0x17c
 8012180:	b29a      	uxth	r2, r3
 8012182:	4b6c      	ldr	r3, [pc, #432]	; (8012334 <ispVMShiftExec+0x1c8>)
 8012184:	801a      	strh	r2, [r3, #0]
	*                                                            *
	* Convert the size from bits to byte.                        *
	*                                                            *
	*************************************************************/

	if (a_uiDataSize % 8)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f003 0307 	and.w	r3, r3, #7
 801218c:	2b00      	cmp	r3, #0
 801218e:	d004      	beq.n	801219a <ispVMShiftExec+0x2e>
	{
		a_uiDataSize = a_uiDataSize / 8 + 1;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	08db      	lsrs	r3, r3, #3
 8012194:	3301      	adds	r3, #1
 8012196:	607b      	str	r3, [r7, #4]
 8012198:	e0b8      	b.n	801230c <ispVMShiftExec+0x1a0>
	}
	else
	{
		a_uiDataSize = a_uiDataSize / 8;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	08db      	lsrs	r3, r3, #3
 801219e:	607b      	str	r3, [r7, #4]
	*                                                            *
	* Begin extracting the command.                              *
	*                                                            *
	*************************************************************/

	while ((ucDataByte = GetByte(g_iMovingAlgoIndex++, 1)) != CONTINUE)
 80121a0:	e0b4      	b.n	801230c <ispVMShiftExec+0x1a0>
	{
		switch (ucDataByte)
 80121a2:	7bfb      	ldrb	r3, [r7, #15]
 80121a4:	2ba7      	cmp	r3, #167	; 0xa7
 80121a6:	d06a      	beq.n	801227e <ispVMShiftExec+0x112>
 80121a8:	2ba7      	cmp	r3, #167	; 0xa7
 80121aa:	f300 80ac 	bgt.w	8012306 <ispVMShiftExec+0x19a>
 80121ae:	2ba6      	cmp	r3, #166	; 0xa6
 80121b0:	d021      	beq.n	80121f6 <ispVMShiftExec+0x8a>
 80121b2:	2ba6      	cmp	r3, #166	; 0xa6
 80121b4:	f300 80a7 	bgt.w	8012306 <ispVMShiftExec+0x19a>
 80121b8:	2b15      	cmp	r3, #21
 80121ba:	f000 8090 	beq.w	80122de <ispVMShiftExec+0x172>
 80121be:	2b15      	cmp	r3, #21
 80121c0:	f300 80a1 	bgt.w	8012306 <ispVMShiftExec+0x19a>
 80121c4:	2b13      	cmp	r3, #19
 80121c6:	d002      	beq.n	80121ce <ispVMShiftExec+0x62>
 80121c8:	2b14      	cmp	r3, #20
 80121ca:	d044      	beq.n	8012256 <ispVMShiftExec+0xea>
 80121cc:	e09b      	b.n	8012306 <ispVMShiftExec+0x19a>
		*                                                            *
		* Set data type register to indicate TDI data and set TDI    *
		* index to the current algorithm location.                   *
		*                                                            *
		*************************************************************/
			g_usDataType |= TDI_DATA;
 80121ce:	4b59      	ldr	r3, [pc, #356]	; (8012334 <ispVMShiftExec+0x1c8>)
 80121d0:	881b      	ldrh	r3, [r3, #0]
 80121d2:	f043 0304 	orr.w	r3, r3, #4
 80121d6:	b29a      	uxth	r2, r3
 80121d8:	4b56      	ldr	r3, [pc, #344]	; (8012334 <ispVMShiftExec+0x1c8>)
 80121da:	801a      	strh	r2, [r3, #0]
			g_iTDIIndex = g_iMovingAlgoIndex;
 80121dc:	4b56      	ldr	r3, [pc, #344]	; (8012338 <ispVMShiftExec+0x1cc>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	4a56      	ldr	r2, [pc, #344]	; (801233c <ispVMShiftExec+0x1d0>)
 80121e2:	6013      	str	r3, [r2, #0]
			g_iMovingAlgoIndex += a_uiDataSize;
 80121e4:	4b54      	ldr	r3, [pc, #336]	; (8012338 <ispVMShiftExec+0x1cc>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	461a      	mov	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	4413      	add	r3, r2
 80121ee:	461a      	mov	r2, r3
 80121f0:	4b51      	ldr	r3, [pc, #324]	; (8012338 <ispVMShiftExec+0x1cc>)
 80121f2:	601a      	str	r2, [r3, #0]
			break;
 80121f4:	e08a      	b.n	801230c <ispVMShiftExec+0x1a0>
		* next byte to make sure it's the DATA byte.  DTDI indicates *
		* that the data should be read from the data array, not the  *
		* algo array.                                                *
		*                                                            *
		*************************************************************/
			g_usDataType |= DTDI_DATA;
 80121f6:	4b4f      	ldr	r3, [pc, #316]	; (8012334 <ispVMShiftExec+0x1c8>)
 80121f8:	881b      	ldrh	r3, [r3, #0]
 80121fa:	f043 0320 	orr.w	r3, r3, #32
 80121fe:	b29a      	uxth	r2, r3
 8012200:	4b4c      	ldr	r3, [pc, #304]	; (8012334 <ispVMShiftExec+0x1c8>)
 8012202:	801a      	strh	r2, [r3, #0]
			if (GetByte(g_iMovingAlgoIndex++, 1) != DATA)
 8012204:	4b4c      	ldr	r3, [pc, #304]	; (8012338 <ispVMShiftExec+0x1cc>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	1c5a      	adds	r2, r3, #1
 801220a:	494b      	ldr	r1, [pc, #300]	; (8012338 <ispVMShiftExec+0x1cc>)
 801220c:	600a      	str	r2, [r1, #0]
 801220e:	2101      	movs	r1, #1
 8012210:	4618      	mov	r0, r3
 8012212:	f000 f97b 	bl	801250c <GetByte>
 8012216:	4603      	mov	r3, r0
 8012218:	2ba3      	cmp	r3, #163	; 0xa3
 801221a:	d002      	beq.n	8012222 <ispVMShiftExec+0xb6>
			{
				return ERR_ALGO_FILE_ERROR;
 801221c:	f06f 0304 	mvn.w	r3, #4
 8012220:	e084      	b.n	801232c <ispVMShiftExec+0x1c0>
			* the frame was compressable.  Note that even though the     *
			* overall data file was compressed, certain frames may not   *
			* be compressable that is why this byte must be checked.     *
			*                                                            *
			*************************************************************/
			if (g_usDataType & COMPRESS)
 8012222:	4b44      	ldr	r3, [pc, #272]	; (8012334 <ispVMShiftExec+0x1c8>)
 8012224:	881b      	ldrh	r3, [r3, #0]
 8012226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801222a:	2b00      	cmp	r3, #0
 801222c:	d06e      	beq.n	801230c <ispVMShiftExec+0x1a0>
			{
				if (GetByte(g_iMovingDataIndex++, 0))
 801222e:	4b44      	ldr	r3, [pc, #272]	; (8012340 <ispVMShiftExec+0x1d4>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	1c5a      	adds	r2, r3, #1
 8012234:	4942      	ldr	r1, [pc, #264]	; (8012340 <ispVMShiftExec+0x1d4>)
 8012236:	600a      	str	r2, [r1, #0]
 8012238:	2100      	movs	r1, #0
 801223a:	4618      	mov	r0, r3
 801223c:	f000 f966 	bl	801250c <GetByte>
 8012240:	4603      	mov	r3, r0
 8012242:	2b00      	cmp	r3, #0
 8012244:	d062      	beq.n	801230c <ispVMShiftExec+0x1a0>
				{
					g_usDataType |= COMPRESS_FRAME;
 8012246:	4b3b      	ldr	r3, [pc, #236]	; (8012334 <ispVMShiftExec+0x1c8>)
 8012248:	881b      	ldrh	r3, [r3, #0]
 801224a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801224e:	b29a      	uxth	r2, r3
 8012250:	4b38      	ldr	r3, [pc, #224]	; (8012334 <ispVMShiftExec+0x1c8>)
 8012252:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
 8012254:	e05a      	b.n	801230c <ispVMShiftExec+0x1a0>
		*                                                            *
		* Set data type register to indicate TDO data and set TDO    *
		* index to the current algorithm location.                   *
		*                                                            *
		*************************************************************/
			g_usDataType |= TDO_DATA;
 8012256:	4b37      	ldr	r3, [pc, #220]	; (8012334 <ispVMShiftExec+0x1c8>)
 8012258:	881b      	ldrh	r3, [r3, #0]
 801225a:	f043 0308 	orr.w	r3, r3, #8
 801225e:	b29a      	uxth	r2, r3
 8012260:	4b34      	ldr	r3, [pc, #208]	; (8012334 <ispVMShiftExec+0x1c8>)
 8012262:	801a      	strh	r2, [r3, #0]
			g_iTDOIndex = g_iMovingAlgoIndex;
 8012264:	4b34      	ldr	r3, [pc, #208]	; (8012338 <ispVMShiftExec+0x1cc>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4a36      	ldr	r2, [pc, #216]	; (8012344 <ispVMShiftExec+0x1d8>)
 801226a:	6013      	str	r3, [r2, #0]
			g_iMovingAlgoIndex += a_uiDataSize;
 801226c:	4b32      	ldr	r3, [pc, #200]	; (8012338 <ispVMShiftExec+0x1cc>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	461a      	mov	r2, r3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	4413      	add	r3, r2
 8012276:	461a      	mov	r2, r3
 8012278:	4b2f      	ldr	r3, [pc, #188]	; (8012338 <ispVMShiftExec+0x1cc>)
 801227a:	601a      	str	r2, [r3, #0]
			break;
 801227c:	e046      	b.n	801230c <ispVMShiftExec+0x1a0>
		* next byte to make sure it's the DATA byte.  DTDO indicates *
		* that the data should be read from the data array, not the  *
		* algo array.                                                *
		*                                                            *
		*************************************************************/
			g_usDataType |= DTDO_DATA;
 801227e:	4b2d      	ldr	r3, [pc, #180]	; (8012334 <ispVMShiftExec+0x1c8>)
 8012280:	881b      	ldrh	r3, [r3, #0]
 8012282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012286:	b29a      	uxth	r2, r3
 8012288:	4b2a      	ldr	r3, [pc, #168]	; (8012334 <ispVMShiftExec+0x1c8>)
 801228a:	801a      	strh	r2, [r3, #0]
			if (GetByte(g_iMovingAlgoIndex++, 1) != DATA)
 801228c:	4b2a      	ldr	r3, [pc, #168]	; (8012338 <ispVMShiftExec+0x1cc>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	1c5a      	adds	r2, r3, #1
 8012292:	4929      	ldr	r1, [pc, #164]	; (8012338 <ispVMShiftExec+0x1cc>)
 8012294:	600a      	str	r2, [r1, #0]
 8012296:	2101      	movs	r1, #1
 8012298:	4618      	mov	r0, r3
 801229a:	f000 f937 	bl	801250c <GetByte>
 801229e:	4603      	mov	r3, r0
 80122a0:	2ba3      	cmp	r3, #163	; 0xa3
 80122a2:	d002      	beq.n	80122aa <ispVMShiftExec+0x13e>
			{
				return ERR_ALGO_FILE_ERROR;
 80122a4:	f06f 0304 	mvn.w	r3, #4
 80122a8:	e040      	b.n	801232c <ispVMShiftExec+0x1c0>
			* the frame was compressable.  Note that even though the     *
			* overall data file was compressed, certain frames may not   *
			* be compressable that is why this byte must be checked.     *
			*                                                            *
			*************************************************************/
			if (g_usDataType & COMPRESS)
 80122aa:	4b22      	ldr	r3, [pc, #136]	; (8012334 <ispVMShiftExec+0x1c8>)
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d02a      	beq.n	801230c <ispVMShiftExec+0x1a0>
			{
				if (GetByte(g_iMovingDataIndex++, 0))
 80122b6:	4b22      	ldr	r3, [pc, #136]	; (8012340 <ispVMShiftExec+0x1d4>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	1c5a      	adds	r2, r3, #1
 80122bc:	4920      	ldr	r1, [pc, #128]	; (8012340 <ispVMShiftExec+0x1d4>)
 80122be:	600a      	str	r2, [r1, #0]
 80122c0:	2100      	movs	r1, #0
 80122c2:	4618      	mov	r0, r3
 80122c4:	f000 f922 	bl	801250c <GetByte>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d01e      	beq.n	801230c <ispVMShiftExec+0x1a0>
				{
					g_usDataType |= COMPRESS_FRAME;
 80122ce:	4b19      	ldr	r3, [pc, #100]	; (8012334 <ispVMShiftExec+0x1c8>)
 80122d0:	881b      	ldrh	r3, [r3, #0]
 80122d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	4b16      	ldr	r3, [pc, #88]	; (8012334 <ispVMShiftExec+0x1c8>)
 80122da:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
 80122dc:	e016      	b.n	801230c <ispVMShiftExec+0x1a0>
		*                                                            *
		* Set data type register to indicate MASK data.  Set MASK    *
		* location index to current algorithm array position.        *
		*                                                            *
		*************************************************************/
			g_usDataType |= MASK_DATA;
 80122de:	4b15      	ldr	r3, [pc, #84]	; (8012334 <ispVMShiftExec+0x1c8>)
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	f043 0310 	orr.w	r3, r3, #16
 80122e6:	b29a      	uxth	r2, r3
 80122e8:	4b12      	ldr	r3, [pc, #72]	; (8012334 <ispVMShiftExec+0x1c8>)
 80122ea:	801a      	strh	r2, [r3, #0]
			g_iMASKIndex = g_iMovingAlgoIndex;
 80122ec:	4b12      	ldr	r3, [pc, #72]	; (8012338 <ispVMShiftExec+0x1cc>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4a15      	ldr	r2, [pc, #84]	; (8012348 <ispVMShiftExec+0x1dc>)
 80122f2:	6013      	str	r3, [r2, #0]
			g_iMovingAlgoIndex += a_uiDataSize;
 80122f4:	4b10      	ldr	r3, [pc, #64]	; (8012338 <ispVMShiftExec+0x1cc>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	461a      	mov	r2, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	4413      	add	r3, r2
 80122fe:	461a      	mov	r2, r3
 8012300:	4b0d      	ldr	r3, [pc, #52]	; (8012338 <ispVMShiftExec+0x1cc>)
 8012302:	601a      	str	r2, [r3, #0]
			break;
 8012304:	e002      	b.n	801230c <ispVMShiftExec+0x1a0>
		/*************************************************************
		*                                                            *
		* Unrecognized or misplaced opcode.  Return error.           *
		*                                                            *
		*************************************************************/
			return ERR_ALGO_FILE_ERROR;
 8012306:	f06f 0304 	mvn.w	r3, #4
 801230a:	e00f      	b.n	801232c <ispVMShiftExec+0x1c0>
	while ((ucDataByte = GetByte(g_iMovingAlgoIndex++, 1)) != CONTINUE)
 801230c:	4b0a      	ldr	r3, [pc, #40]	; (8012338 <ispVMShiftExec+0x1cc>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	1c5a      	adds	r2, r3, #1
 8012312:	4909      	ldr	r1, [pc, #36]	; (8012338 <ispVMShiftExec+0x1cc>)
 8012314:	600a      	str	r2, [r1, #0]
 8012316:	2101      	movs	r1, #1
 8012318:	4618      	mov	r0, r3
 801231a:	f000 f8f7 	bl	801250c <GetByte>
 801231e:	4603      	mov	r3, r0
 8012320:	73fb      	strb	r3, [r7, #15]
 8012322:	7bfb      	ldrb	r3, [r7, #15]
 8012324:	2b70      	cmp	r3, #112	; 0x70
 8012326:	f47f af3c 	bne.w	80121a2 <ispVMShiftExec+0x36>
	*                                                            *
	* Reached the end of the instruction.  Return passing.       *
	*                                                            *
	*************************************************************/

	return 0;
 801232a:	2300      	movs	r3, #0
}
 801232c:	4618      	mov	r0, r3
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	200003e0 	.word	0x200003e0
 8012338:	200003d8 	.word	0x200003d8
 801233c:	200003f4 	.word	0x200003f4
 8012340:	200003dc 	.word	0x200003dc
 8012344:	200003f8 	.word	0x200003f8
 8012348:	200003fc 	.word	0x200003fc

0801234c <ispVMShift>:
*     SDR command to the device.                             *
*                                                            *
*************************************************************/

int16_t ispVMShift(char a_cCommand)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	4603      	mov	r3, r0
 8012354:	71fb      	strb	r3, [r7, #7]
	int16_t siRetCode = 0;
 8012356:	2300      	movs	r3, #0
 8012358:	81fb      	strh	r3, [r7, #14]
	uint32_t uiDataSize = ispVMDataSize();
 801235a:	f7ff fed1 	bl	8012100 <ispVMDataSize>
 801235e:	60b8      	str	r0, [r7, #8]
	* Clear any existing SIR/SDR instructions from the data type *
	* register.                                                  *
	*                                                            *
	*************************************************************/

	g_usDataType &= ~(SIR_DATA + SDR_DATA);
 8012360:	4b62      	ldr	r3, [pc, #392]	; (80124ec <ispVMShift+0x1a0>)
 8012362:	881b      	ldrh	r3, [r3, #0]
 8012364:	f023 0303 	bic.w	r3, r3, #3
 8012368:	b29a      	uxth	r2, r3
 801236a:	4b60      	ldr	r3, [pc, #384]	; (80124ec <ispVMShift+0x1a0>)
 801236c:	801a      	strh	r2, [r3, #0]
	* Move state machine to appropriate state depending on the   *
	* command.  Issue bypass if needed.                          *
	*                                                            *
	*************************************************************/

	switch (a_cCommand)
 801236e:	79fb      	ldrb	r3, [r7, #7]
 8012370:	2b11      	cmp	r3, #17
 8012372:	d002      	beq.n	801237a <ispVMShift+0x2e>
 8012374:	2b12      	cmp	r3, #18
 8012376:	d01b      	beq.n	80123b0 <ispVMShift+0x64>
 8012378:	e038      	b.n	80123ec <ispVMShift+0xa0>
	* an SIR instruction.  Move state machine to IRPAUSE,        *
	* SHIFTIR.  If header instruction register exists, then      *
	* issue bypass.                                              *
	*                                                           *
	*************************************************************/
		g_usDataType |= SIR_DATA;
 801237a:	4b5c      	ldr	r3, [pc, #368]	; (80124ec <ispVMShift+0x1a0>)
 801237c:	881b      	ldrh	r3, [r3, #0]
 801237e:	f043 0301 	orr.w	r3, r3, #1
 8012382:	b29a      	uxth	r2, r3
 8012384:	4b59      	ldr	r3, [pc, #356]	; (80124ec <ispVMShift+0x1a0>)
 8012386:	801a      	strh	r2, [r3, #0]
		ispVMStateMachine(IRPAUSE);
 8012388:	2002      	movs	r0, #2
 801238a:	f000 fa63 	bl	8012854 <ispVMStateMachine>
		ispVMStateMachine(SHIFTIR);
 801238e:	2004      	movs	r0, #4
 8012390:	f000 fa60 	bl	8012854 <ispVMStateMachine>
		if (g_siHeadIR > 0)
 8012394:	4b56      	ldr	r3, [pc, #344]	; (80124f0 <ispVMShift+0x1a4>)
 8012396:	f9b3 3000 	ldrsh.w	r3, [r3]
 801239a:	2b00      	cmp	r3, #0
 801239c:	dd23      	ble.n	80123e6 <ispVMShift+0x9a>
		{
			ispVMBypass(g_siHeadIR);
 801239e:	4b54      	ldr	r3, [pc, #336]	; (80124f0 <ispVMShift+0x1a4>)
 80123a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f000 fad7 	bl	8012958 <ispVMBypass>
			sclock();
 80123aa:	f000 f8e3 	bl	8012574 <sclock>
		}
		break;
 80123ae:	e01a      	b.n	80123e6 <ispVMShift+0x9a>
	* an SDR instruction.  Move state machine to DRPAUSE,        *
	* SHIFTDR.  If header data register exists, then issue       *
	* bypass.                                                    *
	*                                                            *
	*************************************************************/
		g_usDataType |= SDR_DATA;
 80123b0:	4b4e      	ldr	r3, [pc, #312]	; (80124ec <ispVMShift+0x1a0>)
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	f043 0302 	orr.w	r3, r3, #2
 80123b8:	b29a      	uxth	r2, r3
 80123ba:	4b4c      	ldr	r3, [pc, #304]	; (80124ec <ispVMShift+0x1a0>)
 80123bc:	801a      	strh	r2, [r3, #0]
		ispVMStateMachine(DRPAUSE);
 80123be:	2003      	movs	r0, #3
 80123c0:	f000 fa48 	bl	8012854 <ispVMStateMachine>
		ispVMStateMachine(SHIFTDR);
 80123c4:	2005      	movs	r0, #5
 80123c6:	f000 fa45 	bl	8012854 <ispVMStateMachine>
		if (g_siHeadDR > 0)
 80123ca:	4b4a      	ldr	r3, [pc, #296]	; (80124f4 <ispVMShift+0x1a8>)
 80123cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	dd0a      	ble.n	80123ea <ispVMShift+0x9e>
		{
			ispVMBypass(g_siHeadDR);
 80123d4:	4b47      	ldr	r3, [pc, #284]	; (80124f4 <ispVMShift+0x1a8>)
 80123d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123da:	4618      	mov	r0, r3
 80123dc:	f000 fabc 	bl	8012958 <ispVMBypass>
			sclock();
 80123e0:	f000 f8c8 	bl	8012574 <sclock>
		}
		break;
 80123e4:	e001      	b.n	80123ea <ispVMShift+0x9e>
		break;
 80123e6:	bf00      	nop
 80123e8:	e000      	b.n	80123ec <ispVMShift+0xa0>
		break;
 80123ea:	bf00      	nop
	* Set the appropriate index locations.  If error then return *
	* error code immediately.                                    *
	*                                                            *
	*************************************************************/

	siRetCode = ispVMShiftExec(uiDataSize);
 80123ec:	68b8      	ldr	r0, [r7, #8]
 80123ee:	f7ff febd 	bl	801216c <ispVMShiftExec>
 80123f2:	4603      	mov	r3, r0
 80123f4:	81fb      	strh	r3, [r7, #14]

	if (siRetCode < 0)
 80123f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	da02      	bge.n	8012404 <ispVMShift+0xb8>
	{
		return siRetCode;
 80123fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012402:	e06e      	b.n	80124e2 <ispVMShift+0x196>
	* read from the device and VERIFY0.  Else only TDI exists     *
	* which must send data to the device only.                   *
	*                                                            *
	*************************************************************/

	if ((g_usDataType & TDO_DATA) ||(g_usDataType & DTDO_DATA))
 8012404:	4b39      	ldr	r3, [pc, #228]	; (80124ec <ispVMShift+0x1a0>)
 8012406:	881b      	ldrh	r3, [r3, #0]
 8012408:	f003 0308 	and.w	r3, r3, #8
 801240c:	2b00      	cmp	r3, #0
 801240e:	d105      	bne.n	801241c <ispVMShift+0xd0>
 8012410:	4b36      	ldr	r3, [pc, #216]	; (80124ec <ispVMShift+0x1a0>)
 8012412:	881b      	ldrh	r3, [r3, #0]
 8012414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012418:	2b00      	cmp	r3, #0
 801241a:	d01a      	beq.n	8012452 <ispVMShift+0x106>
	{
		siRetCode = ispVMRead(uiDataSize);
 801241c:	68b8      	ldr	r0, [r7, #8]
 801241e:	f000 f8b9 	bl	8012594 <ispVMRead>
 8012422:	4603      	mov	r3, r0
 8012424:	81fb      	strh	r3, [r7, #14]
		* DTDO_DATA flag is set, then check to make sure the next    *
		* byte in the data array, which is the last byte of the      *
		* frame, is the END_FRAME byte.                              *
		*                                                            *
		*************************************************************/
		if (g_usDataType & DTDO_DATA)
 8012426:	4b31      	ldr	r3, [pc, #196]	; (80124ec <ispVMShift+0x1a0>)
 8012428:	881b      	ldrh	r3, [r3, #0]
 801242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801242e:	2b00      	cmp	r3, #0
 8012430:	d028      	beq.n	8012484 <ispVMShift+0x138>
		{
			if (GetByte(g_iMovingDataIndex++, 0) != END_FRAME)
 8012432:	4b31      	ldr	r3, [pc, #196]	; (80124f8 <ispVMShift+0x1ac>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	1c5a      	adds	r2, r3, #1
 8012438:	492f      	ldr	r1, [pc, #188]	; (80124f8 <ispVMShift+0x1ac>)
 801243a:	600a      	str	r2, [r1, #0]
 801243c:	2100      	movs	r1, #0
 801243e:	4618      	mov	r0, r3
 8012440:	f000 f864 	bl	801250c <GetByte>
 8012444:	4603      	mov	r3, r0
 8012446:	2ba2      	cmp	r3, #162	; 0xa2
 8012448:	d01c      	beq.n	8012484 <ispVMShift+0x138>
			{
				siRetCode = ERR_DATA_FILE_ERROR;
 801244a:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 801244e:	81fb      	strh	r3, [r7, #14]
		if (g_usDataType & DTDO_DATA)
 8012450:	e018      	b.n	8012484 <ispVMShift+0x138>
			}
		}
	}
	else
	{
		ispVMSend(uiDataSize);
 8012452:	68b8      	ldr	r0, [r7, #8]
 8012454:	f000 f97c 	bl	8012750 <ispVMSend>
		* is set, then check to make sure the next byte in the data  *
		* array, which is the last byte of the frame, is the         *
		* END_FRAME byte.                                            *
		*                                                            *
		*************************************************************/
		if (g_usDataType & DTDI_DATA)
 8012458:	4b24      	ldr	r3, [pc, #144]	; (80124ec <ispVMShift+0x1a0>)
 801245a:	881b      	ldrh	r3, [r3, #0]
 801245c:	f003 0320 	and.w	r3, r3, #32
 8012460:	2b00      	cmp	r3, #0
 8012462:	d010      	beq.n	8012486 <ispVMShift+0x13a>
		{
			if (GetByte(g_iMovingDataIndex++, 0) != END_FRAME)
 8012464:	4b24      	ldr	r3, [pc, #144]	; (80124f8 <ispVMShift+0x1ac>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	1c5a      	adds	r2, r3, #1
 801246a:	4923      	ldr	r1, [pc, #140]	; (80124f8 <ispVMShift+0x1ac>)
 801246c:	600a      	str	r2, [r1, #0]
 801246e:	2100      	movs	r1, #0
 8012470:	4618      	mov	r0, r3
 8012472:	f000 f84b 	bl	801250c <GetByte>
 8012476:	4603      	mov	r3, r0
 8012478:	2ba2      	cmp	r3, #162	; 0xa2
 801247a:	d004      	beq.n	8012486 <ispVMShift+0x13a>
			{
				siRetCode = ERR_DATA_FILE_ERROR;
 801247c:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8012480:	81fb      	strh	r3, [r7, #14]
 8012482:	e000      	b.n	8012486 <ispVMShift+0x13a>
		if (g_usDataType & DTDO_DATA)
 8012484:	bf00      	nop
	* Bypass trailer if it exists.  Move state machine to        *
	* ENDIR/ENDDR state.                                         *
	*                                                            *
	*************************************************************/

	switch (a_cCommand)
 8012486:	79fb      	ldrb	r3, [r7, #7]
 8012488:	2b11      	cmp	r3, #17
 801248a:	d002      	beq.n	8012492 <ispVMShift+0x146>
 801248c:	2b12      	cmp	r3, #18
 801248e:	d013      	beq.n	80124b8 <ispVMShift+0x16c>
 8012490:	e025      	b.n	80124de <ispVMShift+0x192>
	{
	case SIR:
		if (g_siTailIR > 0)
 8012492:	4b1a      	ldr	r3, [pc, #104]	; (80124fc <ispVMShift+0x1b0>)
 8012494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012498:	2b00      	cmp	r3, #0
 801249a:	dd07      	ble.n	80124ac <ispVMShift+0x160>
		{
			sclock();
 801249c:	f000 f86a 	bl	8012574 <sclock>
			ispVMBypass(g_siTailIR);
 80124a0:	4b16      	ldr	r3, [pc, #88]	; (80124fc <ispVMShift+0x1b0>)
 80124a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f000 fa56 	bl	8012958 <ispVMBypass>
		}
		ispVMStateMachine(g_cEndIR);
 80124ac:	4b14      	ldr	r3, [pc, #80]	; (8012500 <ispVMShift+0x1b4>)
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	4618      	mov	r0, r3
 80124b2:	f000 f9cf 	bl	8012854 <ispVMStateMachine>
		break;
 80124b6:	e012      	b.n	80124de <ispVMShift+0x192>
    case SDR:
		if (g_siTailDR > 0)
 80124b8:	4b12      	ldr	r3, [pc, #72]	; (8012504 <ispVMShift+0x1b8>)
 80124ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	dd07      	ble.n	80124d2 <ispVMShift+0x186>
		{
			sclock();
 80124c2:	f000 f857 	bl	8012574 <sclock>
			ispVMBypass(g_siTailDR);
 80124c6:	4b0f      	ldr	r3, [pc, #60]	; (8012504 <ispVMShift+0x1b8>)
 80124c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124cc:	4618      	mov	r0, r3
 80124ce:	f000 fa43 	bl	8012958 <ispVMBypass>
		}
		ispVMStateMachine(g_cEndDR);
 80124d2:	4b0d      	ldr	r3, [pc, #52]	; (8012508 <ispVMShift+0x1bc>)
 80124d4:	781b      	ldrb	r3, [r3, #0]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f000 f9bc 	bl	8012854 <ispVMStateMachine>
		break;
 80124dc:	bf00      	nop
	}

	return siRetCode;
 80124de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	200003e0 	.word	0x200003e0
 80124f0:	200003e6 	.word	0x200003e6
 80124f4:	200003e4 	.word	0x200003e4
 80124f8:	200003dc 	.word	0x200003dc
 80124fc:	200003ea 	.word	0x200003ea
 8012500:	200003e3 	.word	0x200003e3
 8012504:	200003e8 	.word	0x200003e8
 8012508:	200003e2 	.word	0x200003e2

0801250c <GetByte>:
*     bounds.                                                *
*                                                            *
*************************************************************/

uint8_t GetByte(int32_t a_iCurrentIndex, char a_cAlgo)
{
 801250c:	b480      	push	{r7}
 801250e:	b085      	sub	sp, #20
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	460b      	mov	r3, r1
 8012516:	70fb      	strb	r3, [r7, #3]
	uint8_t ucData = 0;
 8012518:	2300      	movs	r3, #0
 801251a:	73fb      	strb	r3, [r7, #15]

	if (a_cAlgo)
 801251c:	78fb      	ldrb	r3, [r7, #3]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00c      	beq.n	801253c <GetByte+0x30>
	*                                                            *
	* If the current index is still within range, then return    *
	* the next byte.  If it is out of range, then return -1.     *
	*                                                            *
	*************************************************************/
		if (a_iCurrentIndex >= g_iAlgoSize)
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	4b0f      	ldr	r3, [pc, #60]	; (8012564 <GetByte+0x58>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	429a      	cmp	r2, r3
 801252a:	d301      	bcc.n	8012530 <GetByte+0x24>
		{
			return (unsigned char) 0xFF;
 801252c:	23ff      	movs	r3, #255	; 0xff
 801252e:	e012      	b.n	8012556 <GetByte+0x4a>
		}
		ucData = (unsigned char) __fpga_alg[a_iCurrentIndex];
 8012530:	4a0d      	ldr	r2, [pc, #52]	; (8012568 <GetByte+0x5c>)
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	4413      	add	r3, r2
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	73fb      	strb	r3, [r7, #15]
 801253a:	e00b      	b.n	8012554 <GetByte+0x48>
	*                                                            *
	* If the current index is still within range, then return    *
	* the next byte.  If it is out of range, then return -1.     *
	*                                                            *
	*************************************************************/
		if (a_iCurrentIndex >= g_iDataSize)
 801253c:	687a      	ldr	r2, [r7, #4]
 801253e:	4b0b      	ldr	r3, [pc, #44]	; (801256c <GetByte+0x60>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	429a      	cmp	r2, r3
 8012544:	d301      	bcc.n	801254a <GetByte+0x3e>
		{
			return (unsigned char) 0xFF;
 8012546:	23ff      	movs	r3, #255	; 0xff
 8012548:	e005      	b.n	8012556 <GetByte+0x4a>
		}
		ucData = (unsigned char) __fpga_data[a_iCurrentIndex];
 801254a:	4a09      	ldr	r2, [pc, #36]	; (8012570 <GetByte+0x64>)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4413      	add	r3, r2
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	73fb      	strb	r3, [r7, #15]
	}

	return ucData;
 8012554:	7bfb      	ldrb	r3, [r7, #15]
}
 8012556:	4618      	mov	r0, r3
 8012558:	3714      	adds	r7, #20
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop
 8012564:	200000fc 	.word	0x200000fc
 8012568:	08019f08 	.word	0x08019f08
 801256c:	20000100 	.word	0x20000100
 8012570:	08039a4c 	.word	0x08039a4c

08012574 <sclock>:
*     This function applies a HLL pulse to TCK.              *
*                                                            *
*************************************************************/

void sclock()
{
 8012574:	b580      	push	{r7, lr}
 8012576:	af00      	add	r7, sp, #0
*                                                            *
* Set TCK to HIGH, LOW, LOW.                                 *
*                                                            *
*************************************************************/

	writePort(pinTCK, 0x01);
 8012578:	2101      	movs	r1, #1
 801257a:	2002      	movs	r0, #2
 801257c:	f7ff fa40 	bl	8011a00 <writePort>
	writePort(pinTCK, 0x00);
 8012580:	2100      	movs	r1, #0
 8012582:	2002      	movs	r0, #2
 8012584:	f7ff fa3c 	bl	8011a00 <writePort>
	writePort(pinTCK, 0x00);
 8012588:	2100      	movs	r1, #0
 801258a:	2002      	movs	r0, #2
 801258c:	f7ff fa38 	bl	8011a00 <writePort>
}
 8012590:	bf00      	nop
 8012592:	bd80      	pop	{r7, pc}

08012594 <ispVMRead>:
*     compares it to the expected TDO.                       *
*                                                            *
*************************************************************/

int16_t ispVMRead(uint32_t a_uiDataSize)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b086      	sub	sp, #24
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
	uint32_t uiIndex = 0;
 801259c:	2300      	movs	r3, #0
 801259e:	617b      	str	r3, [r7, #20]
	uint16_t usErrorCount = 0;
 80125a0:	2300      	movs	r3, #0
 80125a2:	827b      	strh	r3, [r7, #18]
	uint8_t ucTDIByte = 0;
 80125a4:	2300      	movs	r3, #0
 80125a6:	747b      	strb	r3, [r7, #17]
	uint8_t ucTDOByte = 0;
 80125a8:	2300      	movs	r3, #0
 80125aa:	743b      	strb	r3, [r7, #16]
	uint8_t ucMaskByte = 0;
 80125ac:	2300      	movs	r3, #0
 80125ae:	73fb      	strb	r3, [r7, #15]
	uint8_t ucCurBit = 0;
 80125b0:	2300      	movs	r3, #0
 80125b2:	73bb      	strb	r3, [r7, #14]

	for (uiIndex = 0;uiIndex < a_uiDataSize; uiIndex++)
 80125b4:	2300      	movs	r3, #0
 80125b6:	617b      	str	r3, [r7, #20]
 80125b8:	e0ae      	b.n	8012718 <ispVMRead+0x184>
	{
		if (uiIndex % 8 == 0)
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	f003 0307 	and.w	r3, r3, #7
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d16d      	bne.n	80126a0 <ispVMRead+0x10c>
		{
			if ( g_usDataType & TDI_DATA ) {
 80125c4:	4b5c      	ldr	r3, [pc, #368]	; (8012738 <ispVMRead+0x1a4>)
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	f003 0304 	and.w	r3, r3, #4
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00b      	beq.n	80125e8 <ispVMRead+0x54>
				*                                                            *
				* If the TDI_DATA flag is set, then grab the next byte from  *
				* the algo array and increment the TDI index.                *
				*                                                            *
				*************************************************************/
				ucTDIByte = GetByte( g_iTDIIndex++, 1 );
 80125d0:	4b5a      	ldr	r3, [pc, #360]	; (801273c <ispVMRead+0x1a8>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	1c5a      	adds	r2, r3, #1
 80125d6:	4959      	ldr	r1, [pc, #356]	; (801273c <ispVMRead+0x1a8>)
 80125d8:	600a      	str	r2, [r1, #0]
 80125da:	2101      	movs	r1, #1
 80125dc:	4618      	mov	r0, r3
 80125de:	f7ff ff95 	bl	801250c <GetByte>
 80125e2:	4603      	mov	r3, r0
 80125e4:	747b      	strb	r3, [r7, #17]
 80125e6:	e001      	b.n	80125ec <ispVMRead+0x58>
			}
			else
			{
				ucTDIByte = 0xFF;
 80125e8:	23ff      	movs	r3, #255	; 0xff
 80125ea:	747b      	strb	r3, [r7, #17]
			}
			if (g_usDataType & TDO_DATA)
 80125ec:	4b52      	ldr	r3, [pc, #328]	; (8012738 <ispVMRead+0x1a4>)
 80125ee:	881b      	ldrh	r3, [r3, #0]
 80125f0:	f003 0308 	and.w	r3, r3, #8
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d00b      	beq.n	8012610 <ispVMRead+0x7c>
			*                                                            *
			* If the TDO_DATA flag is set, then grab the next byte from  *
			* the algo array and increment the TDO index.                *
			*                                                            *
			*************************************************************/
				ucTDOByte = GetByte(g_iTDOIndex++, 1);
 80125f8:	4b51      	ldr	r3, [pc, #324]	; (8012740 <ispVMRead+0x1ac>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	1c5a      	adds	r2, r3, #1
 80125fe:	4950      	ldr	r1, [pc, #320]	; (8012740 <ispVMRead+0x1ac>)
 8012600:	600a      	str	r2, [r1, #0]
 8012602:	2101      	movs	r1, #1
 8012604:	4618      	mov	r0, r3
 8012606:	f7ff ff81 	bl	801250c <GetByte>
 801260a:	4603      	mov	r3, r0
 801260c:	743b      	strb	r3, [r7, #16]
 801260e:	e033      	b.n	8012678 <ispVMRead+0xe4>
			* the compression counter exists, then the next TDO byte     *
			* must be 0xFF.  If it doesn't exist, then get next byte     *
			* from data file array.                                      *
			*                                                            *
			*************************************************************/
				if (g_ucCompressCounter)
 8012610:	4b4c      	ldr	r3, [pc, #304]	; (8012744 <ispVMRead+0x1b0>)
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d008      	beq.n	801262a <ispVMRead+0x96>
				{
					g_ucCompressCounter--;
 8012618:	4b4a      	ldr	r3, [pc, #296]	; (8012744 <ispVMRead+0x1b0>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	3b01      	subs	r3, #1
 801261e:	b2da      	uxtb	r2, r3
 8012620:	4b48      	ldr	r3, [pc, #288]	; (8012744 <ispVMRead+0x1b0>)
 8012622:	701a      	strb	r2, [r3, #0]
					ucTDOByte =(uint8_t) 0xFF;
 8012624:	23ff      	movs	r3, #255	; 0xff
 8012626:	743b      	strb	r3, [r7, #16]
 8012628:	e026      	b.n	8012678 <ispVMRead+0xe4>
				}
				else
				{
					ucTDOByte = GetByte(g_iMovingDataIndex++, 0);
 801262a:	4b47      	ldr	r3, [pc, #284]	; (8012748 <ispVMRead+0x1b4>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	1c5a      	adds	r2, r3, #1
 8012630:	4945      	ldr	r1, [pc, #276]	; (8012748 <ispVMRead+0x1b4>)
 8012632:	600a      	str	r2, [r1, #0]
 8012634:	2100      	movs	r1, #0
 8012636:	4618      	mov	r0, r3
 8012638:	f7ff ff68 	bl	801250c <GetByte>
 801263c:	4603      	mov	r3, r0
 801263e:	743b      	strb	r3, [r7, #16]
					* next couple bytes must be read to determine how many       *
					* repetitions of 0xFF are there.  That value will be stored  *
					* in the variable g_ucCompressCounter.                       *
					*                                                            *
					*************************************************************/
					if ((g_usDataType & COMPRESS_FRAME) &&(ucTDOByte ==(uint8_t) 0xFF))
 8012640:	4b3d      	ldr	r3, [pc, #244]	; (8012738 <ispVMRead+0x1a4>)
 8012642:	881b      	ldrh	r3, [r3, #0]
 8012644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012648:	2b00      	cmp	r3, #0
 801264a:	d015      	beq.n	8012678 <ispVMRead+0xe4>
 801264c:	7c3b      	ldrb	r3, [r7, #16]
 801264e:	2bff      	cmp	r3, #255	; 0xff
 8012650:	d112      	bne.n	8012678 <ispVMRead+0xe4>
					{
						g_ucCompressCounter = GetByte(g_iMovingDataIndex++, 0);
 8012652:	4b3d      	ldr	r3, [pc, #244]	; (8012748 <ispVMRead+0x1b4>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	1c5a      	adds	r2, r3, #1
 8012658:	493b      	ldr	r1, [pc, #236]	; (8012748 <ispVMRead+0x1b4>)
 801265a:	600a      	str	r2, [r1, #0]
 801265c:	2100      	movs	r1, #0
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff ff54 	bl	801250c <GetByte>
 8012664:	4603      	mov	r3, r0
 8012666:	461a      	mov	r2, r3
 8012668:	4b36      	ldr	r3, [pc, #216]	; (8012744 <ispVMRead+0x1b0>)
 801266a:	701a      	strb	r2, [r3, #0]
						g_ucCompressCounter--;
 801266c:	4b35      	ldr	r3, [pc, #212]	; (8012744 <ispVMRead+0x1b0>)
 801266e:	781b      	ldrb	r3, [r3, #0]
 8012670:	3b01      	subs	r3, #1
 8012672:	b2da      	uxtb	r2, r3
 8012674:	4b33      	ldr	r3, [pc, #204]	; (8012744 <ispVMRead+0x1b0>)
 8012676:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (g_usDataType & MASK_DATA)
 8012678:	4b2f      	ldr	r3, [pc, #188]	; (8012738 <ispVMRead+0x1a4>)
 801267a:	881b      	ldrh	r3, [r3, #0]
 801267c:	f003 0310 	and.w	r3, r3, #16
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00b      	beq.n	801269c <ispVMRead+0x108>
			{
				ucMaskByte = GetByte(g_iMASKIndex++, 1);
 8012684:	4b31      	ldr	r3, [pc, #196]	; (801274c <ispVMRead+0x1b8>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	1c5a      	adds	r2, r3, #1
 801268a:	4930      	ldr	r1, [pc, #192]	; (801274c <ispVMRead+0x1b8>)
 801268c:	600a      	str	r2, [r1, #0]
 801268e:	2101      	movs	r1, #1
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff ff3b 	bl	801250c <GetByte>
 8012696:	4603      	mov	r3, r0
 8012698:	73fb      	strb	r3, [r7, #15]
 801269a:	e001      	b.n	80126a0 <ispVMRead+0x10c>
			}
			else
			{
				ucMaskByte =(uint8_t) 0xFF;
 801269c:	23ff      	movs	r3, #255	; 0xff
 801269e:	73fb      	strb	r3, [r7, #15]
			}
		}

		ucCurBit = readPort();
 80126a0:	f7ff f996 	bl	80119d0 <readPort>
 80126a4:	4603      	mov	r3, r0
 80126a6:	73bb      	strb	r3, [r7, #14]

		if ((((ucMaskByte << uiIndex % 8) & 0x80) ? 0x01 : 0x00))
 80126a8:	7bfa      	ldrb	r2, [r7, #15]
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	f003 0307 	and.w	r3, r3, #7
 80126b0:	fa02 f303 	lsl.w	r3, r2, r3
 80126b4:	11db      	asrs	r3, r3, #7
 80126b6:	f003 0301 	and.w	r3, r3, #1
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d012      	beq.n	80126e6 <ispVMRead+0x152>
		{
			if (ucCurBit !=(uint8_t)(((ucTDOByte << uiIndex % 8) & 0x80) ? 0x01 : 0x00))
 80126c0:	7bbb      	ldrb	r3, [r7, #14]
 80126c2:	7c39      	ldrb	r1, [r7, #16]
 80126c4:	697a      	ldr	r2, [r7, #20]
 80126c6:	f002 0207 	and.w	r2, r2, #7
 80126ca:	fa01 f202 	lsl.w	r2, r1, r2
 80126ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80126d2:	2a00      	cmp	r2, #0
 80126d4:	bf14      	ite	ne
 80126d6:	2201      	movne	r2, #1
 80126d8:	2200      	moveq	r2, #0
 80126da:	b2d2      	uxtb	r2, r2
 80126dc:	4293      	cmp	r3, r2
 80126de:	d002      	beq.n	80126e6 <ispVMRead+0x152>
			{
				usErrorCount++;
 80126e0:	8a7b      	ldrh	r3, [r7, #18]
 80126e2:	3301      	adds	r3, #1
 80126e4:	827b      	strh	r3, [r7, #18]
		*                                                            *
		* Always shift 0x01 into TDI pin when reading.               *
		*                                                            *
		*************************************************************/

		writePort(pinTDI, (uint8_t) (((ucTDIByte << uiIndex % 8) & 0x80) ? 0x01 : 0x00));
 80126e6:	7c7a      	ldrb	r2, [r7, #17]
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	f003 0307 	and.w	r3, r3, #7
 80126ee:	fa02 f303 	lsl.w	r3, r2, r3
 80126f2:	11db      	asrs	r3, r3, #7
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	f003 0301 	and.w	r3, r3, #1
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	4619      	mov	r1, r3
 80126fe:	2001      	movs	r0, #1
 8012700:	f7ff f97e 	bl	8011a00 <writePort>

		if (uiIndex < a_uiDataSize - 1)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	3b01      	subs	r3, #1
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	429a      	cmp	r2, r3
 801270c:	d201      	bcs.n	8012712 <ispVMRead+0x17e>
		{
			sclock();
 801270e:	f7ff ff31 	bl	8012574 <sclock>
	for (uiIndex = 0;uiIndex < a_uiDataSize; uiIndex++)
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	3301      	adds	r3, #1
 8012716:	617b      	str	r3, [r7, #20]
 8012718:	697a      	ldr	r2, [r7, #20]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	429a      	cmp	r2, r3
 801271e:	f4ff af4c 	bcc.w	80125ba <ispVMRead+0x26>
		}
	}

	if (usErrorCount > 0)
 8012722:	8a7b      	ldrh	r3, [r7, #18]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d002      	beq.n	801272e <ispVMRead+0x19a>
	{
		return -1;
 8012728:	f04f 33ff 	mov.w	r3, #4294967295
 801272c:	e000      	b.n	8012730 <ispVMRead+0x19c>
	}

	return 0;
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	3718      	adds	r7, #24
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}
 8012738:	200003e0 	.word	0x200003e0
 801273c:	200003f4 	.word	0x200003f4
 8012740:	200003f8 	.word	0x200003f8
 8012744:	20000400 	.word	0x20000400
 8012748:	200003dc 	.word	0x200003dc
 801274c:	200003fc 	.word	0x200003fc

08012750 <ispVMSend>:
*     This function sends a data stream to the device.       *
*                                                            *
*************************************************************/

void ispVMSend(uint32_t a_uiDataSize)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
	uint32_t iIndex;
	uint8_t ucCurByte = 0;
 8012758:	2300      	movs	r3, #0
 801275a:	72fb      	strb	r3, [r7, #11]
	uint8_t ucBitState = 0;
 801275c:	2300      	movs	r3, #0
 801275e:	72bb      	strb	r3, [r7, #10]
	*                                                            *
	* Begin processing the data to the device.                   *
	*                                                            *
	*************************************************************/

	for (iIndex = 0;iIndex < a_uiDataSize; iIndex++)
 8012760:	2300      	movs	r3, #0
 8012762:	60fb      	str	r3, [r7, #12]
 8012764:	e064      	b.n	8012830 <ispVMSend+0xe0>
	{
		if (iIndex % 8 == 0)
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	f003 0307 	and.w	r3, r3, #7
 801276c:	2b00      	cmp	r3, #0
 801276e:	d145      	bne.n	80127fc <ispVMSend+0xac>
		{
			if (g_usDataType & TDI_DATA)
 8012770:	4b34      	ldr	r3, [pc, #208]	; (8012844 <ispVMSend+0xf4>)
 8012772:	881b      	ldrh	r3, [r3, #0]
 8012774:	f003 0304 	and.w	r3, r3, #4
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00b      	beq.n	8012794 <ispVMSend+0x44>
			*                                                            *
			* If the TDI_DATA flag is set, then grab the next byte from  *
			* the algo array and increment the TDI index.                *
			*                                                            *
			*************************************************************/
				ucCurByte = GetByte(g_iTDIIndex++, 1);
 801277c:	4b32      	ldr	r3, [pc, #200]	; (8012848 <ispVMSend+0xf8>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	1c5a      	adds	r2, r3, #1
 8012782:	4931      	ldr	r1, [pc, #196]	; (8012848 <ispVMSend+0xf8>)
 8012784:	600a      	str	r2, [r1, #0]
 8012786:	2101      	movs	r1, #1
 8012788:	4618      	mov	r0, r3
 801278a:	f7ff febf 	bl	801250c <GetByte>
 801278e:	4603      	mov	r3, r0
 8012790:	72fb      	strb	r3, [r7, #11]
 8012792:	e033      	b.n	80127fc <ispVMSend+0xac>
			* already been set.  If the compression counter exists, then *
			* the next TDI byte must be 0xFF.  If it doesn't exist, then *
			* get next byte from data file array.                        *
			*                                                            *
			*************************************************************/
				if (g_ucCompressCounter)
 8012794:	4b2d      	ldr	r3, [pc, #180]	; (801284c <ispVMSend+0xfc>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d008      	beq.n	80127ae <ispVMSend+0x5e>
				{
					g_ucCompressCounter--;
 801279c:	4b2b      	ldr	r3, [pc, #172]	; (801284c <ispVMSend+0xfc>)
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	3b01      	subs	r3, #1
 80127a2:	b2da      	uxtb	r2, r3
 80127a4:	4b29      	ldr	r3, [pc, #164]	; (801284c <ispVMSend+0xfc>)
 80127a6:	701a      	strb	r2, [r3, #0]
					ucCurByte =(uint8_t) 0xFF;
 80127a8:	23ff      	movs	r3, #255	; 0xff
 80127aa:	72fb      	strb	r3, [r7, #11]
 80127ac:	e026      	b.n	80127fc <ispVMSend+0xac>
				}
				else
				{
					ucCurByte = GetByte(g_iMovingDataIndex++, 0);
 80127ae:	4b28      	ldr	r3, [pc, #160]	; (8012850 <ispVMSend+0x100>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	1c5a      	adds	r2, r3, #1
 80127b4:	4926      	ldr	r1, [pc, #152]	; (8012850 <ispVMSend+0x100>)
 80127b6:	600a      	str	r2, [r1, #0]
 80127b8:	2100      	movs	r1, #0
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7ff fea6 	bl	801250c <GetByte>
 80127c0:	4603      	mov	r3, r0
 80127c2:	72fb      	strb	r3, [r7, #11]
					* repetitions of 0xFF are there.  That value will be stored  *
					* in the variable g_ucCompressCounter.                       *
					*                                                            *
					*************************************************************/

					if ((g_usDataType & COMPRESS_FRAME) &&(ucCurByte ==(uint8_t) 0xFF))
 80127c4:	4b1f      	ldr	r3, [pc, #124]	; (8012844 <ispVMSend+0xf4>)
 80127c6:	881b      	ldrh	r3, [r3, #0]
 80127c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d015      	beq.n	80127fc <ispVMSend+0xac>
 80127d0:	7afb      	ldrb	r3, [r7, #11]
 80127d2:	2bff      	cmp	r3, #255	; 0xff
 80127d4:	d112      	bne.n	80127fc <ispVMSend+0xac>
					{
						g_ucCompressCounter = GetByte(g_iMovingDataIndex++, 0);
 80127d6:	4b1e      	ldr	r3, [pc, #120]	; (8012850 <ispVMSend+0x100>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	1c5a      	adds	r2, r3, #1
 80127dc:	491c      	ldr	r1, [pc, #112]	; (8012850 <ispVMSend+0x100>)
 80127de:	600a      	str	r2, [r1, #0]
 80127e0:	2100      	movs	r1, #0
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7ff fe92 	bl	801250c <GetByte>
 80127e8:	4603      	mov	r3, r0
 80127ea:	461a      	mov	r2, r3
 80127ec:	4b17      	ldr	r3, [pc, #92]	; (801284c <ispVMSend+0xfc>)
 80127ee:	701a      	strb	r2, [r3, #0]
						g_ucCompressCounter--;
 80127f0:	4b16      	ldr	r3, [pc, #88]	; (801284c <ispVMSend+0xfc>)
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	3b01      	subs	r3, #1
 80127f6:	b2da      	uxtb	r2, r3
 80127f8:	4b14      	ldr	r3, [pc, #80]	; (801284c <ispVMSend+0xfc>)
 80127fa:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}

		ucBitState =(uint8_t)(((ucCurByte << iIndex % 8) & 0x80) ? 0x01 : 0x00);
 80127fc:	7afa      	ldrb	r2, [r7, #11]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f003 0307 	and.w	r3, r3, #7
 8012804:	fa02 f303 	lsl.w	r3, r2, r3
 8012808:	11db      	asrs	r3, r3, #7
 801280a:	b2db      	uxtb	r3, r3
 801280c:	f003 0301 	and.w	r3, r3, #1
 8012810:	72bb      	strb	r3, [r7, #10]
		writePort(pinTDI, ucBitState);
 8012812:	7abb      	ldrb	r3, [r7, #10]
 8012814:	4619      	mov	r1, r3
 8012816:	2001      	movs	r0, #1
 8012818:	f7ff f8f2 	bl	8011a00 <writePort>

		if (iIndex < a_uiDataSize - 1)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	3b01      	subs	r3, #1
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	429a      	cmp	r2, r3
 8012824:	d201      	bcs.n	801282a <ispVMSend+0xda>
		{
			sclock();
 8012826:	f7ff fea5 	bl	8012574 <sclock>
	for (iIndex = 0;iIndex < a_uiDataSize; iIndex++)
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	3301      	adds	r3, #1
 801282e:	60fb      	str	r3, [r7, #12]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	429a      	cmp	r2, r3
 8012836:	d396      	bcc.n	8012766 <ispVMSend+0x16>
		}
	}
}
 8012838:	bf00      	nop
 801283a:	bf00      	nop
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	200003e0 	.word	0x200003e0
 8012848:	200003f4 	.word	0x200003f4
 801284c:	20000400 	.word	0x20000400
 8012850:	200003dc 	.word	0x200003dc

08012854 <ispVMStateMachine>:
*     different JTAG states.                                 *
*                                                            *
*************************************************************/

void ispVMStateMachine(char a_cNextState)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	4603      	mov	r3, r0
 801285c:	71fb      	strb	r3, [r7, #7]
	char cPathIndex, cStateIndex;
	if ((g_cCurrentJTAGState == DRPAUSE) &&(a_cNextState== DRPAUSE) && m_loopState)
 801285e:	4b32      	ldr	r3, [pc, #200]	; (8012928 <ispVMStateMachine+0xd4>)
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	2b03      	cmp	r3, #3
 8012864:	d106      	bne.n	8012874 <ispVMStateMachine+0x20>
 8012866:	79fb      	ldrb	r3, [r7, #7]
 8012868:	2b03      	cmp	r3, #3
 801286a:	d103      	bne.n	8012874 <ispVMStateMachine+0x20>
 801286c:	4b2f      	ldr	r3, [pc, #188]	; (801292c <ispVMStateMachine+0xd8>)
 801286e:	881b      	ldrh	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d108      	bne.n	8012886 <ispVMStateMachine+0x32>
	{
	}
	else if ((g_cCurrentJTAGState == a_cNextState) &&(g_cCurrentJTAGState != RESET))
 8012874:	4b2c      	ldr	r3, [pc, #176]	; (8012928 <ispVMStateMachine+0xd4>)
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	79fa      	ldrb	r2, [r7, #7]
 801287a:	429a      	cmp	r2, r3
 801287c:	d103      	bne.n	8012886 <ispVMStateMachine+0x32>
 801287e:	4b2a      	ldr	r3, [pc, #168]	; (8012928 <ispVMStateMachine+0xd4>)
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d14c      	bne.n	8012920 <ispVMStateMachine+0xcc>
	{
		return;
	}

	for (cStateIndex = 0;cStateIndex < 25; cStateIndex++)
 8012886:	2300      	movs	r3, #0
 8012888:	73bb      	strb	r3, [r7, #14]
 801288a:	e012      	b.n	80128b2 <ispVMStateMachine+0x5e>
	{
		if ((g_cCurrentJTAGState == iStates[cStateIndex].CurState) &&(a_cNextState == iStates[cStateIndex].NextState))
 801288c:	7bbb      	ldrb	r3, [r7, #14]
 801288e:	4a28      	ldr	r2, [pc, #160]	; (8012930 <ispVMStateMachine+0xdc>)
 8012890:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8012894:	4b24      	ldr	r3, [pc, #144]	; (8012928 <ispVMStateMachine+0xd4>)
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	429a      	cmp	r2, r3
 801289a:	d107      	bne.n	80128ac <ispVMStateMachine+0x58>
 801289c:	7bbb      	ldrb	r3, [r7, #14]
 801289e:	4a24      	ldr	r2, [pc, #144]	; (8012930 <ispVMStateMachine+0xdc>)
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	4413      	add	r3, r2
 80128a4:	785b      	ldrb	r3, [r3, #1]
 80128a6:	79fa      	ldrb	r2, [r7, #7]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d006      	beq.n	80128ba <ispVMStateMachine+0x66>
	for (cStateIndex = 0;cStateIndex < 25; cStateIndex++)
 80128ac:	7bbb      	ldrb	r3, [r7, #14]
 80128ae:	3301      	adds	r3, #1
 80128b0:	73bb      	strb	r3, [r7, #14]
 80128b2:	7bbb      	ldrb	r3, [r7, #14]
 80128b4:	2b18      	cmp	r3, #24
 80128b6:	d9e9      	bls.n	801288c <ispVMStateMachine+0x38>
 80128b8:	e000      	b.n	80128bc <ispVMStateMachine+0x68>
		{
			break;
 80128ba:	bf00      	nop
		}
	}
	g_cCurrentJTAGState = a_cNextState;
 80128bc:	4a1a      	ldr	r2, [pc, #104]	; (8012928 <ispVMStateMachine+0xd4>)
 80128be:	79fb      	ldrb	r3, [r7, #7]
 80128c0:	7013      	strb	r3, [r2, #0]
	for (cPathIndex = 0;cPathIndex < iStates[cStateIndex].Pulses; cPathIndex++)
 80128c2:	2300      	movs	r3, #0
 80128c4:	73fb      	strb	r3, [r7, #15]
 80128c6:	e01a      	b.n	80128fe <ispVMStateMachine+0xaa>
	{
		if ((iStates[cStateIndex].Pattern << cPathIndex) & 0x80)
 80128c8:	7bbb      	ldrb	r3, [r7, #14]
 80128ca:	4a19      	ldr	r2, [pc, #100]	; (8012930 <ispVMStateMachine+0xdc>)
 80128cc:	009b      	lsls	r3, r3, #2
 80128ce:	4413      	add	r3, r2
 80128d0:	789b      	ldrb	r3, [r3, #2]
 80128d2:	461a      	mov	r2, r3
 80128d4:	7bfb      	ldrb	r3, [r7, #15]
 80128d6:	fa02 f303 	lsl.w	r3, r2, r3
 80128da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d004      	beq.n	80128ec <ispVMStateMachine+0x98>
		{
			writePort(pinTMS, (uint8_t) 0x01);
 80128e2:	2101      	movs	r1, #1
 80128e4:	2004      	movs	r0, #4
 80128e6:	f7ff f88b 	bl	8011a00 <writePort>
 80128ea:	e003      	b.n	80128f4 <ispVMStateMachine+0xa0>
		}
		else
		{
			writePort(pinTMS, (uint8_t) 0x00);
 80128ec:	2100      	movs	r1, #0
 80128ee:	2004      	movs	r0, #4
 80128f0:	f7ff f886 	bl	8011a00 <writePort>
		}
		sclock();
 80128f4:	f7ff fe3e 	bl	8012574 <sclock>
	for (cPathIndex = 0;cPathIndex < iStates[cStateIndex].Pulses; cPathIndex++)
 80128f8:	7bfb      	ldrb	r3, [r7, #15]
 80128fa:	3301      	adds	r3, #1
 80128fc:	73fb      	strb	r3, [r7, #15]
 80128fe:	7bbb      	ldrb	r3, [r7, #14]
 8012900:	4a0b      	ldr	r2, [pc, #44]	; (8012930 <ispVMStateMachine+0xdc>)
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	4413      	add	r3, r2
 8012906:	78db      	ldrb	r3, [r3, #3]
 8012908:	7bfa      	ldrb	r2, [r7, #15]
 801290a:	429a      	cmp	r2, r3
 801290c:	d3dc      	bcc.n	80128c8 <ispVMStateMachine+0x74>
	}

	writePort(pinTDI, 0x00);
 801290e:	2100      	movs	r1, #0
 8012910:	2001      	movs	r0, #1
 8012912:	f7ff f875 	bl	8011a00 <writePort>
	writePort(pinTMS, 0x00);
 8012916:	2100      	movs	r1, #0
 8012918:	2004      	movs	r0, #4
 801291a:	f7ff f871 	bl	8011a00 <writePort>
 801291e:	e000      	b.n	8012922 <ispVMStateMachine+0xce>
		return;
 8012920:	bf00      	nop
}
 8012922:	3710      	adds	r7, #16
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}
 8012928:	20000401 	.word	0x20000401
 801292c:	20000416 	.word	0x20000416
 8012930:	0806860c 	.word	0x0806860c

08012934 <ispVMClocks>:
*    to TCK.                                                 *
*                                                            *
*************************************************************/

void ispVMClocks(uint32_t a_uiClocks)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
	for (; a_uiClocks > 0; a_uiClocks--)
 801293c:	e004      	b.n	8012948 <ispVMClocks+0x14>
	{
		sclock();
 801293e:	f7ff fe19 	bl	8012574 <sclock>
	for (; a_uiClocks > 0; a_uiClocks--)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	3b01      	subs	r3, #1
 8012946:	607b      	str	r3, [r7, #4]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d1f7      	bne.n	801293e <ispVMClocks+0xa>
	}
}
 801294e:	bf00      	nop
 8012950:	bf00      	nop
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <ispVMBypass>:
*     bypass mode.                                           *
*                                                            *
*************************************************************/

void ispVMBypass(uint32_t a_uiLength)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
*                                                            *
* Issue a_siLength number of 0x01 to the TDI pin to bypass.  *
*                                                            *
*************************************************************/

	for (; a_uiLength > 1; a_uiLength--)
 8012960:	e008      	b.n	8012974 <ispVMBypass+0x1c>
	{
		writePort(pinTDI, (char) 0x01);
 8012962:	2101      	movs	r1, #1
 8012964:	2001      	movs	r0, #1
 8012966:	f7ff f84b 	bl	8011a00 <writePort>
		sclock();
 801296a:	f7ff fe03 	bl	8012574 <sclock>
	for (; a_uiLength > 1; a_uiLength--)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	3b01      	subs	r3, #1
 8012972:	607b      	str	r3, [r7, #4]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2b01      	cmp	r3, #1
 8012978:	d8f3      	bhi.n	8012962 <ispVMBypass+0xa>
	}

	writePort(pinTDI, (char) 0x01);
 801297a:	2101      	movs	r1, #1
 801297c:	2001      	movs	r0, #1
 801297e:	f7ff f83f 	bl	8011a00 <writePort>
}
 8012982:	bf00      	nop
 8012984:	3708      	adds	r7, #8
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
	...

0801298c <ispVMLCOUNT>:
*     This function is set the maximum loop count            *
*                                                            *
*************************************************************/

void ispVMLCOUNT(uint16_t a_usCountSize)
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	4603      	mov	r3, r0
 8012994:	80fb      	strh	r3, [r7, #6]
	g_usLCOUNTSize = a_usCountSize;
 8012996:	4a04      	ldr	r2, [pc, #16]	; (80129a8 <ispVMLCOUNT+0x1c>)
 8012998:	88fb      	ldrh	r3, [r7, #6]
 801299a:	8013      	strh	r3, [r2, #0]
}
 801299c:	bf00      	nop
 801299e:	370c      	adds	r7, #12
 80129a0:	46bd      	mov	sp, r7
 80129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a6:	4770      	bx	lr
 80129a8:	20000410 	.word	0x20000410

080129ac <ispVMLDELAY>:
*     This function is set the delay state, number of TCK and*
*  the delay time for poling the status                      *
*                                                            *
*************************************************************/
void ispVMLDELAY()
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
	g_ucLDELAYState = IDLE;
 80129b2:	4b21      	ldr	r3, [pc, #132]	; (8012a38 <ispVMLDELAY+0x8c>)
 80129b4:	2201      	movs	r2, #1
 80129b6:	701a      	strb	r2, [r3, #0]
	g_ucLDELAYDelay = 0;
 80129b8:	4b20      	ldr	r3, [pc, #128]	; (8012a3c <ispVMLDELAY+0x90>)
 80129ba:	2200      	movs	r2, #0
 80129bc:	801a      	strh	r2, [r3, #0]
	g_ucLDELAYTCK   = 0;
 80129be:	4b20      	ldr	r3, [pc, #128]	; (8012a40 <ispVMLDELAY+0x94>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		uint8_t bytedata = GetByte(g_iMovingAlgoIndex++, 1);
 80129c4:	4b1f      	ldr	r3, [pc, #124]	; (8012a44 <ispVMLDELAY+0x98>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	1c5a      	adds	r2, r3, #1
 80129ca:	491e      	ldr	r1, [pc, #120]	; (8012a44 <ispVMLDELAY+0x98>)
 80129cc:	600a      	str	r2, [r1, #0]
 80129ce:	2101      	movs	r1, #1
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7ff fd9b 	bl	801250c <GetByte>
 80129d6:	4603      	mov	r3, r0
 80129d8:	71fb      	strb	r3, [r7, #7]
		switch (bytedata)
 80129da:	79fb      	ldrb	r3, [r7, #7]
 80129dc:	2b69      	cmp	r3, #105	; 0x69
 80129de:	d027      	beq.n	8012a30 <ispVMLDELAY+0x84>
 80129e0:	2b69      	cmp	r3, #105	; 0x69
 80129e2:	dcef      	bgt.n	80129c4 <ispVMLDELAY+0x18>
 80129e4:	2b1b      	cmp	r3, #27
 80129e6:	d01b      	beq.n	8012a20 <ispVMLDELAY+0x74>
 80129e8:	2b1b      	cmp	r3, #27
 80129ea:	dceb      	bgt.n	80129c4 <ispVMLDELAY+0x18>
 80129ec:	2b10      	cmp	r3, #16
 80129ee:	d002      	beq.n	80129f6 <ispVMLDELAY+0x4a>
 80129f0:	2b1a      	cmp	r3, #26
 80129f2:	d00e      	beq.n	8012a12 <ispVMLDELAY+0x66>
 80129f4:	e01b      	b.n	8012a2e <ispVMLDELAY+0x82>
		{
		case STATE: /*step BSCAN state machine to specified state*/
			g_ucLDELAYState = GetByte(g_iMovingAlgoIndex++, 1);
 80129f6:	4b13      	ldr	r3, [pc, #76]	; (8012a44 <ispVMLDELAY+0x98>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	1c5a      	adds	r2, r3, #1
 80129fc:	4911      	ldr	r1, [pc, #68]	; (8012a44 <ispVMLDELAY+0x98>)
 80129fe:	600a      	str	r2, [r1, #0]
 8012a00:	2101      	movs	r1, #1
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7ff fd82 	bl	801250c <GetByte>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	4b0a      	ldr	r3, [pc, #40]	; (8012a38 <ispVMLDELAY+0x8c>)
 8012a0e:	701a      	strb	r2, [r3, #0]
			break;
 8012a10:	e00d      	b.n	8012a2e <ispVMLDELAY+0x82>
		case WAIT:  /*opcode to wait for specified time in us or ms*/
			g_ucLDELAYDelay = (int16_t) ispVMDataSize();
 8012a12:	f7ff fb75 	bl	8012100 <ispVMDataSize>
 8012a16:	4603      	mov	r3, r0
 8012a18:	b29a      	uxth	r2, r3
 8012a1a:	4b08      	ldr	r3, [pc, #32]	; (8012a3c <ispVMLDELAY+0x90>)
 8012a1c:	801a      	strh	r2, [r3, #0]
			break;
 8012a1e:	e006      	b.n	8012a2e <ispVMLDELAY+0x82>
		case TCK:   /*pulse TCK signal the specified time*/
			g_ucLDELAYTCK = (int16_t) ispVMDataSize();
 8012a20:	f7ff fb6e 	bl	8012100 <ispVMDataSize>
 8012a24:	4603      	mov	r3, r0
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	4b05      	ldr	r3, [pc, #20]	; (8012a40 <ispVMLDELAY+0x94>)
 8012a2a:	801a      	strh	r2, [r3, #0]
			break;
 8012a2c:	bf00      	nop
	{
 8012a2e:	e7c9      	b.n	80129c4 <ispVMLDELAY+0x18>
		case ENDSTATE:
			return;
 8012a30:	bf00      	nop
		}
	}
}
 8012a32:	3708      	adds	r7, #8
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	20000104 	.word	0x20000104
 8012a3c:	20000414 	.word	0x20000414
 8012a40:	20000412 	.word	0x20000412
 8012a44:	200003d8 	.word	0x200003d8

08012a48 <B5_FPGA_Programming>:
*     default values and enters the processor.               *
*                                                            *
*************************************************************/

int32_t B5_FPGA_Programming()
{
 8012a48:	b590      	push	{r4, r7, lr}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
	char szFileVersion[ 9 ] = { 0 };
 8012a4e:	2300      	movs	r3, #0
 8012a50:	603b      	str	r3, [r7, #0]
 8012a52:	1d3b      	adds	r3, r7, #4
 8012a54:	2200      	movs	r2, #0
 8012a56:	601a      	str	r2, [r3, #0]
 8012a58:	711a      	strb	r2, [r3, #4]
	int16_t siRetCode     = 0;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	81fb      	strh	r3, [r7, #14]
	int16_t iIndex        = 0;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	81bb      	strh	r3, [r7, #12]
	int16_t cVersionIndex = 0;
 8012a62:	2300      	movs	r3, #0
 8012a64:	817b      	strh	r3, [r7, #10]
	*                                                            *
	* VARIABLES INITIALIZATION                                   *
	*                                                            *
	*************************************************************/

	g_usDataType       = 0;
 8012a66:	4b45      	ldr	r3, [pc, #276]	; (8012b7c <B5_FPGA_Programming+0x134>)
 8012a68:	2200      	movs	r2, #0
 8012a6a:	801a      	strh	r2, [r3, #0]
	g_iMovingAlgoIndex = 0;
 8012a6c:	4b44      	ldr	r3, [pc, #272]	; (8012b80 <B5_FPGA_Programming+0x138>)
 8012a6e:	2200      	movs	r2, #0
 8012a70:	601a      	str	r2, [r3, #0]
	g_iMovingDataIndex = 0;
 8012a72:	4b44      	ldr	r3, [pc, #272]	; (8012b84 <B5_FPGA_Programming+0x13c>)
 8012a74:	2200      	movs	r2, #0
 8012a76:	601a      	str	r2, [r3, #0]


	if ( GetByte( g_iMovingDataIndex++, 0 ) ) {
 8012a78:	4b42      	ldr	r3, [pc, #264]	; (8012b84 <B5_FPGA_Programming+0x13c>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	1c5a      	adds	r2, r3, #1
 8012a7e:	4941      	ldr	r1, [pc, #260]	; (8012b84 <B5_FPGA_Programming+0x13c>)
 8012a80:	600a      	str	r2, [r1, #0]
 8012a82:	2100      	movs	r1, #0
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7ff fd41 	bl	801250c <GetByte>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d006      	beq.n	8012a9e <B5_FPGA_Programming+0x56>
		g_usDataType |= COMPRESS;
 8012a90:	4b3a      	ldr	r3, [pc, #232]	; (8012b7c <B5_FPGA_Programming+0x134>)
 8012a92:	881b      	ldrh	r3, [r3, #0]
 8012a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a98:	b29a      	uxth	r2, r3
 8012a9a:	4b38      	ldr	r3, [pc, #224]	; (8012b7c <B5_FPGA_Programming+0x134>)
 8012a9c:	801a      	strh	r2, [r3, #0]
	*
	* Read and store the version of the VME file.
	*
	***************************************************************/

	for ( iIndex = 0; iIndex < 8; iIndex++ ) {
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	81bb      	strh	r3, [r7, #12]
 8012aa2:	e017      	b.n	8012ad4 <B5_FPGA_Programming+0x8c>
		szFileVersion[ iIndex ] = GetByte( g_iMovingAlgoIndex++, 1 );
 8012aa4:	4b36      	ldr	r3, [pc, #216]	; (8012b80 <B5_FPGA_Programming+0x138>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	1c5a      	adds	r2, r3, #1
 8012aaa:	4935      	ldr	r1, [pc, #212]	; (8012b80 <B5_FPGA_Programming+0x138>)
 8012aac:	600a      	str	r2, [r1, #0]
 8012aae:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
 8012ab2:	2101      	movs	r1, #1
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7ff fd29 	bl	801250c <GetByte>
 8012aba:	4603      	mov	r3, r0
 8012abc:	461a      	mov	r2, r3
 8012abe:	f107 0310 	add.w	r3, r7, #16
 8012ac2:	4423      	add	r3, r4
 8012ac4:	f803 2c10 	strb.w	r2, [r3, #-16]
	for ( iIndex = 0; iIndex < 8; iIndex++ ) {
 8012ac8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	3301      	adds	r3, #1
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	81bb      	strh	r3, [r7, #12]
 8012ad4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012ad8:	2b07      	cmp	r3, #7
 8012ada:	dde3      	ble.n	8012aa4 <B5_FPGA_Programming+0x5c>
	*
	* Compare the VME file version against the supported version.
	*
	***************************************************************/

	for ( cVersionIndex = 0; g_szSupportedVersions[ cVersionIndex ] != 0; cVersionIndex++ ) {
 8012adc:	2300      	movs	r3, #0
 8012ade:	817b      	strh	r3, [r7, #10]
 8012ae0:	e02e      	b.n	8012b40 <B5_FPGA_Programming+0xf8>
		for ( iIndex = 0; iIndex < 8; iIndex++ ) {
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	81bb      	strh	r3, [r7, #12]
 8012ae6:	e01d      	b.n	8012b24 <B5_FPGA_Programming+0xdc>
			if ( szFileVersion[ iIndex ] != g_szSupportedVersions[ cVersionIndex ][ iIndex ] ) {
 8012ae8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012aec:	f107 0210 	add.w	r2, r7, #16
 8012af0:	4413      	add	r3, r2
 8012af2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8012af6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012afa:	4923      	ldr	r1, [pc, #140]	; (8012b88 <B5_FPGA_Programming+0x140>)
 8012afc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012b00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012b04:	440b      	add	r3, r1
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d003      	beq.n	8012b14 <B5_FPGA_Programming+0xcc>
				siRetCode = ERR_WRONG_VERSION;
 8012b0c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012b10:	81fb      	strh	r3, [r7, #14]
				break;
 8012b12:	e00b      	b.n	8012b2c <B5_FPGA_Programming+0xe4>
			}
			siRetCode = 0;
 8012b14:	2300      	movs	r3, #0
 8012b16:	81fb      	strh	r3, [r7, #14]
		for ( iIndex = 0; iIndex < 8; iIndex++ ) {
 8012b18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	3301      	adds	r3, #1
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	81bb      	strh	r3, [r7, #12]
 8012b24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012b28:	2b07      	cmp	r3, #7
 8012b2a:	dddd      	ble.n	8012ae8 <B5_FPGA_Programming+0xa0>
		}

		if ( siRetCode == 0 ) {
 8012b2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d00d      	beq.n	8012b50 <B5_FPGA_Programming+0x108>
	for ( cVersionIndex = 0; g_szSupportedVersions[ cVersionIndex ] != 0; cVersionIndex++ ) {
 8012b34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	817b      	strh	r3, [r7, #10]
 8012b40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b44:	4a10      	ldr	r2, [pc, #64]	; (8012b88 <B5_FPGA_Programming+0x140>)
 8012b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d1c9      	bne.n	8012ae2 <B5_FPGA_Programming+0x9a>
 8012b4e:	e000      	b.n	8012b52 <B5_FPGA_Programming+0x10a>
			*
			* Found matching version, break.
			*
			***************************************************************/

			break;
 8012b50:	bf00      	nop
		}
	}

	if ( siRetCode < 0 ) {
 8012b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	da02      	bge.n	8012b60 <B5_FPGA_Programming+0x118>
		*
		* VME file version failed to match the supported versions.
		*
		***************************************************************/

		return ERR_WRONG_VERSION;
 8012b5a:	f06f 0303 	mvn.w	r3, #3
 8012b5e:	e009      	b.n	8012b74 <B5_FPGA_Programming+0x12c>
	*                                                            *
	* Start the hardware.                                        *
	*                                                            *
	*************************************************************/

    EnableHardware();
 8012b60:	f7fe ffa9 	bl	8011ab6 <EnableHardware>
	*                                                            *
	* Begin processing algorithm and data file.                  *
	*                                                            *
	*************************************************************/

	siRetCode = ispProcessVME();
 8012b64:	f7fe ffb6 	bl	8011ad4 <ispProcessVME>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	81fb      	strh	r3, [r7, #14]
	*                                                            *
	* Stop the hardware.                                         *
	*                                                            *
	*************************************************************/

    DisableHardware();
 8012b6c:	f7fe ffaa 	bl	8011ac4 <DisableHardware>
	*                                                            *
	* Return the return code.                                    *
	*                                                            *
	*************************************************************/

	return ( siRetCode );
 8012b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3714      	adds	r7, #20
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd90      	pop	{r4, r7, pc}
 8012b7c:	200003e0 	.word	0x200003e0
 8012b80:	200003d8 	.word	0x200003d8
 8012b84:	200003dc 	.word	0x200003dc
 8012b88:	20000108 	.word	0x20000108

08012b8c <se3_algo_Aes_init>:
 *  \brief SE3_ALGO_AES crypto handlers
 */

#include "se3_algo_Aes.h"

uint16_t se3_algo_Aes_init(se3_flash_key* key, uint16_t mode, uint8_t* ctx){
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b088      	sub	sp, #32
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	460b      	mov	r3, r1
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	817b      	strh	r3, [r7, #10]
    B5_tAesCtx* aes = (B5_tAesCtx*)ctx;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	61bb      	str	r3, [r7, #24]
	uint16_t feedback = mode & 0x07;
 8012b9e:	897b      	ldrh	r3, [r7, #10]
 8012ba0:	f003 0307 	and.w	r3, r3, #7
 8012ba4:	82fb      	strh	r3, [r7, #22]
	uint16_t direction = (mode & SE3_DIR_ENCRYPT) ? SE3_DIR_ENCRYPT : SE3_DIR_DECRYPT;
 8012ba6:	897b      	ldrh	r3, [r7, #10]
 8012ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d002      	beq.n	8012bb6 <se3_algo_Aes_init+0x2a>
 8012bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bb4:	e001      	b.n	8012bba <se3_algo_Aes_init+0x2e>
 8012bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012bba:	82bb      	strh	r3, [r7, #20]
	uint8_t b5_mode = 0;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	77fb      	strb	r3, [r7, #31]

	switch (key->data_size) {
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	889b      	ldrh	r3, [r3, #4]
 8012bc4:	2b20      	cmp	r3, #32
 8012bc6:	d008      	beq.n	8012bda <se3_algo_Aes_init+0x4e>
 8012bc8:	2b20      	cmp	r3, #32
 8012bca:	dc03      	bgt.n	8012bd4 <se3_algo_Aes_init+0x48>
 8012bcc:	2b10      	cmp	r3, #16
 8012bce:	d006      	beq.n	8012bde <se3_algo_Aes_init+0x52>
 8012bd0:	2b18      	cmp	r3, #24
 8012bd2:	d006      	beq.n	8012be2 <se3_algo_Aes_init+0x56>
		case B5_AES_192:
			break;
		case B5_AES_128:
			break;
		default: // unsupported key size
			return SE3_ERR_PARAMS;
 8012bd4:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012bd8:	e068      	b.n	8012cac <se3_algo_Aes_init+0x120>
			break;
 8012bda:	bf00      	nop
 8012bdc:	e002      	b.n	8012be4 <se3_algo_Aes_init+0x58>
			break;
 8012bde:	bf00      	nop
 8012be0:	e000      	b.n	8012be4 <se3_algo_Aes_init+0x58>
			break;
 8012be2:	bf00      	nop
	}

	switch (direction) {
 8012be4:	8abb      	ldrh	r3, [r7, #20]
 8012be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bea:	d003      	beq.n	8012bf4 <se3_algo_Aes_init+0x68>
 8012bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bf0:	d025      	beq.n	8012c3e <se3_algo_Aes_init+0xb2>
 8012bf2:	e048      	b.n	8012c86 <se3_algo_Aes_init+0xfa>
		case (SE3_DIR_ENCRYPT):
			switch (feedback) {
 8012bf4:	8afb      	ldrh	r3, [r7, #22]
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	2b04      	cmp	r3, #4
 8012bfa:	d81c      	bhi.n	8012c36 <se3_algo_Aes_init+0xaa>
 8012bfc:	a201      	add	r2, pc, #4	; (adr r2, 8012c04 <se3_algo_Aes_init+0x78>)
 8012bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c02:	bf00      	nop
 8012c04:	08012c19 	.word	0x08012c19
 8012c08:	08012c1f 	.word	0x08012c1f
 8012c0c:	08012c2b 	.word	0x08012c2b
 8012c10:	08012c25 	.word	0x08012c25
 8012c14:	08012c31 	.word	0x08012c31
				case SE3_FEEDBACK_ECB:
					b5_mode = B5_AES256_ECB_ENC;
 8012c18:	2302      	movs	r3, #2
 8012c1a:	77fb      	strb	r3, [r7, #31]
					break;
 8012c1c:	e00e      	b.n	8012c3c <se3_algo_Aes_init+0xb0>
				case SE3_FEEDBACK_CBC:
					b5_mode = B5_AES256_CBC_ENC;
 8012c1e:	2304      	movs	r3, #4
 8012c20:	77fb      	strb	r3, [r7, #31]
					break;
 8012c22:	e00b      	b.n	8012c3c <se3_algo_Aes_init+0xb0>
				case SE3_FEEDBACK_CTR:
					b5_mode = B5_AES256_CTR;
 8012c24:	2308      	movs	r3, #8
 8012c26:	77fb      	strb	r3, [r7, #31]
					break;
 8012c28:	e008      	b.n	8012c3c <se3_algo_Aes_init+0xb0>
				case SE3_FEEDBACK_OFB:
					b5_mode = B5_AES256_OFB;
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	77fb      	strb	r3, [r7, #31]
					break;
 8012c2e:	e005      	b.n	8012c3c <se3_algo_Aes_init+0xb0>
				case SE3_FEEDBACK_CFB:
					b5_mode = B5_AES256_CFB_ENC;
 8012c30:	2306      	movs	r3, #6
 8012c32:	77fb      	strb	r3, [r7, #31]
					break;
 8012c34:	e002      	b.n	8012c3c <se3_algo_Aes_init+0xb0>
				default:
					return SE3_ERR_PARAMS;
 8012c36:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012c3a:	e037      	b.n	8012cac <se3_algo_Aes_init+0x120>
			}
			break;
 8012c3c:	e026      	b.n	8012c8c <se3_algo_Aes_init+0x100>
		case (SE3_DIR_DECRYPT):
			switch (feedback) {
 8012c3e:	8afb      	ldrh	r3, [r7, #22]
 8012c40:	3b01      	subs	r3, #1
 8012c42:	2b04      	cmp	r3, #4
 8012c44:	d81b      	bhi.n	8012c7e <se3_algo_Aes_init+0xf2>
 8012c46:	a201      	add	r2, pc, #4	; (adr r2, 8012c4c <se3_algo_Aes_init+0xc0>)
 8012c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c4c:	08012c61 	.word	0x08012c61
 8012c50:	08012c67 	.word	0x08012c67
 8012c54:	08012c73 	.word	0x08012c73
 8012c58:	08012c6d 	.word	0x08012c6d
 8012c5c:	08012c79 	.word	0x08012c79
				case SE3_FEEDBACK_ECB:
					b5_mode = B5_AES256_ECB_DEC;
 8012c60:	2303      	movs	r3, #3
 8012c62:	77fb      	strb	r3, [r7, #31]
					break;
 8012c64:	e00e      	b.n	8012c84 <se3_algo_Aes_init+0xf8>
				case SE3_FEEDBACK_CBC:
					b5_mode = B5_AES256_CBC_DEC;
 8012c66:	2305      	movs	r3, #5
 8012c68:	77fb      	strb	r3, [r7, #31]
					break;
 8012c6a:	e00b      	b.n	8012c84 <se3_algo_Aes_init+0xf8>
				case SE3_FEEDBACK_CTR:
					b5_mode = B5_AES256_CTR;
 8012c6c:	2308      	movs	r3, #8
 8012c6e:	77fb      	strb	r3, [r7, #31]
					break;
 8012c70:	e008      	b.n	8012c84 <se3_algo_Aes_init+0xf8>
				case SE3_FEEDBACK_OFB:
					b5_mode = B5_AES256_OFB;
 8012c72:	2301      	movs	r3, #1
 8012c74:	77fb      	strb	r3, [r7, #31]
					break;
 8012c76:	e005      	b.n	8012c84 <se3_algo_Aes_init+0xf8>
				case SE3_FEEDBACK_CFB:
					b5_mode = B5_AES256_CFB_DEC;
 8012c78:	2307      	movs	r3, #7
 8012c7a:	77fb      	strb	r3, [r7, #31]
					break;
 8012c7c:	e002      	b.n	8012c84 <se3_algo_Aes_init+0xf8>
				default:
					return SE3_ERR_PARAMS;
 8012c7e:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012c82:	e013      	b.n	8012cac <se3_algo_Aes_init+0x120>
			}
			break;
 8012c84:	e002      	b.n	8012c8c <se3_algo_Aes_init+0x100>
		default:
			return SE3_ERR_PARAMS;
 8012c86:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012c8a:	e00f      	b.n	8012cac <se3_algo_Aes_init+0x120>
	}

    if (B5_AES256_RES_OK != B5_Aes256_Init(aes, key->data, (int16_t)key->data_size, b5_mode)) {
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6899      	ldr	r1, [r3, #8]
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	889b      	ldrh	r3, [r3, #4]
 8012c94:	b21a      	sxth	r2, r3
 8012c96:	7ffb      	ldrb	r3, [r7, #31]
 8012c98:	69b8      	ldr	r0, [r7, #24]
 8012c9a:	f7fb fe51 	bl	800e940 <B5_Aes256_Init>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d002      	beq.n	8012caa <se3_algo_Aes_init+0x11e>
        SE3_TRACE(("[algo_aes256.init] B5_Aes256_Init failed\n"));
        return SE3_ERR_PARAMS;
 8012ca4:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012ca8:	e000      	b.n	8012cac <se3_algo_Aes_init+0x120>
    }

    return SE3_OK;
 8012caa:	2300      	movs	r3, #0
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3720      	adds	r7, #32
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}

08012cb4 <se3_algo_Aes_update>:
uint16_t se3_algo_Aes_update(
    uint8_t* ctx, uint16_t flags,
    uint16_t datain1_len, const uint8_t* datain1,
    uint16_t datain2_len, const uint8_t* datain2,
    uint16_t* dataout_len, uint8_t* dataout)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b08a      	sub	sp, #40	; 0x28
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	60f8      	str	r0, [r7, #12]
 8012cbc:	607b      	str	r3, [r7, #4]
 8012cbe:	460b      	mov	r3, r1
 8012cc0:	817b      	strh	r3, [r7, #10]
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	813b      	strh	r3, [r7, #8]
    B5_tAesCtx* aes = (B5_tAesCtx*)ctx;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	61fb      	str	r3, [r7, #28]
    size_t nblocks = 0;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	61bb      	str	r3, [r7, #24]
    uint8_t* data_enc, *data_dec;
    bool do_setiv = false;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	75fb      	strb	r3, [r7, #23]
    bool do_update = false;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	75bb      	strb	r3, [r7, #22]
    bool do_finit = false;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	757b      	strb	r3, [r7, #21]
	

	do_setiv = flags & SE3_CRYPTO_FLAG_SETIV;
 8012cda:	897b      	ldrh	r3, [r7, #10]
 8012cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	bf14      	ite	ne
 8012ce4:	2301      	movne	r3, #1
 8012ce6:	2300      	moveq	r3, #0
 8012ce8:	75fb      	strb	r3, [r7, #23]
	do_update = datain2_len > 0;
 8012cea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	bf14      	ite	ne
 8012cf0:	2301      	movne	r3, #1
 8012cf2:	2300      	moveq	r3, #0
 8012cf4:	75bb      	strb	r3, [r7, #22]
	do_finit = flags & SE3_CRYPTO_FLAG_FINIT;
 8012cf6:	897b      	ldrh	r3, [r7, #10]
 8012cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	bf14      	ite	ne
 8012d00:	2301      	movne	r3, #1
 8012d02:	2300      	moveq	r3, #0
 8012d04:	757b      	strb	r3, [r7, #21]

    // check params
	if (do_setiv && (datain1_len != B5_AES_BLK_SIZE)) {
 8012d06:	7dfb      	ldrb	r3, [r7, #23]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d005      	beq.n	8012d18 <se3_algo_Aes_update+0x64>
 8012d0c:	893b      	ldrh	r3, [r7, #8]
 8012d0e:	2b10      	cmp	r3, #16
 8012d10:	d002      	beq.n	8012d18 <se3_algo_Aes_update+0x64>
		SE3_TRACE(("[algo_aes256.update] invalid IV size\n"));
		return SE3_ERR_PARAMS;
 8012d12:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012d16:	e05c      	b.n	8012dd2 <se3_algo_Aes_update+0x11e>
	}
    if (do_update) {
 8012d18:	7dbb      	ldrb	r3, [r7, #22]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d008      	beq.n	8012d30 <se3_algo_Aes_update+0x7c>
        if (datain2_len % B5_AES_BLK_SIZE != 0) {
 8012d1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012d20:	f003 030f 	and.w	r3, r3, #15
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d002      	beq.n	8012d30 <se3_algo_Aes_update+0x7c>
            SE3_TRACE(("[algo_aes256.update] data size not a multiple of block size\n"));
            return SE3_ERR_PARAMS;
 8012d2a:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012d2e:	e050      	b.n	8012dd2 <se3_algo_Aes_update+0x11e>
        }
    }


    if (do_setiv) {
 8012d30:	7dfb      	ldrb	r3, [r7, #23]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d009      	beq.n	8012d4a <se3_algo_Aes_update+0x96>
        // set IV
        if (B5_AES256_RES_OK != B5_Aes256_SetIV(aes, datain1)) {
 8012d36:	6879      	ldr	r1, [r7, #4]
 8012d38:	69f8      	ldr	r0, [r7, #28]
 8012d3a:	f7fb fecb 	bl	800ead4 <B5_Aes256_SetIV>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d002      	beq.n	8012d4a <se3_algo_Aes_update+0x96>
            SE3_TRACE(("[algo_aes256.update] B5_Aes256_SetIV failed\n"));
            return SE3_ERR_HW;
 8012d44:	f24f 0301 	movw	r3, #61441	; 0xf001
 8012d48:	e043      	b.n	8012dd2 <se3_algo_Aes_update+0x11e>
        }
    }

    if (do_update) { // update
 8012d4a:	7dbb      	ldrb	r3, [r7, #22]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d033      	beq.n	8012db8 <se3_algo_Aes_update+0x104>
		nblocks = datain2_len / B5_AES_BLK_SIZE;
 8012d50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012d52:	091b      	lsrs	r3, r3, #4
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	61bb      	str	r3, [r7, #24]

        switch (aes->mode) {
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8012d5e:	2b07      	cmp	r3, #7
 8012d60:	bf8c      	ite	hi
 8012d62:	2201      	movhi	r2, #1
 8012d64:	2200      	movls	r2, #0
 8012d66:	b2d2      	uxtb	r2, r2
 8012d68:	2a00      	cmp	r2, #0
 8012d6a:	d110      	bne.n	8012d8e <se3_algo_Aes_update+0xda>
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8012d72:	f003 03a8 	and.w	r3, r3, #168	; 0xa8
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	bf14      	ite	ne
 8012d7a:	2301      	movne	r3, #1
 8012d7c:	2300      	moveq	r3, #0
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d004      	beq.n	8012d8e <se3_algo_Aes_update+0xda>
        case B5_AES256_ECB_DEC:
        case B5_AES256_CBC_DEC:
        case B5_AES256_CFB_DEC:
            data_enc = (uint8_t*)datain2;
 8012d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d86:	627b      	str	r3, [r7, #36]	; 0x24
            data_dec = dataout;
 8012d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d8a:	623b      	str	r3, [r7, #32]
            break;
 8012d8c:	e004      	b.n	8012d98 <se3_algo_Aes_update+0xe4>
        case B5_AES256_CBC_ENC:
        case B5_AES256_CFB_ENC:
        case B5_AES256_CTR:
		case B5_AES256_OFB:
        default:
            data_enc = dataout;
 8012d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d90:	627b      	str	r3, [r7, #36]	; 0x24
            data_dec = (uint8_t*)datain2;
 8012d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d94:	623b      	str	r3, [r7, #32]
            break;
 8012d96:	bf00      	nop
        }

        if (B5_AES256_RES_OK != B5_Aes256_Update(aes, data_enc, data_dec, (int16_t)nblocks)) {
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	b21b      	sxth	r3, r3
 8012d9c:	6a3a      	ldr	r2, [r7, #32]
 8012d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012da0:	69f8      	ldr	r0, [r7, #28]
 8012da2:	f7fb fed5 	bl	800eb50 <B5_Aes256_Update>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d002      	beq.n	8012db2 <se3_algo_Aes_update+0xfe>
            SE3_TRACE(("[algo_aes256.update] B5_Aes256_Update failed\n"));
            return SE3_ERR_HW;
 8012dac:	f24f 0301 	movw	r3, #61441	; 0xf001
 8012db0:	e00f      	b.n	8012dd2 <se3_algo_Aes_update+0x11e>
        }
        *dataout_len = datain2_len;
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012db6:	801a      	strh	r2, [r3, #0]
    }

    if (do_finit) {
 8012db8:	7d7b      	ldrb	r3, [r7, #21]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d008      	beq.n	8012dd0 <se3_algo_Aes_update+0x11c>
        if (B5_AES256_RES_OK != B5_Aes256_Finit(aes)) {
 8012dbe:	69f8      	ldr	r0, [r7, #28]
 8012dc0:	f7fc f946 	bl	800f050 <B5_Aes256_Finit>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d002      	beq.n	8012dd0 <se3_algo_Aes_update+0x11c>
            SE3_TRACE(("[algo_aes256.update] B5_Aes256_Finit failed\n"));
            return SE3_ERR_HW;
 8012dca:	f24f 0301 	movw	r3, #61441	; 0xf001
 8012dce:	e000      	b.n	8012dd2 <se3_algo_Aes_update+0x11e>
        }
    }

    return SE3_OK;
 8012dd0:	2300      	movs	r3, #0
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3728      	adds	r7, #40	; 0x28
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
	...

08012ddc <se3_algo_AesHmacSha256s_init>:
	uint8_t* direction;
} AesHmacSha256s_ctx;



uint16_t se3_algo_AesHmacSha256s_init(se3_flash_key* key, uint16_t mode, uint8_t* ctx){
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b08e      	sub	sp, #56	; 0x38
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	460b      	mov	r3, r1
 8012de6:	607a      	str	r2, [r7, #4]
 8012de8:	817b      	strh	r3, [r7, #10]
	AesHmacSha256s_ctx myctx;
	uint8_t* p = ctx;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	637b      	str	r3, [r7, #52]	; 0x34

	uint16_t feedback = mode & 0x07;
 8012dee:	897b      	ldrh	r3, [r7, #10]
 8012df0:	f003 0307 	and.w	r3, r3, #7
 8012df4:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t direction = (mode & SE3_DIR_ENCRYPT) ? SE3_DIR_ENCRYPT : SE3_DIR_DECRYPT;
 8012df6:	897b      	ldrh	r3, [r7, #10]
 8012df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d002      	beq.n	8012e06 <se3_algo_AesHmacSha256s_init+0x2a>
 8012e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e04:	e001      	b.n	8012e0a <se3_algo_AesHmacSha256s_init+0x2e>
 8012e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e0a:	863b      	strh	r3, [r7, #48]	; 0x30

	myctx.aes = (B5_tAesCtx*)p; p += sizeof(B5_tAesCtx);
 8012e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e0e:	617b      	str	r3, [r7, #20]
 8012e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e12:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012e16:	637b      	str	r3, [r7, #52]	; 0x34
	myctx.hmac = (B5_tHmacSha256Ctx*)p; p += sizeof(B5_tHmacSha256Ctx);
 8012e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e1a:	61bb      	str	r3, [r7, #24]
 8012e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e1e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012e22:	637b      	str	r3, [r7, #52]	; 0x34
	myctx.keys = p; p += 64;
 8012e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e26:	61fb      	str	r3, [r7, #28]
 8012e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e2a:	3340      	adds	r3, #64	; 0x40
 8012e2c:	637b      	str	r3, [r7, #52]	; 0x34
	myctx.key_size = (uint16_t*)p; p += sizeof(uint16_t);
 8012e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e30:	623b      	str	r3, [r7, #32]
 8012e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e34:	3302      	adds	r3, #2
 8012e36:	637b      	str	r3, [r7, #52]	; 0x34
	myctx.mode = (uint8_t*)p; p += sizeof(uint8_t);
 8012e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e3e:	3301      	adds	r3, #1
 8012e40:	637b      	str	r3, [r7, #52]	; 0x34
	myctx.state = (uint8_t*)p; p += sizeof(uint8_t);
 8012e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e44:	627b      	str	r3, [r7, #36]	; 0x24
 8012e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e48:	3301      	adds	r3, #1
 8012e4a:	637b      	str	r3, [r7, #52]	; 0x34
	myctx.direction = (uint8_t*)p; p += sizeof(uint8_t);
 8012e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e52:	3301      	adds	r3, #1
 8012e54:	637b      	str	r3, [r7, #52]	; 0x34

	switch (key->data_size) {
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	889b      	ldrh	r3, [r3, #4]
 8012e5a:	2b20      	cmp	r3, #32
 8012e5c:	d008      	beq.n	8012e70 <se3_algo_AesHmacSha256s_init+0x94>
 8012e5e:	2b20      	cmp	r3, #32
 8012e60:	dc03      	bgt.n	8012e6a <se3_algo_AesHmacSha256s_init+0x8e>
 8012e62:	2b10      	cmp	r3, #16
 8012e64:	d006      	beq.n	8012e74 <se3_algo_AesHmacSha256s_init+0x98>
 8012e66:	2b18      	cmp	r3, #24
 8012e68:	d006      	beq.n	8012e78 <se3_algo_AesHmacSha256s_init+0x9c>
	case B5_AES_192:
		break;
	case B5_AES_128:
		break;
	default:
		return SE3_ERR_PARAMS; // unsupported key size
 8012e6a:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012e6e:	e07c      	b.n	8012f6a <se3_algo_AesHmacSha256s_init+0x18e>
		break;
 8012e70:	bf00      	nop
 8012e72:	e002      	b.n	8012e7a <se3_algo_AesHmacSha256s_init+0x9e>
		break;
 8012e74:	bf00      	nop
 8012e76:	e000      	b.n	8012e7a <se3_algo_AesHmacSha256s_init+0x9e>
		break;
 8012e78:	bf00      	nop
	}

	*myctx.direction = (direction == SE3_DIR_ENCRYPT) ? (0) : (1);
 8012e7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e80:	bf14      	ite	ne
 8012e82:	2301      	movne	r3, #1
 8012e84:	2300      	moveq	r3, #0
 8012e86:	b2da      	uxtb	r2, r3
 8012e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8a:	701a      	strb	r2, [r3, #0]

	switch (direction) {
 8012e8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e92:	d003      	beq.n	8012e9c <se3_algo_AesHmacSha256s_init+0xc0>
 8012e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e98:	d02a      	beq.n	8012ef0 <se3_algo_AesHmacSha256s_init+0x114>
 8012e9a:	e053      	b.n	8012f44 <se3_algo_AesHmacSha256s_init+0x168>
	case (SE3_DIR_ENCRYPT):
		switch (feedback) {
 8012e9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012e9e:	3b01      	subs	r3, #1
 8012ea0:	2b04      	cmp	r3, #4
 8012ea2:	d821      	bhi.n	8012ee8 <se3_algo_AesHmacSha256s_init+0x10c>
 8012ea4:	a201      	add	r2, pc, #4	; (adr r2, 8012eac <se3_algo_AesHmacSha256s_init+0xd0>)
 8012ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eaa:	bf00      	nop
 8012eac:	08012ec1 	.word	0x08012ec1
 8012eb0:	08012ec9 	.word	0x08012ec9
 8012eb4:	08012ed9 	.word	0x08012ed9
 8012eb8:	08012ed1 	.word	0x08012ed1
 8012ebc:	08012ee1 	.word	0x08012ee1
		case SE3_FEEDBACK_ECB: *(myctx.mode) = B5_AES256_ECB_ENC; break;
 8012ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec2:	2202      	movs	r2, #2
 8012ec4:	701a      	strb	r2, [r3, #0]
 8012ec6:	e012      	b.n	8012eee <se3_algo_AesHmacSha256s_init+0x112>
		case SE3_FEEDBACK_CBC: *(myctx.mode) = B5_AES256_CBC_ENC; break;
 8012ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eca:	2204      	movs	r2, #4
 8012ecc:	701a      	strb	r2, [r3, #0]
 8012ece:	e00e      	b.n	8012eee <se3_algo_AesHmacSha256s_init+0x112>
		case SE3_FEEDBACK_CTR: *(myctx.mode) = B5_AES256_CTR; break;
 8012ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed2:	2208      	movs	r2, #8
 8012ed4:	701a      	strb	r2, [r3, #0]
 8012ed6:	e00a      	b.n	8012eee <se3_algo_AesHmacSha256s_init+0x112>
		case SE3_FEEDBACK_OFB: *(myctx.mode) = B5_AES256_OFB; break;
 8012ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eda:	2201      	movs	r2, #1
 8012edc:	701a      	strb	r2, [r3, #0]
 8012ede:	e006      	b.n	8012eee <se3_algo_AesHmacSha256s_init+0x112>
		case SE3_FEEDBACK_CFB: *(myctx.mode) = B5_AES256_CFB_ENC; break;
 8012ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee2:	2206      	movs	r2, #6
 8012ee4:	701a      	strb	r2, [r3, #0]
 8012ee6:	e002      	b.n	8012eee <se3_algo_AesHmacSha256s_init+0x112>
		default: return SE3_ERR_PARAMS;
 8012ee8:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012eec:	e03d      	b.n	8012f6a <se3_algo_AesHmacSha256s_init+0x18e>
		}
		break;
 8012eee:	e02c      	b.n	8012f4a <se3_algo_AesHmacSha256s_init+0x16e>
	case (SE3_DIR_DECRYPT):
		switch (feedback) {
 8012ef0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012ef2:	3b01      	subs	r3, #1
 8012ef4:	2b04      	cmp	r3, #4
 8012ef6:	d821      	bhi.n	8012f3c <se3_algo_AesHmacSha256s_init+0x160>
 8012ef8:	a201      	add	r2, pc, #4	; (adr r2, 8012f00 <se3_algo_AesHmacSha256s_init+0x124>)
 8012efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012efe:	bf00      	nop
 8012f00:	08012f15 	.word	0x08012f15
 8012f04:	08012f1d 	.word	0x08012f1d
 8012f08:	08012f2d 	.word	0x08012f2d
 8012f0c:	08012f25 	.word	0x08012f25
 8012f10:	08012f35 	.word	0x08012f35
		case SE3_FEEDBACK_ECB: *(myctx.mode) = B5_AES256_ECB_DEC; break;
 8012f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f16:	2203      	movs	r2, #3
 8012f18:	701a      	strb	r2, [r3, #0]
 8012f1a:	e012      	b.n	8012f42 <se3_algo_AesHmacSha256s_init+0x166>
		case SE3_FEEDBACK_CBC: *(myctx.mode) = B5_AES256_CBC_DEC; break;
 8012f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1e:	2205      	movs	r2, #5
 8012f20:	701a      	strb	r2, [r3, #0]
 8012f22:	e00e      	b.n	8012f42 <se3_algo_AesHmacSha256s_init+0x166>
		case SE3_FEEDBACK_CTR: *(myctx.mode) = B5_AES256_CTR; break;
 8012f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f26:	2208      	movs	r2, #8
 8012f28:	701a      	strb	r2, [r3, #0]
 8012f2a:	e00a      	b.n	8012f42 <se3_algo_AesHmacSha256s_init+0x166>
		case SE3_FEEDBACK_OFB: *(myctx.mode) = B5_AES256_OFB; break;
 8012f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f2e:	2201      	movs	r2, #1
 8012f30:	701a      	strb	r2, [r3, #0]
 8012f32:	e006      	b.n	8012f42 <se3_algo_AesHmacSha256s_init+0x166>
		case SE3_FEEDBACK_CFB: *(myctx.mode) = B5_AES256_CFB_DEC; break;
 8012f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f36:	2207      	movs	r2, #7
 8012f38:	701a      	strb	r2, [r3, #0]
 8012f3a:	e002      	b.n	8012f42 <se3_algo_AesHmacSha256s_init+0x166>
		default: return SE3_ERR_PARAMS;
 8012f3c:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012f40:	e013      	b.n	8012f6a <se3_algo_AesHmacSha256s_init+0x18e>
		}
		break;
 8012f42:	e002      	b.n	8012f4a <se3_algo_AesHmacSha256s_init+0x16e>
	default:
		return SE3_ERR_PARAMS;
 8012f44:	f24f 0306 	movw	r3, #61446	; 0xf006
 8012f48:	e00f      	b.n	8012f6a <se3_algo_AesHmacSha256s_init+0x18e>
	}

	*(myctx.state) = SE3_ALGO_STATE_KEYS_NOT_INITIALIZED;
 8012f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	701a      	strb	r2, [r3, #0]
	memcpy(myctx.keys, key->data, key->data_size);
 8012f50:	69f8      	ldr	r0, [r7, #28]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	6899      	ldr	r1, [r3, #8]
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	889b      	ldrh	r3, [r3, #4]
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	f004 fa40 	bl	80173e0 <memcpy>
	*(myctx.key_size) = key->data_size;
 8012f60:	6a3b      	ldr	r3, [r7, #32]
 8012f62:	68fa      	ldr	r2, [r7, #12]
 8012f64:	8892      	ldrh	r2, [r2, #4]
 8012f66:	801a      	strh	r2, [r3, #0]

	return SE3_OK;
 8012f68:	2300      	movs	r3, #0
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3738      	adds	r7, #56	; 0x38
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop

08012f74 <se3_algo_AesHmacSha256s_update>:
uint16_t se3_algo_AesHmacSha256s_update(
	uint8_t* ctx, uint16_t flags,
	uint16_t datain1_len, const uint8_t* datain1,
	uint16_t datain2_len, const uint8_t* datain2,
	uint16_t* dataout_len, uint8_t* dataout)
{
 8012f74:	b590      	push	{r4, r7, lr}
 8012f76:	b097      	sub	sp, #92	; 0x5c
 8012f78:	af04      	add	r7, sp, #16
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	607b      	str	r3, [r7, #4]
 8012f7e:	460b      	mov	r3, r1
 8012f80:	817b      	strh	r3, [r7, #10]
 8012f82:	4613      	mov	r3, r2
 8012f84:	813b      	strh	r3, [r7, #8]
	AesHmacSha256s_ctx myctx;
	uint8_t* p = ctx;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	63fb      	str	r3, [r7, #60]	; 0x3c

	size_t nblocks = 0;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	63bb      	str	r3, [r7, #56]	; 0x38
	size_t outsize = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t* pdataout = dataout;
 8012f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f94:	643b      	str	r3, [r7, #64]	; 0x40

	bool do_setnonce = (flags & SE3_CRYPTO_FLAG_SETNONCE);
 8012f96:	897b      	ldrh	r3, [r7, #10]
 8012f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	bf14      	ite	ne
 8012fa0:	2301      	movne	r3, #1
 8012fa2:	2300      	moveq	r3, #0
 8012fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool do_update = (datain2_len > 0);
 8012fa8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	bf14      	ite	ne
 8012fb0:	2301      	movne	r3, #1
 8012fb2:	2300      	moveq	r3, #0
 8012fb4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	bool do_finit = (flags & SE3_CRYPTO_FLAG_FINIT);
 8012fb8:	897b      	ldrh	r3, [r7, #10]
 8012fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	bf14      	ite	ne
 8012fc2:	2301      	movne	r3, #1
 8012fc4:	2300      	moveq	r3, #0
 8012fc6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	bool do_auth = (flags & SE3_CRYPTO_FLAG_AUTH);
 8012fca:	897b      	ldrh	r3, [r7, #10]
 8012fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	bf14      	ite	ne
 8012fd4:	2301      	movne	r3, #1
 8012fd6:	2300      	moveq	r3, #0
 8012fd8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	bool do_reset = (flags & SE3_CRYPTO_FLAG_RESET);
 8012fdc:	897b      	ldrh	r3, [r7, #10]
 8012fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	bf14      	ite	ne
 8012fe6:	2301      	movne	r3, #1
 8012fe8:	2300      	moveq	r3, #0
 8012fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	myctx.aes = (B5_tAesCtx*)p; p += sizeof(B5_tAesCtx);
 8012fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ff0:	617b      	str	r3, [r7, #20]
 8012ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ff4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
	myctx.hmac = (B5_tHmacSha256Ctx*)p; p += sizeof(B5_tHmacSha256Ctx);
 8012ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ffc:	61bb      	str	r3, [r7, #24]
 8012ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013000:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013004:	63fb      	str	r3, [r7, #60]	; 0x3c
	myctx.keys = p; p += 64;
 8013006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013008:	61fb      	str	r3, [r7, #28]
 801300a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801300c:	3340      	adds	r3, #64	; 0x40
 801300e:	63fb      	str	r3, [r7, #60]	; 0x3c
	myctx.key_size = (uint16_t*)p; p += sizeof(uint16_t);
 8013010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013012:	623b      	str	r3, [r7, #32]
 8013014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013016:	3302      	adds	r3, #2
 8013018:	63fb      	str	r3, [r7, #60]	; 0x3c
	myctx.mode = (uint8_t*)p; p += sizeof(uint8_t);
 801301a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801301c:	62bb      	str	r3, [r7, #40]	; 0x28
 801301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013020:	3301      	adds	r3, #1
 8013022:	63fb      	str	r3, [r7, #60]	; 0x3c
	myctx.state = (uint8_t*)p; p += sizeof(uint8_t);
 8013024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013026:	627b      	str	r3, [r7, #36]	; 0x24
 8013028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801302a:	3301      	adds	r3, #1
 801302c:	63fb      	str	r3, [r7, #60]	; 0x3c
	myctx.direction = (uint8_t*)p; p += sizeof(uint8_t);
 801302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013034:	3301      	adds	r3, #1
 8013036:	63fb      	str	r3, [r7, #60]	; 0x3c


	// check params
	if (do_setnonce) {
 8013038:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801303c:	2b00      	cmp	r3, #0
 801303e:	d051      	beq.n	80130e4 <se3_algo_AesHmacSha256s_update+0x170>
		if (*myctx.state == SE3_ALGO_STATE_KEYS_INITIALIZED){
 8013040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	2b01      	cmp	r3, #1
 8013046:	d102      	bne.n	801304e <se3_algo_AesHmacSha256s_update+0xda>
			return SE3_ERR_STATE;
 8013048:	f24f 0304 	movw	r3, #61444	; 0xf004
 801304c:	e140      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
		}
		if (do_reset || do_auth || do_update) {
 801304e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013052:	2b00      	cmp	r3, #0
 8013054:	d107      	bne.n	8013066 <se3_algo_AesHmacSha256s_update+0xf2>
 8013056:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801305a:	2b00      	cmp	r3, #0
 801305c:	d103      	bne.n	8013066 <se3_algo_AesHmacSha256s_update+0xf2>
 801305e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013062:	2b00      	cmp	r3, #0
 8013064:	d002      	beq.n	801306c <se3_algo_AesHmacSha256s_update+0xf8>
			return SE3_ERR_PARAMS;
 8013066:	f24f 0306 	movw	r3, #61446	; 0xf006
 801306a:	e131      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
		}
		if (do_finit){
 801306c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013070:	2b00      	cmp	r3, #0
 8013072:	d001      	beq.n	8013078 <se3_algo_AesHmacSha256s_update+0x104>
			return SE3_OK;
 8013074:	2300      	movs	r3, #0
 8013076:	e12b      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
		}
		// derive keys
		PBKDF2HmacSha256(myctx.keys, *(myctx.key_size), datain1, datain1_len, 1, myctx.keys, 2 * (*(myctx.key_size)));
 8013078:	69f8      	ldr	r0, [r7, #28]
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	461c      	mov	r4, r3
 8013080:	8939      	ldrh	r1, [r7, #8]
 8013082:	69fb      	ldr	r3, [r7, #28]
 8013084:	6a3a      	ldr	r2, [r7, #32]
 8013086:	8812      	ldrh	r2, [r2, #0]
 8013088:	0052      	lsls	r2, r2, #1
 801308a:	9202      	str	r2, [sp, #8]
 801308c:	9301      	str	r3, [sp, #4]
 801308e:	2301      	movs	r3, #1
 8013090:	9300      	str	r3, [sp, #0]
 8013092:	460b      	mov	r3, r1
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	4621      	mov	r1, r4
 8013098:	f7fc f8a5 	bl	800f1e6 <PBKDF2HmacSha256>
		if (B5_AES256_RES_OK != B5_Aes256_Init(myctx.aes, myctx.keys, *(myctx.key_size), *(myctx.mode))) {
 801309c:	6978      	ldr	r0, [r7, #20]
 801309e:	69f9      	ldr	r1, [r7, #28]
 80130a0:	6a3b      	ldr	r3, [r7, #32]
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	b21a      	sxth	r2, r3
 80130a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	f7fb fc49 	bl	800e940 <B5_Aes256_Init>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d002      	beq.n	80130ba <se3_algo_AesHmacSha256s_update+0x146>
			return SE3_ERR_PARAMS;
 80130b4:	f24f 0306 	movw	r3, #61446	; 0xf006
 80130b8:	e10a      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
		}
		if (B5_HMAC_SHA256_RES_OK != B5_HmacSha256_Init(myctx.hmac, myctx.keys + (*(myctx.key_size)), *(myctx.key_size))) {
 80130ba:	69b8      	ldr	r0, [r7, #24]
 80130bc:	69fb      	ldr	r3, [r7, #28]
 80130be:	6a3a      	ldr	r2, [r7, #32]
 80130c0:	8812      	ldrh	r2, [r2, #0]
 80130c2:	1899      	adds	r1, r3, r2
 80130c4:	6a3b      	ldr	r3, [r7, #32]
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	b21b      	sxth	r3, r3
 80130ca:	461a      	mov	r2, r3
 80130cc:	f7fe fba0 	bl	8011810 <B5_HmacSha256_Init>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d002      	beq.n	80130dc <se3_algo_AesHmacSha256s_update+0x168>
			return SE3_ERR_PARAMS;
 80130d6:	f24f 0306 	movw	r3, #61446	; 0xf006
 80130da:	e0f9      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
		}
		*(myctx.state) = SE3_ALGO_STATE_KEYS_INITIALIZED;
 80130dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130de:	2201      	movs	r2, #1
 80130e0:	701a      	strb	r2, [r3, #0]
 80130e2:	e0f4      	b.n	80132ce <se3_algo_AesHmacSha256s_update+0x35a>
	}
	else {
		if (do_reset && (datain1_len != B5_AES_BLK_SIZE && datain1_len != 0)) {
 80130e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d008      	beq.n	80130fe <se3_algo_AesHmacSha256s_update+0x18a>
 80130ec:	893b      	ldrh	r3, [r7, #8]
 80130ee:	2b10      	cmp	r3, #16
 80130f0:	d005      	beq.n	80130fe <se3_algo_AesHmacSha256s_update+0x18a>
 80130f2:	893b      	ldrh	r3, [r7, #8]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d002      	beq.n	80130fe <se3_algo_AesHmacSha256s_update+0x18a>
			SE3_TRACE(("[algo_aes256.update] invalid IV size\n"));
			return SE3_ERR_PARAMS;
 80130f8:	f24f 0306 	movw	r3, #61446	; 0xf006
 80130fc:	e0e8      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
		}
		if (do_update && ((datain2_len % B5_AES_BLK_SIZE) != 0)) {
 80130fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013102:	2b00      	cmp	r3, #0
 8013104:	d009      	beq.n	801311a <se3_algo_AesHmacSha256s_update+0x1a6>
 8013106:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801310a:	f003 030f 	and.w	r3, r3, #15
 801310e:	b29b      	uxth	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	d002      	beq.n	801311a <se3_algo_AesHmacSha256s_update+0x1a6>
			return SE3_ERR_PARAMS;
 8013114:	f24f 0306 	movw	r3, #61446	; 0xf006
 8013118:	e0da      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
		}

		if (*(myctx.state) == SE3_ALGO_STATE_KEYS_NOT_INITIALIZED) {
 801311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311c:	781b      	ldrb	r3, [r3, #0]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d132      	bne.n	8013188 <se3_algo_AesHmacSha256s_update+0x214>
			// derive keys with empty salt
			PBKDF2HmacSha256(myctx.keys, *(myctx.key_size), NULL, 0, 1, myctx.keys, 2 * (*(myctx.key_size)));
 8013122:	69f8      	ldr	r0, [r7, #28]
 8013124:	6a3b      	ldr	r3, [r7, #32]
 8013126:	881b      	ldrh	r3, [r3, #0]
 8013128:	4619      	mov	r1, r3
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	6a3a      	ldr	r2, [r7, #32]
 801312e:	8812      	ldrh	r2, [r2, #0]
 8013130:	0052      	lsls	r2, r2, #1
 8013132:	9202      	str	r2, [sp, #8]
 8013134:	9301      	str	r3, [sp, #4]
 8013136:	2301      	movs	r3, #1
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	2300      	movs	r3, #0
 801313c:	2200      	movs	r2, #0
 801313e:	f7fc f852 	bl	800f1e6 <PBKDF2HmacSha256>
			if (B5_AES256_RES_OK != B5_Aes256_Init(myctx.aes, myctx.keys, *(myctx.key_size), *(myctx.mode))) {
 8013142:	6978      	ldr	r0, [r7, #20]
 8013144:	69f9      	ldr	r1, [r7, #28]
 8013146:	6a3b      	ldr	r3, [r7, #32]
 8013148:	881b      	ldrh	r3, [r3, #0]
 801314a:	b21a      	sxth	r2, r3
 801314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	f7fb fbf6 	bl	800e940 <B5_Aes256_Init>
 8013154:	4603      	mov	r3, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d002      	beq.n	8013160 <se3_algo_AesHmacSha256s_update+0x1ec>
				return SE3_ERR_PARAMS;
 801315a:	f24f 0306 	movw	r3, #61446	; 0xf006
 801315e:	e0b7      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
			}
			if (B5_HMAC_SHA256_RES_OK != B5_HmacSha256_Init(myctx.hmac, myctx.keys + (*(myctx.key_size)), *(myctx.key_size))) {
 8013160:	69b8      	ldr	r0, [r7, #24]
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	6a3a      	ldr	r2, [r7, #32]
 8013166:	8812      	ldrh	r2, [r2, #0]
 8013168:	1899      	adds	r1, r3, r2
 801316a:	6a3b      	ldr	r3, [r7, #32]
 801316c:	881b      	ldrh	r3, [r3, #0]
 801316e:	b21b      	sxth	r3, r3
 8013170:	461a      	mov	r2, r3
 8013172:	f7fe fb4d 	bl	8011810 <B5_HmacSha256_Init>
 8013176:	4603      	mov	r3, r0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d002      	beq.n	8013182 <se3_algo_AesHmacSha256s_update+0x20e>
				return SE3_ERR_PARAMS;
 801317c:	f24f 0306 	movw	r3, #61446	; 0xf006
 8013180:	e0a6      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
			}
			*(myctx.state) = SE3_ALGO_STATE_KEYS_INITIALIZED;
 8013182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013184:	2201      	movs	r2, #1
 8013186:	701a      	strb	r2, [r3, #0]
		}

		// compute output size
		outsize = 0;
 8013188:	2300      	movs	r3, #0
 801318a:	647b      	str	r3, [r7, #68]	; 0x44
		if (do_update){
 801318c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013190:	2b00      	cmp	r3, #0
 8013192:	d004      	beq.n	801319e <se3_algo_AesHmacSha256s_update+0x22a>
			outsize += datain2_len;
 8013194:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8013198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801319a:	4413      	add	r3, r2
 801319c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (do_auth){
 801319e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d002      	beq.n	80131ac <se3_algo_AesHmacSha256s_update+0x238>
			outsize += B5_SHA256_DIGEST_SIZE;
 80131a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131a8:	3320      	adds	r3, #32
 80131aa:	647b      	str	r3, [r7, #68]	; 0x44
		}

		if (outsize > SE3_CRYPTO_MAX_DATAOUT) {
 80131ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131ae:	f5b3 5feb 	cmp.w	r3, #7520	; 0x1d60
 80131b2:	d902      	bls.n	80131ba <se3_algo_AesHmacSha256s_update+0x246>
			return SE3_ERR_PARAMS;
 80131b4:	f24f 0306 	movw	r3, #61446	; 0xf006
 80131b8:	e08a      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
		}

		if (do_reset) {
 80131ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d01b      	beq.n	80131fa <se3_algo_AesHmacSha256s_update+0x286>
			if (datain1_len > 0) {
 80131c2:	893b      	ldrh	r3, [r7, #8]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d004      	beq.n	80131d2 <se3_algo_AesHmacSha256s_update+0x25e>
				B5_Aes256_SetIV(myctx.aes, datain1);
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	6879      	ldr	r1, [r7, #4]
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fb fc81 	bl	800ead4 <B5_Aes256_SetIV>
			}
			B5_HmacSha256_Init(myctx.hmac, myctx.keys + (*(myctx.key_size)), *(myctx.key_size));
 80131d2:	69b8      	ldr	r0, [r7, #24]
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	6a3a      	ldr	r2, [r7, #32]
 80131d8:	8812      	ldrh	r2, [r2, #0]
 80131da:	1899      	adds	r1, r3, r2
 80131dc:	6a3b      	ldr	r3, [r7, #32]
 80131de:	881b      	ldrh	r3, [r3, #0]
 80131e0:	b21b      	sxth	r3, r3
 80131e2:	461a      	mov	r2, r3
 80131e4:	f7fe fb14 	bl	8011810 <B5_HmacSha256_Init>
			if (datain1_len > 0) {
 80131e8:	893b      	ldrh	r3, [r7, #8]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d005      	beq.n	80131fa <se3_algo_AesHmacSha256s_update+0x286>
				B5_HmacSha256_Update(myctx.hmac, datain1, datain1_len);
 80131ee:	69bb      	ldr	r3, [r7, #24]
 80131f0:	893a      	ldrh	r2, [r7, #8]
 80131f2:	6879      	ldr	r1, [r7, #4]
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fe fb91 	bl	801191c <B5_HmacSha256_Update>
			}
		}

		if (do_update) {
 80131fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d055      	beq.n	80132ae <se3_algo_AesHmacSha256s_update+0x33a>
			nblocks = datain2_len / B5_AES_BLK_SIZE;
 8013202:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8013206:	091b      	lsrs	r3, r3, #4
 8013208:	b29b      	uxth	r3, r3
 801320a:	63bb      	str	r3, [r7, #56]	; 0x38

			if (*myctx.direction == 1) { // decrypt
 801320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	2b01      	cmp	r3, #1
 8013212:	d12c      	bne.n	801326e <se3_algo_AesHmacSha256s_update+0x2fa>
				if (B5_AES256_RES_OK != B5_HmacSha256_Update(myctx.hmac, datain2, datain2_len)) {
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801321a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801321c:	4618      	mov	r0, r3
 801321e:	f7fe fb7d 	bl	801191c <B5_HmacSha256_Update>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d002      	beq.n	801322e <se3_algo_AesHmacSha256s_update+0x2ba>
					return SE3_ERR_HW;
 8013228:	f24f 0301 	movw	r3, #61441	; 0xf001
 801322c:	e050      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
				}
				switch (*myctx.mode)
 801322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	2b01      	cmp	r3, #1
 8013234:	d001      	beq.n	801323a <se3_algo_AesHmacSha256s_update+0x2c6>
 8013236:	2b08      	cmp	r3, #8
 8013238:	d10c      	bne.n	8013254 <se3_algo_AesHmacSha256s_update+0x2e0>
				{
				case B5_AES256_CTR:
				case B5_AES256_OFB:
					if (B5_HMAC_SHA256_RES_OK != B5_Aes256_Update(myctx.aes, pdataout, (uint8_t*)datain2, (uint16_t)nblocks)) {
 801323a:	6978      	ldr	r0, [r7, #20]
 801323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323e:	b21b      	sxth	r3, r3
 8013240:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013244:	f7fb fc84 	bl	800eb50 <B5_Aes256_Update>
 8013248:	4603      	mov	r3, r0
 801324a:	2b00      	cmp	r3, #0
 801324c:	d029      	beq.n	80132a2 <se3_algo_AesHmacSha256s_update+0x32e>
						return SE3_ERR_HW;
 801324e:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013252:	e03d      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
					}
					break;
				default:
					if (B5_HMAC_SHA256_RES_OK != B5_Aes256_Update(myctx.aes, (uint8_t*)datain2, pdataout, (uint16_t)nblocks)) {
 8013254:	6978      	ldr	r0, [r7, #20]
 8013256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013258:	b21b      	sxth	r3, r3
 801325a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801325c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801325e:	f7fb fc77 	bl	800eb50 <B5_Aes256_Update>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d01d      	beq.n	80132a4 <se3_algo_AesHmacSha256s_update+0x330>
						return SE3_ERR_HW;
 8013268:	f24f 0301 	movw	r3, #61441	; 0xf001
 801326c:	e030      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
					}
				}

			}
			else { // encrypt
				if (B5_AES256_RES_OK != B5_Aes256_Update(myctx.aes, pdataout, (uint8_t*)datain2, (uint16_t)nblocks)) {
 801326e:	6978      	ldr	r0, [r7, #20]
 8013270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013272:	b21b      	sxth	r3, r3
 8013274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013276:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013278:	f7fb fc6a 	bl	800eb50 <B5_Aes256_Update>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d002      	beq.n	8013288 <se3_algo_AesHmacSha256s_update+0x314>
					return SE3_ERR_HW;
 8013282:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013286:	e023      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
				}
				if (B5_HMAC_SHA256_RES_OK != B5_HmacSha256_Update(myctx.hmac, pdataout, datain2_len)) {
 8013288:	69bb      	ldr	r3, [r7, #24]
 801328a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801328e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013290:	4618      	mov	r0, r3
 8013292:	f7fe fb43 	bl	801191c <B5_HmacSha256_Update>
 8013296:	4603      	mov	r3, r0
 8013298:	2b00      	cmp	r3, #0
 801329a:	d003      	beq.n	80132a4 <se3_algo_AesHmacSha256s_update+0x330>
					return SE3_ERR_HW;
 801329c:	f24f 0301 	movw	r3, #61441	; 0xf001
 80132a0:	e016      	b.n	80132d0 <se3_algo_AesHmacSha256s_update+0x35c>
					break;
 80132a2:	bf00      	nop
				}
			}

			pdataout += datain2_len;
 80132a4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80132a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132aa:	4413      	add	r3, r2
 80132ac:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (do_auth) {
 80132ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d007      	beq.n	80132c6 <se3_algo_AesHmacSha256s_update+0x352>
			B5_HmacSha256_Finit(myctx.hmac, pdataout);
 80132b6:	69bb      	ldr	r3, [r7, #24]
 80132b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7fe fb53 	bl	8011966 <B5_HmacSha256_Finit>
			pdataout += B5_SHA256_DIGEST_SIZE;
 80132c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132c2:	3320      	adds	r3, #32
 80132c4:	643b      	str	r3, [r7, #64]	; 0x40
		}

		*dataout_len = (uint16_t)outsize;
 80132c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132cc:	801a      	strh	r2, [r3, #0]
	}

	return SE3_OK;
 80132ce:	2300      	movs	r3, #0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	374c      	adds	r7, #76	; 0x4c
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd90      	pop	{r4, r7, pc}

080132d8 <se3_algo_HmacSha256_init>:

#include "se3_algo_HmacSha256.h"


uint16_t se3_algo_HmacSha256_init(se3_flash_key* key, uint16_t mode, uint8_t* ctx)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b086      	sub	sp, #24
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	460b      	mov	r3, r1
 80132e2:	607a      	str	r2, [r7, #4]
 80132e4:	817b      	strh	r3, [r7, #10]
	B5_tHmacSha256Ctx* sha_hmac = (B5_tHmacSha256Ctx *) ctx;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	617b      	str	r3, [r7, #20]

	if ((int32_t)key->data_size <= 0) { // checking as int32_t because B5_HmacSha256_Init() takes int32_t as param
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	889b      	ldrh	r3, [r3, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d102      	bne.n	80132f8 <se3_algo_HmacSha256_init+0x20>
		return (SE3_ERR_PARAMS);
 80132f2:	f24f 0306 	movw	r3, #61446	; 0xf006
 80132f6:	e00f      	b.n	8013318 <se3_algo_HmacSha256_init+0x40>
	}
	if (B5_HMAC_SHA256_RES_OK != B5_HmacSha256_Init(sha_hmac, key->data, key->data_size)) {
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	6899      	ldr	r1, [r3, #8]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	889b      	ldrh	r3, [r3, #4]
 8013300:	b21b      	sxth	r3, r3
 8013302:	461a      	mov	r2, r3
 8013304:	6978      	ldr	r0, [r7, #20]
 8013306:	f7fe fa83 	bl	8011810 <B5_HmacSha256_Init>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d002      	beq.n	8013316 <se3_algo_HmacSha256_init+0x3e>
		SE3_TRACE(("[algo_sha256hmac_init.init] B5_HmacSha256_Init failed\n"));
		return (SE3_ERR_PARAMS);
 8013310:	f24f 0306 	movw	r3, #61446	; 0xf006
 8013314:	e000      	b.n	8013318 <se3_algo_HmacSha256_init+0x40>
	}

	return (SE3_OK);
 8013316:	2300      	movs	r3, #0
}
 8013318:	4618      	mov	r0, r3
 801331a:	3718      	adds	r7, #24
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <se3_algo_HmacSha256_update>:
uint16_t se3_algo_HmacSha256_update(
	uint8_t* ctx, uint16_t flags,
	uint16_t datain1_len, const uint8_t* datain1,
	uint16_t datain2_len, const uint8_t* datain2,
	uint16_t* dataout_len, uint8_t* dataout)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	607b      	str	r3, [r7, #4]
 801332a:	460b      	mov	r3, r1
 801332c:	817b      	strh	r3, [r7, #10]
 801332e:	4613      	mov	r3, r2
 8013330:	813b      	strh	r3, [r7, #8]

	B5_tHmacSha256Ctx* sha_hmac = (B5_tHmacSha256Ctx *)ctx;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	617b      	str	r3, [r7, #20]

	bool do_update = (datain1_len > 0);
 8013336:	893b      	ldrh	r3, [r7, #8]
 8013338:	2b00      	cmp	r3, #0
 801333a:	bf14      	ite	ne
 801333c:	2301      	movne	r3, #1
 801333e:	2300      	moveq	r3, #0
 8013340:	74fb      	strb	r3, [r7, #19]
	bool do_finit = (flags & SE3_CRYPTO_FLAG_FINIT);
 8013342:	897b      	ldrh	r3, [r7, #10]
 8013344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013348:	2b00      	cmp	r3, #0
 801334a:	bf14      	ite	ne
 801334c:	2301      	movne	r3, #1
 801334e:	2300      	moveq	r3, #0
 8013350:	74bb      	strb	r3, [r7, #18]

	if (do_update) {
 8013352:	7cfb      	ldrb	r3, [r7, #19]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d00b      	beq.n	8013370 <se3_algo_HmacSha256_update+0x50>
		// update
		if (B5_HMAC_SHA256_RES_OK != B5_HmacSha256_Update(sha_hmac, datain1, datain1_len)) {
 8013358:	893b      	ldrh	r3, [r7, #8]
 801335a:	461a      	mov	r2, r3
 801335c:	6879      	ldr	r1, [r7, #4]
 801335e:	6978      	ldr	r0, [r7, #20]
 8013360:	f7fe fadc 	bl	801191c <B5_HmacSha256_Update>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d002      	beq.n	8013370 <se3_algo_HmacSha256_update+0x50>
			SE3_TRACE(("[algo_sha256hmac_init.update] B5_HmacSha256_Update failed\n"));
			return SE3_ERR_HW;
 801336a:	f24f 0301 	movw	r3, #61441	; 0xf001
 801336e:	e010      	b.n	8013392 <se3_algo_HmacSha256_update+0x72>
		}
	}

	if (do_finit) {
 8013370:	7cbb      	ldrb	r3, [r7, #18]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00c      	beq.n	8013390 <se3_algo_HmacSha256_update+0x70>
		if (B5_HMAC_SHA256_RES_OK != B5_HmacSha256_Finit(sha_hmac, dataout)) {
 8013376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013378:	6978      	ldr	r0, [r7, #20]
 801337a:	f7fe faf4 	bl	8011966 <B5_HmacSha256_Finit>
 801337e:	4603      	mov	r3, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d002      	beq.n	801338a <se3_algo_HmacSha256_update+0x6a>
			SE3_TRACE(("[algo_sha256hmac_init.update] B5_HmacSha256_Finit failed\n"));
			return SE3_ERR_HW;
 8013384:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013388:	e003      	b.n	8013392 <se3_algo_HmacSha256_update+0x72>
		}
		*dataout_len = 32;
 801338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338c:	2220      	movs	r2, #32
 801338e:	801a      	strh	r2, [r3, #0]
	}

	return(SE3_OK);
 8013390:	2300      	movs	r3, #0
}
 8013392:	4618      	mov	r0, r3
 8013394:	3718      	adds	r7, #24
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}

0801339a <se3_algo_Sha256_init>:

#include "se3_algo_sha256.h"


// key is not used;  mode is not used
uint16_t se3_algo_Sha256_init(se3_flash_key* key, uint16_t mode, uint8_t* ctx) {
 801339a:	b580      	push	{r7, lr}
 801339c:	b086      	sub	sp, #24
 801339e:	af00      	add	r7, sp, #0
 80133a0:	60f8      	str	r0, [r7, #12]
 80133a2:	460b      	mov	r3, r1
 80133a4:	607a      	str	r2, [r7, #4]
 80133a6:	817b      	strh	r3, [r7, #10]
	B5_tSha256Ctx* sha = (B5_tSha256Ctx*)ctx;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	617b      	str	r3, [r7, #20]
	
	if (B5_SHA256_RES_OK != B5_Sha256_Init(sha)) {
 80133ac:	6978      	ldr	r0, [r7, #20]
 80133ae:	f7fe f8e9 	bl	8011584 <B5_Sha256_Init>
 80133b2:	4603      	mov	r3, r0
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d002      	beq.n	80133be <se3_algo_Sha256_init+0x24>
		SE3_TRACE(("[algo_sha256.init] B5_Sha256_Init failed\n"));
		return (SE3_ERR_PARAMS);
 80133b8:	f24f 0306 	movw	r3, #61446	; 0xf006
 80133bc:	e000      	b.n	80133c0 <se3_algo_Sha256_init+0x26>
	}
	
	return (SE3_OK);
 80133be:	2300      	movs	r3, #0
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3718      	adds	r7, #24
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <se3_algo_Sha256_update>:
// datain2 is not used; datain2_len is not used
uint16_t se3_algo_Sha256_update(
	uint8_t* ctx, uint16_t flags,
	uint16_t datain1_len, const uint8_t* datain1,
	uint16_t datain2_len, const uint8_t* datain2,
	uint16_t* dataout_len, uint8_t* dataout) {
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b086      	sub	sp, #24
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	607b      	str	r3, [r7, #4]
 80133d2:	460b      	mov	r3, r1
 80133d4:	817b      	strh	r3, [r7, #10]
 80133d6:	4613      	mov	r3, r2
 80133d8:	813b      	strh	r3, [r7, #8]

	B5_tSha256Ctx* sha = (B5_tSha256Ctx*)ctx;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	617b      	str	r3, [r7, #20]

	bool do_update = (datain1_len > 0);
 80133de:	893b      	ldrh	r3, [r7, #8]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	bf14      	ite	ne
 80133e4:	2301      	movne	r3, #1
 80133e6:	2300      	moveq	r3, #0
 80133e8:	74fb      	strb	r3, [r7, #19]
	bool do_finit = (flags & SE3_CRYPTO_FLAG_FINIT);
 80133ea:	897b      	ldrh	r3, [r7, #10]
 80133ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	bf14      	ite	ne
 80133f4:	2301      	movne	r3, #1
 80133f6:	2300      	moveq	r3, #0
 80133f8:	74bb      	strb	r3, [r7, #18]

	if (do_update) {
 80133fa:	7cfb      	ldrb	r3, [r7, #19]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00b      	beq.n	8013418 <se3_algo_Sha256_update+0x50>
		// update
		if (B5_SHA256_RES_OK != B5_Sha256_Update(sha, datain1, datain1_len)) {
 8013400:	893b      	ldrh	r3, [r7, #8]
 8013402:	461a      	mov	r2, r3
 8013404:	6879      	ldr	r1, [r7, #4]
 8013406:	6978      	ldr	r0, [r7, #20]
 8013408:	f7fe f900 	bl	801160c <B5_Sha256_Update>
 801340c:	4603      	mov	r3, r0
 801340e:	2b00      	cmp	r3, #0
 8013410:	d002      	beq.n	8013418 <se3_algo_Sha256_update+0x50>
			SE3_TRACE(("[algo_sha256.update] B5_Sha256_Update failed\n"));
			return SE3_ERR_HW;
 8013412:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013416:	e010      	b.n	801343a <se3_algo_Sha256_update+0x72>
		}
	}

	if (do_finit) {
 8013418:	7cbb      	ldrb	r3, [r7, #18]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d00c      	beq.n	8013438 <se3_algo_Sha256_update+0x70>
		if (B5_SHA256_RES_OK != B5_Sha256_Finit(sha, dataout)) {
 801341e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013420:	6978      	ldr	r0, [r7, #20]
 8013422:	f7fe f966 	bl	80116f2 <B5_Sha256_Finit>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <se3_algo_Sha256_update+0x6a>
			SE3_TRACE(("[algo_sha256.update] B5_Sha256_Finit failed\n"));
			return SE3_ERR_HW;
 801342c:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013430:	e003      	b.n	801343a <se3_algo_Sha256_update+0x72>
		}
		*dataout_len = 32;
 8013432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013434:	2220      	movs	r2, #32
 8013436:	801a      	strh	r2, [r3, #0]
	}

	return(SE3_OK);
 8013438:	2300      	movs	r3, #0
}
 801343a:	4618      	mov	r0, r3
 801343c:	3718      	adds	r7, #24
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
	...

08013444 <se3_communication_core_init>:
	uint32_t count;
} s3_storage_range;

/**\brief Initializes the communication core structures */
void se3_communication_core_init()
{
 8013444:	b580      	push	{r7, lr}
 8013446:	af00      	add	r7, sp, #0
	memset(&comm, 0, sizeof(SE3_COMM_STATUS));
 8013448:	226c      	movs	r2, #108	; 0x6c
 801344a:	2100      	movs	r1, #0
 801344c:	481e      	ldr	r0, [pc, #120]	; (80134c8 <se3_communication_core_init+0x84>)
 801344e:	f003 ffef 	bl	8017430 <memset>
	memset(&req_hdr, 0, sizeof(se3_comm_req_header));
 8013452:	2244      	movs	r2, #68	; 0x44
 8013454:	2100      	movs	r1, #0
 8013456:	481d      	ldr	r0, [pc, #116]	; (80134cc <se3_communication_core_init+0x88>)
 8013458:	f003 ffea 	bl	8017430 <memset>
	memset(&resp_hdr, 0, sizeof(se3_comm_resp_header));
 801345c:	2244      	movs	r2, #68	; 0x44
 801345e:	2100      	movs	r1, #0
 8013460:	481b      	ldr	r0, [pc, #108]	; (80134d0 <se3_communication_core_init+0x8c>)
 8013462:	f003 ffe5 	bl	8017430 <memset>
	memset(&serial, 0, sizeof(SE3_SERIAL));
 8013466:	2221      	movs	r2, #33	; 0x21
 8013468:	2100      	movs	r1, #0
 801346a:	481a      	ldr	r0, [pc, #104]	; (80134d4 <se3_communication_core_init+0x90>)
 801346c:	f003 ffe0 	bl	8017430 <memset>

    comm.req_hdr = se3_comm_request_buffer;
 8013470:	4b15      	ldr	r3, [pc, #84]	; (80134c8 <se3_communication_core_init+0x84>)
 8013472:	4a19      	ldr	r2, [pc, #100]	; (80134d8 <se3_communication_core_init+0x94>)
 8013474:	659a      	str	r2, [r3, #88]	; 0x58
    comm.req_data = se3_comm_request_buffer + SE3_REQ_SIZE_HEADER;
 8013476:	4a19      	ldr	r2, [pc, #100]	; (80134dc <se3_communication_core_init+0x98>)
 8013478:	4b13      	ldr	r3, [pc, #76]	; (80134c8 <se3_communication_core_init+0x84>)
 801347a:	655a      	str	r2, [r3, #84]	; 0x54
    comm.resp_hdr = se3_comm_response_buffer;
 801347c:	4b12      	ldr	r3, [pc, #72]	; (80134c8 <se3_communication_core_init+0x84>)
 801347e:	4a18      	ldr	r2, [pc, #96]	; (80134e0 <se3_communication_core_init+0x9c>)
 8013480:	669a      	str	r2, [r3, #104]	; 0x68
    comm.resp_data = se3_comm_response_buffer + SE3_RESP_SIZE_HEADER;
 8013482:	4a18      	ldr	r2, [pc, #96]	; (80134e4 <se3_communication_core_init+0xa0>)
 8013484:	4b10      	ldr	r3, [pc, #64]	; (80134c8 <se3_communication_core_init+0x84>)
 8013486:	665a      	str	r2, [r3, #100]	; 0x64
    comm.magic_bmap = SE3_BMAP_MAKE(16);
 8013488:	4b0f      	ldr	r3, [pc, #60]	; (80134c8 <se3_communication_core_init+0x84>)
 801348a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801348e:	605a      	str	r2, [r3, #4]
    comm.magic_ready = false;
 8013490:	4b0d      	ldr	r3, [pc, #52]	; (80134c8 <se3_communication_core_init+0x84>)
 8013492:	2200      	movs	r2, #0
 8013494:	701a      	strb	r2, [r3, #0]
    comm.req_bmap = SE3_BMAP_MAKE(1);
 8013496:	4b0c      	ldr	r3, [pc, #48]	; (80134c8 <se3_communication_core_init+0x84>)
 8013498:	2201      	movs	r2, #1
 801349a:	651a      	str	r2, [r3, #80]	; 0x50
    comm.locked = false;
 801349c:	4b0a      	ldr	r3, [pc, #40]	; (80134c8 <se3_communication_core_init+0x84>)
 801349e:	2200      	movs	r2, #0
 80134a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    comm.req_ready = false;
 80134a4:	4b08      	ldr	r3, [pc, #32]	; (80134c8 <se3_communication_core_init+0x84>)
 80134a6:	2200      	movs	r2, #0
 80134a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    comm.req_bmap = SE3_BMAP_MAKE(32);
 80134ac:	4b06      	ldr	r3, [pc, #24]	; (80134c8 <se3_communication_core_init+0x84>)
 80134ae:	f04f 32ff 	mov.w	r2, #4294967295
 80134b2:	651a      	str	r2, [r3, #80]	; 0x50
    comm.resp_ready = true;
 80134b4:	4b04      	ldr	r3, [pc, #16]	; (80134c8 <se3_communication_core_init+0x84>)
 80134b6:	2201      	movs	r2, #1
 80134b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    comm.resp_bmap = 0;
 80134bc:	4b02      	ldr	r3, [pc, #8]	; (80134c8 <se3_communication_core_init+0x84>)
 80134be:	2200      	movs	r2, #0
 80134c0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80134c2:	bf00      	nop
 80134c4:	bd80      	pop	{r7, pc}
 80134c6:	bf00      	nop
 80134c8:	20005018 	.word	0x20005018
 80134cc:	20004fd4 	.word	0x20004fd4
 80134d0:	20000f90 	.word	0x20000f90
 80134d4:	20000f6c 	.word	0x20000f6c
 80134d8:	20000fd4 	.word	0x20000fd4
 80134dc:	20000fe4 	.word	0x20000fe4
 80134e0:	20002fd4 	.word	0x20002fd4
 80134e4:	20002fe4 	.word	0x20002fe4

080134e8 <block_is_magic>:
 *
 *  Check if a block of data contains the magic sequence, used to initialize the special
 *    protocol file.
 */
static bool block_is_magic(const uint8_t* buf)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b086      	sub	sp, #24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
	const uint8_t* a = buf;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	617b      	str	r3, [r7, #20]
	const uint8_t* b = se3_magic;
 80134f4:	4b12      	ldr	r3, [pc, #72]	; (8013540 <block_is_magic+0x58>)
 80134f6:	60fb      	str	r3, [r7, #12]
	size_t i;
	for (i = 0; i < SE3_COMM_BLOCK / SE3_MAGIC_SIZE - 1; i++) {
 80134f8:	2300      	movs	r3, #0
 80134fa:	613b      	str	r3, [r7, #16]
 80134fc:	e00f      	b.n	801351e <block_is_magic+0x36>
		if (memcmp(a, b, SE3_MAGIC_SIZE))return false;
 80134fe:	2220      	movs	r2, #32
 8013500:	68f9      	ldr	r1, [r7, #12]
 8013502:	6978      	ldr	r0, [r7, #20]
 8013504:	f003 ff5e 	bl	80173c4 <memcmp>
 8013508:	4603      	mov	r3, r0
 801350a:	2b00      	cmp	r3, #0
 801350c:	d001      	beq.n	8013512 <block_is_magic+0x2a>
 801350e:	2300      	movs	r3, #0
 8013510:	e011      	b.n	8013536 <block_is_magic+0x4e>
        a += SE3_MAGIC_SIZE;
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	3320      	adds	r3, #32
 8013516:	617b      	str	r3, [r7, #20]
	for (i = 0; i < SE3_COMM_BLOCK / SE3_MAGIC_SIZE - 1; i++) {
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	3301      	adds	r3, #1
 801351c:	613b      	str	r3, [r7, #16]
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	2b0e      	cmp	r3, #14
 8013522:	d9ec      	bls.n	80134fe <block_is_magic+0x16>
	}
	if (buf[SE3_COMM_BLOCK - 1] >= SE3_COMM_N)return false;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	2b0f      	cmp	r3, #15
 801352e:	d901      	bls.n	8013534 <block_is_magic+0x4c>
 8013530:	2300      	movs	r3, #0
 8013532:	e000      	b.n	8013536 <block_is_magic+0x4e>
	return true;
 8013534:	2301      	movs	r3, #1
}
 8013536:	4618      	mov	r0, r3
 8013538:	3718      	adds	r7, #24
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
 801353e:	bf00      	nop
 8013540:	08019ee8 	.word	0x08019ee8

08013544 <find_magic_index>:
 *  
 *  The special protocol file is made up of multiple blocks. Each block is mapped to a block
 *    on the physical storage
 */
static int find_magic_index(uint32_t block)
{
 8013544:	b480      	push	{r7}
 8013546:	b085      	sub	sp, #20
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
	int i; size_t k;
	for (i = 0, k = comm.block_guess; i < SE3_COMM_N; i++, k = (k+1)%(SE3_COMM_N) ) {
 801354c:	2300      	movs	r3, #0
 801354e:	60fb      	str	r3, [r7, #12]
 8013550:	4b16      	ldr	r3, [pc, #88]	; (80135ac <find_magic_index+0x68>)
 8013552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013554:	60bb      	str	r3, [r7, #8]
 8013556:	e01d      	b.n	8013594 <find_magic_index+0x50>
		if (block == comm.blocks[i]) {
 8013558:	4a14      	ldr	r2, [pc, #80]	; (80135ac <find_magic_index+0x68>)
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	3302      	adds	r3, #2
 801355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013562:	687a      	ldr	r2, [r7, #4]
 8013564:	429a      	cmp	r2, r3
 8013566:	d10d      	bne.n	8013584 <find_magic_index+0x40>
			comm.block_guess = (size_t)((i + 1) % 16);
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	3301      	adds	r3, #1
 801356c:	425a      	negs	r2, r3
 801356e:	f003 030f 	and.w	r3, r3, #15
 8013572:	f002 020f 	and.w	r2, r2, #15
 8013576:	bf58      	it	pl
 8013578:	4253      	negpl	r3, r2
 801357a:	461a      	mov	r2, r3
 801357c:	4b0b      	ldr	r3, [pc, #44]	; (80135ac <find_magic_index+0x68>)
 801357e:	649a      	str	r2, [r3, #72]	; 0x48
			return i;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	e00c      	b.n	801359e <find_magic_index+0x5a>
	for (i = 0, k = comm.block_guess; i < SE3_COMM_N; i++, k = (k+1)%(SE3_COMM_N) ) {
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	3301      	adds	r3, #1
 8013588:	60fb      	str	r3, [r7, #12]
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	3301      	adds	r3, #1
 801358e:	f003 030f 	and.w	r3, r3, #15
 8013592:	60bb      	str	r3, [r7, #8]
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	2b0f      	cmp	r3, #15
 8013598:	ddde      	ble.n	8013558 <find_magic_index+0x14>
		}
	}
	return -1;
 801359a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3714      	adds	r7, #20
 80135a2:	46bd      	mov	sp, r7
 80135a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a8:	4770      	bx	lr
 80135aa:	bf00      	nop
 80135ac:	20005018 	.word	0x20005018

080135b0 <se3_storage_range_add>:
 *  
 *  Contiguous requests are processed with a single call to the SDIO interface, as soon as
 *    a non-contiguous request is added.
 */
static int32_t se3_storage_range_add(s3_storage_range* range, uint8_t lun, uint8_t* buf, uint32_t block, enum s3_storage_range_direction direction)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b086      	sub	sp, #24
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	607a      	str	r2, [r7, #4]
 80135ba:	603b      	str	r3, [r7, #0]
 80135bc:	460b      	mov	r3, r1
 80135be:	72fb      	strb	r3, [r7, #11]
	bool ret = true;
 80135c0:	2301      	movs	r3, #1
 80135c2:	75fb      	strb	r3, [r7, #23]
	if (range->count == 0) {
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	689b      	ldr	r3, [r3, #8]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d109      	bne.n	80135e0 <se3_storage_range_add+0x30>
		range->buf = buf;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	601a      	str	r2, [r3, #0]
		range->first = block;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	683a      	ldr	r2, [r7, #0]
 80135d6:	605a      	str	r2, [r3, #4]
		range->count = 1;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2201      	movs	r2, #1
 80135dc:	609a      	str	r2, [r3, #8]
 80135de:	e02d      	b.n	801363c <se3_storage_range_add+0x8c>
	}
	else {
		if (block == range->first + range->count) {
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	685a      	ldr	r2, [r3, #4]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	689b      	ldr	r3, [r3, #8]
 80135e8:	4413      	add	r3, r2
 80135ea:	683a      	ldr	r2, [r7, #0]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d105      	bne.n	80135fc <se3_storage_range_add+0x4c>
			range->count++;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	1c5a      	adds	r2, r3, #1
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	609a      	str	r2, [r3, #8]
 80135fa:	e01f      	b.n	801363c <se3_storage_range_add+0x8c>
		}
		else {
			if (direction == range_write){
 80135fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d10c      	bne.n	801361e <se3_storage_range_add+0x6e>
				ret = secube_sdio_write(lun, range->buf, range->first, range->count);
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	6819      	ldr	r1, [r3, #0]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	685a      	ldr	r2, [r3, #4]
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	689b      	ldr	r3, [r3, #8]
 8013610:	b29b      	uxth	r3, r3
 8013612:	7af8      	ldrb	r0, [r7, #11]
 8013614:	f7f7 fa28 	bl	800aa68 <secube_sdio_write>
 8013618:	4603      	mov	r3, r0
 801361a:	75fb      	strb	r3, [r7, #23]
 801361c:	e00b      	b.n	8013636 <se3_storage_range_add+0x86>
				SE3_TRACE(("%i: write buf=%u count=%u to block=%u", ret, (unsigned)range->buf, range->count, range->first));
			}
			else {
				ret = secube_sdio_read(lun, range->buf, range->first, range->count);
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	6819      	ldr	r1, [r3, #0]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	685a      	ldr	r2, [r3, #4]
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	b29b      	uxth	r3, r3
 801362c:	7af8      	ldrb	r0, [r7, #11]
 801362e:	f7f7 fa49 	bl	800aac4 <secube_sdio_read>
 8013632:	4603      	mov	r3, r0
 8013634:	75fb      	strb	r3, [r7, #23]
				SE3_TRACE(("%d: read buf=%u count=%u from block=%u", ret, (unsigned)range->buf, range->count, range->first));
			}
			range->count = 0;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2200      	movs	r2, #0
 801363a:	609a      	str	r2, [r3, #8]
		}
	}

	return (ret)?(SE3_PROTO_OK):(SE3_PROTO_FAIL);
 801363c:	7dfb      	ldrb	r3, [r7, #23]
 801363e:	f083 0301 	eor.w	r3, r3, #1
 8013642:	b2db      	uxtb	r3, r3
}
 8013644:	4618      	mov	r0, r3
 8013646:	3718      	adds	r7, #24
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}

0801364c <handle_req_recv>:
 *  Handle a single block belonging to a protocol request. The data is stored in the
 *    request buffer. As soon as the request data is received completely, the device
 *    will start processing the request
 */
static void handle_req_recv(int index, const uint8_t* blockdata)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
    uint16_t nblocks;
    if (index == SE3_COMM_N - 1) {
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2b0f      	cmp	r3, #15
 801365a:	f000 809d 	beq.w	8013798 <handle_req_recv+0x14c>
        SE3_TRACE(("P data write to block %d ignored", index));
        return;
    }

    comm.resp_ready = false;
 801365e:	4b50      	ldr	r3, [pc, #320]	; (80137a0 <handle_req_recv+0x154>)
 8013660:	2200      	movs	r2, #0
 8013662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    if (index == 0) {
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d159      	bne.n	8013720 <handle_req_recv+0xd4>
        // REQ block

        // read and decode header
        memcpy(comm.req_hdr, blockdata, SE3_REQ_SIZE_HEADER);
 801366c:	4b4c      	ldr	r3, [pc, #304]	; (80137a0 <handle_req_recv+0x154>)
 801366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013670:	2210      	movs	r2, #16
 8013672:	6839      	ldr	r1, [r7, #0]
 8013674:	4618      	mov	r0, r3
 8013676:	f003 feb3 	bl	80173e0 <memcpy>
        SE3_GET16(comm.req_hdr, SE3_REQ_OFFSET_CMD, req_hdr.cmd);
 801367a:	4b49      	ldr	r3, [pc, #292]	; (80137a0 <handle_req_recv+0x154>)
 801367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801367e:	881b      	ldrh	r3, [r3, #0]
 8013680:	b29a      	uxth	r2, r3
 8013682:	4b48      	ldr	r3, [pc, #288]	; (80137a4 <handle_req_recv+0x158>)
 8013684:	801a      	strh	r2, [r3, #0]
        SE3_GET16(comm.req_hdr, SE3_REQ_OFFSET_CMDFLAGS, req_hdr.cmd_flags);
 8013686:	4b46      	ldr	r3, [pc, #280]	; (80137a0 <handle_req_recv+0x154>)
 8013688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801368a:	3302      	adds	r3, #2
 801368c:	881b      	ldrh	r3, [r3, #0]
 801368e:	b29a      	uxth	r2, r3
 8013690:	4b44      	ldr	r3, [pc, #272]	; (80137a4 <handle_req_recv+0x158>)
 8013692:	805a      	strh	r2, [r3, #2]
        SE3_GET16(comm.req_hdr, SE3_REQ_OFFSET_LEN, req_hdr.len);
 8013694:	4b42      	ldr	r3, [pc, #264]	; (80137a0 <handle_req_recv+0x154>)
 8013696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013698:	3304      	adds	r3, #4
 801369a:	881b      	ldrh	r3, [r3, #0]
 801369c:	b29a      	uxth	r2, r3
 801369e:	4b41      	ldr	r3, [pc, #260]	; (80137a4 <handle_req_recv+0x158>)
 80136a0:	809a      	strh	r2, [r3, #4]
        SE3_GET32(comm.req_hdr, SE3_REQ_OFFSET_CMDTOKEN, req_hdr.cmdtok[0]);
 80136a2:	4b3f      	ldr	r3, [pc, #252]	; (80137a0 <handle_req_recv+0x154>)
 80136a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136a6:	3306      	adds	r3, #6
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	461a      	mov	r2, r3
 80136ac:	4b3d      	ldr	r3, [pc, #244]	; (80137a4 <handle_req_recv+0x158>)
 80136ae:	609a      	str	r2, [r3, #8]
#if SE3_CONF_CRC
		SE3_GET16(comm.req_hdr, SE3_REQ_OFFSET_CRC, req_hdr.crc);
#endif
        // read data
        memcpy(comm.req_data, blockdata + SE3_REQ_SIZE_HEADER, SE3_COMM_BLOCK - SE3_REQ_SIZE_HEADER);
 80136b0:	4b3b      	ldr	r3, [pc, #236]	; (80137a0 <handle_req_recv+0x154>)
 80136b2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	3310      	adds	r3, #16
 80136b8:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80136bc:	4619      	mov	r1, r3
 80136be:	f003 fe8f 	bl	80173e0 <memcpy>

        nblocks = req_hdr.len / SE3_COMM_BLOCK;
 80136c2:	4b38      	ldr	r3, [pc, #224]	; (80137a4 <handle_req_recv+0x158>)
 80136c4:	889b      	ldrh	r3, [r3, #4]
 80136c6:	0a5b      	lsrs	r3, r3, #9
 80136c8:	81fb      	strh	r3, [r7, #14]
        if (req_hdr.len%SE3_COMM_BLOCK != 0) {
 80136ca:	4b36      	ldr	r3, [pc, #216]	; (80137a4 <handle_req_recv+0x158>)
 80136cc:	889b      	ldrh	r3, [r3, #4]
 80136ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d002      	beq.n	80136de <handle_req_recv+0x92>
            nblocks++;
 80136d8:	89fb      	ldrh	r3, [r7, #14]
 80136da:	3301      	adds	r3, #1
 80136dc:	81fb      	strh	r3, [r7, #14]
        }
        if (nblocks > SE3_COMM_N - 1) {
 80136de:	89fb      	ldrh	r3, [r7, #14]
 80136e0:	2b0f      	cmp	r3, #15
 80136e2:	d90a      	bls.n	80136fa <handle_req_recv+0xae>
            resp_hdr.status = SE3_ERR_COMM;
 80136e4:	4b30      	ldr	r3, [pc, #192]	; (80137a8 <handle_req_recv+0x15c>)
 80136e6:	f24f 0202 	movw	r2, #61442	; 0xf002
 80136ea:	805a      	strh	r2, [r3, #2]
            comm.req_bmap = 0;
 80136ec:	4b2c      	ldr	r3, [pc, #176]	; (80137a0 <handle_req_recv+0x154>)
 80136ee:	2200      	movs	r2, #0
 80136f0:	651a      	str	r2, [r3, #80]	; 0x50
            comm.resp_ready = true;
 80136f2:	4b2b      	ldr	r3, [pc, #172]	; (80137a0 <handle_req_recv+0x154>)
 80136f4:	2201      	movs	r2, #1
 80136f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
        // update bit map
        comm.req_bmap &= SE3_BMAP_MAKE(nblocks);
 80136fa:	4b29      	ldr	r3, [pc, #164]	; (80137a0 <handle_req_recv+0x154>)
 80136fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80136fe:	89fb      	ldrh	r3, [r7, #14]
 8013700:	f1c3 0320 	rsb	r3, r3, #32
 8013704:	f04f 31ff 	mov.w	r1, #4294967295
 8013708:	fa21 f303 	lsr.w	r3, r1, r3
 801370c:	4013      	ands	r3, r2
 801370e:	4a24      	ldr	r2, [pc, #144]	; (80137a0 <handle_req_recv+0x154>)
 8013710:	6513      	str	r3, [r2, #80]	; 0x50
        SE3_BIT_CLEAR(comm.req_bmap, 0);
 8013712:	4b23      	ldr	r3, [pc, #140]	; (80137a0 <handle_req_recv+0x154>)
 8013714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013716:	f023 0301 	bic.w	r3, r3, #1
 801371a:	4a21      	ldr	r2, [pc, #132]	; (80137a0 <handle_req_recv+0x154>)
 801371c:	6513      	str	r3, [r2, #80]	; 0x50
 801371e:	e02b      	b.n	8013778 <handle_req_recv+0x12c>
    }
    else {
        // REQDATA block
        // read header
        SE3_GET32(blockdata, SE3_REQDATA_OFFSET_CMDTOKEN, req_hdr.cmdtok[index]);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	3302      	adds	r3, #2
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	4a1f      	ldr	r2, [pc, #124]	; (80137a4 <handle_req_recv+0x158>)
 8013728:	4413      	add	r3, r2
 801372a:	683a      	ldr	r2, [r7, #0]
 801372c:	6812      	ldr	r2, [r2, #0]
 801372e:	601a      	str	r2, [r3, #0]
        // read data
        memcpy(
            comm.req_data + 1 * (SE3_COMM_BLOCK - SE3_REQ_SIZE_HEADER) + (index - 1)*(SE3_COMM_BLOCK - SE3_REQDATA_SIZE_HEADER),
 8013730:	4b1b      	ldr	r3, [pc, #108]	; (80137a0 <handle_req_recv+0x154>)
 8013732:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	1e5a      	subs	r2, r3, #1
 8013738:	4613      	mov	r3, r2
 801373a:	01db      	lsls	r3, r3, #7
 801373c:	1a9b      	subs	r3, r3, r2
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8013744:	18c8      	adds	r0, r1, r3
            blockdata + SE3_REQDATA_SIZE_HEADER,
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	3304      	adds	r3, #4
        memcpy(
 801374a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801374e:	4619      	mov	r1, r3
 8013750:	f003 fe46 	bl	80173e0 <memcpy>
            SE3_COMM_BLOCK - SE3_REQDATA_SIZE_HEADER);
        SE3_GET32(blockdata, 0, req_hdr.cmdtok[index]);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	3302      	adds	r3, #2
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	4a12      	ldr	r2, [pc, #72]	; (80137a4 <handle_req_recv+0x158>)
 801375c:	4413      	add	r3, r2
 801375e:	683a      	ldr	r2, [r7, #0]
 8013760:	6812      	ldr	r2, [r2, #0]
 8013762:	601a      	str	r2, [r3, #0]
        // update bit map
        SE3_BIT_CLEAR(comm.req_bmap, index);
 8013764:	4b0e      	ldr	r3, [pc, #56]	; (80137a0 <handle_req_recv+0x154>)
 8013766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013768:	2101      	movs	r1, #1
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	fa01 f202 	lsl.w	r2, r1, r2
 8013770:	43d2      	mvns	r2, r2
 8013772:	4013      	ands	r3, r2
 8013774:	4a0a      	ldr	r2, [pc, #40]	; (80137a0 <handle_req_recv+0x154>)
 8013776:	6513      	str	r3, [r2, #80]	; 0x50
    }

    if (comm.req_bmap == 0) {
 8013778:	4b09      	ldr	r3, [pc, #36]	; (80137a0 <handle_req_recv+0x154>)
 801377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801377c:	2b00      	cmp	r3, #0
 801377e:	d10c      	bne.n	801379a <handle_req_recv+0x14e>
        comm.req_ready = true;
 8013780:	4b07      	ldr	r3, [pc, #28]	; (80137a0 <handle_req_recv+0x154>)
 8013782:	2201      	movs	r2, #1
 8013784:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        comm.req_bmap = SE3_BMAP_MAKE(32);
 8013788:	4b05      	ldr	r3, [pc, #20]	; (80137a0 <handle_req_recv+0x154>)
 801378a:	f04f 32ff 	mov.w	r2, #4294967295
 801378e:	651a      	str	r2, [r3, #80]	; 0x50
        comm.block_guess = 0;
 8013790:	4b03      	ldr	r3, [pc, #12]	; (80137a0 <handle_req_recv+0x154>)
 8013792:	2200      	movs	r2, #0
 8013794:	649a      	str	r2, [r3, #72]	; 0x48
 8013796:	e000      	b.n	801379a <handle_req_recv+0x14e>
        return;
 8013798:	bf00      	nop
    }
}
 801379a:	3710      	adds	r7, #16
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}
 80137a0:	20005018 	.word	0x20005018
 80137a4:	20004fd4 	.word	0x20004fd4
 80137a8:	20000f90 	.word	0x20000f90

080137ac <se3_proto_recv>:
  *	driver; it forwards the data on the SD card if the data block does not
  *	 contain the magic sequence, otherwise the data block is unpacked for further
  *	 elaborations;
  */
int32_t se3_proto_recv(uint8_t lun, const uint8_t* buf, uint32_t blk_addr, uint16_t blk_len)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b08e      	sub	sp, #56	; 0x38
 80137b0:	af02      	add	r7, sp, #8
 80137b2:	60b9      	str	r1, [r7, #8]
 80137b4:	607a      	str	r2, [r7, #4]
 80137b6:	461a      	mov	r2, r3
 80137b8:	4603      	mov	r3, r0
 80137ba:	73fb      	strb	r3, [r7, #15]
 80137bc:	4613      	mov	r3, r2
 80137be:	81bb      	strh	r3, [r7, #12]
	int32_t r = SE3_PROTO_OK;
 80137c0:	2300      	movs	r3, #0
 80137c2:	623b      	str	r3, [r7, #32]
	uint32_t block;
	int index;
	const uint8_t* data = buf;
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	627b      	str	r3, [r7, #36]	; 0x24

	s3_storage_range range = {
 80137c8:	f107 0314 	add.w	r3, r7, #20
 80137cc:	2200      	movs	r2, #0
 80137ce:	601a      	str	r2, [r3, #0]
 80137d0:	605a      	str	r2, [r3, #4]
 80137d2:	609a      	str	r2, [r3, #8]
		.first = 0,
		.count = 0
	};

	for (block = blk_addr; block < blk_addr + blk_len; block++) {
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137d8:	e095      	b.n	8013906 <se3_proto_recv+0x15a>
		if (block == 0) {
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d10e      	bne.n	80137fe <se3_proto_recv+0x52>
			r = se3_storage_range_add(&range, lun, (uint8_t*)data, block, range_write);
 80137e0:	7bf9      	ldrb	r1, [r7, #15]
 80137e2:	f107 0014 	add.w	r0, r7, #20
 80137e6:	2300      	movs	r3, #0
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ee:	f7ff fedf 	bl	80135b0 <se3_storage_range_add>
 80137f2:	6238      	str	r0, [r7, #32]
			if (SE3_PROTO_OK != r) return r;
 80137f4:	6a3b      	ldr	r3, [r7, #32]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d07a      	beq.n	80138f0 <se3_proto_recv+0x144>
 80137fa:	6a3b      	ldr	r3, [r7, #32]
 80137fc:	e095      	b.n	801392a <se3_proto_recv+0x17e>
		}
		else {
            if (block_is_magic(data)) {
 80137fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013800:	f7ff fe72 	bl	80134e8 <block_is_magic>
 8013804:	4603      	mov	r3, r0
 8013806:	2b00      	cmp	r3, #0
 8013808:	d03b      	beq.n	8013882 <se3_proto_recv+0xd6>
                // magic block
                if (comm.locked) {
 801380a:	4b4a      	ldr	r3, [pc, #296]	; (8013934 <se3_proto_recv+0x188>)
 801380c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013810:	2b00      	cmp	r3, #0
 8013812:	d172      	bne.n	80138fa <se3_proto_recv+0x14e>
                    // if locked, prevent initialization
                    continue;
                }
                if (comm.magic_ready) {
 8013814:	4b47      	ldr	r3, [pc, #284]	; (8013934 <se3_proto_recv+0x188>)
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d015      	beq.n	8013848 <se3_proto_recv+0x9c>
                    // if magic already initialized, reset
                    comm.magic_ready = false;
 801381c:	4b45      	ldr	r3, [pc, #276]	; (8013934 <se3_proto_recv+0x188>)
 801381e:	2200      	movs	r2, #0
 8013820:	701a      	strb	r2, [r3, #0]
                    comm.magic_bmap = SE3_BMAP_MAKE(16);
 8013822:	4b44      	ldr	r3, [pc, #272]	; (8013934 <se3_proto_recv+0x188>)
 8013824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013828:	605a      	str	r2, [r3, #4]
                    for (index = 0; index < 16; index++)
 801382a:	2300      	movs	r3, #0
 801382c:	62bb      	str	r3, [r7, #40]	; 0x28
 801382e:	e008      	b.n	8013842 <se3_proto_recv+0x96>
                        comm.blocks[index] = 0;
 8013830:	4a40      	ldr	r2, [pc, #256]	; (8013934 <se3_proto_recv+0x188>)
 8013832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013834:	3302      	adds	r3, #2
 8013836:	2100      	movs	r1, #0
 8013838:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    for (index = 0; index < 16; index++)
 801383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383e:	3301      	adds	r3, #1
 8013840:	62bb      	str	r3, [r7, #40]	; 0x28
 8013842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013844:	2b0f      	cmp	r3, #15
 8013846:	ddf3      	ble.n	8013830 <se3_proto_recv+0x84>
                }
                // store block in blocks map
                index = data[SE3_COMM_BLOCK - 1];
 8013848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	62bb      	str	r3, [r7, #40]	; 0x28
                comm.blocks[index] = block;
 8013852:	4938      	ldr	r1, [pc, #224]	; (8013934 <se3_proto_recv+0x188>)
 8013854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013856:	3302      	adds	r3, #2
 8013858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                SE3_BIT_CLEAR(comm.magic_bmap, index);
 801385e:	4b35      	ldr	r3, [pc, #212]	; (8013934 <se3_proto_recv+0x188>)
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	2101      	movs	r1, #1
 8013864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013866:	fa01 f202 	lsl.w	r2, r1, r2
 801386a:	43d2      	mvns	r2, r2
 801386c:	4013      	ands	r3, r2
 801386e:	4a31      	ldr	r2, [pc, #196]	; (8013934 <se3_proto_recv+0x188>)
 8013870:	6053      	str	r3, [r2, #4]
                if (comm.magic_bmap == 0) {
 8013872:	4b30      	ldr	r3, [pc, #192]	; (8013934 <se3_proto_recv+0x188>)
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d13a      	bne.n	80138f0 <se3_proto_recv+0x144>
                    comm.magic_ready = true;
 801387a:	4b2e      	ldr	r3, [pc, #184]	; (8013934 <se3_proto_recv+0x188>)
 801387c:	2201      	movs	r2, #1
 801387e:	701a      	strb	r2, [r3, #0]
 8013880:	e036      	b.n	80138f0 <se3_proto_recv+0x144>
                }
            }
            else{
                // not a magic block
                if (!comm.magic_ready) {
 8013882:	4b2c      	ldr	r3, [pc, #176]	; (8013934 <se3_proto_recv+0x188>)
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	f083 0301 	eor.w	r3, r3, #1
 801388a:	b2db      	uxtb	r3, r3
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00e      	beq.n	80138ae <se3_proto_recv+0x102>
                    // magic file has not been written yet. forward
                    r = se3_storage_range_add(&range, lun, (uint8_t*)data, block, range_write);
 8013890:	7bf9      	ldrb	r1, [r7, #15]
 8013892:	f107 0014 	add.w	r0, r7, #20
 8013896:	2300      	movs	r3, #0
 8013898:	9300      	str	r3, [sp, #0]
 801389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801389e:	f7ff fe87 	bl	80135b0 <se3_storage_range_add>
 80138a2:	6238      	str	r0, [r7, #32]
                    if (SE3_PROTO_OK != r) return r;
 80138a4:	6a3b      	ldr	r3, [r7, #32]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d022      	beq.n	80138f0 <se3_proto_recv+0x144>
 80138aa:	6a3b      	ldr	r3, [r7, #32]
 80138ac:	e03d      	b.n	801392a <se3_proto_recv+0x17e>
                }
                else {
                    // magic file has been written. may be a command
                    index = find_magic_index(block);
 80138ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138b0:	f7ff fe48 	bl	8013544 <find_magic_index>
 80138b4:	62b8      	str	r0, [r7, #40]	; 0x28
                    if (index == -1) {
 80138b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138bc:	d10e      	bne.n	80138dc <se3_proto_recv+0x130>
                        // block is not a request. forward
                        r = se3_storage_range_add(&range, lun, (uint8_t*)data, block, range_write);
 80138be:	7bf9      	ldrb	r1, [r7, #15]
 80138c0:	f107 0014 	add.w	r0, r7, #20
 80138c4:	2300      	movs	r3, #0
 80138c6:	9300      	str	r3, [sp, #0]
 80138c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138cc:	f7ff fe70 	bl	80135b0 <se3_storage_range_add>
 80138d0:	6238      	str	r0, [r7, #32]
                        if (SE3_PROTO_OK != r) return r;
 80138d2:	6a3b      	ldr	r3, [r7, #32]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d00b      	beq.n	80138f0 <se3_proto_recv+0x144>
 80138d8:	6a3b      	ldr	r3, [r7, #32]
 80138da:	e026      	b.n	801392a <se3_proto_recv+0x17e>
                    }
                    else {
                        // block is a request
                        if (comm.req_ready) {
 80138dc:	4b15      	ldr	r3, [pc, #84]	; (8013934 <se3_proto_recv+0x188>)
 80138de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d10a      	bne.n	80138fe <se3_proto_recv+0x152>
                            // already processing request. ignore
                            SE3_TRACE(("P W%02u request already fully received", (unsigned)index));
                            continue;
                        }
                        else {
                            handle_req_recv(index, data);
 80138e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80138ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138ec:	f7ff feae 	bl	801364c <handle_req_recv>
                        }
                    }
                }
            }
		}
		data += SE3_COMM_BLOCK;
 80138f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80138f6:	627b      	str	r3, [r7, #36]	; 0x24
 80138f8:	e002      	b.n	8013900 <se3_proto_recv+0x154>
                    continue;
 80138fa:	bf00      	nop
 80138fc:	e000      	b.n	8013900 <se3_proto_recv+0x154>
                            continue;
 80138fe:	bf00      	nop
	for (block = blk_addr; block < blk_addr + blk_len; block++) {
 8013900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013902:	3301      	adds	r3, #1
 8013904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013906:	89ba      	ldrh	r2, [r7, #12]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	4413      	add	r3, r2
 801390c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801390e:	429a      	cmp	r2, r3
 8013910:	f4ff af63 	bcc.w	80137da <se3_proto_recv+0x2e>
	}

	//flush any remaining block
	return se3_storage_range_add(&range, lun, NULL, 0xFFFFFFFF, range_write);
 8013914:	7bf9      	ldrb	r1, [r7, #15]
 8013916:	f107 0014 	add.w	r0, r7, #20
 801391a:	2300      	movs	r3, #0
 801391c:	9300      	str	r3, [sp, #0]
 801391e:	f04f 33ff 	mov.w	r3, #4294967295
 8013922:	2200      	movs	r2, #0
 8013924:	f7ff fe44 	bl	80135b0 <se3_storage_range_add>
 8013928:	4603      	mov	r3, r0
}
 801392a:	4618      	mov	r0, r3
 801392c:	3730      	adds	r7, #48	; 0x30
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	20005018 	.word	0x20005018

08013938 <handle_resp_send>:
 *  Output a single block of a protocol response. If the response is ready,
 *    the data is taken from the response buffer. Otherwise the 'not ready' state is
 *    returned.
 */
static void handle_resp_send(int index, uint8_t* blockdata)
{
 8013938:	b5b0      	push	{r4, r5, r7, lr}
 801393a:	b084      	sub	sp, #16
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	6039      	str	r1, [r7, #0]
    uint16_t u16tmp;
    
    if (index == SE3_COMM_N - 1) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2b0f      	cmp	r3, #15
 8013946:	d138      	bne.n	80139ba <handle_resp_send+0x82>
        // discover
        memcpy(blockdata + SE3_DISCO_OFFSET_MAGIC, se3_magic + SE3_MAGIC_SIZE / 2, SE3_MAGIC_SIZE / 2);
 8013948:	4b4f      	ldr	r3, [pc, #316]	; (8013a88 <handle_resp_send+0x150>)
 801394a:	2210      	movs	r2, #16
 801394c:	4619      	mov	r1, r3
 801394e:	6838      	ldr	r0, [r7, #0]
 8013950:	f003 fd46 	bl	80173e0 <memcpy>
        memcpy(blockdata + SE3_DISCO_OFFSET_MAGIC + SE3_MAGIC_SIZE / 2, se3_magic, SE3_MAGIC_SIZE / 2);
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	3310      	adds	r3, #16
 8013958:	2210      	movs	r2, #16
 801395a:	494c      	ldr	r1, [pc, #304]	; (8013a8c <handle_resp_send+0x154>)
 801395c:	4618      	mov	r0, r3
 801395e:	f003 fd3f 	bl	80173e0 <memcpy>
        memcpy(blockdata + SE3_DISCO_OFFSET_SERIAL, serial.data, SE3_SERIAL_SIZE);
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	3320      	adds	r3, #32
 8013966:	4a4a      	ldr	r2, [pc, #296]	; (8013a90 <handle_resp_send+0x158>)
 8013968:	6815      	ldr	r5, [r2, #0]
 801396a:	6854      	ldr	r4, [r2, #4]
 801396c:	6890      	ldr	r0, [r2, #8]
 801396e:	68d1      	ldr	r1, [r2, #12]
 8013970:	601d      	str	r5, [r3, #0]
 8013972:	605c      	str	r4, [r3, #4]
 8013974:	6098      	str	r0, [r3, #8]
 8013976:	60d9      	str	r1, [r3, #12]
 8013978:	6915      	ldr	r5, [r2, #16]
 801397a:	6954      	ldr	r4, [r2, #20]
 801397c:	6990      	ldr	r0, [r2, #24]
 801397e:	69d1      	ldr	r1, [r2, #28]
 8013980:	611d      	str	r5, [r3, #16]
 8013982:	615c      	str	r4, [r3, #20]
 8013984:	6198      	str	r0, [r3, #24]
 8013986:	61d9      	str	r1, [r3, #28]
        memcpy(blockdata + SE3_DISCO_OFFSET_HELLO, se3_hello, SE3_HELLO_SIZE);
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	3340      	adds	r3, #64	; 0x40
 801398c:	4a41      	ldr	r2, [pc, #260]	; (8013a94 <handle_resp_send+0x15c>)
 801398e:	461c      	mov	r4, r3
 8013990:	4615      	mov	r5, r2
 8013992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013994:	6020      	str	r0, [r4, #0]
 8013996:	6061      	str	r1, [r4, #4]
 8013998:	60a2      	str	r2, [r4, #8]
 801399a:	60e3      	str	r3, [r4, #12]
 801399c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801399e:	6120      	str	r0, [r4, #16]
 80139a0:	6161      	str	r1, [r4, #20]
 80139a2:	61a2      	str	r2, [r4, #24]
 80139a4:	61e3      	str	r3, [r4, #28]
        u16tmp = (comm.locked) ? (1) : (0);
 80139a6:	4b3c      	ldr	r3, [pc, #240]	; (8013a98 <handle_resp_send+0x160>)
 80139a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	81fb      	strh	r3, [r7, #14]
        SE3_SET16(blockdata, SE3_DISCO_OFFSET_STATUS, u16tmp);
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	3360      	adds	r3, #96	; 0x60
 80139b4:	89fa      	ldrh	r2, [r7, #14]
 80139b6:	801a      	strh	r2, [r3, #0]
        else {
            // response not ready
            memset(blockdata, SE3_RESP_OFFSET_READY, sizeof(uint16_t));
        }
    }
}
 80139b8:	e062      	b.n	8013a80 <handle_resp_send+0x148>
        if (comm.resp_ready) {
 80139ba:	4b37      	ldr	r3, [pc, #220]	; (8013a98 <handle_resp_send+0x160>)
 80139bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80139c0:	b2db      	uxtb	r3, r3
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d057      	beq.n	8013a76 <handle_resp_send+0x13e>
            if (SE3_BIT_TEST(comm.resp_bmap, index)) {
 80139c6:	4b34      	ldr	r3, [pc, #208]	; (8013a98 <handle_resp_send+0x160>)
 80139c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80139ca:	2101      	movs	r1, #1
 80139cc:	687a      	ldr	r2, [r7, #4]
 80139ce:	fa01 f202 	lsl.w	r2, r1, r2
 80139d2:	4013      	ands	r3, r2
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d047      	beq.n	8013a68 <handle_resp_send+0x130>
                if (index == 0) {
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d128      	bne.n	8013a30 <handle_resp_send+0xf8>
                    u16tmp = 1;
 80139de:	2301      	movs	r3, #1
 80139e0:	81fb      	strh	r3, [r7, #14]
                    SE3_SET16(comm.resp_hdr, SE3_RESP_OFFSET_READY, u16tmp);
 80139e2:	4b2d      	ldr	r3, [pc, #180]	; (8013a98 <handle_resp_send+0x160>)
 80139e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139e6:	89fa      	ldrh	r2, [r7, #14]
 80139e8:	801a      	strh	r2, [r3, #0]
                    SE3_SET16(comm.resp_hdr, SE3_RESP_OFFSET_STATUS, resp_hdr.status);
 80139ea:	4b2b      	ldr	r3, [pc, #172]	; (8013a98 <handle_resp_send+0x160>)
 80139ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139ee:	3302      	adds	r3, #2
 80139f0:	4a2a      	ldr	r2, [pc, #168]	; (8013a9c <handle_resp_send+0x164>)
 80139f2:	8852      	ldrh	r2, [r2, #2]
 80139f4:	801a      	strh	r2, [r3, #0]
                    SE3_SET16(comm.resp_hdr, SE3_RESP_OFFSET_LEN, resp_hdr.len);
 80139f6:	4b28      	ldr	r3, [pc, #160]	; (8013a98 <handle_resp_send+0x160>)
 80139f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139fa:	3304      	adds	r3, #4
 80139fc:	4a27      	ldr	r2, [pc, #156]	; (8013a9c <handle_resp_send+0x164>)
 80139fe:	8892      	ldrh	r2, [r2, #4]
 8013a00:	801a      	strh	r2, [r3, #0]
                    SE3_SET32(comm.resp_hdr, SE3_RESP_OFFSET_CMDTOKEN, resp_hdr.cmdtok[0]);
 8013a02:	4b25      	ldr	r3, [pc, #148]	; (8013a98 <handle_resp_send+0x160>)
 8013a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a06:	3306      	adds	r3, #6
 8013a08:	4a24      	ldr	r2, [pc, #144]	; (8013a9c <handle_resp_send+0x164>)
 8013a0a:	6892      	ldr	r2, [r2, #8]
 8013a0c:	601a      	str	r2, [r3, #0]
                    memcpy(blockdata, comm.resp_hdr, SE3_RESP_SIZE_HEADER);
 8013a0e:	4b22      	ldr	r3, [pc, #136]	; (8013a98 <handle_resp_send+0x160>)
 8013a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a12:	2210      	movs	r2, #16
 8013a14:	4619      	mov	r1, r3
 8013a16:	6838      	ldr	r0, [r7, #0]
 8013a18:	f003 fce2 	bl	80173e0 <memcpy>
                    memcpy(blockdata + SE3_RESP_SIZE_HEADER, comm.resp_data, SE3_COMM_BLOCK - SE3_RESP_SIZE_HEADER);
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	3310      	adds	r3, #16
 8013a20:	4a1d      	ldr	r2, [pc, #116]	; (8013a98 <handle_resp_send+0x160>)
 8013a22:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8013a24:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f003 fcd9 	bl	80173e0 <memcpy>
}
 8013a2e:	e027      	b.n	8013a80 <handle_resp_send+0x148>
                    SE3_SET32(blockdata, SE3_RESPDATA_OFFSET_CMDTOKEN, resp_hdr.cmdtok[index]);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	3302      	adds	r3, #2
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	4a19      	ldr	r2, [pc, #100]	; (8013a9c <handle_resp_send+0x164>)
 8013a38:	4413      	add	r3, r2
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	601a      	str	r2, [r3, #0]
                        blockdata + SE3_RESPDATA_SIZE_HEADER,
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	1d18      	adds	r0, r3, #4
                        comm.resp_data + 1 * (SE3_COMM_BLOCK - SE3_RESP_SIZE_HEADER) + (index - 1)*(SE3_COMM_BLOCK - SE3_RESPDATA_SIZE_HEADER),
 8013a46:	4b14      	ldr	r3, [pc, #80]	; (8013a98 <handle_resp_send+0x160>)
 8013a48:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	1e5a      	subs	r2, r3, #1
 8013a4e:	4613      	mov	r3, r2
 8013a50:	01db      	lsls	r3, r3, #7
 8013a52:	1a9b      	subs	r3, r3, r2
 8013a54:	009b      	lsls	r3, r3, #2
 8013a56:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8013a5a:	440b      	add	r3, r1
                    memcpy(
 8013a5c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8013a60:	4619      	mov	r1, r3
 8013a62:	f003 fcbd 	bl	80173e0 <memcpy>
}
 8013a66:	e00b      	b.n	8013a80 <handle_resp_send+0x148>
                memset(blockdata, 0, SE3_COMM_BLOCK);
 8013a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a6c:	2100      	movs	r1, #0
 8013a6e:	6838      	ldr	r0, [r7, #0]
 8013a70:	f003 fcde 	bl	8017430 <memset>
}
 8013a74:	e004      	b.n	8013a80 <handle_resp_send+0x148>
            memset(blockdata, SE3_RESP_OFFSET_READY, sizeof(uint16_t));
 8013a76:	2202      	movs	r2, #2
 8013a78:	2100      	movs	r1, #0
 8013a7a:	6838      	ldr	r0, [r7, #0]
 8013a7c:	f003 fcd8 	bl	8017430 <memset>
}
 8013a80:	bf00      	nop
 8013a82:	3710      	adds	r7, #16
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bdb0      	pop	{r4, r5, r7, pc}
 8013a88:	08019ef8 	.word	0x08019ef8
 8013a8c:	08019ee8 	.word	0x08019ee8
 8013a90:	20000f6c 	.word	0x20000f6c
 8013a94:	08068670 	.word	0x08068670
 8013a98:	20005018 	.word	0x20005018
 8013a9c:	20000f90 	.word	0x20000f90

08013aa0 <se3_proto_send>:
/*	User-written USB interface that implements the read operation of the
 * 	driver; it sends the data on the SD card if the data block does not
 *	contain the magic sequence, otherwise it handles the proto request.
 */
int32_t se3_proto_send(uint8_t lun, uint8_t* buf, uint32_t blk_addr, uint16_t blk_len)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b08e      	sub	sp, #56	; 0x38
 8013aa4:	af02      	add	r7, sp, #8
 8013aa6:	60b9      	str	r1, [r7, #8]
 8013aa8:	607a      	str	r2, [r7, #4]
 8013aaa:	461a      	mov	r2, r3
 8013aac:	4603      	mov	r3, r0
 8013aae:	73fb      	strb	r3, [r7, #15]
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	81bb      	strh	r3, [r7, #12]
	int32_t r = SE3_PROTO_OK;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t block;
	int index;
	uint8_t* data = buf;
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	627b      	str	r3, [r7, #36]	; 0x24
	s3_storage_range range = {
 8013abc:	f107 0314 	add.w	r3, r7, #20
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	601a      	str	r2, [r3, #0]
 8013ac4:	605a      	str	r2, [r3, #4]
 8013ac6:	609a      	str	r2, [r3, #8]
		.first = 0,
		.count = 0
	};

	for (block = blk_addr; block < blk_addr + blk_len; block++) {
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8013acc:	e031      	b.n	8013b32 <se3_proto_send+0x92>
		if(block==0) {
 8013ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d10d      	bne.n	8013af0 <se3_proto_send+0x50>
            // forward
			if (r == SE3_PROTO_OK) r = se3_storage_range_add(&range, lun, data, block, range_read);
 8013ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d124      	bne.n	8013b24 <se3_proto_send+0x84>
 8013ada:	7bf9      	ldrb	r1, [r7, #15]
 8013adc:	f107 0014 	add.w	r0, r7, #20
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	9300      	str	r3, [sp, #0]
 8013ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ae8:	f7ff fd62 	bl	80135b0 <se3_storage_range_add>
 8013aec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013aee:	e019      	b.n	8013b24 <se3_proto_send+0x84>
		}
		else{
			index = find_magic_index(block);
 8013af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013af2:	f7ff fd27 	bl	8013544 <find_magic_index>
 8013af6:	6238      	str	r0, [r7, #32]
            if (index == -1) {
 8013af8:	6a3b      	ldr	r3, [r7, #32]
 8013afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013afe:	d10d      	bne.n	8013b1c <se3_proto_send+0x7c>
                // forward
                if (r == SE3_PROTO_OK) r = se3_storage_range_add(&range, lun, data, block, range_read);
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10e      	bne.n	8013b24 <se3_proto_send+0x84>
 8013b06:	7bf9      	ldrb	r1, [r7, #15]
 8013b08:	f107 0014 	add.w	r0, r7, #20
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	9300      	str	r3, [sp, #0]
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b14:	f7ff fd4c 	bl	80135b0 <se3_storage_range_add>
 8013b18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013b1a:	e003      	b.n	8013b24 <se3_proto_send+0x84>
            }
            else {
                handle_resp_send(index, data);
 8013b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b1e:	6a38      	ldr	r0, [r7, #32]
 8013b20:	f7ff ff0a 	bl	8013938 <handle_resp_send>
            }
		}
		data += SE3_COMM_BLOCK;
 8013b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013b2a:	627b      	str	r3, [r7, #36]	; 0x24
	for (block = blk_addr; block < blk_addr + blk_len; block++) {
 8013b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2e:	3301      	adds	r3, #1
 8013b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8013b32:	89ba      	ldrh	r2, [r7, #12]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	4413      	add	r3, r2
 8013b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d3c7      	bcc.n	8013ace <se3_proto_send+0x2e>
	}

	//flush any remaining block
    if (r == SE3_PROTO_OK) r = se3_storage_range_add(&range, lun, NULL, 0xFFFFFFFF, range_read);
 8013b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d10a      	bne.n	8013b5a <se3_proto_send+0xba>
 8013b44:	7bf9      	ldrb	r1, [r7, #15]
 8013b46:	f107 0014 	add.w	r0, r7, #20
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	9300      	str	r3, [sp, #0]
 8013b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b52:	2200      	movs	r2, #0
 8013b54:	f7ff fd2c 	bl	80135b0 <se3_storage_range_add>
 8013b58:	62f8      	str	r0, [r7, #44]	; 0x2c
    return r;
 8013b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3730      	adds	r7, #48	; 0x30
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}

08013b64 <device_init>:

uint8_t se3_sessions_buf[SE3_SESSIONS_BUF];
uint8_t* se3_sessions_index[SE3_SESSIONS_MAX];

void device_init()
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	af00      	add	r7, sp, #0
	se3_communication_core_init();
 8013b68:	f7ff fc6c 	bl	8013444 <se3_communication_core_init>
//	se3_time_init();
	se3_flash_init();
 8013b6c:	f001 f958 	bl	8014e20 <se3_flash_init>
    se3_dispatcher_init();
 8013b70:	f000 feee 	bl	8014950 <se3_dispatcher_init>
}
 8013b74:	bf00      	nop
 8013b76:	bd80      	pop	{r7, pc}

08013b78 <device_loop>:

void device_loop()
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	af00      	add	r7, sp, #0
	for (;;) {
		if (comm.req_ready) {
 8013b7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ba8 <device_loop+0x30>)
 8013b7e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d0f9      	beq.n	8013b7c <device_loop+0x4>
			comm.resp_ready = false;
 8013b88:	4b07      	ldr	r3, [pc, #28]	; (8013ba8 <device_loop+0x30>)
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            se3_cmd_execute();
 8013b90:	f000 f8b2 	bl	8013cf8 <se3_cmd_execute>
			comm.req_ready = false;
 8013b94:	4b04      	ldr	r3, [pc, #16]	; (8013ba8 <device_loop+0x30>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			comm.resp_ready = true;
 8013b9c:	4b02      	ldr	r3, [pc, #8]	; (8013ba8 <device_loop+0x30>)
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		if (comm.req_ready) {
 8013ba4:	e7ea      	b.n	8013b7c <device_loop+0x4>
 8013ba6:	bf00      	nop
 8013ba8:	20005018 	.word	0x20005018

08013bac <invalid_cmd_handler>:
		}
	}
}

static uint16_t invalid_cmd_handler(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b085      	sub	sp, #20
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60b9      	str	r1, [r7, #8]
 8013bb4:	607a      	str	r2, [r7, #4]
 8013bb6:	603b      	str	r3, [r7, #0]
 8013bb8:	4603      	mov	r3, r0
 8013bba:	81fb      	strh	r3, [r7, #14]
    return SE3_ERR_CMD;
 8013bbc:	f24f 0305 	movw	r3, #61445	; 0xf005
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3714      	adds	r7, #20
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <se3_exec>:

static uint16_t se3_exec(se3_cmd_func handler)
{
 8013bcc:	b590      	push	{r4, r7, lr}
 8013bce:	b087      	sub	sp, #28
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
    uint16_t resp_size = 0, tmp;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	81fb      	strh	r3, [r7, #14]
    uint16_t status = SE3_OK;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	82fb      	strh	r3, [r7, #22]
    uint16_t nblocks = 0;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	82bb      	strh	r3, [r7, #20]
#if SE3_CONF_CRC
	uint16_t crc;
	uint16_t u16tmp;
#endif

    data_len = se3_req_len_data(req_hdr.len);
 8013be0:	4b40      	ldr	r3, [pc, #256]	; (8013ce4 <se3_exec+0x118>)
 8013be2:	889b      	ldrh	r3, [r3, #4]
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7fb fb58 	bl	800f29a <se3_req_len_data>
 8013bea:	4603      	mov	r3, r0
 8013bec:	827b      	strh	r3, [r7, #18]
		status = SE3_ERR_COMM;
		resp_size = 0;
	}
#endif

	if(status == SE3_OK) {
 8013bee:	8afb      	ldrh	r3, [r7, #22]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d10a      	bne.n	8013c0a <se3_exec+0x3e>
		status = handler(data_len, comm.req_data, &resp_size, comm.resp_data);
 8013bf4:	4b3c      	ldr	r3, [pc, #240]	; (8013ce8 <se3_exec+0x11c>)
 8013bf6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013bf8:	4b3b      	ldr	r3, [pc, #236]	; (8013ce8 <se3_exec+0x11c>)
 8013bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013bfc:	f107 020e 	add.w	r2, r7, #14
 8013c00:	8a78      	ldrh	r0, [r7, #18]
 8013c02:	687c      	ldr	r4, [r7, #4]
 8013c04:	47a0      	blx	r4
 8013c06:	4603      	mov	r3, r0
 8013c08:	82fb      	strh	r3, [r7, #22]
	}

    if (hwerror) {
 8013c0a:	4b38      	ldr	r3, [pc, #224]	; (8013cec <se3_exec+0x120>)
 8013c0c:	881b      	ldrh	r3, [r3, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d008      	beq.n	8013c24 <se3_exec+0x58>
        status = SE3_ERR_HW;
 8013c12:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013c16:	82fb      	strh	r3, [r7, #22]
        resp_size = 0;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	81fb      	strh	r3, [r7, #14]
        hwerror = false;
 8013c1c:	4b33      	ldr	r3, [pc, #204]	; (8013cec <se3_exec+0x120>)
 8013c1e:	2200      	movs	r2, #0
 8013c20:	801a      	strh	r2, [r3, #0]
 8013c22:	e009      	b.n	8013c38 <se3_exec+0x6c>
    }
    else if (resp_size > SE3_RESP_MAX_DATA) {
 8013c24:	89fb      	ldrh	r3, [r7, #14]
 8013c26:	f641 52b0 	movw	r2, #7600	; 0x1db0
 8013c2a:	4293      	cmp	r3, r2
 8013c2c:	d904      	bls.n	8013c38 <se3_exec+0x6c>
        status = SE3_ERR_HW;
 8013c2e:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013c32:	82fb      	strh	r3, [r7, #22]
        resp_size = 0;
 8013c34:	2300      	movs	r3, #0
 8013c36:	81fb      	strh	r3, [r7, #14]
    }

    resp_hdr.status = status;
 8013c38:	4a2d      	ldr	r2, [pc, #180]	; (8013cf0 <se3_exec+0x124>)
 8013c3a:	8afb      	ldrh	r3, [r7, #22]
 8013c3c:	8053      	strh	r3, [r2, #2]

    if (resp_size <= SE3_COMM_BLOCK - SE3_RESP_SIZE_HEADER) {
 8013c3e:	89fb      	ldrh	r3, [r7, #14]
 8013c40:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8013c44:	d80d      	bhi.n	8013c62 <se3_exec+0x96>
        nblocks = 1;
 8013c46:	2301      	movs	r3, #1
 8013c48:	82bb      	strh	r3, [r7, #20]
        // zero unused memory
        memset(comm.resp_data + resp_size, 0, SE3_COMM_BLOCK - SE3_RESP_SIZE_HEADER - resp_size);
 8013c4a:	4b27      	ldr	r3, [pc, #156]	; (8013ce8 <se3_exec+0x11c>)
 8013c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013c4e:	89fa      	ldrh	r2, [r7, #14]
 8013c50:	4413      	add	r3, r2
 8013c52:	89fa      	ldrh	r2, [r7, #14]
 8013c54:	f5c2 72f8 	rsb	r2, r2, #496	; 0x1f0
 8013c58:	2100      	movs	r1, #0
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f003 fbe8 	bl	8017430 <memset>
 8013c60:	e033      	b.n	8013cca <se3_exec+0xfe>
    }
    else {
        tmp = resp_size - (SE3_COMM_BLOCK - SE3_RESP_SIZE_HEADER);
 8013c62:	89fb      	ldrh	r3, [r7, #14]
 8013c64:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8013c68:	823b      	strh	r3, [r7, #16]
        nblocks = 1 + tmp / (SE3_COMM_BLOCK - SE3_RESPDATA_SIZE_HEADER);
 8013c6a:	8a3b      	ldrh	r3, [r7, #16]
 8013c6c:	089b      	lsrs	r3, r3, #2
 8013c6e:	4a21      	ldr	r2, [pc, #132]	; (8013cf4 <se3_exec+0x128>)
 8013c70:	fba2 2303 	umull	r2, r3, r2, r3
 8013c74:	095b      	lsrs	r3, r3, #5
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	3301      	adds	r3, #1
 8013c7a:	82bb      	strh	r3, [r7, #20]
        if (tmp % (SE3_COMM_BLOCK - SE3_RESPDATA_SIZE_HEADER) != 0) {
 8013c7c:	8a3a      	ldrh	r2, [r7, #16]
 8013c7e:	0893      	lsrs	r3, r2, #2
 8013c80:	491c      	ldr	r1, [pc, #112]	; (8013cf4 <se3_exec+0x128>)
 8013c82:	fba1 1303 	umull	r1, r3, r1, r3
 8013c86:	0959      	lsrs	r1, r3, #5
 8013c88:	460b      	mov	r3, r1
 8013c8a:	01db      	lsls	r3, r3, #7
 8013c8c:	1a5b      	subs	r3, r3, r1
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	1ad3      	subs	r3, r2, r3
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d018      	beq.n	8013cca <se3_exec+0xfe>
            nblocks++;
 8013c98:	8abb      	ldrh	r3, [r7, #20]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	82bb      	strh	r3, [r7, #20]
            // zero unused memory
            memset(comm.resp_data + resp_size, 0, (SE3_COMM_BLOCK - SE3_RESPDATA_SIZE_HEADER) - (tmp % (SE3_COMM_BLOCK - SE3_RESPDATA_SIZE_HEADER)));
 8013c9e:	4b12      	ldr	r3, [pc, #72]	; (8013ce8 <se3_exec+0x11c>)
 8013ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013ca2:	89fa      	ldrh	r2, [r7, #14]
 8013ca4:	1898      	adds	r0, r3, r2
 8013ca6:	8a3a      	ldrh	r2, [r7, #16]
 8013ca8:	0893      	lsrs	r3, r2, #2
 8013caa:	4912      	ldr	r1, [pc, #72]	; (8013cf4 <se3_exec+0x128>)
 8013cac:	fba1 1303 	umull	r1, r3, r1, r3
 8013cb0:	0959      	lsrs	r1, r3, #5
 8013cb2:	460b      	mov	r3, r1
 8013cb4:	01db      	lsls	r3, r3, #7
 8013cb6:	1a5b      	subs	r3, r3, r1
 8013cb8:	009b      	lsls	r3, r3, #2
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	f5c3 73fe 	rsb	r3, r3, #508	; 0x1fc
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	f003 fbb3 	bl	8017430 <memset>
        }
    }

	resp_hdr.len = se3_resp_len_data_and_headers(resp_size);
 8013cca:	89fb      	ldrh	r3, [r7, #14]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7fb fb0f 	bl	800f2f0 <se3_resp_len_data_and_headers>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	461a      	mov	r2, r3
 8013cd6:	4b06      	ldr	r3, [pc, #24]	; (8013cf0 <se3_exec+0x124>)
 8013cd8:	809a      	strh	r2, [r3, #4]
		crc = se3_crc16_update(resp_size, comm.resp_data, crc);
	}
	resp_hdr.crc = crc;
#endif

    return nblocks;
 8013cda:	8abb      	ldrh	r3, [r7, #20]
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	371c      	adds	r7, #28
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd90      	pop	{r4, r7, pc}
 8013ce4:	20004fd4 	.word	0x20004fd4
 8013ce8:	20005018 	.word	0x20005018
 8013cec:	20000f68 	.word	0x20000f68
 8013cf0:	20000f90 	.word	0x20000f90
 8013cf4:	40810205 	.word	0x40810205

08013cf8 <se3_cmd_execute>:

void se3_cmd_execute()
{
 8013cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cfa:	b093      	sub	sp, #76	; 0x4c
 8013cfc:	af0e      	add	r7, sp, #56	; 0x38
    uint16_t req_blocks = 1, resp_blocks = 1;
 8013cfe:	2301      	movs	r3, #1
 8013d00:	81fb      	strh	r3, [r7, #14]
 8013d02:	2301      	movs	r3, #1
 8013d04:	81bb      	strh	r3, [r7, #12]
    size_t i;
    se3_cmd_func handler = NULL;
 8013d06:	2300      	movs	r3, #0
 8013d08:	607b      	str	r3, [r7, #4]
	uint32_t cmdtok0;

    req_blocks = req_hdr.len / SE3_COMM_BLOCK;
 8013d0a:	4b46      	ldr	r3, [pc, #280]	; (8013e24 <se3_cmd_execute+0x12c>)
 8013d0c:	889b      	ldrh	r3, [r3, #4]
 8013d0e:	0a5b      	lsrs	r3, r3, #9
 8013d10:	81fb      	strh	r3, [r7, #14]
    if (req_hdr.len % SE3_COMM_BLOCK != 0) {
 8013d12:	4b44      	ldr	r3, [pc, #272]	; (8013e24 <se3_cmd_execute+0x12c>)
 8013d14:	889b      	ldrh	r3, [r3, #4]
 8013d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d002      	beq.n	8013d26 <se3_cmd_execute+0x2e>
        req_blocks++;
 8013d20:	89fb      	ldrh	r3, [r7, #14]
 8013d22:	3301      	adds	r3, #1
 8013d24:	81fb      	strh	r3, [r7, #14]
    }
    if (req_blocks > SE3_COMM_N - 1) {
 8013d26:	89fb      	ldrh	r3, [r7, #14]
 8013d28:	2b0f      	cmp	r3, #15
 8013d2a:	d902      	bls.n	8013d32 <se3_cmd_execute+0x3a>
        // should not happen anyway
        resp_blocks = 0;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	81bb      	strh	r3, [r7, #12]
        goto update_comm;
 8013d30:	e06a      	b.n	8013e08 <se3_cmd_execute+0x110>
    }
    for (i = 1; i < req_blocks; i++) {
 8013d32:	2301      	movs	r3, #1
 8013d34:	60bb      	str	r3, [r7, #8]
 8013d36:	e013      	b.n	8013d60 <se3_cmd_execute+0x68>
        if (req_hdr.cmdtok[i] != req_hdr.cmdtok[i - 1] + 1) {
 8013d38:	4a3a      	ldr	r2, [pc, #232]	; (8013e24 <se3_cmd_execute+0x12c>)
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	3302      	adds	r3, #2
 8013d3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	3b01      	subs	r3, #1
 8013d46:	4937      	ldr	r1, [pc, #220]	; (8013e24 <se3_cmd_execute+0x12c>)
 8013d48:	3302      	adds	r3, #2
 8013d4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013d4e:	3301      	adds	r3, #1
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d002      	beq.n	8013d5a <se3_cmd_execute+0x62>
            resp_blocks = 0;
 8013d54:	2300      	movs	r3, #0
 8013d56:	81bb      	strh	r3, [r7, #12]
            goto update_comm;
 8013d58:	e056      	b.n	8013e08 <se3_cmd_execute+0x110>
    for (i = 1; i < req_blocks; i++) {
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	60bb      	str	r3, [r7, #8]
 8013d60:	89fb      	ldrh	r3, [r7, #14]
 8013d62:	68ba      	ldr	r2, [r7, #8]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d3e7      	bcc.n	8013d38 <se3_cmd_execute+0x40>
        }
    }

	if (handler == NULL) {
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d12f      	bne.n	8013dce <se3_cmd_execute+0xd6>
		switch (req_hdr.cmd) {
 8013d6e:	4b2d      	ldr	r3, [pc, #180]	; (8013e24 <se3_cmd_execute+0x12c>)
 8013d70:	881b      	ldrh	r3, [r3, #0]
 8013d72:	3b01      	subs	r3, #1
 8013d74:	2b03      	cmp	r3, #3
 8013d76:	d827      	bhi.n	8013dc8 <se3_cmd_execute+0xd0>
 8013d78:	a201      	add	r2, pc, #4	; (adr r2, 8013d80 <se3_cmd_execute+0x88>)
 8013d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d7e:	bf00      	nop
 8013d80:	08013dbd 	.word	0x08013dbd
 8013d84:	08013db7 	.word	0x08013db7
 8013d88:	08013d91 	.word	0x08013d91
 8013d8c:	08013dc3 	.word	0x08013dc3
		case SE3_CMD0_MIX:
			set_req_hdr(req_hdr);
 8013d90:	4e24      	ldr	r6, [pc, #144]	; (8013e24 <se3_cmd_execute+0x12c>)
 8013d92:	466d      	mov	r5, sp
 8013d94:	f106 0410 	add.w	r4, r6, #16
 8013d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013da4:	6823      	ldr	r3, [r4, #0]
 8013da6:	602b      	str	r3, [r5, #0]
 8013da8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8013dac:	f000 fe04 	bl	80149b8 <set_req_hdr>
			handler = dispatcher_call;
 8013db0:	4b1d      	ldr	r3, [pc, #116]	; (8013e28 <se3_cmd_execute+0x130>)
 8013db2:	607b      	str	r3, [r7, #4]
			break;
 8013db4:	e00c      	b.n	8013dd0 <se3_cmd_execute+0xd8>
		case SE3_CMD0_ECHO:
			handler = echo;
 8013db6:	4b1d      	ldr	r3, [pc, #116]	; (8013e2c <se3_cmd_execute+0x134>)
 8013db8:	607b      	str	r3, [r7, #4]
			break;
 8013dba:	e009      	b.n	8013dd0 <se3_cmd_execute+0xd8>
		case SE3_CMD0_FACTORY_INIT:
			handler = factory_init;
 8013dbc:	4b1c      	ldr	r3, [pc, #112]	; (8013e30 <se3_cmd_execute+0x138>)
 8013dbe:	607b      	str	r3, [r7, #4]
			break;
 8013dc0:	e006      	b.n	8013dd0 <se3_cmd_execute+0xd8>
		case SE3_CMD0_BOOT_MODE_RESET:
			handler = bootmode_reset;
 8013dc2:	4b1c      	ldr	r3, [pc, #112]	; (8013e34 <se3_cmd_execute+0x13c>)
 8013dc4:	607b      	str	r3, [r7, #4]
			break;
 8013dc6:	e003      	b.n	8013dd0 <se3_cmd_execute+0xd8>
		default:
			handler = invalid_cmd_handler;
 8013dc8:	4b1b      	ldr	r3, [pc, #108]	; (8013e38 <se3_cmd_execute+0x140>)
 8013dca:	607b      	str	r3, [r7, #4]
 8013dcc:	e000      	b.n	8013dd0 <se3_cmd_execute+0xd8>
		}
	}
 8013dce:	bf00      	nop

    resp_blocks = se3_exec(handler);
 8013dd0:	6878      	ldr	r0, [r7, #4]
 8013dd2:	f7ff fefb 	bl	8013bcc <se3_exec>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	81bb      	strh	r3, [r7, #12]

    // set cmdtok
	cmdtok0 = req_hdr.cmdtok[0];
 8013dda:	4b12      	ldr	r3, [pc, #72]	; (8013e24 <se3_cmd_execute+0x12c>)
 8013ddc:	689b      	ldr	r3, [r3, #8]
 8013dde:	603b      	str	r3, [r7, #0]
    for (i = 0; i < resp_blocks; i++) {
 8013de0:	2300      	movs	r3, #0
 8013de2:	60bb      	str	r3, [r7, #8]
 8013de4:	e00b      	b.n	8013dfe <se3_cmd_execute+0x106>
        resp_hdr.cmdtok[i] = cmdtok0;
 8013de6:	4915      	ldr	r1, [pc, #84]	; (8013e3c <se3_cmd_execute+0x144>)
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	3302      	adds	r3, #2
 8013dec:	683a      	ldr	r2, [r7, #0]
 8013dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		cmdtok0++;
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	3301      	adds	r3, #1
 8013df6:	603b      	str	r3, [r7, #0]
    for (i = 0; i < resp_blocks; i++) {
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	60bb      	str	r3, [r7, #8]
 8013dfe:	89bb      	ldrh	r3, [r7, #12]
 8013e00:	68ba      	ldr	r2, [r7, #8]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d3ef      	bcc.n	8013de6 <se3_cmd_execute+0xee>
    }


update_comm:
 8013e06:	bf00      	nop
    // update comm response bit map
    comm.resp_bmap = SE3_BMAP_MAKE(resp_blocks);
 8013e08:	89bb      	ldrh	r3, [r7, #12]
 8013e0a:	f1c3 0320 	rsb	r3, r3, #32
 8013e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e12:	fa22 f303 	lsr.w	r3, r2, r3
 8013e16:	4a0a      	ldr	r2, [pc, #40]	; (8013e40 <se3_cmd_execute+0x148>)
 8013e18:	6613      	str	r3, [r2, #96]	; 0x60
}
 8013e1a:	bf00      	nop
 8013e1c:	3714      	adds	r7, #20
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e22:	bf00      	nop
 8013e24:	20004fd4 	.word	0x20004fd4
 8013e28:	08014679 	.word	0x08014679
 8013e2c:	08013e45 	.word	0x08013e45
 8013e30:	08013e71 	.word	0x08013e71
 8013e34:	08013f19 	.word	0x08013f19
 8013e38:	08013bad 	.word	0x08013bad
 8013e3c:	20000f90 	.word	0x20000f90
 8013e40:	20005018 	.word	0x20005018

08013e44 <echo>:

uint16_t echo(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b084      	sub	sp, #16
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60b9      	str	r1, [r7, #8]
 8013e4c:	607a      	str	r2, [r7, #4]
 8013e4e:	603b      	str	r3, [r7, #0]
 8013e50:	4603      	mov	r3, r0
 8013e52:	81fb      	strh	r3, [r7, #14]
    memcpy(resp, req, req_size);
 8013e54:	89fb      	ldrh	r3, [r7, #14]
 8013e56:	461a      	mov	r2, r3
 8013e58:	68b9      	ldr	r1, [r7, #8]
 8013e5a:	6838      	ldr	r0, [r7, #0]
 8013e5c:	f003 fac0 	bl	80173e0 <memcpy>
    *resp_size = req_size;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	89fa      	ldrh	r2, [r7, #14]
 8013e64:	801a      	strh	r2, [r3, #0]
    return SE3_OK;
 8013e66:	2300      	movs	r3, #0
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3710      	adds	r7, #16
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <factory_init>:

uint16_t factory_init(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8013e70:	b5b0      	push	{r4, r5, r7, lr}
 8013e72:	b08a      	sub	sp, #40	; 0x28
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60b9      	str	r1, [r7, #8]
 8013e78:	607a      	str	r2, [r7, #4]
 8013e7a:	603b      	str	r3, [r7, #0]
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	81fb      	strh	r3, [r7, #14]
    enum {
        OFF_SERIAL = 0
    };
    const uint8_t* serial_tmp = req + OFF_SERIAL;
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	627b      	str	r3, [r7, #36]	; 0x24
    se3_flash_it it;
    if(serial.written){
 8013e84:	4b23      	ldr	r3, [pc, #140]	; (8013f14 <factory_init+0xa4>)
 8013e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d002      	beq.n	8013e94 <factory_init+0x24>
    	return SE3_ERR_STATE;
 8013e8e:	f24f 0304 	movw	r3, #61444	; 0xf004
 8013e92:	e03b      	b.n	8013f0c <factory_init+0x9c>
	}
    se3_flash_it_init(&it);
 8013e94:	f107 0314 	add.w	r3, r7, #20
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f001 f886 	bl	8014faa <se3_flash_it_init>
    if (!se3_flash_it_new(&it, SE3_FLASH_TYPE_SERIAL, SE3_SERIAL_SIZE)) {
 8013e9e:	f107 0314 	add.w	r3, r7, #20
 8013ea2:	2220      	movs	r2, #32
 8013ea4:	2101      	movs	r1, #1
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f001 f8fa 	bl	80150a0 <se3_flash_it_new>
 8013eac:	4603      	mov	r3, r0
 8013eae:	f083 0301 	eor.w	r3, r3, #1
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d002      	beq.n	8013ebe <factory_init+0x4e>
        return SE3_ERR_HW;
 8013eb8:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013ebc:	e026      	b.n	8013f0c <factory_init+0x9c>
    }
    if (!se3_flash_it_write(&it, 0, serial_tmp, SE3_SERIAL_SIZE)) {
 8013ebe:	f107 0014 	add.w	r0, r7, #20
 8013ec2:	2320      	movs	r3, #32
 8013ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ec6:	2100      	movs	r1, #0
 8013ec8:	f001 f84c 	bl	8014f64 <se3_flash_it_write>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	f083 0301 	eor.w	r3, r3, #1
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d002      	beq.n	8013ede <factory_init+0x6e>
        return SE3_ERR_HW;
 8013ed8:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013edc:	e016      	b.n	8013f0c <factory_init+0x9c>
    }
    memcpy(serial.data, serial_tmp, SE3_SERIAL_SIZE);
 8013ede:	4b0d      	ldr	r3, [pc, #52]	; (8013f14 <factory_init+0xa4>)
 8013ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ee2:	6815      	ldr	r5, [r2, #0]
 8013ee4:	6854      	ldr	r4, [r2, #4]
 8013ee6:	6890      	ldr	r0, [r2, #8]
 8013ee8:	68d1      	ldr	r1, [r2, #12]
 8013eea:	601d      	str	r5, [r3, #0]
 8013eec:	605c      	str	r4, [r3, #4]
 8013eee:	6098      	str	r0, [r3, #8]
 8013ef0:	60d9      	str	r1, [r3, #12]
 8013ef2:	6915      	ldr	r5, [r2, #16]
 8013ef4:	6954      	ldr	r4, [r2, #20]
 8013ef6:	6990      	ldr	r0, [r2, #24]
 8013ef8:	69d1      	ldr	r1, [r2, #28]
 8013efa:	611d      	str	r5, [r3, #16]
 8013efc:	615c      	str	r4, [r3, #20]
 8013efe:	6198      	str	r0, [r3, #24]
 8013f00:	61d9      	str	r1, [r3, #28]
    serial.written = true;
 8013f02:	4b04      	ldr	r3, [pc, #16]	; (8013f14 <factory_init+0xa4>)
 8013f04:	2201      	movs	r2, #1
 8013f06:	f883 2020 	strb.w	r2, [r3, #32]
    return SE3_OK;
 8013f0a:	2300      	movs	r3, #0
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3728      	adds	r7, #40	; 0x28
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bdb0      	pop	{r4, r5, r7, pc}
 8013f14:	20000f6c 	.word	0x20000f6c

08013f18 <bootmode_reset>:

uint16_t bootmode_reset(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	60b9      	str	r1, [r7, #8]
 8013f20:	607a      	str	r2, [r7, #4]
 8013f22:	603b      	str	r3, [r7, #0]
 8013f24:	4603      	mov	r3, r0
 8013f26:	81fb      	strh	r3, [r7, #14]
	if(!(se3_flash_bootmode_reset(SE3_FLASH_SIGNATURE_ADDR, SE3_FLASH_SIGNATURE_SIZE))){
 8013f28:	2140      	movs	r1, #64	; 0x40
 8013f2a:	4808      	ldr	r0, [pc, #32]	; (8013f4c <bootmode_reset+0x34>)
 8013f2c:	f001 f99e 	bl	801526c <se3_flash_bootmode_reset>
 8013f30:	4603      	mov	r3, r0
 8013f32:	f083 0301 	eor.w	r3, r3, #1
 8013f36:	b2db      	uxtb	r3, r3
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d002      	beq.n	8013f42 <bootmode_reset+0x2a>
		return SE3_ERR_HW;
 8013f3c:	f24f 0301 	movw	r3, #61441	; 0xf001
 8013f40:	e000      	b.n	8013f44 <bootmode_reset+0x2c>
	} else {
		return SE3_OK;
 8013f42:	2300      	movs	r3, #0
	}
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	3710      	adds	r7, #16
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}
 8013f4c:	08020000 	.word	0x08020000

08013f50 <sekey_utilities>:
static void login_cleanup();
bool key_len_valid(uint16_t len);

/* simple dispatcher for sekey-related operations */
uint16_t sekey_utilities(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b08a      	sub	sp, #40	; 0x28
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60b9      	str	r1, [r7, #8]
 8013f58:	607a      	str	r2, [r7, #4]
 8013f5a:	603b      	str	r3, [r7, #0]
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	81fb      	strh	r3, [r7, #14]
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	881b      	ldrh	r3, [r3, #0]
 8013f64:	b29b      	uxth	r3, r3
    uint16_t operation; // the type of operation to be executed
    memcpy((void*)&(operation), (void*)req, 2);
 8013f66:	84fb      	strh	r3, [r7, #38]	; 0x26
    se3_flash_it it = { .addr = NULL};
 8013f68:	f107 0314 	add.w	r3, r7, #20
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	601a      	str	r2, [r3, #0]
 8013f70:	605a      	str	r2, [r3, #4]
 8013f72:	609a      	str	r2, [r3, #8]
 8013f74:	60da      	str	r2, [r3, #12]
    if(!login_struct.y){
 8013f76:	4b3b      	ldr	r3, [pc, #236]	; (8014064 <sekey_utilities+0x114>)
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	f083 0301 	eor.w	r3, r3, #1
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d001      	beq.n	8013f88 <sekey_utilities+0x38>
        return SE3_ERR_ACCESS;
 8013f84:	2364      	movs	r3, #100	; 0x64
 8013f86:	e068      	b.n	801405a <sekey_utilities+0x10a>
    }
    se3_flash_it_init(&it);
 8013f88:	f107 0314 	add.w	r3, r7, #20
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f001 f80c 	bl	8014faa <se3_flash_it_init>
    it.addr = NULL;
 8013f92:	2300      	movs	r3, #0
 8013f94:	617b      	str	r3, [r7, #20]
    switch (operation) {
 8013f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013f98:	3b01      	subs	r3, #1
 8013f9a:	2b08      	cmp	r3, #8
 8013f9c:	d85b      	bhi.n	8014056 <sekey_utilities+0x106>
 8013f9e:	a201      	add	r2, pc, #4	; (adr r2, 8013fa4 <sekey_utilities+0x54>)
 8013fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fa4:	08013fc9 	.word	0x08013fc9
 8013fa8:	08013fdb 	.word	0x08013fdb
 8013fac:	08014057 	.word	0x08014057
 8013fb0:	08013fff 	.word	0x08013fff
 8013fb4:	0801400f 	.word	0x0801400f
 8013fb8:	08014021 	.word	0x08014021
 8013fbc:	08013fed 	.word	0x08013fed
 8013fc0:	08014033 	.word	0x08014033
 8013fc4:	08014045 	.word	0x08014045
        case SE3_SEKEY_OP_SETINFO:
            return store_user_info(req_size, req+2, resp_size, resp);
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	1c99      	adds	r1, r3, #2
 8013fcc:	89f8      	ldrh	r0, [r7, #14]
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	f002 f87f 	bl	80160d4 <store_user_info>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	e03f      	b.n	801405a <sekey_utilities+0x10a>
            break;
        case SE3_SEKEY_OP_GETINFO:
            return load_user_info(req_size, req+2, resp_size, resp);
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	1c99      	adds	r1, r3, #2
 8013fde:	89f8      	ldrh	r0, [r7, #14]
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	f002 f984 	bl	80162f0 <load_user_info>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	e036      	b.n	801405a <sekey_utilities+0x10a>
            break;
        case SE3_SEKEY_OP_GETKEYENC:
			return load_encrypted_key_data(req_size, req+2, resp_size, resp);
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	1c99      	adds	r1, r3, #2
 8013ff0:	89f8      	ldrh	r0, [r7, #14]
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	687a      	ldr	r2, [r7, #4]
 8013ff6:	f002 fa1f 	bl	8016438 <load_encrypted_key_data>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	e02d      	b.n	801405a <sekey_utilities+0x10a>
			break;
        case SE3_SEKEY_OP_GET_KEY_IDS:
        	return load_key_ids(req_size, req, resp_size, resp);
 8013ffe:	89f8      	ldrh	r0, [r7, #14]
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	68b9      	ldr	r1, [r7, #8]
 8014006:	f002 fd27 	bl	8016a58 <load_key_ids>
 801400a:	4603      	mov	r3, r0
 801400c:	e025      	b.n	801405a <sekey_utilities+0x10a>
        	break;
        case SE3_SEKEY_DELETEALL:
        	return delete_all_keys(req_size, req+2, resp_size, resp);
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	1c99      	adds	r1, r3, #2
 8014012:	89f8      	ldrh	r0, [r7, #14]
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	687a      	ldr	r2, [r7, #4]
 8014018:	f002 fd9c 	bl	8016b54 <delete_all_keys>
 801401c:	4603      	mov	r3, r0
 801401e:	e01c      	b.n	801405a <sekey_utilities+0x10a>
        	break;
        case SE3_SEKEY_DELETEKEY:
        	return delete_key(req_size, req+2, resp_size, resp);
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	1c99      	adds	r1, r3, #2
 8014024:	89f8      	ldrh	r0, [r7, #14]
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	f002 fe3f 	bl	8016cac <delete_key>
 801402e:	4603      	mov	r3, r0
 8014030:	e013      	b.n	801405a <sekey_utilities+0x10a>
        	break;
        case SE3_SEKEY_INSERTKEY:
        	return insert_key(req_size, req+2, resp_size, resp);
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	1c99      	adds	r1, r3, #2
 8014036:	89f8      	ldrh	r0, [r7, #14]
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	f002 feea 	bl	8016e14 <insert_key>
 8014040:	4603      	mov	r3, r0
 8014042:	e00a      	b.n	801405a <sekey_utilities+0x10a>
        	break;
        case SE3_SEKEY_ISREADY:
        	return is_ready(req_size, req+2, resp_size, resp);
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	1c99      	adds	r1, r3, #2
 8014048:	89f8      	ldrh	r0, [r7, #14]
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	687a      	ldr	r2, [r7, #4]
 801404e:	f002 fe8b 	bl	8016d68 <is_ready>
 8014052:	4603      	mov	r3, r0
 8014054:	e001      	b.n	801405a <sekey_utilities+0x10a>
        	break;
        default:
            SE3_TRACE(("[sekey_utilities] invalid operation\n"));
            return SE3_ERR_PARAMS;
 8014056:	f24f 0306 	movw	r3, #61446	; 0xf006
    }
    return SE3_OK;
}
 801405a:	4618      	mov	r0, r3
 801405c:	3728      	adds	r7, #40	; 0x28
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	2000d218 	.word	0x2000d218

08014068 <error>:

uint16_t error(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8014068:	b480      	push	{r7}
 801406a:	b085      	sub	sp, #20
 801406c:	af00      	add	r7, sp, #0
 801406e:	60b9      	str	r1, [r7, #8]
 8014070:	607a      	str	r2, [r7, #4]
 8014072:	603b      	str	r3, [r7, #0]
 8014074:	4603      	mov	r3, r0
 8014076:	81fb      	strh	r3, [r7, #14]
    return SE3_ERR_CMD;
 8014078:	f24f 0305 	movw	r3, #61445	; 0xf005
}
 801407c:	4618      	mov	r0, r3
 801407e:	3714      	adds	r7, #20
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr

08014088 <config>:
/** \brief set or get configuration record
 *
 *  config : (type:ui16, op:ui16, value[32]) => (value[32])
 */
uint16_t config(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b088      	sub	sp, #32
 801408c:	af00      	add	r7, sp, #0
 801408e:	60b9      	str	r1, [r7, #8]
 8014090:	607a      	str	r2, [r7, #4]
 8014092:	603b      	str	r3, [r7, #0]
 8014094:	4603      	mov	r3, r0
 8014096:	81fb      	strh	r3, [r7, #14]
        uint8_t* value;
    } resp_params;

    SE3_TRACE(("[se3_dispatcher_core.c] config"));

    if (!login_struct.y) {
 8014098:	4b37      	ldr	r3, [pc, #220]	; (8014178 <config+0xf0>)
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	f083 0301 	eor.w	r3, r3, #1
 80140a0:	b2db      	uxtb	r3, r3
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d001      	beq.n	80140aa <config+0x22>
        SE3_TRACE(("[config] not logged in\n"));
        return SE3_ERR_ACCESS;
 80140a6:	2364      	movs	r3, #100	; 0x64
 80140a8:	e062      	b.n	8014170 <config+0xe8>
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	881b      	ldrh	r3, [r3, #0]
 80140ae:	b29b      	uxth	r3, r3
    }

    SE3_GET16(req, SE3_CMD1_CONFIG_REQ_OFF_ID, req_params.type);
 80140b0:	833b      	strh	r3, [r7, #24]
    SE3_GET16(req, SE3_CMD1_CONFIG_REQ_OFF_OP, req_params.op);
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	3302      	adds	r3, #2
 80140b6:	881b      	ldrh	r3, [r3, #0]
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	837b      	strh	r3, [r7, #26]
    req_params.value = req + SE3_CMD1_CONFIG_REQ_OFF_VALUE;
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	3304      	adds	r3, #4
 80140c0:	61fb      	str	r3, [r7, #28]
    resp_params.value = resp + SE3_CMD1_CONFIG_RESP_OFF_VALUE;
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	617b      	str	r3, [r7, #20]

    // check params
    if (req_params.type >= SE3_RECORD_MAX) {
 80140c6:	8b3b      	ldrh	r3, [r7, #24]
 80140c8:	2b01      	cmp	r3, #1
 80140ca:	d902      	bls.n	80140d2 <config+0x4a>
        SE3_TRACE(("[config] type out of range\n"));
        return SE3_ERR_PARAMS;
 80140cc:	f24f 0306 	movw	r3, #61446	; 0xf006
 80140d0:	e04e      	b.n	8014170 <config+0xe8>
    }
    switch (req_params.op) {
 80140d2:	8b7b      	ldrh	r3, [r7, #26]
 80140d4:	3b01      	subs	r3, #1
 80140d6:	2b01      	cmp	r3, #1
 80140d8:	d805      	bhi.n	80140e6 <config+0x5e>
    case SE3_CONFIG_OP_GET:
    case SE3_CONFIG_OP_SET:
        if (req_size != SE3_CMD1_CONFIG_REQ_OFF_VALUE + SE3_RECORD_SIZE) {
 80140da:	89fb      	ldrh	r3, [r7, #14]
 80140dc:	2b24      	cmp	r3, #36	; 0x24
 80140de:	d005      	beq.n	80140ec <config+0x64>
            SE3_TRACE(("[config] req size mismatch\n"));
            return SE3_ERR_PARAMS;
 80140e0:	f24f 0306 	movw	r3, #61446	; 0xf006
 80140e4:	e044      	b.n	8014170 <config+0xe8>
        }
        break;
    default:
        SE3_TRACE(("[config] op invalid\n"));
        return SE3_ERR_PARAMS;
 80140e6:	f24f 0306 	movw	r3, #61446	; 0xf006
 80140ea:	e041      	b.n	8014170 <config+0xe8>
        break;
 80140ec:	bf00      	nop
    }

    if (req_params.op == SE3_CONFIG_OP_GET) {
 80140ee:	8b7b      	ldrh	r3, [r7, #26]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d11c      	bne.n	801412e <config+0xa6>
        // check access
        if (login_struct.access < se3_security_info.records[req_params.type].read_access) {
 80140f4:	4b20      	ldr	r3, [pc, #128]	; (8014178 <config+0xf0>)
 80140f6:	885a      	ldrh	r2, [r3, #2]
 80140f8:	8b3b      	ldrh	r3, [r7, #24]
 80140fa:	4619      	mov	r1, r3
 80140fc:	4b1f      	ldr	r3, [pc, #124]	; (801417c <config+0xf4>)
 80140fe:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8014102:	429a      	cmp	r2, r3
 8014104:	d201      	bcs.n	801410a <config+0x82>
            SE3_TRACE(("[config] insufficient access\n"));
            return SE3_ERR_ACCESS;
 8014106:	2364      	movs	r3, #100	; 0x64
 8014108:	e032      	b.n	8014170 <config+0xe8>
        }
        if (!record_get(req_params.type, resp_params.value)) {
 801410a:	8b3b      	ldrh	r3, [r7, #24]
 801410c:	697a      	ldr	r2, [r7, #20]
 801410e:	4611      	mov	r1, r2
 8014110:	4618      	mov	r0, r3
 8014112:	f001 fcbb 	bl	8015a8c <record_get>
 8014116:	4603      	mov	r3, r0
 8014118:	f083 0301 	eor.w	r3, r3, #1
 801411c:	b2db      	uxtb	r3, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	d001      	beq.n	8014126 <config+0x9e>
            return SE3_ERR_RESOURCE;
 8014122:	23c8      	movs	r3, #200	; 0xc8
 8014124:	e024      	b.n	8014170 <config+0xe8>
        }
        *resp_size = SE3_RECORD_SIZE;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2220      	movs	r2, #32
 801412a:	801a      	strh	r2, [r3, #0]
 801412c:	e01f      	b.n	801416e <config+0xe6>
    }
    else if (req_params.op == SE3_CONFIG_OP_SET) {
 801412e:	8b7b      	ldrh	r3, [r7, #26]
 8014130:	2b02      	cmp	r3, #2
 8014132:	d119      	bne.n	8014168 <config+0xe0>
        // check access
        if (login_struct.access < se3_security_info.records[req_params.type].write_access) {
 8014134:	4b10      	ldr	r3, [pc, #64]	; (8014178 <config+0xf0>)
 8014136:	885a      	ldrh	r2, [r3, #2]
 8014138:	8b3b      	ldrh	r3, [r7, #24]
 801413a:	4910      	ldr	r1, [pc, #64]	; (801417c <config+0xf4>)
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	440b      	add	r3, r1
 8014140:	885b      	ldrh	r3, [r3, #2]
 8014142:	429a      	cmp	r2, r3
 8014144:	d201      	bcs.n	801414a <config+0xc2>
            SE3_TRACE(("[config] insufficient access\n"));
            return SE3_ERR_ACCESS;
 8014146:	2364      	movs	r3, #100	; 0x64
 8014148:	e012      	b.n	8014170 <config+0xe8>
        }
        if (!record_set(req_params.type, req_params.value)) {
 801414a:	8b3b      	ldrh	r3, [r7, #24]
 801414c:	69fa      	ldr	r2, [r7, #28]
 801414e:	4611      	mov	r1, r2
 8014150:	4618      	mov	r0, r3
 8014152:	f001 fc2e 	bl	80159b2 <record_set>
 8014156:	4603      	mov	r3, r0
 8014158:	f083 0301 	eor.w	r3, r3, #1
 801415c:	b2db      	uxtb	r3, r3
 801415e:	2b00      	cmp	r3, #0
 8014160:	d005      	beq.n	801416e <config+0xe6>
            return SE3_ERR_MEMORY;
 8014162:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014166:	e003      	b.n	8014170 <config+0xe8>
        }
    }
    else {
        SE3_TRACE(("[config] invalid op\n"));
        return SE3_ERR_PARAMS;
 8014168:	f24f 0306 	movw	r3, #61446	; 0xf006
 801416c:	e000      	b.n	8014170 <config+0xe8>
    }

	return SE3_OK;
 801416e:	2300      	movs	r3, #0
}
 8014170:	4618      	mov	r0, r3
 8014172:	3720      	adds	r7, #32
 8014174:	46bd      	mov	sp, r7
 8014176:	bd80      	pop	{r7, pc}
 8014178:	2000d218 	.word	0x2000d218
 801417c:	2000d86c 	.word	0x2000d86c

08014180 <challenge>:
/** \brief Get a login challenge from the server
 *
 *  challenge : (cc1[32], cc2[32], access:ui16) => (sc[32], sresp[32])
 */
uint16_t challenge(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b096      	sub	sp, #88	; 0x58
 8014184:	af04      	add	r7, sp, #16
 8014186:	60b9      	str	r1, [r7, #8]
 8014188:	607a      	str	r2, [r7, #4]
 801418a:	603b      	str	r3, [r7, #0]
 801418c:	4603      	mov	r3, r0
 801418e:	81fb      	strh	r3, [r7, #14]
    struct {
        uint8_t* sc;
        uint8_t* sresp;
    } resp_params;

    if (req_size != SE3_CMD1_CHALLENGE_REQ_SIZE) {
 8014190:	89fb      	ldrh	r3, [r7, #14]
 8014192:	2b42      	cmp	r3, #66	; 0x42
 8014194:	d002      	beq.n	801419c <challenge+0x1c>
        SE3_TRACE(("[challenge] req size mismatch\n"));
        return SE3_ERR_PARAMS;
 8014196:	f24f 0306 	movw	r3, #61446	; 0xf006
 801419a:	e06d      	b.n	8014278 <challenge+0xf8>
    }

    req_params.cc1 = req + SE3_CMD1_CHALLENGE_REQ_OFF_CC1;
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	61fb      	str	r3, [r7, #28]
    req_params.cc2 = req + SE3_CMD1_CHALLENGE_REQ_OFF_CC2;
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	3320      	adds	r3, #32
 80141a4:	627b      	str	r3, [r7, #36]	; 0x24
    SE3_GET16(req, SE3_CMD1_CHALLENGE_REQ_OFF_ACCESS, req_params.access);
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	3340      	adds	r3, #64	; 0x40
 80141aa:	881b      	ldrh	r3, [r3, #0]
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	843b      	strh	r3, [r7, #32]
    resp_params.sc = resp + SE3_CMD1_CHALLENGE_RESP_OFF_SC;
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	617b      	str	r3, [r7, #20]
    resp_params.sresp = resp + SE3_CMD1_CHALLENGE_RESP_OFF_SRESP;
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	3320      	adds	r3, #32
 80141b8:	61bb      	str	r3, [r7, #24]

	if (login_struct.y) {
 80141ba:	4b31      	ldr	r3, [pc, #196]	; (8014280 <challenge+0x100>)
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d002      	beq.n	80141c8 <challenge+0x48>
		SE3_TRACE(("[challenge] already logged in"));
		return SE3_ERR_STATE;
 80141c2:	f24f 0304 	movw	r3, #61444	; 0xf004
 80141c6:	e057      	b.n	8014278 <challenge+0xf8>
	}

    // default pin is zero, if no record is found
    memset(pin, 0, SE3_PIN_SIZE);
 80141c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80141cc:	2220      	movs	r2, #32
 80141ce:	2100      	movs	r1, #0
 80141d0:	4618      	mov	r0, r3
 80141d2:	f003 f92d 	bl	8017430 <memset>
    switch (req_params.access) {
 80141d6:	8c3b      	ldrh	r3, [r7, #32]
 80141d8:	2b64      	cmp	r3, #100	; 0x64
 80141da:	d003      	beq.n	80141e4 <challenge+0x64>
 80141dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80141e0:	d007      	beq.n	80141f2 <challenge+0x72>
 80141e2:	e00d      	b.n	8014200 <challenge+0x80>
    case SE3_ACCESS_USER:
        record_get(SE3_RECORD_TYPE_USERPIN, pin);
 80141e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80141e8:	4619      	mov	r1, r3
 80141ea:	2001      	movs	r0, #1
 80141ec:	f001 fc4e 	bl	8015a8c <record_get>
        break;
 80141f0:	e009      	b.n	8014206 <challenge+0x86>
    case SE3_ACCESS_ADMIN:
        record_get(SE3_RECORD_TYPE_ADMINPIN, pin);
 80141f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80141f6:	4619      	mov	r1, r3
 80141f8:	2000      	movs	r0, #0
 80141fa:	f001 fc47 	bl	8015a8c <record_get>
        break;
 80141fe:	e002      	b.n	8014206 <challenge+0x86>
    default:
    	SE3_TRACE(("[se3_dispatcher_core.c - challenge] default error login"));
        return SE3_ERR_PARAMS;
 8014200:	f24f 0306 	movw	r3, #61446	; 0xf006
 8014204:	e038      	b.n	8014278 <challenge+0xf8>
	}

	if (SE3_CHALLENGE_SIZE != se3_rand(SE3_CHALLENGE_SIZE, resp_params.sc)) {
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	4619      	mov	r1, r3
 801420a:	2020      	movs	r0, #32
 801420c:	f7f6 fbde 	bl	800a9cc <se3_rand>
 8014210:	4603      	mov	r3, r0
 8014212:	2b20      	cmp	r3, #32
 8014214:	d002      	beq.n	801421c <challenge+0x9c>
		SE3_TRACE(("[challenge] se3_rand failed"));
		return SE3_ERR_HW;
 8014216:	f24f 0301 	movw	r3, #61441	; 0xf001
 801421a:	e02d      	b.n	8014278 <challenge+0xf8>
	}

	// cresp = PBKDF2(HMACSHA256, pin, sc, SE3_CHALLENGE_ITERATIONS, SE3_CHALLENGE_SIZE)
	PBKDF2HmacSha256(pin, SE3_PIN_SIZE, resp_params.sc,	SE3_CHALLENGE_SIZE, SE3_CHALLENGE_ITERATIONS, login_struct.challenge, SE3_CHALLENGE_SIZE);
 801421c:	697a      	ldr	r2, [r7, #20]
 801421e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8014222:	2320      	movs	r3, #32
 8014224:	9302      	str	r3, [sp, #8]
 8014226:	4b17      	ldr	r3, [pc, #92]	; (8014284 <challenge+0x104>)
 8014228:	9301      	str	r3, [sp, #4]
 801422a:	2320      	movs	r3, #32
 801422c:	9300      	str	r3, [sp, #0]
 801422e:	2320      	movs	r3, #32
 8014230:	2120      	movs	r1, #32
 8014232:	f7fa ffd8 	bl	800f1e6 <PBKDF2HmacSha256>

	// sresp = PBKDF2(HMACSHA256, pin, cc1, SE3_CHALLENGE_ITERATIONS, SE3_CHALLENGE_SIZE)
	PBKDF2HmacSha256(pin, SE3_PIN_SIZE, req_params.cc1,	SE3_CHALLENGE_SIZE, SE3_CHALLENGE_ITERATIONS, resp_params.sresp, SE3_CHALLENGE_SIZE);
 8014236:	69fa      	ldr	r2, [r7, #28]
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801423e:	2120      	movs	r1, #32
 8014240:	9102      	str	r1, [sp, #8]
 8014242:	9301      	str	r3, [sp, #4]
 8014244:	2320      	movs	r3, #32
 8014246:	9300      	str	r3, [sp, #0]
 8014248:	2320      	movs	r3, #32
 801424a:	2120      	movs	r1, #32
 801424c:	f7fa ffcb 	bl	800f1e6 <PBKDF2HmacSha256>

	// key = PBKDF2(HMACSHA256, pin, cc2, 1, SE3_PIN_SIZE)
	PBKDF2HmacSha256(pin, SE3_PIN_SIZE, req_params.cc2, SE3_CHALLENGE_SIZE, 1, login_struct.key, SE3_PIN_SIZE);
 8014250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014252:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8014256:	2320      	movs	r3, #32
 8014258:	9302      	str	r3, [sp, #8]
 801425a:	4b0b      	ldr	r3, [pc, #44]	; (8014288 <challenge+0x108>)
 801425c:	9301      	str	r3, [sp, #4]
 801425e:	2301      	movs	r3, #1
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	2320      	movs	r3, #32
 8014264:	2120      	movs	r1, #32
 8014266:	f7fa ffbe 	bl	800f1e6 <PBKDF2HmacSha256>

	login_struct.challenge_access = req_params.access;
 801426a:	8c3a      	ldrh	r2, [r7, #32]
 801426c:	4b04      	ldr	r3, [pc, #16]	; (8014280 <challenge+0x100>)
 801426e:	809a      	strh	r2, [r3, #4]

    *resp_size = SE3_CMD1_CHALLENGE_RESP_SIZE;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2240      	movs	r2, #64	; 0x40
 8014274:	801a      	strh	r2, [r3, #0]
	return SE3_OK;
 8014276:	2300      	movs	r3, #0
}
 8014278:	4618      	mov	r0, r3
 801427a:	3748      	adds	r7, #72	; 0x48
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}
 8014280:	2000d218 	.word	0x2000d218
 8014284:	2000d21e 	.word	0x2000d21e
 8014288:	2000d23e 	.word	0x2000d23e

0801428c <login>:
/** \brief respond to challenge, completing login
 *
 *  login : (cresp[32]) => (tok[16])
 */
uint16_t login(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 801428c:	b590      	push	{r4, r7, lr}
 801428e:	b089      	sub	sp, #36	; 0x24
 8014290:	af00      	add	r7, sp, #0
 8014292:	60b9      	str	r1, [r7, #8]
 8014294:	607a      	str	r2, [r7, #4]
 8014296:	603b      	str	r3, [r7, #0]
 8014298:	4603      	mov	r3, r0
 801429a:	81fb      	strh	r3, [r7, #14]
    struct {
        uint8_t* token;
    } resp_params;
    uint16_t access;

    if (req_size != SE3_CMD1_LOGIN_REQ_SIZE) {
 801429c:	89fb      	ldrh	r3, [r7, #14]
 801429e:	2b20      	cmp	r3, #32
 80142a0:	d002      	beq.n	80142a8 <login+0x1c>
        SE3_TRACE(("[login] req size mismatch\n"));
        return SE3_ERR_PARAMS;
 80142a2:	f24f 0306 	movw	r3, #61446	; 0xf006
 80142a6:	e044      	b.n	8014332 <login+0xa6>
    }

	if (login_struct.y) {
 80142a8:	4b24      	ldr	r3, [pc, #144]	; (801433c <login+0xb0>)
 80142aa:	781b      	ldrb	r3, [r3, #0]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d002      	beq.n	80142b6 <login+0x2a>
		SE3_TRACE(("[login] already logged in"));
		return SE3_ERR_STATE;
 80142b0:	f24f 0304 	movw	r3, #61444	; 0xf004
 80142b4:	e03d      	b.n	8014332 <login+0xa6>
	}
	if (SE3_ACCESS_MAX == login_struct.challenge_access) {
 80142b6:	4b21      	ldr	r3, [pc, #132]	; (801433c <login+0xb0>)
 80142b8:	889b      	ldrh	r3, [r3, #4]
 80142ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142be:	4293      	cmp	r3, r2
 80142c0:	d102      	bne.n	80142c8 <login+0x3c>
		SE3_TRACE(("[login] not waiting for challenge response"));
		return SE3_ERR_STATE;
 80142c2:	f24f 0304 	movw	r3, #61444	; 0xf004
 80142c6:	e034      	b.n	8014332 <login+0xa6>
	}

    req_params.cresp = req + SE3_CMD1_LOGIN_REQ_OFF_CRESP;
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	61bb      	str	r3, [r7, #24]
    resp_params.token = resp + SE3_CMD1_LOGIN_RESP_OFF_TOKEN;
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	617b      	str	r3, [r7, #20]

	access = login_struct.challenge_access;
 80142d0:	4b1a      	ldr	r3, [pc, #104]	; (801433c <login+0xb0>)
 80142d2:	889b      	ldrh	r3, [r3, #4]
 80142d4:	83fb      	strh	r3, [r7, #30]
	login_struct.challenge_access = SE3_ACCESS_MAX;
 80142d6:	4b19      	ldr	r3, [pc, #100]	; (801433c <login+0xb0>)
 80142d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142dc:	809a      	strh	r2, [r3, #4]
	if (memcmp(req_params.cresp, (uint8_t*)login_struct.challenge, 32)) {
 80142de:	69bb      	ldr	r3, [r7, #24]
 80142e0:	2220      	movs	r2, #32
 80142e2:	4917      	ldr	r1, [pc, #92]	; (8014340 <login+0xb4>)
 80142e4:	4618      	mov	r0, r3
 80142e6:	f003 f86d 	bl	80173c4 <memcmp>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d001      	beq.n	80142f4 <login+0x68>
		SE3_TRACE(("[login] challenge response mismatch"));
		return SE3_ERR_PIN;
 80142f0:	2365      	movs	r3, #101	; 0x65
 80142f2:	e01e      	b.n	8014332 <login+0xa6>
	}

	if (SE3_TOKEN_SIZE != se3_rand(SE3_TOKEN_SIZE, (uint8_t*)login_struct.token)) {
 80142f4:	4912      	ldr	r1, [pc, #72]	; (8014340 <login+0xb4>)
 80142f6:	2010      	movs	r0, #16
 80142f8:	f7f6 fb68 	bl	800a9cc <se3_rand>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b10      	cmp	r3, #16
 8014300:	d002      	beq.n	8014308 <login+0x7c>
		SE3_TRACE(("[login] random failed"));
		return SE3_ERR_HW;
 8014302:	f24f 0301 	movw	r3, #61441	; 0xf001
 8014306:	e014      	b.n	8014332 <login+0xa6>
	}
	memcpy(resp_params.token, (uint8_t*)login_struct.token, 16);
 8014308:	697a      	ldr	r2, [r7, #20]
 801430a:	4b0c      	ldr	r3, [pc, #48]	; (801433c <login+0xb0>)
 801430c:	3306      	adds	r3, #6
 801430e:	681c      	ldr	r4, [r3, #0]
 8014310:	6858      	ldr	r0, [r3, #4]
 8014312:	6899      	ldr	r1, [r3, #8]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	6014      	str	r4, [r2, #0]
 8014318:	6050      	str	r0, [r2, #4]
 801431a:	6091      	str	r1, [r2, #8]
 801431c:	60d3      	str	r3, [r2, #12]
	login_struct.y = 1;
 801431e:	4b07      	ldr	r3, [pc, #28]	; (801433c <login+0xb0>)
 8014320:	2201      	movs	r2, #1
 8014322:	701a      	strb	r2, [r3, #0]
	login_struct.access = access;
 8014324:	4a05      	ldr	r2, [pc, #20]	; (801433c <login+0xb0>)
 8014326:	8bfb      	ldrh	r3, [r7, #30]
 8014328:	8053      	strh	r3, [r2, #2]

    *resp_size = SE3_CMD1_LOGIN_RESP_SIZE;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2210      	movs	r2, #16
 801432e:	801a      	strh	r2, [r3, #0]
	return SE3_OK;
 8014330:	2300      	movs	r3, #0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3724      	adds	r7, #36	; 0x24
 8014336:	46bd      	mov	sp, r7
 8014338:	bd90      	pop	{r4, r7, pc}
 801433a:	bf00      	nop
 801433c:	2000d218 	.word	0x2000d218
 8014340:	2000d21e 	.word	0x2000d21e

08014344 <logout>:
/** \brief Log out and release resources
 *
 *  logout : () => ()
 */
uint16_t logout(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	60b9      	str	r1, [r7, #8]
 801434c:	607a      	str	r2, [r7, #4]
 801434e:	603b      	str	r3, [r7, #0]
 8014350:	4603      	mov	r3, r0
 8014352:	81fb      	strh	r3, [r7, #14]
    if (req_size != 0) {
 8014354:	89fb      	ldrh	r3, [r7, #14]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d002      	beq.n	8014360 <logout+0x1c>
        SE3_TRACE(("[logout] req size mismatch\n"));
        return SE3_ERR_PARAMS;
 801435a:	f24f 0306 	movw	r3, #61446	; 0xf006
 801435e:	e00b      	b.n	8014378 <logout+0x34>
    }
	if (!login_struct.y) {
 8014360:	4b07      	ldr	r3, [pc, #28]	; (8014380 <logout+0x3c>)
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	f083 0301 	eor.w	r3, r3, #1
 8014368:	b2db      	uxtb	r3, r3
 801436a:	2b00      	cmp	r3, #0
 801436c:	d001      	beq.n	8014372 <logout+0x2e>
		SE3_TRACE(("[logout] not logged in\n"));
		return SE3_ERR_ACCESS;
 801436e:	2364      	movs	r3, #100	; 0x64
 8014370:	e002      	b.n	8014378 <logout+0x34>
	}
	login_cleanup();
 8014372:	f000 fb39 	bl	80149e8 <login_cleanup>
	return SE3_OK;
 8014376:	2300      	movs	r3, #0
}
 8014378:	4618      	mov	r0, r3
 801437a:	3710      	adds	r7, #16
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}
 8014380:	2000d218 	.word	0x2000d218

08014384 <key_len_valid>:

bool key_len_valid(uint16_t len){
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
 801438a:	4603      	mov	r3, r0
 801438c:	80fb      	strh	r3, [r7, #6]
	uint16_t bitlen = len*8;
 801438e:	88fb      	ldrh	r3, [r7, #6]
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	81fb      	strh	r3, [r7, #14]
	switch(bitlen){
 8014394:	89fb      	ldrh	r3, [r7, #14]
 8014396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801439a:	d00b      	beq.n	80143b4 <key_len_valid+0x30>
 801439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143a0:	dc0a      	bgt.n	80143b8 <key_len_valid+0x34>
 80143a2:	2b80      	cmp	r3, #128	; 0x80
 80143a4:	d002      	beq.n	80143ac <key_len_valid+0x28>
 80143a6:	2bc0      	cmp	r3, #192	; 0xc0
 80143a8:	d002      	beq.n	80143b0 <key_len_valid+0x2c>
 80143aa:	e005      	b.n	80143b8 <key_len_valid+0x34>
		case 128:
			return true;
 80143ac:	2301      	movs	r3, #1
 80143ae:	e004      	b.n	80143ba <key_len_valid+0x36>
		case 192:
			return true;
 80143b0:	2301      	movs	r3, #1
 80143b2:	e002      	b.n	80143ba <key_len_valid+0x36>
		case 256:
			return true;
 80143b4:	2301      	movs	r3, #1
 80143b6:	e000      	b.n	80143ba <key_len_valid+0x36>
		default:
			return false;
 80143b8:	2300      	movs	r3, #0
	}
}
 80143ba:	4618      	mov	r0, r3
 80143bc:	3714      	adds	r7, #20
 80143be:	46bd      	mov	sp, r7
 80143c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c4:	4770      	bx	lr
	...

080143c8 <key_edit>:

uint16_t key_edit(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b090      	sub	sp, #64	; 0x40
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	60b9      	str	r1, [r7, #8]
 80143d0:	607a      	str	r2, [r7, #4]
 80143d2:	603b      	str	r3, [r7, #0]
 80143d4:	4603      	mov	r3, r0
 80143d6:	81fb      	strh	r3, [r7, #14]
        uint32_t id;
        uint16_t data_len;
        const uint8_t* data;
    } req_params;
    se3_flash_key key;
    se3_flash_it it = { .addr = NULL };
 80143d8:	f107 0310 	add.w	r3, r7, #16
 80143dc:	2200      	movs	r2, #0
 80143de:	601a      	str	r2, [r3, #0]
 80143e0:	605a      	str	r2, [r3, #4]
 80143e2:	609a      	str	r2, [r3, #8]
 80143e4:	60da      	str	r2, [r3, #12]
    uint8_t *trng_keydata = NULL;
 80143e6:	2300      	movs	r3, #0
 80143e8:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (req_size < SE3_CMD1_KEY_EDIT_REQ_OFF_DATA) {
 80143ea:	89fb      	ldrh	r3, [r7, #14]
 80143ec:	2b07      	cmp	r3, #7
 80143ee:	d802      	bhi.n	80143f6 <key_edit+0x2e>
        SE3_TRACE(("[key_edit] req size mismatch\n"));
        return SE3_ERR_PARAMS;
 80143f0:	f24f 0306 	movw	r3, #61446	; 0xf006
 80143f4:	e0ed      	b.n	80145d2 <key_edit+0x20a>
    }
    if (!login_struct.y) {
 80143f6:	4b79      	ldr	r3, [pc, #484]	; (80145dc <key_edit+0x214>)
 80143f8:	781b      	ldrb	r3, [r3, #0]
 80143fa:	f083 0301 	eor.w	r3, r3, #1
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	2b00      	cmp	r3, #0
 8014402:	d001      	beq.n	8014408 <key_edit+0x40>
        SE3_TRACE(("[key_edit] not logged in\n"));
        return SE3_ERR_ACCESS;
 8014404:	2364      	movs	r3, #100	; 0x64
 8014406:	e0e4      	b.n	80145d2 <key_edit+0x20a>
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	b29b      	uxth	r3, r3
    }

    SE3_GET16(req, SE3_CMD1_KEY_EDIT_REQ_OFF_OP, req_params.op); // get type of operation
 801440e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    SE3_GET32(req, SE3_CMD1_KEY_EDIT_REQ_OFF_ID, req_params.id); // get key ID
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	3302      	adds	r3, #2
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	633b      	str	r3, [r7, #48]	; 0x30
    SE3_GET16(req, SE3_CMD1_KEY_EDIT_REQ_OFF_DATA_LEN, req_params.data_len); // get key length
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	3306      	adds	r3, #6
 801441c:	881b      	ldrh	r3, [r3, #0]
 801441e:	b29b      	uxth	r3, r3
 8014420:	86bb      	strh	r3, [r7, #52]	; 0x34

    // check the validity of key length depending on combination with op
    if((req_params.op == SE3_KEY_OP_DELETE) && (req_params.data_len != 0)){
 8014422:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014424:	2b02      	cmp	r3, #2
 8014426:	d105      	bne.n	8014434 <key_edit+0x6c>
 8014428:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801442a:	2b00      	cmp	r3, #0
 801442c:	d002      	beq.n	8014434 <key_edit+0x6c>
    	SE3_TRACE(("[se3_dispatcher_core.c - key_edit] error parameters"));
    	return SE3_ERR_PARAMS;
 801442e:	f24f 0306 	movw	r3, #61446	; 0xf006
 8014432:	e0ce      	b.n	80145d2 <key_edit+0x20a>
    }
    if((req_params.op != SE3_KEY_OP_DELETE) && !key_len_valid(req_params.data_len)){
 8014434:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014436:	2b02      	cmp	r3, #2
 8014438:	d00c      	beq.n	8014454 <key_edit+0x8c>
 801443a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801443c:	4618      	mov	r0, r3
 801443e:	f7ff ffa1 	bl	8014384 <key_len_valid>
 8014442:	4603      	mov	r3, r0
 8014444:	f083 0301 	eor.w	r3, r3, #1
 8014448:	b2db      	uxtb	r3, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	d002      	beq.n	8014454 <key_edit+0x8c>
    	SE3_TRACE(("[se3_dispatcher_core.c - key_edit] error parameters"));
    	return SE3_ERR_PARAMS;
 801444e:	f24f 0306 	movw	r3, #61446	; 0xf006
 8014452:	e0be      	b.n	80145d2 <key_edit+0x20a>
    }
    if(req_params.op != SE3_KEY_OP_ADD){ // get key value only if required
 8014454:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014456:	2b01      	cmp	r3, #1
 8014458:	d002      	beq.n	8014460 <key_edit+0x98>
    	req_params.data = NULL;
 801445a:	2300      	movs	r3, #0
 801445c:	63bb      	str	r3, [r7, #56]	; 0x38
 801445e:	e002      	b.n	8014466 <key_edit+0x9e>
    } else {
    	req_params.data = req + SE3_CMD1_KEY_EDIT_REQ_OFF_DATA;
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	3308      	adds	r3, #8
 8014464:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // copy values in key structure
    key.id = req_params.id;
 8014466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014468:	623b      	str	r3, [r7, #32]
    key.data_size = req_params.data_len;
 801446a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801446c:	84bb      	strh	r3, [r7, #36]	; 0x24
    key.data = (uint8_t*)req_params.data;
 801446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014470:	62bb      	str	r3, [r7, #40]	; 0x28

    /* check if key ID meets requirements
     * this function is dedicated to manual key management, therefore we do not allow
     * any key ID that should be handled by SEkey or that is not valid. */
    if((key.id == NULL_ID) ||
 8014472:	6a3b      	ldr	r3, [r7, #32]
 8014474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014478:	d012      	beq.n	80144a0 <key_edit+0xd8>
       (key.id == ZERO_ID) ||
 801447a:	6a3b      	ldr	r3, [r7, #32]
    if((key.id == NULL_ID) ||
 801447c:	2b00      	cmp	r3, #0
 801447e:	d00f      	beq.n	80144a0 <key_edit+0xd8>
	   (key.id >= SEKEY_ID_BEGIN && key.id <= SEKEY_ID_END) ||
 8014480:	6a3b      	ldr	r3, [r7, #32]
       (key.id == ZERO_ID) ||
 8014482:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8014486:	d303      	bcc.n	8014490 <key_edit+0xc8>
	   (key.id >= SEKEY_ID_BEGIN && key.id <= SEKEY_ID_END) ||
 8014488:	6a3b      	ldr	r3, [r7, #32]
 801448a:	4a55      	ldr	r2, [pc, #340]	; (80145e0 <key_edit+0x218>)
 801448c:	4293      	cmp	r3, r2
 801448e:	d907      	bls.n	80144a0 <key_edit+0xd8>
	   (key.id >= RESERVED_ID_SEKEY_BEGIN && key.id <= RESERVED_ID_SEKEY_END)){
 8014490:	6a3b      	ldr	r3, [r7, #32]
	   (key.id >= SEKEY_ID_BEGIN && key.id <= SEKEY_ID_END) ||
 8014492:	4a53      	ldr	r2, [pc, #332]	; (80145e0 <key_edit+0x218>)
 8014494:	4293      	cmp	r3, r2
 8014496:	d906      	bls.n	80144a6 <key_edit+0xde>
	   (key.id >= RESERVED_ID_SEKEY_BEGIN && key.id <= RESERVED_ID_SEKEY_END)){
 8014498:	6a3b      	ldr	r3, [r7, #32]
 801449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801449e:	d002      	beq.n	80144a6 <key_edit+0xde>
    	return SE3_ERR_PARAMS;
 80144a0:	f24f 0306 	movw	r3, #61446	; 0xf006
 80144a4:	e095      	b.n	80145d2 <key_edit+0x20a>
    }

    // check if there is already a key with same ID
    se3_flash_it_init(&it);
 80144a6:	f107 0310 	add.w	r3, r7, #16
 80144aa:	4618      	mov	r0, r3
 80144ac:	f000 fd7d 	bl	8014faa <se3_flash_it_init>
    if (!se3_key_find(key.id, &it)) {
 80144b0:	6a3b      	ldr	r3, [r7, #32]
 80144b2:	f107 0210 	add.w	r2, r7, #16
 80144b6:	4611      	mov	r1, r2
 80144b8:	4618      	mov	r0, r3
 80144ba:	f000 fee5 	bl	8015288 <se3_key_find>
 80144be:	4603      	mov	r3, r0
 80144c0:	f083 0301 	eor.w	r3, r3, #1
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d001      	beq.n	80144ce <key_edit+0x106>
        it.addr = NULL;
 80144ca:	2300      	movs	r3, #0
 80144cc:	613b      	str	r3, [r7, #16]
    }

    // execute operation requested by the host
    switch (req_params.op) {
 80144ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80144d0:	2b03      	cmp	r3, #3
 80144d2:	d02d      	beq.n	8014530 <key_edit+0x168>
 80144d4:	2b03      	cmp	r3, #3
 80144d6:	dc73      	bgt.n	80145c0 <key_edit+0x1f8>
 80144d8:	2b01      	cmp	r3, #1
 80144da:	d002      	beq.n	80144e2 <key_edit+0x11a>
 80144dc:	2b02      	cmp	r3, #2
 80144de:	d016      	beq.n	801450e <key_edit+0x146>
 80144e0:	e06e      	b.n	80145c0 <key_edit+0x1f8>
		case SE3_KEY_OP_ADD:
			if (NULL != it.addr) { // key already exists
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d001      	beq.n	80144ec <key_edit+0x124>
				return SE3_ERR_RESOURCE;
 80144e8:	23c8      	movs	r3, #200	; 0xc8
 80144ea:	e072      	b.n	80145d2 <key_edit+0x20a>
			}
			if (!se3_key_new(&it, &key)) {
 80144ec:	f107 0220 	add.w	r2, r7, #32
 80144f0:	f107 0310 	add.w	r3, r7, #16
 80144f4:	4611      	mov	r1, r2
 80144f6:	4618      	mov	r0, r3
 80144f8:	f000 feea 	bl	80152d0 <se3_key_new>
 80144fc:	4603      	mov	r3, r0
 80144fe:	f083 0301 	eor.w	r3, r3, #1
 8014502:	b2db      	uxtb	r3, r3
 8014504:	2b00      	cmp	r3, #0
 8014506:	d05e      	beq.n	80145c6 <key_edit+0x1fe>
				SE3_TRACE(("[key_edit] se3_key_new failed\n"));
				return SE3_ERR_MEMORY;
 8014508:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801450c:	e061      	b.n	80145d2 <key_edit+0x20a>
			}
			break;
		case SE3_KEY_OP_DELETE: // if keys does not exist do not return any error
			if (it.addr != NULL) {
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d05a      	beq.n	80145ca <key_edit+0x202>
				if (!se3_flash_it_delete(&it)) {
 8014514:	f107 0310 	add.w	r3, r7, #16
 8014518:	4618      	mov	r0, r3
 801451a:	f000 fe75 	bl	8015208 <se3_flash_it_delete>
 801451e:	4603      	mov	r3, r0
 8014520:	f083 0301 	eor.w	r3, r3, #1
 8014524:	b2db      	uxtb	r3, r3
 8014526:	2b00      	cmp	r3, #0
 8014528:	d04f      	beq.n	80145ca <key_edit+0x202>
					return SE3_ERR_HW;
 801452a:	f24f 0301 	movw	r3, #61441	; 0xf001
 801452e:	e050      	b.n	80145d2 <key_edit+0x20a>
				}
			}
			break;
		case SE3_KEY_OP_ADD_TRNG:
			if (NULL != it.addr) { // key already exists
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d001      	beq.n	801453a <key_edit+0x172>
				return SE3_ERR_RESOURCE;
 8014536:	23c8      	movs	r3, #200	; 0xc8
 8014538:	e04b      	b.n	80145d2 <key_edit+0x20a>
			}
			trng_keydata = (uint8_t*)malloc(key.data_size); // allocate space for key content generated with TRNG
 801453a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801453c:	4618      	mov	r0, r3
 801453e:	f002 ff31 	bl	80173a4 <malloc>
 8014542:	4603      	mov	r3, r0
 8014544:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(trng_keydata == NULL){ return SE3_ERR_MEMORY; }
 8014546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014548:	2b00      	cmp	r3, #0
 801454a:	d102      	bne.n	8014552 <key_edit+0x18a>
 801454c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014550:	e03f      	b.n	80145d2 <key_edit+0x20a>
			memset(trng_keydata, 0, key.data_size);
 8014552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014554:	461a      	mov	r2, r3
 8014556:	2100      	movs	r1, #0
 8014558:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801455a:	f002 ff69 	bl	8017430 <memset>
			if(!se3_rand(key.data_size, trng_keydata)){ // generate random data with TRNG
 801455e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014562:	4618      	mov	r0, r3
 8014564:	f7f6 fa32 	bl	800a9cc <se3_rand>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d108      	bne.n	8014580 <key_edit+0x1b8>
				SE3_TRACE(("[key_edit] se3_rand failed\n"));
				if(trng_keydata != NULL){ free(trng_keydata); }
 801456e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <key_edit+0x1b2>
 8014574:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014576:	f002 ff1d 	bl	80173b4 <free>
				return SE3_ERR_MEMORY;
 801457a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801457e:	e028      	b.n	80145d2 <key_edit+0x20a>
			}
			key.data = trng_keydata;
 8014580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014582:	62bb      	str	r3, [r7, #40]	; 0x28
			if (!se3_key_new(&it, &key)) { // store key
 8014584:	f107 0220 	add.w	r2, r7, #32
 8014588:	f107 0310 	add.w	r3, r7, #16
 801458c:	4611      	mov	r1, r2
 801458e:	4618      	mov	r0, r3
 8014590:	f000 fe9e 	bl	80152d0 <se3_key_new>
 8014594:	4603      	mov	r3, r0
 8014596:	f083 0301 	eor.w	r3, r3, #1
 801459a:	b2db      	uxtb	r3, r3
 801459c:	2b00      	cmp	r3, #0
 801459e:	d008      	beq.n	80145b2 <key_edit+0x1ea>
				SE3_TRACE(("[key_edit] se3_key_new failed\n"));
				if(trng_keydata != NULL){ free(trng_keydata); }
 80145a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d002      	beq.n	80145ac <key_edit+0x1e4>
 80145a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80145a8:	f002 ff04 	bl	80173b4 <free>
				return SE3_ERR_MEMORY;
 80145ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80145b0:	e00f      	b.n	80145d2 <key_edit+0x20a>
			}
			if(trng_keydata != NULL){ free(trng_keydata); }
 80145b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d00a      	beq.n	80145ce <key_edit+0x206>
 80145b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80145ba:	f002 fefb 	bl	80173b4 <free>
			break;
 80145be:	e006      	b.n	80145ce <key_edit+0x206>
		default:
			SE3_TRACE(("[key_edit] invalid op\n"));
			return SE3_ERR_PARAMS;
 80145c0:	f24f 0306 	movw	r3, #61446	; 0xf006
 80145c4:	e005      	b.n	80145d2 <key_edit+0x20a>
			break;
 80145c6:	bf00      	nop
 80145c8:	e002      	b.n	80145d0 <key_edit+0x208>
			break;
 80145ca:	bf00      	nop
 80145cc:	e000      	b.n	80145d0 <key_edit+0x208>
			break;
 80145ce:	bf00      	nop
    }

	return SE3_OK;
 80145d0:	2300      	movs	r3, #0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3740      	adds	r7, #64	; 0x40
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	2000d218 	.word	0x2000d218
 80145e0:	fffe795d 	.word	0xfffe795d

080145e4 <key_find>:

uint16_t key_find(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b08a      	sub	sp, #40	; 0x28
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	60b9      	str	r1, [r7, #8]
 80145ec:	607a      	str	r2, [r7, #4]
 80145ee:	603b      	str	r3, [r7, #0]
 80145f0:	4603      	mov	r3, r0
 80145f2:	81fb      	strh	r3, [r7, #14]
    if (req_size != 4) {
 80145f4:	89fb      	ldrh	r3, [r7, #14]
 80145f6:	2b04      	cmp	r3, #4
 80145f8:	d002      	beq.n	8014600 <key_find+0x1c>
        SE3_TRACE(("[key_find] req size mismatch\n"));
        return SE3_ERR_PARAMS;
 80145fa:	f24f 0306 	movw	r3, #61446	; 0xf006
 80145fe:	e035      	b.n	801466c <key_find+0x88>
    }
    if (!login_struct.y) {
 8014600:	4b1c      	ldr	r3, [pc, #112]	; (8014674 <key_find+0x90>)
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	f083 0301 	eor.w	r3, r3, #1
 8014608:	b2db      	uxtb	r3, r3
 801460a:	2b00      	cmp	r3, #0
 801460c:	d001      	beq.n	8014612 <key_find+0x2e>
        SE3_TRACE(("[key_edit] not logged in\n"));
        return SE3_ERR_ACCESS;
 801460e:	2364      	movs	r3, #100	; 0x64
 8014610:	e02c      	b.n	801466c <key_find+0x88>
    }
    uint32_t keyid = 0;
 8014612:	2300      	movs	r3, #0
 8014614:	627b      	str	r3, [r7, #36]	; 0x24
    se3_flash_it it = { .addr = NULL };
 8014616:	f107 0314 	add.w	r3, r7, #20
 801461a:	2200      	movs	r2, #0
 801461c:	601a      	str	r2, [r3, #0]
 801461e:	605a      	str	r2, [r3, #4]
 8014620:	609a      	str	r2, [r3, #8]
 8014622:	60da      	str	r2, [r3, #12]
    SE3_GET32(req, 2, keyid); // get key ID
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	3302      	adds	r3, #2
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	627b      	str	r3, [r7, #36]	; 0x24
    // check if there is already a key with same ID
    se3_flash_it_init(&it);
 801462c:	f107 0314 	add.w	r3, r7, #20
 8014630:	4618      	mov	r0, r3
 8014632:	f000 fcba 	bl	8014faa <se3_flash_it_init>
    if(!se3_key_find(keyid, &it)) {
 8014636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014638:	f107 0214 	add.w	r2, r7, #20
 801463c:	4611      	mov	r1, r2
 801463e:	4618      	mov	r0, r3
 8014640:	f000 fe22 	bl	8015288 <se3_key_find>
 8014644:	4603      	mov	r3, r0
 8014646:	f083 0301 	eor.w	r3, r3, #1
 801464a:	b2db      	uxtb	r3, r3
 801464c:	2b00      	cmp	r3, #0
 801464e:	d006      	beq.n	801465e <key_find+0x7a>
        *resp_size = 1;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2201      	movs	r2, #1
 8014654:	801a      	strh	r2, [r3, #0]
        resp[0] = 1;
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	2201      	movs	r2, #1
 801465a:	701a      	strb	r2, [r3, #0]
 801465c:	e005      	b.n	801466a <key_find+0x86>
    } else {
        *resp_size = 1;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2201      	movs	r2, #1
 8014662:	801a      	strh	r2, [r3, #0]
        resp[0] = 0;
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	2200      	movs	r2, #0
 8014668:	701a      	strb	r2, [r3, #0]
    }
	return SE3_OK;
 801466a:	2300      	movs	r3, #0
}
 801466c:	4618      	mov	r0, r3
 801466e:	3728      	adds	r7, #40	; 0x28
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	2000d218 	.word	0x2000d218

08014678 <dispatcher_call>:

uint16_t dispatcher_call(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8014678:	b5b0      	push	{r4, r5, r7, lr}
 801467a:	b09a      	sub	sp, #104	; 0x68
 801467c:	af04      	add	r7, sp, #16
 801467e:	60b9      	str	r1, [r7, #8]
 8014680:	607a      	str	r2, [r7, #4]
 8014682:	603b      	str	r3, [r7, #0]
 8014684:	4603      	mov	r3, r0
 8014686:	81fb      	strh	r3, [r7, #14]
    se3_cmd_func handler = NULL;
 8014688:	2300      	movs	r3, #0
 801468a:	657b      	str	r3, [r7, #84]	; 0x54
        uint16_t len;
        uint16_t status;
        uint8_t* data;
    } resp_params;

    req_params.auth = req + SE3_REQ1_OFFSET_AUTH;
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	62fb      	str	r3, [r7, #44]	; 0x2c
    req_params.iv = req + SE3_REQ1_OFFSET_IV;
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	3310      	adds	r3, #16
 8014694:	633b      	str	r3, [r7, #48]	; 0x30
    req_params.token = req + SE3_REQ1_OFFSET_TOKEN;
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	3320      	adds	r3, #32
 801469a:	637b      	str	r3, [r7, #52]	; 0x34
    req_params.data = req + SE3_REQ1_OFFSET_DATA;
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	3340      	adds	r3, #64	; 0x40
 80146a0:	63fb      	str	r3, [r7, #60]	; 0x3c

    uint16_t command =0;
 80146a2:	2300      	movs	r3, #0
 80146a4:	82fb      	strh	r3, [r7, #22]
    SE3_GET16(req, SE3_REQ1_OFFSET_CMD, command);
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	3332      	adds	r3, #50	; 0x32
 80146aa:	881b      	ldrh	r3, [r3, #0]
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	82fb      	strh	r3, [r7, #22]

    if (req_size < SE3_REQ1_OFFSET_DATA) {
 80146b0:	89fb      	ldrh	r3, [r7, #14]
 80146b2:	2b3f      	cmp	r3, #63	; 0x3f
 80146b4:	d802      	bhi.n	80146bc <dispatcher_call+0x44>
        SE3_TRACE(("[dispatcher_call] insufficient req size\n"));
        return SE3_ERR_COMM;
 80146b6:	f24f 0302 	movw	r3, #61442	; 0xf002
 80146ba:	e132      	b.n	8014922 <dispatcher_call+0x2aa>
    }

    // check for authorization
    if(!sekey_get_auth(login_struct.key)){
 80146bc:	489b      	ldr	r0, [pc, #620]	; (801492c <dispatcher_call+0x2b4>)
 80146be:	f001 fcfe 	bl	80160be <sekey_get_auth>
 80146c2:	4603      	mov	r3, r0
 80146c4:	f083 0301 	eor.w	r3, r3, #1
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d001      	beq.n	80146d2 <dispatcher_call+0x5a>
    	return SE3_ERR_ACCESS;
 80146ce:	2364      	movs	r3, #100	; 0x64
 80146d0:	e127      	b.n	8014922 <dispatcher_call+0x2aa>
    }

    // prepare request
    if (!login_struct.cryptoctx_initialized) {
 80146d2:	4b97      	ldr	r3, [pc, #604]	; (8014930 <dispatcher_call+0x2b8>)
 80146d4:	f893 34c8 	ldrb.w	r3, [r3, #1224]	; 0x4c8
 80146d8:	f083 0301 	eor.w	r3, r3, #1
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d007      	beq.n	80146f2 <dispatcher_call+0x7a>
        se3_payload_cryptoinit(&(login_struct.cryptoctx), login_struct.key);
 80146e2:	4992      	ldr	r1, [pc, #584]	; (801492c <dispatcher_call+0x2b4>)
 80146e4:	4893      	ldr	r0, [pc, #588]	; (8014934 <dispatcher_call+0x2bc>)
 80146e6:	f001 fbe1 	bl	8015eac <se3_payload_cryptoinit>
        login_struct.cryptoctx_initialized = true;
 80146ea:	4b91      	ldr	r3, [pc, #580]	; (8014930 <dispatcher_call+0x2b8>)
 80146ec:	2201      	movs	r2, #1
 80146ee:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
    }
    if (!se3_payload_decrypt(
 80146f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146f4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
        &(login_struct.cryptoctx), req_params.auth, req_params.iv,
        /* !! modifying request */ (uint8_t*)(req  + SE3_AUTH_SIZE + SE3_IV_SIZE),
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	f103 0520 	add.w	r5, r3, #32
        (req_size - SE3_AUTH_SIZE - SE3_IV_SIZE) / SE3_CRYPTOBLOCK_SIZE, req_hdr.cmd_flags, crypto_algo))
 80146fc:	89fb      	ldrh	r3, [r7, #14]
 80146fe:	3b20      	subs	r3, #32
 8014700:	2b00      	cmp	r3, #0
 8014702:	da00      	bge.n	8014706 <dispatcher_call+0x8e>
 8014704:	330f      	adds	r3, #15
 8014706:	111b      	asrs	r3, r3, #4
    if (!se3_payload_decrypt(
 8014708:	b29b      	uxth	r3, r3
 801470a:	4a8b      	ldr	r2, [pc, #556]	; (8014938 <dispatcher_call+0x2c0>)
 801470c:	8852      	ldrh	r2, [r2, #2]
 801470e:	498b      	ldr	r1, [pc, #556]	; (801493c <dispatcher_call+0x2c4>)
 8014710:	7809      	ldrb	r1, [r1, #0]
 8014712:	9102      	str	r1, [sp, #8]
 8014714:	9201      	str	r2, [sp, #4]
 8014716:	9300      	str	r3, [sp, #0]
 8014718:	462b      	mov	r3, r5
 801471a:	4622      	mov	r2, r4
 801471c:	4601      	mov	r1, r0
 801471e:	4885      	ldr	r0, [pc, #532]	; (8014934 <dispatcher_call+0x2bc>)
 8014720:	f001 fc57 	bl	8015fd2 <se3_payload_decrypt>
 8014724:	4603      	mov	r3, r0
 8014726:	f083 0301 	eor.w	r3, r3, #1
 801472a:	b2db      	uxtb	r3, r3
 801472c:	2b00      	cmp	r3, #0
 801472e:	d002      	beq.n	8014736 <dispatcher_call+0xbe>
    {
        SE3_TRACE(("[dispatcher_call] AUTH failed\n"));
        return SE3_ERR_COMM;
 8014730:	f24f 0302 	movw	r3, #61442	; 0xf002
 8014734:	e0f5      	b.n	8014922 <dispatcher_call+0x2aa>
    }

    if (login_struct.y) {
 8014736:	4b7e      	ldr	r3, [pc, #504]	; (8014930 <dispatcher_call+0x2b8>)
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d01a      	beq.n	8014774 <dispatcher_call+0xfc>
        if (memcmp(login_struct.token, req_params.token, SE3_TOKEN_SIZE)) {
 801473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014740:	2210      	movs	r2, #16
 8014742:	4619      	mov	r1, r3
 8014744:	487e      	ldr	r0, [pc, #504]	; (8014940 <dispatcher_call+0x2c8>)
 8014746:	f002 fe3d 	bl	80173c4 <memcmp>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d011      	beq.n	8014774 <dispatcher_call+0xfc>
        	if (command==SE3_CMD1_CHALLENGE){//someone (maybe same user after a crash) trying to login.
 8014750:	8afb      	ldrh	r3, [r7, #22]
 8014752:	2b01      	cmp	r3, #1
 8014754:	d102      	bne.n	801475c <dispatcher_call+0xe4>
				SE3_TRACE(("[dispatcher_call] login token mismatch and trying to login\n"));
				return SE3_ERR_OPENED;//notify host there is already an opened session, if host wants to continue, will call SE3_CMD1_LOGOUT_FORCED
 8014756:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801475a:	e0e2      	b.n	8014922 <dispatcher_call+0x2aa>
			}
			else if (command==SE3_CMD1_LOGOUT_FORCED){//if the user agreed to close the existing session by forcing a logout
 801475c:	8afb      	ldrh	r3, [r7, #22]
 801475e:	2b0b      	cmp	r3, #11
 8014760:	d106      	bne.n	8014770 <dispatcher_call+0xf8>
				command = SE3_CMD1_LOGOUT;//call logout as usual
 8014762:	2303      	movs	r3, #3
 8014764:	82fb      	strh	r3, [r7, #22]
				SE3_SET16(req, SE3_REQ1_OFFSET_CMD, command);
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	3332      	adds	r3, #50	; 0x32
 801476a:	8afa      	ldrh	r2, [r7, #22]
 801476c:	801a      	strh	r2, [r3, #0]
 801476e:	e001      	b.n	8014774 <dispatcher_call+0xfc>
			}
			else{
				SE3_TRACE(("[dispatcher_call] login token mismatch\n"));
				return SE3_ERR_ACCESS;
 8014770:	2364      	movs	r3, #100	; 0x64
 8014772:	e0d6      	b.n	8014922 <dispatcher_call+0x2aa>
			}
        }
    }

    SE3_GET16(req, SE3_REQ1_OFFSET_LEN, req_params.len);
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	3330      	adds	r3, #48	; 0x30
 8014778:	881b      	ldrh	r3, [r3, #0]
 801477a:	b29b      	uxth	r3, r3
 801477c:	873b      	strh	r3, [r7, #56]	; 0x38
    SE3_GET16(req, SE3_REQ1_OFFSET_CMD, req_params.cmd);
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	3332      	adds	r3, #50	; 0x32
 8014782:	881b      	ldrh	r3, [r3, #0]
 8014784:	b29b      	uxth	r3, r3
 8014786:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (req_params.cmd < SE3_CMD1_MAX) {
 8014788:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801478a:	2b0f      	cmp	r3, #15
 801478c:	d823      	bhi.n	80147d6 <dispatcher_call+0x15e>
    	if (req_params.cmd > 6 && req_params.cmd < 11 && !login_struct.y) {
 801478e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014790:	2b06      	cmp	r3, #6
 8014792:	d90b      	bls.n	80147ac <dispatcher_call+0x134>
 8014794:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014796:	2b0a      	cmp	r3, #10
 8014798:	d808      	bhi.n	80147ac <dispatcher_call+0x134>
 801479a:	4b65      	ldr	r3, [pc, #404]	; (8014930 <dispatcher_call+0x2b8>)
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	f083 0301 	eor.w	r3, r3, #1
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d001      	beq.n	80147ac <dispatcher_call+0x134>
    		SE3_TRACE(("[crypto_init] not logged in\n"));
    		return SE3_ERR_ACCESS;
 80147a8:	2364      	movs	r3, #100	; 0x64
 80147aa:	e0ba      	b.n	8014922 <dispatcher_call+0x2aa>
    	}
    	if(sekey_get_implementation_info(&algo_implementation, &crypto_algo, login_struct.key)){
 80147ac:	4a5f      	ldr	r2, [pc, #380]	; (801492c <dispatcher_call+0x2b4>)
 80147ae:	4963      	ldr	r1, [pc, #396]	; (801493c <dispatcher_call+0x2c4>)
 80147b0:	4864      	ldr	r0, [pc, #400]	; (8014944 <dispatcher_call+0x2cc>)
 80147b2:	f001 fc6d 	bl	8016090 <sekey_get_implementation_info>
 80147b6:	4603      	mov	r3, r0
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d00a      	beq.n	80147d2 <dispatcher_call+0x15a>
    		handler = handlers[algo_implementation][req_params.cmd];
 80147bc:	4b61      	ldr	r3, [pc, #388]	; (8014944 <dispatcher_call+0x2cc>)
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80147c2:	4611      	mov	r1, r2
 80147c4:	4a60      	ldr	r2, [pc, #384]	; (8014948 <dispatcher_call+0x2d0>)
 80147c6:	011b      	lsls	r3, r3, #4
 80147c8:	440b      	add	r3, r1
 80147ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80147ce:	657b      	str	r3, [r7, #84]	; 0x54
 80147d0:	e001      	b.n	80147d6 <dispatcher_call+0x15e>
    	} else {
    		return SE3_ERR_ACCESS;
 80147d2:	2364      	movs	r3, #100	; 0x64
 80147d4:	e0a5      	b.n	8014922 <dispatcher_call+0x2aa>
    	}
    }
    if (handler == NULL) {
 80147d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d101      	bne.n	80147e0 <dispatcher_call+0x168>
        handler = error;
 80147dc:	4b5b      	ldr	r3, [pc, #364]	; (801494c <dispatcher_call+0x2d4>)
 80147de:	657b      	str	r3, [r7, #84]	; 0x54
    }

    req1 = req_params.data;
 80147e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    req1_size = req_params.len;
 80147e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80147e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    resp1 = resp + SE3_RESP1_OFFSET_DATA;
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	3340      	adds	r3, #64	; 0x40
 80147ee:	647b      	str	r3, [r7, #68]	; 0x44
    resp1_size = 0;
 80147f0:	2300      	movs	r3, #0
 80147f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    status = handler(req1_size, req1, &resp1_size, resp1);
 80147f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80147fa:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 80147fe:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8014800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014802:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014804:	47a0      	blx	r4
 8014806:	4603      	mov	r3, r0
 8014808:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    resp_params.len = resp1_size;
 801480c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014810:	84bb      	strh	r3, [r7, #36]	; 0x24
    resp_params.auth = resp + SE3_RESP1_OFFSET_AUTH;
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	61bb      	str	r3, [r7, #24]
    resp_params.iv = resp + SE3_RESP1_OFFSET_IV;
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	3310      	adds	r3, #16
 801481a:	61fb      	str	r3, [r7, #28]
    resp_params.token = resp + SE3_RESP1_OFFSET_TOKEN;
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	3320      	adds	r3, #32
 8014820:	623b      	str	r3, [r7, #32]
    resp_params.status = status;
 8014822:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014826:	84fb      	strh	r3, [r7, #38]	; 0x26
    resp_params.data = resp1;
 8014828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801482a:	62bb      	str	r3, [r7, #40]	; 0x28

    resp1_size_padded = resp1_size;
 801482c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014830:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    if (resp1_size_padded % SE3_CRYPTOBLOCK_SIZE != 0) {
 8014834:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8014838:	f003 030f 	and.w	r3, r3, #15
 801483c:	b29b      	uxth	r3, r3
 801483e:	2b00      	cmp	r3, #0
 8014840:	d015      	beq.n	801486e <dispatcher_call+0x1f6>
        memset(resp1 + resp1_size_padded, 0, (SE3_CRYPTOBLOCK_SIZE - (resp1_size_padded % SE3_CRYPTOBLOCK_SIZE)));
 8014842:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8014846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014848:	18d0      	adds	r0, r2, r3
 801484a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801484e:	f003 030f 	and.w	r3, r3, #15
 8014852:	f1c3 0310 	rsb	r3, r3, #16
 8014856:	461a      	mov	r2, r3
 8014858:	2100      	movs	r1, #0
 801485a:	f002 fde9 	bl	8017430 <memset>
        resp1_size_padded += (SE3_CRYPTOBLOCK_SIZE - (resp1_size_padded % SE3_CRYPTOBLOCK_SIZE));
 801485e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8014862:	f023 030f 	bic.w	r3, r3, #15
 8014866:	b29b      	uxth	r3, r3
 8014868:	3310      	adds	r3, #16
 801486a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    *resp_size = SE3_RESP1_OFFSET_DATA + resp1_size_padded;
 801486e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8014872:	3340      	adds	r3, #64	; 0x40
 8014874:	b29a      	uxth	r2, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	801a      	strh	r2, [r3, #0]

    // prepare response
    SE3_SET16(resp, SE3_RESP1_OFFSET_LEN, resp_params.len);
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	3330      	adds	r3, #48	; 0x30
 801487e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014880:	801a      	strh	r2, [r3, #0]
    SE3_SET16(resp, SE3_RESP1_OFFSET_STATUS, resp_params.status);
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	3332      	adds	r3, #50	; 0x32
 8014886:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014888:	801a      	strh	r2, [r3, #0]
    if (login_struct.y) {
 801488a:	4b29      	ldr	r3, [pc, #164]	; (8014930 <dispatcher_call+0x2b8>)
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d00d      	beq.n	80148ae <dispatcher_call+0x236>
        memcpy(resp + SE3_RESP1_OFFSET_TOKEN, login_struct.token, SE3_TOKEN_SIZE);
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	f103 0220 	add.w	r2, r3, #32
 8014898:	4b25      	ldr	r3, [pc, #148]	; (8014930 <dispatcher_call+0x2b8>)
 801489a:	3306      	adds	r3, #6
 801489c:	681c      	ldr	r4, [r3, #0]
 801489e:	6858      	ldr	r0, [r3, #4]
 80148a0:	6899      	ldr	r1, [r3, #8]
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	6014      	str	r4, [r2, #0]
 80148a6:	6050      	str	r0, [r2, #4]
 80148a8:	6091      	str	r1, [r2, #8]
 80148aa:	60d3      	str	r3, [r2, #12]
 80148ac:	e006      	b.n	80148bc <dispatcher_call+0x244>
    }
    else {
        memset(resp + SE3_RESP1_OFFSET_TOKEN, 0, SE3_TOKEN_SIZE);
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	3320      	adds	r3, #32
 80148b2:	2210      	movs	r2, #16
 80148b4:	2100      	movs	r1, #0
 80148b6:	4618      	mov	r0, r3
 80148b8:	f002 fdba 	bl	8017430 <memset>
    }
	if (req_hdr.cmd_flags & SE3_CMDFLAG_ENCRYPT) {
 80148bc:	4b1e      	ldr	r3, [pc, #120]	; (8014938 <dispatcher_call+0x2c0>)
 80148be:	885b      	ldrh	r3, [r3, #2]
 80148c0:	b21b      	sxth	r3, r3
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	da05      	bge.n	80148d2 <dispatcher_call+0x25a>
		se3_rand(SE3_IV_SIZE, resp_params.iv);
 80148c6:	69fb      	ldr	r3, [r7, #28]
 80148c8:	4619      	mov	r1, r3
 80148ca:	2010      	movs	r0, #16
 80148cc:	f7f6 f87e 	bl	800a9cc <se3_rand>
 80148d0:	e005      	b.n	80148de <dispatcher_call+0x266>
	}
	else {
		memset(resp_params.iv, 0, SE3_IV_SIZE);
 80148d2:	69fb      	ldr	r3, [r7, #28]
 80148d4:	2210      	movs	r2, #16
 80148d6:	2100      	movs	r1, #0
 80148d8:	4618      	mov	r0, r3
 80148da:	f002 fda9 	bl	8017430 <memset>
	}

	// Implementation choice, dependent on the SEkey choice
	switch(algo_implementation){
 80148de:	4b19      	ldr	r3, [pc, #100]	; (8014944 <dispatcher_call+0x2cc>)
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d11c      	bne.n	8014920 <dispatcher_call+0x2a8>
		case SE3_SECURITY_CORE:
			se3_payload_encrypt(&(login_struct.cryptoctx),
 80148e6:	69b8      	ldr	r0, [r7, #24]
 80148e8:	69fc      	ldr	r4, [r7, #28]
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	f103 0520 	add.w	r5, r3, #32
								resp_params.auth,
								resp_params.iv,
								resp + SE3_AUTH_SIZE + SE3_IV_SIZE,
								(*resp_size - SE3_AUTH_SIZE - SE3_IV_SIZE) / SE3_CRYPTOBLOCK_SIZE,
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	881b      	ldrh	r3, [r3, #0]
 80148f4:	3b20      	subs	r3, #32
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	da00      	bge.n	80148fc <dispatcher_call+0x284>
 80148fa:	330f      	adds	r3, #15
 80148fc:	111b      	asrs	r3, r3, #4
			se3_payload_encrypt(&(login_struct.cryptoctx),
 80148fe:	b29b      	uxth	r3, r3
 8014900:	4a0d      	ldr	r2, [pc, #52]	; (8014938 <dispatcher_call+0x2c0>)
 8014902:	8852      	ldrh	r2, [r2, #2]
 8014904:	490d      	ldr	r1, [pc, #52]	; (801493c <dispatcher_call+0x2c4>)
 8014906:	7809      	ldrb	r1, [r1, #0]
 8014908:	9102      	str	r1, [sp, #8]
 801490a:	9201      	str	r2, [sp, #4]
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	462b      	mov	r3, r5
 8014910:	4622      	mov	r2, r4
 8014912:	4601      	mov	r1, r0
 8014914:	4807      	ldr	r0, [pc, #28]	; (8014934 <dispatcher_call+0x2bc>)
 8014916:	f001 fb00 	bl	8015f1a <se3_payload_encrypt>
								req_hdr.cmd_flags,
								crypto_algo);
			break;
 801491a:	bf00      	nop
		case SE3_SMARTCARD: // to be implemented (leftover from early SEcube developers)
		case SE3_FPGA: // to be implemented (leftover from early SEcube developers)
		default:
			return SE3_ERR_RESOURCE;
	}
    return SE3_OK;
 801491c:	2300      	movs	r3, #0
 801491e:	e000      	b.n	8014922 <dispatcher_call+0x2aa>
			return SE3_ERR_RESOURCE;
 8014920:	23c8      	movs	r3, #200	; 0xc8
}
 8014922:	4618      	mov	r0, r3
 8014924:	3758      	adds	r7, #88	; 0x58
 8014926:	46bd      	mov	sp, r7
 8014928:	bdb0      	pop	{r4, r5, r7, pc}
 801492a:	bf00      	nop
 801492c:	2000d23e 	.word	0x2000d23e
 8014930:	2000d218 	.word	0x2000d218
 8014934:	2000d260 	.word	0x2000d260
 8014938:	20004fd4 	.word	0x20004fd4
 801493c:	2000d214 	.word	0x2000d214
 8014940:	2000d21e 	.word	0x2000d21e
 8014944:	2000d6e4 	.word	0x2000d6e4
 8014948:	20000118 	.word	0x20000118
 801494c:	08014069 	.word	0x08014069

08014950 <se3_dispatcher_init>:

void se3_dispatcher_init()
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	af02      	add	r7, sp, #8
	se3_security_core_init();
 8014956:	f000 fff5 	bl	8015944 <se3_security_core_init>
    memset(&login_struct, 0, sizeof(login_struct));
 801495a:	f240 42cc 	movw	r2, #1228	; 0x4cc
 801495e:	2100      	movs	r1, #0
 8014960:	4810      	ldr	r0, [pc, #64]	; (80149a4 <se3_dispatcher_init+0x54>)
 8014962:	f002 fd65 	bl	8017430 <memset>
    se3_security_info.records[SE3_RECORD_TYPE_USERPIN].read_access = SE3_ACCESS_MAX;
 8014966:	4b10      	ldr	r3, [pc, #64]	; (80149a8 <se3_dispatcher_init+0x58>)
 8014968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801496c:	809a      	strh	r2, [r3, #4]
    se3_security_info.records[SE3_RECORD_TYPE_USERPIN].write_access = SE3_ACCESS_ADMIN;
 801496e:	4b0e      	ldr	r3, [pc, #56]	; (80149a8 <se3_dispatcher_init+0x58>)
 8014970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014974:	80da      	strh	r2, [r3, #6]
    se3_security_info.records[SE3_RECORD_TYPE_ADMINPIN].read_access = SE3_ACCESS_MAX;
 8014976:	4b0c      	ldr	r3, [pc, #48]	; (80149a8 <se3_dispatcher_init+0x58>)
 8014978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801497c:	801a      	strh	r2, [r3, #0]
    se3_security_info.records[SE3_RECORD_TYPE_ADMINPIN].write_access = SE3_ACCESS_ADMIN;
 801497e:	4b0a      	ldr	r3, [pc, #40]	; (80149a8 <se3_dispatcher_init+0x58>)
 8014980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014984:	805a      	strh	r2, [r3, #2]
    se3_mem_init(&(se3_security_info.sessions), SE3_SESSIONS_MAX, se3_sessions_index, SE3_SESSIONS_BUF, se3_sessions_buf);
 8014986:	4b09      	ldr	r3, [pc, #36]	; (80149ac <se3_dispatcher_init+0x5c>)
 8014988:	9300      	str	r3, [sp, #0]
 801498a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801498e:	4a08      	ldr	r2, [pc, #32]	; (80149b0 <se3_dispatcher_init+0x60>)
 8014990:	2164      	movs	r1, #100	; 0x64
 8014992:	4808      	ldr	r0, [pc, #32]	; (80149b4 <se3_dispatcher_init+0x64>)
 8014994:	f000 fd97 	bl	80154c6 <se3_mem_init>
    login_cleanup();
 8014998:	f000 f826 	bl	80149e8 <login_cleanup>
}
 801499c:	bf00      	nop
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	bf00      	nop
 80149a4:	2000d218 	.word	0x2000d218
 80149a8:	2000d86c 	.word	0x2000d86c
 80149ac:	20005214 	.word	0x20005214
 80149b0:	20005084 	.word	0x20005084
 80149b4:	2000d874 	.word	0x2000d874

080149b8 <set_req_hdr>:

void set_req_hdr(se3_comm_req_header req_hdr_i){
 80149b8:	b084      	sub	sp, #16
 80149ba:	b580      	push	{r7, lr}
 80149bc:	af00      	add	r7, sp, #0
 80149be:	f107 0c08 	add.w	ip, r7, #8
 80149c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	req_hdr = req_hdr_i;
 80149c6:	4b07      	ldr	r3, [pc, #28]	; (80149e4 <set_req_hdr+0x2c>)
 80149c8:	4618      	mov	r0, r3
 80149ca:	f107 0308 	add.w	r3, r7, #8
 80149ce:	2244      	movs	r2, #68	; 0x44
 80149d0:	4619      	mov	r1, r3
 80149d2:	f002 fd05 	bl	80173e0 <memcpy>
}
 80149d6:	bf00      	nop
 80149d8:	46bd      	mov	sp, r7
 80149da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80149de:	b004      	add	sp, #16
 80149e0:	4770      	bx	lr
 80149e2:	bf00      	nop
 80149e4:	20004fd4 	.word	0x20004fd4

080149e8 <login_cleanup>:

static void login_cleanup()
{
 80149e8:	b5b0      	push	{r4, r5, r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
    size_t i;
    se3_mem_reset(&(se3_security_info.sessions));
 80149ee:	481f      	ldr	r0, [pc, #124]	; (8014a6c <login_cleanup+0x84>)
 80149f0:	f000 fd34 	bl	801545c <se3_mem_reset>
    login_struct.y = false;
 80149f4:	4b1e      	ldr	r3, [pc, #120]	; (8014a70 <login_cleanup+0x88>)
 80149f6:	2200      	movs	r2, #0
 80149f8:	701a      	strb	r2, [r3, #0]
    login_struct.access = 0;
 80149fa:	4b1d      	ldr	r3, [pc, #116]	; (8014a70 <login_cleanup+0x88>)
 80149fc:	2200      	movs	r2, #0
 80149fe:	805a      	strh	r2, [r3, #2]
    login_struct.challenge_access = SE3_ACCESS_MAX;
 8014a00:	4b1b      	ldr	r3, [pc, #108]	; (8014a70 <login_cleanup+0x88>)
 8014a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a06:	809a      	strh	r2, [r3, #4]
    login_struct.cryptoctx_initialized = false;
 8014a08:	4b19      	ldr	r3, [pc, #100]	; (8014a70 <login_cleanup+0x88>)
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
    memcpy(login_struct.key, se3_magic, SE3_KEY_SIZE);
 8014a10:	4b17      	ldr	r3, [pc, #92]	; (8014a70 <login_cleanup+0x88>)
 8014a12:	4a18      	ldr	r2, [pc, #96]	; (8014a74 <login_cleanup+0x8c>)
 8014a14:	3326      	adds	r3, #38	; 0x26
 8014a16:	6815      	ldr	r5, [r2, #0]
 8014a18:	6854      	ldr	r4, [r2, #4]
 8014a1a:	6890      	ldr	r0, [r2, #8]
 8014a1c:	68d1      	ldr	r1, [r2, #12]
 8014a1e:	601d      	str	r5, [r3, #0]
 8014a20:	605c      	str	r4, [r3, #4]
 8014a22:	6098      	str	r0, [r3, #8]
 8014a24:	60d9      	str	r1, [r3, #12]
 8014a26:	6915      	ldr	r5, [r2, #16]
 8014a28:	6954      	ldr	r4, [r2, #20]
 8014a2a:	6990      	ldr	r0, [r2, #24]
 8014a2c:	69d1      	ldr	r1, [r2, #28]
 8014a2e:	611d      	str	r5, [r3, #16]
 8014a30:	615c      	str	r4, [r3, #20]
 8014a32:	6198      	str	r0, [r3, #24]
 8014a34:	61d9      	str	r1, [r3, #28]
    memset(login_struct.token, 0, SE3_TOKEN_SIZE);
 8014a36:	2210      	movs	r2, #16
 8014a38:	2100      	movs	r1, #0
 8014a3a:	480f      	ldr	r0, [pc, #60]	; (8014a78 <login_cleanup+0x90>)
 8014a3c:	f002 fcf8 	bl	8017430 <memset>
    for (i = 0; i < SE3_SESSIONS_MAX; i++) {
 8014a40:	2300      	movs	r3, #0
 8014a42:	607b      	str	r3, [r7, #4]
 8014a44:	e00a      	b.n	8014a5c <login_cleanup+0x74>
        se3_security_info.sessions_algo[i] = SE3_ALGO_INVALID;
 8014a46:	4a0d      	ldr	r2, [pc, #52]	; (8014a7c <login_cleanup+0x94>)
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	330c      	adds	r3, #12
 8014a4c:	005b      	lsls	r3, r3, #1
 8014a4e:	4413      	add	r3, r2
 8014a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a54:	809a      	strh	r2, [r3, #4]
    for (i = 0; i < SE3_SESSIONS_MAX; i++) {
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	3301      	adds	r3, #1
 8014a5a:	607b      	str	r3, [r7, #4]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2b63      	cmp	r3, #99	; 0x63
 8014a60:	d9f1      	bls.n	8014a46 <login_cleanup+0x5e>
    }
}
 8014a62:	bf00      	nop
 8014a64:	bf00      	nop
 8014a66:	3708      	adds	r7, #8
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8014a6c:	2000d874 	.word	0x2000d874
 8014a70:	2000d218 	.word	0x2000d218
 8014a74:	08019ee8 	.word	0x08019ee8
 8014a78:	2000d21e 	.word	0x2000d21e
 8014a7c:	2000d86c 	.word	0x2000d86c

08014a80 <flash_fill>:
#include "se3_common.h"

SE3_FLASH_INFO flash;

static bool flash_fill(uint32_t addr, uint8_t val, size_t size)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b086      	sub	sp, #24
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	460b      	mov	r3, r1
 8014a8a:	607a      	str	r2, [r7, #4]
 8014a8c:	72fb      	strb	r3, [r7, #11]
	bool success = true;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	75fb      	strb	r3, [r7, #23]
	HAL_FLASH_Unlock();
 8014a92:	f7ec faeb 	bl	800106c <HAL_FLASH_Unlock>
	while (size) {
 8014a96:	e015      	b.n	8014ac4 <flash_fill+0x44>
		if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr, (uint64_t)val)) {
 8014a98:	7afa      	ldrb	r2, [r7, #11]
 8014a9a:	f04f 0300 	mov.w	r3, #0
 8014a9e:	68f9      	ldr	r1, [r7, #12]
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	f7ec fa8f 	bl	8000fc4 <HAL_FLASH_Program>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d005      	beq.n	8014ab8 <flash_fill+0x38>
			success = false;
 8014aac:	2300      	movs	r3, #0
 8014aae:	75fb      	strb	r3, [r7, #23]
            hwerror = true;
 8014ab0:	4b09      	ldr	r3, [pc, #36]	; (8014ad8 <flash_fill+0x58>)
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	801a      	strh	r2, [r3, #0]
			break;
 8014ab6:	e008      	b.n	8014aca <flash_fill+0x4a>
		}
		size--;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	3b01      	subs	r3, #1
 8014abc:	607b      	str	r3, [r7, #4]
		addr++;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	60fb      	str	r3, [r7, #12]
	while (size) {
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d1e6      	bne.n	8014a98 <flash_fill+0x18>
	}
	HAL_FLASH_Lock();
 8014aca:	f7ec fae9 	bl	80010a0 <HAL_FLASH_Lock>
	return success;
 8014ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3718      	adds	r7, #24
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}
 8014ad8:	20000f68 	.word	0x20000f68

08014adc <flash_zero>:

static bool flash_zero(uint32_t addr, size_t size)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
	bool success = true;
 8014ae6:	2301      	movs	r3, #1
 8014ae8:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8014aea:	f7ec fabf 	bl	800106c <HAL_FLASH_Unlock>
	while (size) {
 8014aee:	e016      	b.n	8014b1e <flash_zero+0x42>
		if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr, 0)) {
 8014af0:	f04f 0200 	mov.w	r2, #0
 8014af4:	f04f 0300 	mov.w	r3, #0
 8014af8:	6879      	ldr	r1, [r7, #4]
 8014afa:	2000      	movs	r0, #0
 8014afc:	f7ec fa62 	bl	8000fc4 <HAL_FLASH_Program>
 8014b00:	4603      	mov	r3, r0
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d005      	beq.n	8014b12 <flash_zero+0x36>
			success = false;
 8014b06:	2300      	movs	r3, #0
 8014b08:	73fb      	strb	r3, [r7, #15]
            hwerror = true;
 8014b0a:	4b0a      	ldr	r3, [pc, #40]	; (8014b34 <flash_zero+0x58>)
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	801a      	strh	r2, [r3, #0]
			break;
 8014b10:	e008      	b.n	8014b24 <flash_zero+0x48>
		}
		size--;
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	3b01      	subs	r3, #1
 8014b16:	603b      	str	r3, [r7, #0]
		addr++;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	607b      	str	r3, [r7, #4]
	while (size) {
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d1e5      	bne.n	8014af0 <flash_zero+0x14>
	}
	HAL_FLASH_Lock();
 8014b24:	f7ec fabc 	bl	80010a0 <HAL_FLASH_Lock>
	return success;
 8014b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	20000f68 	.word	0x20000f68

08014b38 <flash_program>:

static bool flash_program(uint32_t addr, const uint8_t* data, size_t size)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b086      	sub	sp, #24
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	60f8      	str	r0, [r7, #12]
 8014b40:	60b9      	str	r1, [r7, #8]
 8014b42:	607a      	str	r2, [r7, #4]
	bool success = true;
 8014b44:	2301      	movs	r3, #1
 8014b46:	75fb      	strb	r3, [r7, #23]
	HAL_FLASH_Unlock();
 8014b48:	f7ec fa90 	bl	800106c <HAL_FLASH_Unlock>
	while (size) {
 8014b4c:	e017      	b.n	8014b7e <flash_program+0x46>
		if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr, (uint64_t)*data)) {
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	b2da      	uxtb	r2, r3
 8014b54:	f04f 0300 	mov.w	r3, #0
 8014b58:	68f9      	ldr	r1, [r7, #12]
 8014b5a:	2000      	movs	r0, #0
 8014b5c:	f7ec fa32 	bl	8000fc4 <HAL_FLASH_Program>
 8014b60:	4603      	mov	r3, r0
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d002      	beq.n	8014b6c <flash_program+0x34>
			success = false;
 8014b66:	2300      	movs	r3, #0
 8014b68:	75fb      	strb	r3, [r7, #23]
			break;
 8014b6a:	e00b      	b.n	8014b84 <flash_program+0x4c>
		}
		size--;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	3b01      	subs	r3, #1
 8014b70:	607b      	str	r3, [r7, #4]
		addr++;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	3301      	adds	r3, #1
 8014b76:	60fb      	str	r3, [r7, #12]
		data++;
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	60bb      	str	r3, [r7, #8]
	while (size) {
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d1e4      	bne.n	8014b4e <flash_program+0x16>
	}
	HAL_FLASH_Lock();
 8014b84:	f7ec fa8c 	bl	80010a0 <HAL_FLASH_Lock>
    if (!success) {
 8014b88:	7dfb      	ldrb	r3, [r7, #23]
 8014b8a:	f083 0301 	eor.w	r3, r3, #1
 8014b8e:	b2db      	uxtb	r3, r3
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d002      	beq.n	8014b9a <flash_program+0x62>
        hwerror = true;
 8014b94:	4b03      	ldr	r3, [pc, #12]	; (8014ba4 <flash_program+0x6c>)
 8014b96:	2201      	movs	r2, #1
 8014b98:	801a      	strh	r2, [r3, #0]
    }
	return success;
 8014b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3718      	adds	r7, #24
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	20000f68 	.word	0x20000f68

08014ba8 <flash_erase>:

static bool flash_erase(uint32_t sector) {
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b08a      	sub	sp, #40	; 0x28
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
    bool success = true;
 8014bb0:	2301      	movs	r3, #1
 8014bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	HAL_StatusTypeDef result;
	
	HAL_FLASH_Unlock();
 8014bb6:	f7ec fa59 	bl	800106c <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	613b      	str	r3, [r7, #16]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8014bbe:	2302      	movs	r3, #2
 8014bc0:	623b      	str	r3, [r7, #32]
	EraseInitStruct.Sector = sector;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbSectors = 1;
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	61fb      	str	r3, [r7, #28]
	result = HAL_FLASHEx_Erase(&EraseInitStruct, (uint32_t*)&SectorError);
 8014bca:	f107 020c 	add.w	r2, r7, #12
 8014bce:	f107 0310 	add.w	r3, r7, #16
 8014bd2:	4611      	mov	r1, r2
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7ec fbab 	bl	8001330 <HAL_FLASHEx_Erase>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (result != HAL_OK){
 8014be0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d005      	beq.n	8014bf4 <flash_erase+0x4c>
        success = false;
 8014be8:	2300      	movs	r3, #0
 8014bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        hwerror = true;
 8014bee:	4b05      	ldr	r3, [pc, #20]	; (8014c04 <flash_erase+0x5c>)
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	801a      	strh	r2, [r3, #0]
    }
	HAL_FLASH_Lock();
 8014bf4:	f7ec fa54 	bl	80010a0 <HAL_FLASH_Lock>
#endif
    return success;
 8014bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3728      	adds	r7, #40	; 0x28
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}
 8014c04:	20000f68 	.word	0x20000f68

08014c08 <flash_swap>:

static bool flash_swap()
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b08c      	sub	sp, #48	; 0x30
 8014c0c:	af00      	add	r7, sp, #0
	size_t other_pos;

	size_t n;
	bool success, b;
	se3_flash_it it;
	if (flash.sector == SE3_FLASH_S0) {
 8014c0e:	4b6b      	ldr	r3, [pc, #428]	; (8014dbc <flash_swap+0x1b4>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	2b0a      	cmp	r3, #10
 8014c14:	d104      	bne.n	8014c20 <flash_swap+0x18>
		other = SE3_FLASH_S1;
 8014c16:	230b      	movs	r3, #11
 8014c18:	62fb      	str	r3, [r7, #44]	; 0x2c
		other_base = SE3_FLASH_S1_ADDR;
 8014c1a:	4b69      	ldr	r3, [pc, #420]	; (8014dc0 <flash_swap+0x1b8>)
 8014c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c1e:	e00a      	b.n	8014c36 <flash_swap+0x2e>
	}
	else if (flash.sector == SE3_FLASH_S1) {
 8014c20:	4b66      	ldr	r3, [pc, #408]	; (8014dbc <flash_swap+0x1b4>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	2b0b      	cmp	r3, #11
 8014c26:	d104      	bne.n	8014c32 <flash_swap+0x2a>
		other = SE3_FLASH_S0;
 8014c28:	230a      	movs	r3, #10
 8014c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		other_base = SE3_FLASH_S0_ADDR;
 8014c2c:	4b65      	ldr	r3, [pc, #404]	; (8014dc4 <flash_swap+0x1bc>)
 8014c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c30:	e001      	b.n	8014c36 <flash_swap+0x2e>
	}
	else {
		return false;
 8014c32:	2300      	movs	r3, #0
 8014c34:	e0bd      	b.n	8014db2 <flash_swap+0x1aa>
	}
	other_index = other_base + SE3_FLASH_MAGIC_SIZE;
 8014c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c38:	3320      	adds	r3, #32
 8014c3a:	61bb      	str	r3, [r7, #24]
	//erase other sector
	flash_erase(other);
 8014c3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c3e:	f7ff ffb3 	bl	8014ba8 <flash_erase>
	//zero non-programmed slots in index table (first_free_pos to end)
	if (flash.first_free_pos < SE3_FLASH_INDEX_SIZE) {
 8014c42:	4b5e      	ldr	r3, [pc, #376]	; (8014dbc <flash_swap+0x1b4>)
 8014c44:	691b      	ldr	r3, [r3, #16]
 8014c46:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8014c4a:	d20e      	bcs.n	8014c6a <flash_swap+0x62>
		n = SE3_FLASH_INDEX_SIZE - flash.first_free_pos;
 8014c4c:	4b5b      	ldr	r3, [pc, #364]	; (8014dbc <flash_swap+0x1b4>)
 8014c4e:	691b      	ldr	r3, [r3, #16]
 8014c50:	f5c3 63fc 	rsb	r3, r3, #2016	; 0x7e0
 8014c54:	617b      	str	r3, [r7, #20]
		flash_zero((uint32_t)flash.index + flash.first_free_pos, n);
 8014c56:	4b59      	ldr	r3, [pc, #356]	; (8014dbc <flash_swap+0x1b4>)
 8014c58:	689b      	ldr	r3, [r3, #8]
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	4b57      	ldr	r3, [pc, #348]	; (8014dbc <flash_swap+0x1b4>)
 8014c5e:	691b      	ldr	r3, [r3, #16]
 8014c60:	4413      	add	r3, r2
 8014c62:	6979      	ldr	r1, [r7, #20]
 8014c64:	4618      	mov	r0, r3
 8014c66:	f7ff ff39 	bl	8014adc <flash_zero>
	}

	//copy good blocks to other sector
	success = true;
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	77fb      	strb	r3, [r7, #31]
	other_used = SE3_FLASH_MAGIC_SIZE + SE3_FLASH_INDEX_SIZE;
 8014c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c72:	627b      	str	r3, [r7, #36]	; 0x24
	other_pos = 0;
 8014c74:	2300      	movs	r3, #0
 8014c76:	623b      	str	r3, [r7, #32]
	se3_flash_it_init(&it);	
 8014c78:	463b      	mov	r3, r7
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f000 f995 	bl	8014faa <se3_flash_it_init>
	while (se3_flash_it_next(&it)) {
 8014c80:	e051      	b.n	8014d26 <flash_swap+0x11e>
		if (it.type != SE3_FLASH_TYPE_INVALID) {
 8014c82:	793b      	ldrb	r3, [r7, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d04e      	beq.n	8014d26 <flash_swap+0x11e>
			//copy data
			b = flash_program(
 8014c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8c:	18d0      	adds	r0, r2, r3
				other_base + other_used, 
				flash.data + it.pos*SE3_FLASH_BLOCK_SIZE,
 8014c8e:	4b4b      	ldr	r3, [pc, #300]	; (8014dbc <flash_swap+0x1b4>)
 8014c90:	68da      	ldr	r2, [r3, #12]
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	019b      	lsls	r3, r3, #6
			b = flash_program(
 8014c96:	4413      	add	r3, r2
				it.blocks*SE3_FLASH_BLOCK_SIZE
 8014c98:	893a      	ldrh	r2, [r7, #8]
 8014c9a:	0192      	lsls	r2, r2, #6
			b = flash_program(
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	f7ff ff4b 	bl	8014b38 <flash_program>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	74fb      	strb	r3, [r7, #19]
			);
			if (!b) {
 8014ca6:	7cfb      	ldrb	r3, [r7, #19]
 8014ca8:	f083 0301 	eor.w	r3, r3, #1
 8014cac:	b2db      	uxtb	r3, r3
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d002      	beq.n	8014cb8 <flash_swap+0xb0>
				success = false; break;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	77fb      	strb	r3, [r7, #31]
 8014cb6:	e03d      	b.n	8014d34 <flash_swap+0x12c>
			}

			//write index
			b = flash_program(other_index + other_pos, &(it.type), 1);
 8014cb8:	69ba      	ldr	r2, [r7, #24]
 8014cba:	6a3b      	ldr	r3, [r7, #32]
 8014cbc:	18d0      	adds	r0, r2, r3
 8014cbe:	463b      	mov	r3, r7
 8014cc0:	3304      	adds	r3, #4
 8014cc2:	2201      	movs	r2, #1
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	f7ff ff37 	bl	8014b38 <flash_program>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	74fb      	strb	r3, [r7, #19]
			if (!b) {
 8014cce:	7cfb      	ldrb	r3, [r7, #19]
 8014cd0:	f083 0301 	eor.w	r3, r3, #1
 8014cd4:	b2db      	uxtb	r3, r3
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d002      	beq.n	8014ce0 <flash_swap+0xd8>
				success = false; break;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	77fb      	strb	r3, [r7, #31]
 8014cde:	e029      	b.n	8014d34 <flash_swap+0x12c>
			}
			if (it.blocks > 1) {
 8014ce0:	893b      	ldrh	r3, [r7, #8]
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d914      	bls.n	8014d10 <flash_swap+0x108>
				b = flash_fill(other_index + other_pos + 1, 0xFE, it.blocks - 1);
 8014ce6:	69ba      	ldr	r2, [r7, #24]
 8014ce8:	6a3b      	ldr	r3, [r7, #32]
 8014cea:	4413      	add	r3, r2
 8014cec:	3301      	adds	r3, #1
 8014cee:	893a      	ldrh	r2, [r7, #8]
 8014cf0:	3a01      	subs	r2, #1
 8014cf2:	21fe      	movs	r1, #254	; 0xfe
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7ff fec3 	bl	8014a80 <flash_fill>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	74fb      	strb	r3, [r7, #19]
				if (!b) {
 8014cfe:	7cfb      	ldrb	r3, [r7, #19]
 8014d00:	f083 0301 	eor.w	r3, r3, #1
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d002      	beq.n	8014d10 <flash_swap+0x108>
					success = false; break;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	77fb      	strb	r3, [r7, #31]
 8014d0e:	e011      	b.n	8014d34 <flash_swap+0x12c>
				}
			}

			other_used += it.blocks*SE3_FLASH_BLOCK_SIZE;
 8014d10:	893b      	ldrh	r3, [r7, #8]
 8014d12:	019b      	lsls	r3, r3, #6
 8014d14:	461a      	mov	r2, r3
 8014d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d18:	4413      	add	r3, r2
 8014d1a:	627b      	str	r3, [r7, #36]	; 0x24
			other_pos += it.blocks;
 8014d1c:	893b      	ldrh	r3, [r7, #8]
 8014d1e:	461a      	mov	r2, r3
 8014d20:	6a3b      	ldr	r3, [r7, #32]
 8014d22:	4413      	add	r3, r2
 8014d24:	623b      	str	r3, [r7, #32]
	while (se3_flash_it_next(&it)) {
 8014d26:	463b      	mov	r3, r7
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f000 f94b 	bl	8014fc4 <se3_flash_it_next>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d1a6      	bne.n	8014c82 <flash_swap+0x7a>
		}
	}
	if (!success) {
 8014d34:	7ffb      	ldrb	r3, [r7, #31]
 8014d36:	f083 0301 	eor.w	r3, r3, #1
 8014d3a:	b2db      	uxtb	r3, r3
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d001      	beq.n	8014d44 <flash_swap+0x13c>
		return false;
 8014d40:	2300      	movs	r3, #0
 8014d42:	e036      	b.n	8014db2 <flash_swap+0x1aa>
	}

	//write magic to other sector
	if (!flash_program(other_base, se3_magic, SE3_FLASH_MAGIC_SIZE)) {
 8014d44:	2220      	movs	r2, #32
 8014d46:	4920      	ldr	r1, [pc, #128]	; (8014dc8 <flash_swap+0x1c0>)
 8014d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d4a:	f7ff fef5 	bl	8014b38 <flash_program>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	f083 0301 	eor.w	r3, r3, #1
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d001      	beq.n	8014d5e <flash_swap+0x156>
		return false;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e029      	b.n	8014db2 <flash_swap+0x1aa>
	}

	//clear magic from this sector
	if (!flash_zero((uint32_t)flash.base, 1)) {
 8014d5e:	4b17      	ldr	r3, [pc, #92]	; (8014dbc <flash_swap+0x1b4>)
 8014d60:	685b      	ldr	r3, [r3, #4]
 8014d62:	2101      	movs	r1, #1
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7ff feb9 	bl	8014adc <flash_zero>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	f083 0301 	eor.w	r3, r3, #1
 8014d70:	b2db      	uxtb	r3, r3
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d001      	beq.n	8014d7a <flash_swap+0x172>
		return false;
 8014d76:	2300      	movs	r3, #0
 8014d78:	e01b      	b.n	8014db2 <flash_swap+0x1aa>
	}

	//swap sectors
	flash.base = (uint8_t*)other_base;
 8014d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d7c:	4a0f      	ldr	r2, [pc, #60]	; (8014dbc <flash_swap+0x1b4>)
 8014d7e:	6053      	str	r3, [r2, #4]
    flash.sector = other;
 8014d80:	4a0e      	ldr	r2, [pc, #56]	; (8014dbc <flash_swap+0x1b4>)
 8014d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d84:	6013      	str	r3, [r2, #0]
    flash.index = flash.base + SE3_FLASH_MAGIC_SIZE;
 8014d86:	4b0d      	ldr	r3, [pc, #52]	; (8014dbc <flash_swap+0x1b4>)
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	3320      	adds	r3, #32
 8014d8c:	4a0b      	ldr	r2, [pc, #44]	; (8014dbc <flash_swap+0x1b4>)
 8014d8e:	6093      	str	r3, [r2, #8]
    flash.data = flash.index + SE3_FLASH_INDEX_SIZE;
 8014d90:	4b0a      	ldr	r3, [pc, #40]	; (8014dbc <flash_swap+0x1b4>)
 8014d92:	689b      	ldr	r3, [r3, #8]
 8014d94:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8014d98:	4a08      	ldr	r2, [pc, #32]	; (8014dbc <flash_swap+0x1b4>)
 8014d9a:	60d3      	str	r3, [r2, #12]
    flash.allocated = flash.used = other_used;
 8014d9c:	4a07      	ldr	r2, [pc, #28]	; (8014dbc <flash_swap+0x1b4>)
 8014d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da0:	6153      	str	r3, [r2, #20]
 8014da2:	4b06      	ldr	r3, [pc, #24]	; (8014dbc <flash_swap+0x1b4>)
 8014da4:	695b      	ldr	r3, [r3, #20]
 8014da6:	4a05      	ldr	r2, [pc, #20]	; (8014dbc <flash_swap+0x1b4>)
 8014da8:	6193      	str	r3, [r2, #24]
    flash.first_free_pos = other_pos;
 8014daa:	4a04      	ldr	r2, [pc, #16]	; (8014dbc <flash_swap+0x1b4>)
 8014dac:	6a3b      	ldr	r3, [r7, #32]
 8014dae:	6113      	str	r3, [r2, #16]

	return true;
 8014db0:	2301      	movs	r3, #1
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3730      	adds	r7, #48	; 0x30
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}
 8014dba:	bf00      	nop
 8014dbc:	2000d6e8 	.word	0x2000d6e8
 8014dc0:	080e0000 	.word	0x080e0000
 8014dc4:	080c0000 	.word	0x080c0000
 8014dc8:	08019ee8 	.word	0x08019ee8

08014dcc <se3_flash_info_setup>:

void se3_flash_info_setup(uint32_t sector, const uint8_t* base)
{
 8014dcc:	b480      	push	{r7}
 8014dce:	b083      	sub	sp, #12
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	6039      	str	r1, [r7, #0]
	flash.base = base;
 8014dd6:	4a11      	ldr	r2, [pc, #68]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	6053      	str	r3, [r2, #4]
    flash.sector = sector;
 8014ddc:	4a0f      	ldr	r2, [pc, #60]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6013      	str	r3, [r2, #0]
    flash.index = flash.base + SE3_FLASH_MAGIC_SIZE;
 8014de2:	4b0e      	ldr	r3, [pc, #56]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	3320      	adds	r3, #32
 8014de8:	4a0c      	ldr	r2, [pc, #48]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014dea:	6093      	str	r3, [r2, #8]
    flash.data = flash.index + SE3_FLASH_INDEX_SIZE;
 8014dec:	4b0b      	ldr	r3, [pc, #44]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014dee:	689b      	ldr	r3, [r3, #8]
 8014df0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8014df4:	4a09      	ldr	r2, [pc, #36]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014df6:	60d3      	str	r3, [r2, #12]
    flash.allocated = flash.used = SE3_FLASH_MAGIC_SIZE + SE3_FLASH_INDEX_SIZE;
 8014df8:	4b08      	ldr	r3, [pc, #32]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014dfe:	615a      	str	r2, [r3, #20]
 8014e00:	4b06      	ldr	r3, [pc, #24]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014e02:	695b      	ldr	r3, [r3, #20]
 8014e04:	4a05      	ldr	r2, [pc, #20]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014e06:	6193      	str	r3, [r2, #24]
    flash.first_free_pos = 0;
 8014e08:	4b04      	ldr	r3, [pc, #16]	; (8014e1c <se3_flash_info_setup+0x50>)
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	611a      	str	r2, [r3, #16]
}
 8014e0e:	bf00      	nop
 8014e10:	370c      	adds	r7, #12
 8014e12:	46bd      	mov	sp, r7
 8014e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	2000d6e8 	.word	0x2000d6e8

08014e20 <se3_flash_init>:
	size_t size_on_flash = size + 2;
	return (size_on_flash <= (SE3_FLASH_SECTOR_SIZE - flash.used));
}

bool se3_flash_init()
{
 8014e20:	b5b0      	push	{r4, r5, r7, lr}
 8014e22:	b088      	sub	sp, #32
 8014e24:	af00      	add	r7, sp, #0
	uint8_t* base;
	uint32_t sector;
	//uint16_t record_key;

	// check for flash magic
	bool magic0 = !memcmp((void*)SE3_FLASH_S0_ADDR, se3_magic, SE3_FLASH_MAGIC_SIZE);
 8014e26:	2220      	movs	r2, #32
 8014e28:	4948      	ldr	r1, [pc, #288]	; (8014f4c <se3_flash_init+0x12c>)
 8014e2a:	4849      	ldr	r0, [pc, #292]	; (8014f50 <se3_flash_init+0x130>)
 8014e2c:	f002 faca 	bl	80173c4 <memcmp>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	bf0c      	ite	eq
 8014e36:	2301      	moveq	r3, #1
 8014e38:	2300      	movne	r3, #0
 8014e3a:	75fb      	strb	r3, [r7, #23]
	bool magic1 = !memcmp((void*)SE3_FLASH_S1_ADDR, se3_magic, SE3_FLASH_MAGIC_SIZE);
 8014e3c:	2220      	movs	r2, #32
 8014e3e:	4943      	ldr	r1, [pc, #268]	; (8014f4c <se3_flash_init+0x12c>)
 8014e40:	4844      	ldr	r0, [pc, #272]	; (8014f54 <se3_flash_init+0x134>)
 8014e42:	f002 fabf 	bl	80173c4 <memcmp>
 8014e46:	4603      	mov	r3, r0
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	bf0c      	ite	eq
 8014e4c:	2301      	moveq	r3, #1
 8014e4e:	2300      	movne	r3, #0
 8014e50:	75bb      	strb	r3, [r7, #22]
	
	//choose active sector
	if (magic0 && magic1) {
 8014e52:	7dfb      	ldrb	r3, [r7, #23]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d013      	beq.n	8014e80 <se3_flash_init+0x60>
 8014e58:	7dbb      	ldrb	r3, [r7, #22]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d010      	beq.n	8014e80 <se3_flash_init+0x60>
		//both marked, the one with last index programmed should be deleted
		if (0xFF == *((uint8_t*)(SE3_FLASH_S1_ADDR + SE3_FLASH_MAGIC_SIZE + SE3_FLASH_INDEX_SIZE - 1))){
 8014e5e:	4b3e      	ldr	r3, [pc, #248]	; (8014f58 <se3_flash_init+0x138>)
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	2bff      	cmp	r3, #255	; 0xff
 8014e64:	d106      	bne.n	8014e74 <se3_flash_init+0x54>
			magic0 = false;
 8014e66:	2300      	movs	r3, #0
 8014e68:	75fb      	strb	r3, [r7, #23]
			flash_zero(SE3_FLASH_S0_ADDR, 1);
 8014e6a:	2101      	movs	r1, #1
 8014e6c:	4838      	ldr	r0, [pc, #224]	; (8014f50 <se3_flash_init+0x130>)
 8014e6e:	f7ff fe35 	bl	8014adc <flash_zero>
 8014e72:	e005      	b.n	8014e80 <se3_flash_init+0x60>
		}
		else {
			magic1 = false;
 8014e74:	2300      	movs	r3, #0
 8014e76:	75bb      	strb	r3, [r7, #22]
			flash_zero(SE3_FLASH_S1_ADDR, 1);
 8014e78:	2101      	movs	r1, #1
 8014e7a:	4836      	ldr	r0, [pc, #216]	; (8014f54 <se3_flash_init+0x134>)
 8014e7c:	f7ff fe2e 	bl	8014adc <flash_zero>
		}
	}

	if (magic0) {
 8014e80:	7dfb      	ldrb	r3, [r7, #23]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d004      	beq.n	8014e90 <se3_flash_init+0x70>
		base = (uint8_t*)SE3_FLASH_S0_ADDR;
 8014e86:	4b32      	ldr	r3, [pc, #200]	; (8014f50 <se3_flash_init+0x130>)
 8014e88:	61fb      	str	r3, [r7, #28]
		sector = SE3_FLASH_S0;
 8014e8a:	230a      	movs	r3, #10
 8014e8c:	61bb      	str	r3, [r7, #24]
 8014e8e:	e013      	b.n	8014eb8 <se3_flash_init+0x98>
	}
	else if (magic1) {
 8014e90:	7dbb      	ldrb	r3, [r7, #22]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d004      	beq.n	8014ea0 <se3_flash_init+0x80>
		base = (uint8_t*)SE3_FLASH_S1_ADDR;
 8014e96:	4b2f      	ldr	r3, [pc, #188]	; (8014f54 <se3_flash_init+0x134>)
 8014e98:	61fb      	str	r3, [r7, #28]
		sector = SE3_FLASH_S1;
 8014e9a:	230b      	movs	r3, #11
 8014e9c:	61bb      	str	r3, [r7, #24]
 8014e9e:	e00b      	b.n	8014eb8 <se3_flash_init+0x98>
	}
	else {
		// initialize S0 as active sector
		flash_erase(SE3_FLASH_S0);
 8014ea0:	200a      	movs	r0, #10
 8014ea2:	f7ff fe81 	bl	8014ba8 <flash_erase>
		flash_program(SE3_FLASH_S0_ADDR, se3_magic, SE3_FLASH_MAGIC_SIZE);
 8014ea6:	2220      	movs	r2, #32
 8014ea8:	4928      	ldr	r1, [pc, #160]	; (8014f4c <se3_flash_init+0x12c>)
 8014eaa:	4829      	ldr	r0, [pc, #164]	; (8014f50 <se3_flash_init+0x130>)
 8014eac:	f7ff fe44 	bl	8014b38 <flash_program>
		base = (uint8_t*)SE3_FLASH_S0_ADDR;
 8014eb0:	4b27      	ldr	r3, [pc, #156]	; (8014f50 <se3_flash_init+0x130>)
 8014eb2:	61fb      	str	r3, [r7, #28]
		sector = SE3_FLASH_S0;
 8014eb4:	230a      	movs	r3, #10
 8014eb6:	61bb      	str	r3, [r7, #24]
	}
	se3_flash_info_setup(sector, base);
 8014eb8:	69f9      	ldr	r1, [r7, #28]
 8014eba:	69b8      	ldr	r0, [r7, #24]
 8014ebc:	f7ff ff86 	bl	8014dcc <se3_flash_info_setup>

	//scan flash
	se3_flash_it_init(&it);
 8014ec0:	1d3b      	adds	r3, r7, #4
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f000 f871 	bl	8014faa <se3_flash_it_init>
	while (se3_flash_it_next(&it)) {
 8014ec8:	e029      	b.n	8014f1e <se3_flash_init+0xfe>
		flash.allocated += it.blocks*SE3_FLASH_BLOCK_SIZE;
 8014eca:	4b24      	ldr	r3, [pc, #144]	; (8014f5c <se3_flash_init+0x13c>)
 8014ecc:	699b      	ldr	r3, [r3, #24]
 8014ece:	89ba      	ldrh	r2, [r7, #12]
 8014ed0:	0192      	lsls	r2, r2, #6
 8014ed2:	4413      	add	r3, r2
 8014ed4:	4a21      	ldr	r2, [pc, #132]	; (8014f5c <se3_flash_init+0x13c>)
 8014ed6:	6193      	str	r3, [r2, #24]
		if (it.type != 0) {
 8014ed8:	7a3b      	ldrb	r3, [r7, #8]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d01f      	beq.n	8014f1e <se3_flash_init+0xfe>
			flash.used += it.blocks*SE3_FLASH_BLOCK_SIZE;
 8014ede:	4b1f      	ldr	r3, [pc, #124]	; (8014f5c <se3_flash_init+0x13c>)
 8014ee0:	695b      	ldr	r3, [r3, #20]
 8014ee2:	89ba      	ldrh	r2, [r7, #12]
 8014ee4:	0192      	lsls	r2, r2, #6
 8014ee6:	4413      	add	r3, r2
 8014ee8:	4a1c      	ldr	r2, [pc, #112]	; (8014f5c <se3_flash_init+0x13c>)
 8014eea:	6153      	str	r3, [r2, #20]
            if (it.type == SE3_FLASH_TYPE_SERIAL) {
 8014eec:	7a3b      	ldrb	r3, [r7, #8]
 8014eee:	2b01      	cmp	r3, #1
 8014ef0:	d115      	bne.n	8014f1e <se3_flash_init+0xfe>
                memcpy(serial.data, it.addr, SE3_SERIAL_SIZE);
 8014ef2:	687a      	ldr	r2, [r7, #4]
 8014ef4:	4b1a      	ldr	r3, [pc, #104]	; (8014f60 <se3_flash_init+0x140>)
 8014ef6:	6815      	ldr	r5, [r2, #0]
 8014ef8:	6854      	ldr	r4, [r2, #4]
 8014efa:	6890      	ldr	r0, [r2, #8]
 8014efc:	68d1      	ldr	r1, [r2, #12]
 8014efe:	601d      	str	r5, [r3, #0]
 8014f00:	605c      	str	r4, [r3, #4]
 8014f02:	6098      	str	r0, [r3, #8]
 8014f04:	60d9      	str	r1, [r3, #12]
 8014f06:	6915      	ldr	r5, [r2, #16]
 8014f08:	6954      	ldr	r4, [r2, #20]
 8014f0a:	6990      	ldr	r0, [r2, #24]
 8014f0c:	69d1      	ldr	r1, [r2, #28]
 8014f0e:	611d      	str	r5, [r3, #16]
 8014f10:	615c      	str	r4, [r3, #20]
 8014f12:	6198      	str	r0, [r3, #24]
 8014f14:	61d9      	str	r1, [r3, #28]
                serial.written = true;
 8014f16:	4b12      	ldr	r3, [pc, #72]	; (8014f60 <se3_flash_init+0x140>)
 8014f18:	2201      	movs	r2, #1
 8014f1a:	f883 2020 	strb.w	r2, [r3, #32]
	while (se3_flash_it_next(&it)) {
 8014f1e:	1d3b      	adds	r3, r7, #4
 8014f20:	4618      	mov	r0, r3
 8014f22:	f000 f84f 	bl	8014fc4 <se3_flash_it_next>
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d1ce      	bne.n	8014eca <se3_flash_init+0xaa>
            }
		}
	}
	if (it.pos > SE3_FLASH_INDEX_SIZE) {
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8014f32:	d902      	bls.n	8014f3a <se3_flash_init+0x11a>
		it.pos = SE3_FLASH_INDEX_SIZE;
 8014f34:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014f38:	613b      	str	r3, [r7, #16]
	}
	flash.first_free_pos = it.pos;
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	4a07      	ldr	r2, [pc, #28]	; (8014f5c <se3_flash_init+0x13c>)
 8014f3e:	6113      	str	r3, [r2, #16]

	return true;
 8014f40:	2301      	movs	r3, #1
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3720      	adds	r7, #32
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bdb0      	pop	{r4, r5, r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	08019ee8 	.word	0x08019ee8
 8014f50:	080c0000 	.word	0x080c0000
 8014f54:	080e0000 	.word	0x080e0000
 8014f58:	080e07ff 	.word	0x080e07ff
 8014f5c:	2000d6e8 	.word	0x2000d6e8
 8014f60:	20000f6c 	.word	0x20000f6c

08014f64 <se3_flash_it_write>:

bool se3_flash_it_write(se3_flash_it* it, uint16_t off, const uint8_t* data, uint16_t size)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	607a      	str	r2, [r7, #4]
 8014f6e:	461a      	mov	r2, r3
 8014f70:	460b      	mov	r3, r1
 8014f72:	817b      	strh	r3, [r7, #10]
 8014f74:	4613      	mov	r3, r2
 8014f76:	813b      	strh	r3, [r7, #8]
	if (off + size > 2 + it->size)return false;
 8014f78:	897a      	ldrh	r2, [r7, #10]
 8014f7a:	893b      	ldrh	r3, [r7, #8]
 8014f7c:	441a      	add	r2, r3
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	88db      	ldrh	r3, [r3, #6]
 8014f82:	3302      	adds	r3, #2
 8014f84:	429a      	cmp	r2, r3
 8014f86:	dd01      	ble.n	8014f8c <se3_flash_it_write+0x28>
 8014f88:	2300      	movs	r3, #0
 8014f8a:	e00a      	b.n	8014fa2 <se3_flash_it_write+0x3e>
    return flash_program((uint32_t)it->addr + off, data, size);
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	461a      	mov	r2, r3
 8014f92:	897b      	ldrh	r3, [r7, #10]
 8014f94:	4413      	add	r3, r2
 8014f96:	893a      	ldrh	r2, [r7, #8]
 8014f98:	6879      	ldr	r1, [r7, #4]
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7ff fdcc 	bl	8014b38 <flash_program>
 8014fa0:	4603      	mov	r3, r0
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}

08014faa <se3_flash_it_init>:

void se3_flash_it_init(se3_flash_it* it)
{
 8014faa:	b480      	push	{r7}
 8014fac:	b083      	sub	sp, #12
 8014fae:	af00      	add	r7, sp, #0
 8014fb0:	6078      	str	r0, [r7, #4]
	it->addr = NULL;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	601a      	str	r2, [r3, #0]
}
 8014fb8:	bf00      	nop
 8014fba:	370c      	adds	r7, #12
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc2:	4770      	bx	lr

08014fc4 <se3_flash_it_next>:

bool se3_flash_it_next(se3_flash_it* it)
{
 8014fc4:	b480      	push	{r7}
 8014fc6:	b087      	sub	sp, #28
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
	uint8_t type;
	const uint8_t* node;
	size_t pos2;
	if (it->addr == NULL) {
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d108      	bne.n	8014fe6 <se3_flash_it_next+0x22>
		it->pos = 0;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	60da      	str	r2, [r3, #12]
		it->addr = flash.data + 2;
 8014fda:	4b30      	ldr	r3, [pc, #192]	; (801509c <se3_flash_it_next+0xd8>)
 8014fdc:	68db      	ldr	r3, [r3, #12]
 8014fde:	1c9a      	adds	r2, r3, #2
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	601a      	str	r2, [r3, #0]
 8014fe4:	e04d      	b.n	8015082 <se3_flash_it_next+0xbe>
	}
	else {
		(it->pos)+=it->blocks;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	68db      	ldr	r3, [r3, #12]
 8014fea:	687a      	ldr	r2, [r7, #4]
 8014fec:	8912      	ldrh	r2, [r2, #8]
 8014fee:	441a      	add	r2, r3
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	60da      	str	r2, [r3, #12]
	}
	while (it->pos < SE3_FLASH_INDEX_SIZE) {
 8014ff4:	e045      	b.n	8015082 <se3_flash_it_next+0xbe>
		type = *(flash.index + it->pos);
 8014ff6:	4b29      	ldr	r3, [pc, #164]	; (801509c <se3_flash_it_next+0xd8>)
 8014ff8:	689a      	ldr	r2, [r3, #8]
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	4413      	add	r3, r2
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	74fb      	strb	r3, [r7, #19]
		if (type == 0xFF) return false;
 8015004:	7cfb      	ldrb	r3, [r7, #19]
 8015006:	2bff      	cmp	r3, #255	; 0xff
 8015008:	d101      	bne.n	801500e <se3_flash_it_next+0x4a>
 801500a:	2300      	movs	r3, #0
 801500c:	e03f      	b.n	801508e <se3_flash_it_next+0xca>
		if (type != 0xFE) {
 801500e:	7cfb      	ldrb	r3, [r7, #19]
 8015010:	2bfe      	cmp	r3, #254	; 0xfe
 8015012:	d031      	beq.n	8015078 <se3_flash_it_next+0xb4>
			node = flash.data + (it->pos) * SE3_FLASH_BLOCK_SIZE;
 8015014:	4b21      	ldr	r3, [pc, #132]	; (801509c <se3_flash_it_next+0xd8>)
 8015016:	68da      	ldr	r2, [r3, #12]
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	019b      	lsls	r3, r3, #6
 801501e:	4413      	add	r3, r2
 8015020:	60fb      	str	r3, [r7, #12]
			it->addr = node + 2;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	1c9a      	adds	r2, r3, #2
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	601a      	str	r2, [r3, #0]
            SE3_GET16(node, 0, it->size);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	3306      	adds	r3, #6
 801502e:	68fa      	ldr	r2, [r7, #12]
 8015030:	8812      	ldrh	r2, [r2, #0]
 8015032:	b292      	uxth	r2, r2
 8015034:	801a      	strh	r2, [r3, #0]
			it->type = type;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	7cfa      	ldrb	r2, [r7, #19]
 801503a:	711a      	strb	r2, [r3, #4]

			//count 'CONT' nodes after
			pos2 = it->pos + 1;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	68db      	ldr	r3, [r3, #12]
 8015040:	3301      	adds	r3, #1
 8015042:	617b      	str	r3, [r7, #20]
			while (pos2 < SE3_FLASH_INDEX_SIZE && *(flash.index + pos2) == 0xFE)pos2++;
 8015044:	e002      	b.n	801504c <se3_flash_it_next+0x88>
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	3301      	adds	r3, #1
 801504a:	617b      	str	r3, [r7, #20]
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8015052:	d206      	bcs.n	8015062 <se3_flash_it_next+0x9e>
 8015054:	4b11      	ldr	r3, [pc, #68]	; (801509c <se3_flash_it_next+0xd8>)
 8015056:	689a      	ldr	r2, [r3, #8]
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	4413      	add	r3, r2
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	2bfe      	cmp	r3, #254	; 0xfe
 8015060:	d0f1      	beq.n	8015046 <se3_flash_it_next+0x82>
			it->blocks = (uint16_t)(pos2 - it->pos);
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	b29a      	uxth	r2, r3
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	68db      	ldr	r3, [r3, #12]
 801506a:	b29b      	uxth	r3, r3
 801506c:	1ad3      	subs	r3, r2, r3
 801506e:	b29a      	uxth	r2, r3
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	811a      	strh	r2, [r3, #8]
			return true;
 8015074:	2301      	movs	r3, #1
 8015076:	e00a      	b.n	801508e <se3_flash_it_next+0xca>
		}
		(it->pos)++;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	1c5a      	adds	r2, r3, #1
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	60da      	str	r2, [r3, #12]
	while (it->pos < SE3_FLASH_INDEX_SIZE) {
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	68db      	ldr	r3, [r3, #12]
 8015086:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 801508a:	d3b4      	bcc.n	8014ff6 <se3_flash_it_next+0x32>
	}
	return false;
 801508c:	2300      	movs	r3, #0
}
 801508e:	4618      	mov	r0, r3
 8015090:	371c      	adds	r7, #28
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr
 801509a:	bf00      	nop
 801509c:	2000d6e8 	.word	0x2000d6e8

080150a0 <se3_flash_it_new>:
{
	return SE3_FLASH_SECTOR_SIZE - flash.used;
}

bool se3_flash_it_new(se3_flash_it* it, uint8_t type, uint16_t size)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b088      	sub	sp, #32
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	460b      	mov	r3, r1
 80150aa:	70fb      	strb	r3, [r7, #3]
 80150ac:	4613      	mov	r3, r2
 80150ae:	803b      	strh	r3, [r7, #0]
	size_t pos, nblocks;
	const uint8_t* node;
	size_t avail = SE3_FLASH_SECTOR_SIZE - flash.allocated;
 80150b0:	4b54      	ldr	r3, [pc, #336]	; (8015204 <se3_flash_it_new+0x164>)
 80150b2:	699b      	ldr	r3, [r3, #24]
 80150b4:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 80150b8:	61bb      	str	r3, [r7, #24]
	uint16_t size_on_flash = size + 2;
 80150ba:	883b      	ldrh	r3, [r7, #0]
 80150bc:	3302      	adds	r3, #2
 80150be:	82fb      	strh	r3, [r7, #22]
	if (size_on_flash > SE3_FLASH_NODE_MAX)return false;
 80150c0:	8afb      	ldrh	r3, [r7, #22]
 80150c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80150c6:	d901      	bls.n	80150cc <se3_flash_it_new+0x2c>
 80150c8:	2300      	movs	r3, #0
 80150ca:	e096      	b.n	80151fa <se3_flash_it_new+0x15a>
	if (size_on_flash > (SE3_FLASH_SECTOR_SIZE - flash.used)) {
 80150cc:	8afa      	ldrh	r2, [r7, #22]
 80150ce:	4b4d      	ldr	r3, [pc, #308]	; (8015204 <se3_flash_it_new+0x164>)
 80150d0:	695b      	ldr	r3, [r3, #20]
 80150d2:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 80150d6:	429a      	cmp	r2, r3
 80150d8:	d901      	bls.n	80150de <se3_flash_it_new+0x3e>
		return false;
 80150da:	2300      	movs	r3, #0
 80150dc:	e08d      	b.n	80151fa <se3_flash_it_new+0x15a>
	}
	if (size_on_flash > avail) {
 80150de:	8afb      	ldrh	r3, [r7, #22]
 80150e0:	69ba      	ldr	r2, [r7, #24]
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d209      	bcs.n	80150fa <se3_flash_it_new+0x5a>
		// swap sector
		if (!flash_swap()) {
 80150e6:	f7ff fd8f 	bl	8014c08 <flash_swap>
 80150ea:	4603      	mov	r3, r0
 80150ec:	f083 0301 	eor.w	r3, r3, #1
 80150f0:	b2db      	uxtb	r3, r3
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d001      	beq.n	80150fa <se3_flash_it_new+0x5a>
			return false;
 80150f6:	2300      	movs	r3, #0
 80150f8:	e07f      	b.n	80151fa <se3_flash_it_new+0x15a>
		}
	}
	if (flash.first_free_pos >= SE3_FLASH_INDEX_SIZE) {
 80150fa:	4b42      	ldr	r3, [pc, #264]	; (8015204 <se3_flash_it_new+0x164>)
 80150fc:	691b      	ldr	r3, [r3, #16]
 80150fe:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8015102:	d301      	bcc.n	8015108 <se3_flash_it_new+0x68>
		return false;
 8015104:	2300      	movs	r3, #0
 8015106:	e078      	b.n	80151fa <se3_flash_it_new+0x15a>
	}
	pos = flash.first_free_pos;
 8015108:	4b3e      	ldr	r3, [pc, #248]	; (8015204 <se3_flash_it_new+0x164>)
 801510a:	691b      	ldr	r3, [r3, #16]
 801510c:	613b      	str	r3, [r7, #16]
	node = flash.data + pos*SE3_FLASH_BLOCK_SIZE;
 801510e:	4b3d      	ldr	r3, [pc, #244]	; (8015204 <se3_flash_it_new+0x164>)
 8015110:	68da      	ldr	r2, [r3, #12]
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	019b      	lsls	r3, r3, #6
 8015116:	4413      	add	r3, r2
 8015118:	60fb      	str	r3, [r7, #12]

	nblocks = size_on_flash / SE3_FLASH_BLOCK_SIZE;
 801511a:	8afb      	ldrh	r3, [r7, #22]
 801511c:	099b      	lsrs	r3, r3, #6
 801511e:	b29b      	uxth	r3, r3
 8015120:	61fb      	str	r3, [r7, #28]
	if (size_on_flash % SE3_FLASH_BLOCK_SIZE)nblocks++;
 8015122:	8afb      	ldrh	r3, [r7, #22]
 8015124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015128:	b29b      	uxth	r3, r3
 801512a:	2b00      	cmp	r3, #0
 801512c:	d002      	beq.n	8015134 <se3_flash_it_new+0x94>
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	3301      	adds	r3, #1
 8015132:	61fb      	str	r3, [r7, #28]
	if (!flash_program((uint32_t)flash.index + pos, &type, 1)) {
 8015134:	4b33      	ldr	r3, [pc, #204]	; (8015204 <se3_flash_it_new+0x164>)
 8015136:	689b      	ldr	r3, [r3, #8]
 8015138:	461a      	mov	r2, r3
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	4413      	add	r3, r2
 801513e:	1cf9      	adds	r1, r7, #3
 8015140:	2201      	movs	r2, #1
 8015142:	4618      	mov	r0, r3
 8015144:	f7ff fcf8 	bl	8014b38 <flash_program>
 8015148:	4603      	mov	r3, r0
 801514a:	f083 0301 	eor.w	r3, r3, #1
 801514e:	b2db      	uxtb	r3, r3
 8015150:	2b00      	cmp	r3, #0
 8015152:	d001      	beq.n	8015158 <se3_flash_it_new+0xb8>
		return false;
 8015154:	2300      	movs	r3, #0
 8015156:	e050      	b.n	80151fa <se3_flash_it_new+0x15a>
	}
	flash.first_free_pos += 1;
 8015158:	4b2a      	ldr	r3, [pc, #168]	; (8015204 <se3_flash_it_new+0x164>)
 801515a:	691b      	ldr	r3, [r3, #16]
 801515c:	3301      	adds	r3, #1
 801515e:	4a29      	ldr	r2, [pc, #164]	; (8015204 <se3_flash_it_new+0x164>)
 8015160:	6113      	str	r3, [r2, #16]
	if (nblocks > 1) {
 8015162:	69fb      	ldr	r3, [r7, #28]
 8015164:	2b01      	cmp	r3, #1
 8015166:	d91a      	bls.n	801519e <se3_flash_it_new+0xfe>
		if (!flash_fill((uint32_t)flash.index + pos + 1, 0xFE, nblocks - 1)) {
 8015168:	4b26      	ldr	r3, [pc, #152]	; (8015204 <se3_flash_it_new+0x164>)
 801516a:	689b      	ldr	r3, [r3, #8]
 801516c:	461a      	mov	r2, r3
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	4413      	add	r3, r2
 8015172:	1c58      	adds	r0, r3, #1
 8015174:	69fb      	ldr	r3, [r7, #28]
 8015176:	3b01      	subs	r3, #1
 8015178:	461a      	mov	r2, r3
 801517a:	21fe      	movs	r1, #254	; 0xfe
 801517c:	f7ff fc80 	bl	8014a80 <flash_fill>
 8015180:	4603      	mov	r3, r0
 8015182:	f083 0301 	eor.w	r3, r3, #1
 8015186:	b2db      	uxtb	r3, r3
 8015188:	2b00      	cmp	r3, #0
 801518a:	d001      	beq.n	8015190 <se3_flash_it_new+0xf0>
			return false;
 801518c:	2300      	movs	r3, #0
 801518e:	e034      	b.n	80151fa <se3_flash_it_new+0x15a>
		}
		flash.first_free_pos += nblocks - 1;
 8015190:	4b1c      	ldr	r3, [pc, #112]	; (8015204 <se3_flash_it_new+0x164>)
 8015192:	691a      	ldr	r2, [r3, #16]
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	4413      	add	r3, r2
 8015198:	3b01      	subs	r3, #1
 801519a:	4a1a      	ldr	r2, [pc, #104]	; (8015204 <se3_flash_it_new+0x164>)
 801519c:	6113      	str	r3, [r2, #16]
	}
	
	if (!flash_program((uint32_t)node, (uint8_t*)&size, 2)) {
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	4639      	mov	r1, r7
 80151a2:	2202      	movs	r2, #2
 80151a4:	4618      	mov	r0, r3
 80151a6:	f7ff fcc7 	bl	8014b38 <flash_program>
 80151aa:	4603      	mov	r3, r0
 80151ac:	f083 0301 	eor.w	r3, r3, #1
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d001      	beq.n	80151ba <se3_flash_it_new+0x11a>
		return false;
 80151b6:	2300      	movs	r3, #0
 80151b8:	e01f      	b.n	80151fa <se3_flash_it_new+0x15a>
	}
	it->addr = node + 2;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	1c9a      	adds	r2, r3, #2
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	601a      	str	r2, [r3, #0]
	it->pos = pos;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	693a      	ldr	r2, [r7, #16]
 80151c6:	60da      	str	r2, [r3, #12]
	it->size = size;
 80151c8:	883a      	ldrh	r2, [r7, #0]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	80da      	strh	r2, [r3, #6]
	it->type = type;
 80151ce:	78fa      	ldrb	r2, [r7, #3]
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	711a      	strb	r2, [r3, #4]
	it->blocks = (uint16_t)nblocks;
 80151d4:	69fb      	ldr	r3, [r7, #28]
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	811a      	strh	r2, [r3, #8]

	flash.used += nblocks*SE3_FLASH_BLOCK_SIZE;
 80151dc:	4b09      	ldr	r3, [pc, #36]	; (8015204 <se3_flash_it_new+0x164>)
 80151de:	695a      	ldr	r2, [r3, #20]
 80151e0:	69fb      	ldr	r3, [r7, #28]
 80151e2:	019b      	lsls	r3, r3, #6
 80151e4:	4413      	add	r3, r2
 80151e6:	4a07      	ldr	r2, [pc, #28]	; (8015204 <se3_flash_it_new+0x164>)
 80151e8:	6153      	str	r3, [r2, #20]
	flash.allocated += nblocks*SE3_FLASH_BLOCK_SIZE;
 80151ea:	4b06      	ldr	r3, [pc, #24]	; (8015204 <se3_flash_it_new+0x164>)
 80151ec:	699a      	ldr	r2, [r3, #24]
 80151ee:	69fb      	ldr	r3, [r7, #28]
 80151f0:	019b      	lsls	r3, r3, #6
 80151f2:	4413      	add	r3, r2
 80151f4:	4a03      	ldr	r2, [pc, #12]	; (8015204 <se3_flash_it_new+0x164>)
 80151f6:	6193      	str	r3, [r2, #24]

	return true;
 80151f8:	2301      	movs	r3, #1
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3720      	adds	r7, #32
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
 8015202:	bf00      	nop
 8015204:	2000d6e8 	.word	0x2000d6e8

08015208 <se3_flash_it_delete>:
	flash.used -= blocks*SE3_FLASH_BLOCK_SIZE;
	return true;
}

bool se3_flash_it_delete(se3_flash_it* it)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
	if (it->pos + it->blocks > SE3_FLASH_INDEX_SIZE) {
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	68db      	ldr	r3, [r3, #12]
 8015214:	687a      	ldr	r2, [r7, #4]
 8015216:	8912      	ldrh	r2, [r2, #8]
 8015218:	4413      	add	r3, r2
 801521a:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 801521e:	d901      	bls.n	8015224 <se3_flash_it_delete+0x1c>
		return false;
 8015220:	2300      	movs	r3, #0
 8015222:	e01c      	b.n	801525e <se3_flash_it_delete+0x56>
	}
	if (!flash_zero((uint32_t)flash.index + it->pos, it->blocks)) {
 8015224:	4b10      	ldr	r3, [pc, #64]	; (8015268 <se3_flash_it_delete+0x60>)
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	461a      	mov	r2, r3
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	68db      	ldr	r3, [r3, #12]
 801522e:	441a      	add	r2, r3
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	891b      	ldrh	r3, [r3, #8]
 8015234:	4619      	mov	r1, r3
 8015236:	4610      	mov	r0, r2
 8015238:	f7ff fc50 	bl	8014adc <flash_zero>
 801523c:	4603      	mov	r3, r0
 801523e:	f083 0301 	eor.w	r3, r3, #1
 8015242:	b2db      	uxtb	r3, r3
 8015244:	2b00      	cmp	r3, #0
 8015246:	d001      	beq.n	801524c <se3_flash_it_delete+0x44>
		return false;
 8015248:	2300      	movs	r3, #0
 801524a:	e008      	b.n	801525e <se3_flash_it_delete+0x56>
	}
	flash.used -= it->blocks*SE3_FLASH_BLOCK_SIZE;
 801524c:	4b06      	ldr	r3, [pc, #24]	; (8015268 <se3_flash_it_delete+0x60>)
 801524e:	695b      	ldr	r3, [r3, #20]
 8015250:	687a      	ldr	r2, [r7, #4]
 8015252:	8912      	ldrh	r2, [r2, #8]
 8015254:	0192      	lsls	r2, r2, #6
 8015256:	1a9b      	subs	r3, r3, r2
 8015258:	4a03      	ldr	r2, [pc, #12]	; (8015268 <se3_flash_it_delete+0x60>)
 801525a:	6153      	str	r3, [r2, #20]
	return true;
 801525c:	2301      	movs	r3, #1
}
 801525e:	4618      	mov	r0, r3
 8015260:	3708      	adds	r7, #8
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	2000d6e8 	.word	0x2000d6e8

0801526c <se3_flash_bootmode_reset>:

bool se3_flash_bootmode_reset(uint32_t addr, size_t size){
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	6039      	str	r1, [r7, #0]
	return flash_zero(addr, size);
 8015276:	6839      	ldr	r1, [r7, #0]
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f7ff fc2f 	bl	8014adc <flash_zero>
 801527e:	4603      	mov	r3, r0
}
 8015280:	4618      	mov	r0, r3
 8015282:	3708      	adds	r7, #8
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <se3_key_find>:
	SE3_KEY_OFFSET_DATALEN = 4,
	SE3_KEY_OFFSET_DATA = 6
};

bool se3_key_find(uint32_t id, se3_flash_it* it)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b084      	sub	sp, #16
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	6039      	str	r1, [r7, #0]
    uint32_t key_id = 0;
 8015292:	2300      	movs	r3, #0
 8015294:	60fb      	str	r3, [r7, #12]
	se3_flash_it_init(it);
 8015296:	6838      	ldr	r0, [r7, #0]
 8015298:	f7ff fe87 	bl	8014faa <se3_flash_it_init>
	while (se3_flash_it_next(it)) {
 801529c:	e00d      	b.n	80152ba <se3_key_find+0x32>
		if (it->type == SE3_TYPE_KEY) {
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	791b      	ldrb	r3, [r3, #4]
 80152a2:	2b64      	cmp	r3, #100	; 0x64
 80152a4:	d109      	bne.n	80152ba <se3_key_find+0x32>
            SE3_GET32(it->addr, SE3_KEY_OFFSET_ID, key_id);
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	60fb      	str	r3, [r7, #12]
			if (key_id == id) {
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	429a      	cmp	r2, r3
 80152b4:	d101      	bne.n	80152ba <se3_key_find+0x32>
				return true;
 80152b6:	2301      	movs	r3, #1
 80152b8:	e006      	b.n	80152c8 <se3_key_find+0x40>
	while (se3_flash_it_next(it)) {
 80152ba:	6838      	ldr	r0, [r7, #0]
 80152bc:	f7ff fe82 	bl	8014fc4 <se3_flash_it_next>
 80152c0:	4603      	mov	r3, r0
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d1eb      	bne.n	801529e <se3_key_find+0x16>
			}
		}
	}
	return false;
 80152c6:	2300      	movs	r3, #0
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	3710      	adds	r7, #16
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}

080152d0 <se3_key_new>:

bool se3_key_new(se3_flash_it* it, se3_flash_key* key)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
 80152d8:	6039      	str	r1, [r7, #0]
	uint16_t size = (SE3_FLASH_KEY_SIZE_HEADER + key->data_size);
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	889b      	ldrh	r3, [r3, #4]
 80152de:	3306      	adds	r3, #6
 80152e0:	81fb      	strh	r3, [r7, #14]
    if (size > SE3_FLASH_NODE_DATA_MAX) {
 80152e2:	89fb      	ldrh	r3, [r7, #14]
 80152e4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80152e8:	4293      	cmp	r3, r2
 80152ea:	d901      	bls.n	80152f0 <se3_key_new+0x20>
        return false;
 80152ec:	2300      	movs	r3, #0
 80152ee:	e012      	b.n	8015316 <se3_key_new+0x46>
    }
	if (!se3_flash_it_new(it, SE3_TYPE_KEY, size)) {
 80152f0:	89fb      	ldrh	r3, [r7, #14]
 80152f2:	461a      	mov	r2, r3
 80152f4:	2164      	movs	r1, #100	; 0x64
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f7ff fed2 	bl	80150a0 <se3_flash_it_new>
 80152fc:	4603      	mov	r3, r0
 80152fe:	f083 0301 	eor.w	r3, r3, #1
 8015302:	b2db      	uxtb	r3, r3
 8015304:	2b00      	cmp	r3, #0
 8015306:	d001      	beq.n	801530c <se3_key_new+0x3c>
		SE3_TRACE(("E key_new cannot allocate flash block\n"));
		return false;
 8015308:	2300      	movs	r3, #0
 801530a:	e004      	b.n	8015316 <se3_key_new+0x46>
	}
	return se3_key_write(it, key);
 801530c:	6839      	ldr	r1, [r7, #0]
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f000 f865 	bl	80153de <se3_key_write>
 8015314:	4603      	mov	r3, r0
}
 8015316:	4618      	mov	r0, r3
 8015318:	3710      	adds	r7, #16
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}

0801531e <se3_key_read>:

void se3_key_read(se3_flash_it* it, se3_flash_key* key)
{
 801531e:	b580      	push	{r7, lr}
 8015320:	b082      	sub	sp, #8
 8015322:	af00      	add	r7, sp, #0
 8015324:	6078      	str	r0, [r7, #4]
 8015326:	6039      	str	r1, [r7, #0]
    SE3_GET32(it->addr, SE3_KEY_OFFSET_ID, key->id);
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	6812      	ldr	r2, [r2, #0]
 801532e:	6812      	ldr	r2, [r2, #0]
 8015330:	601a      	str	r2, [r3, #0]
    SE3_GET16(it->addr, SE3_KEY_OFFSET_DATALEN, key->data_size);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	3304      	adds	r3, #4
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	6812      	ldr	r2, [r2, #0]
 801533a:	3204      	adds	r2, #4
 801533c:	8812      	ldrh	r2, [r2, #0]
 801533e:	b292      	uxth	r2, r2
 8015340:	801a      	strh	r2, [r3, #0]
	if (key->data) {
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	689b      	ldr	r3, [r3, #8]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d00a      	beq.n	8015360 <se3_key_read+0x42>
		memcpy(key->data, it->addr + 12, key->data_size);
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	6898      	ldr	r0, [r3, #8]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	f103 010c 	add.w	r1, r3, #12
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	889b      	ldrh	r3, [r3, #4]
 801535a:	461a      	mov	r2, r3
 801535c:	f002 f840 	bl	80173e0 <memcpy>
	}
}
 8015360:	bf00      	nop
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <se3_key_equal>:

bool se3_key_equal(se3_flash_it* it, se3_flash_key* key)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	6039      	str	r1, [r7, #0]
	uint32_t u32tmp = 0;
 8015372:	2300      	movs	r3, #0
 8015374:	60fb      	str	r3, [r7, #12]
	uint16_t u16tmp = 0;
 8015376:	2300      	movs	r3, #0
 8015378:	817b      	strh	r3, [r7, #10]
	if (key->data == NULL){
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	689b      	ldr	r3, [r3, #8]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d101      	bne.n	8015386 <se3_key_equal+0x1e>
		return false;
 8015382:	2300      	movs	r3, #0
 8015384:	e027      	b.n	80153d6 <se3_key_equal+0x6e>
	}
	SE3_GET32(it->addr, SE3_KEY_OFFSET_ID, u32tmp);
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	60fb      	str	r3, [r7, #12]
	if (u32tmp != key->id){	return false; }
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	681a      	ldr	r2, [r3, #0]
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	429a      	cmp	r2, r3
 8015396:	d001      	beq.n	801539c <se3_key_equal+0x34>
 8015398:	2300      	movs	r3, #0
 801539a:	e01c      	b.n	80153d6 <se3_key_equal+0x6e>
	SE3_GET16(it->addr, SE3_KEY_OFFSET_DATALEN, u16tmp);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	3304      	adds	r3, #4
 80153a2:	881b      	ldrh	r3, [r3, #0]
 80153a4:	b29b      	uxth	r3, r3
 80153a6:	817b      	strh	r3, [r7, #10]
	if (u16tmp != key->data_size){	return false; }
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	889a      	ldrh	r2, [r3, #4]
 80153ac:	897b      	ldrh	r3, [r7, #10]
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d001      	beq.n	80153b6 <se3_key_equal+0x4e>
 80153b2:	2300      	movs	r3, #0
 80153b4:	e00f      	b.n	80153d6 <se3_key_equal+0x6e>
	if (memcmp(it->addr + SE3_KEY_OFFSET_DATA, key->data, key->data_size)) {
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	1d98      	adds	r0, r3, #6
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	6899      	ldr	r1, [r3, #8]
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	889b      	ldrh	r3, [r3, #4]
 80153c4:	461a      	mov	r2, r3
 80153c6:	f001 fffd 	bl	80173c4 <memcmp>
 80153ca:	4603      	mov	r3, r0
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d001      	beq.n	80153d4 <se3_key_equal+0x6c>
		return false;
 80153d0:	2300      	movs	r3, #0
 80153d2:	e000      	b.n	80153d6 <se3_key_equal+0x6e>
	}
	return true;
 80153d4:	2301      	movs	r3, #1
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	3710      	adds	r7, #16
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}

080153de <se3_key_write>:

bool se3_key_write(se3_flash_it* it, se3_flash_key* key)
{
 80153de:	b580      	push	{r7, lr}
 80153e0:	b084      	sub	sp, #16
 80153e2:	af00      	add	r7, sp, #0
 80153e4:	6078      	str	r0, [r7, #4]
 80153e6:	6039      	str	r1, [r7, #0]
	bool success = false;
 80153e8:	2300      	movs	r3, #0
 80153ea:	73fb      	strb	r3, [r7, #15]
	do {
		if (!se3_flash_it_write(it, SE3_KEY_OFFSET_ID, (uint8_t*)&(key->id), 4)) { // id is uint32_t
 80153ec:	683a      	ldr	r2, [r7, #0]
 80153ee:	2304      	movs	r3, #4
 80153f0:	2100      	movs	r1, #0
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f7ff fdb6 	bl	8014f64 <se3_flash_it_write>
 80153f8:	4603      	mov	r3, r0
 80153fa:	f083 0301 	eor.w	r3, r3, #1
 80153fe:	b2db      	uxtb	r3, r3
 8015400:	2b00      	cmp	r3, #0
 8015402:	d121      	bne.n	8015448 <se3_key_write+0x6a>
			break;
		}
		if (!se3_flash_it_write(it, SE3_KEY_OFFSET_DATALEN, (uint8_t*)&(key->data_size), 2)) { // datalen is uint16_t
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	1d1a      	adds	r2, r3, #4
 8015408:	2302      	movs	r3, #2
 801540a:	2104      	movs	r1, #4
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f7ff fda9 	bl	8014f64 <se3_flash_it_write>
 8015412:	4603      	mov	r3, r0
 8015414:	f083 0301 	eor.w	r3, r3, #1
 8015418:	b2db      	uxtb	r3, r3
 801541a:	2b00      	cmp	r3, #0
 801541c:	d116      	bne.n	801544c <se3_key_write+0x6e>
			break;
		}
		if (key->data_size) {
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	889b      	ldrh	r3, [r3, #4]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d00d      	beq.n	8015442 <se3_key_write+0x64>
			if (!se3_flash_it_write(it, SE3_KEY_OFFSET_DATA, key->data, key->data_size)) {
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	689a      	ldr	r2, [r3, #8]
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	889b      	ldrh	r3, [r3, #4]
 801542e:	2106      	movs	r1, #6
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f7ff fd97 	bl	8014f64 <se3_flash_it_write>
 8015436:	4603      	mov	r3, r0
 8015438:	f083 0301 	eor.w	r3, r3, #1
 801543c:	b2db      	uxtb	r3, r3
 801543e:	2b00      	cmp	r3, #0
 8015440:	d106      	bne.n	8015450 <se3_key_write+0x72>
				break;
			}
		}
		success = true;
 8015442:	2301      	movs	r3, #1
 8015444:	73fb      	strb	r3, [r7, #15]
 8015446:	e004      	b.n	8015452 <se3_key_write+0x74>
			break;
 8015448:	bf00      	nop
 801544a:	e002      	b.n	8015452 <se3_key_write+0x74>
			break;
 801544c:	bf00      	nop
 801544e:	e000      	b.n	8015452 <se3_key_write+0x74>
				break;
 8015450:	bf00      	nop
	} while (0);

	if (!success) {
        SE3_TRACE(("[se3_key_write] cannot write to flash block\n"));
	}
	return success;
 8015452:	7bfb      	ldrb	r3, [r7, #15]
}
 8015454:	4618      	mov	r0, r3
 8015456:	3710      	adds	r7, #16
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <se3_mem_reset>:
#define SE3_MEM_INFO_MAKE(id, valid) ((id) | ((valid)?(1):(0)) << 15 )
#define SE3_MEM_INFO_ISVALID(info) SE3_BIT_TEST(info, 15)
#define SE3_MEM_INFO_ID(info) ((info) & ~(1<<15))

void se3_mem_reset(se3_mem* mem)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
	size_t i;
	uint16_t tmp;
    mem->used = 0;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2200      	movs	r2, #0
 8015468:	611a      	str	r2, [r3, #16]
    memset(mem->dat, 0, (mem->dat_size)*SE3_MEM_BLOCK);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	6898      	ldr	r0, [r3, #8]
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	68db      	ldr	r3, [r3, #12]
 8015472:	015b      	lsls	r3, r3, #5
 8015474:	461a      	mov	r2, r3
 8015476:	2100      	movs	r1, #0
 8015478:	f001 ffda 	bl	8017430 <memset>
	
	for (i = 0; i < mem->max_count; i++) {
 801547c:	2300      	movs	r3, #0
 801547e:	60fb      	str	r3, [r7, #12]
 8015480:	e009      	b.n	8015496 <se3_mem_reset+0x3a>
		mem->ptr[i] = NULL;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	685a      	ldr	r2, [r3, #4]
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	009b      	lsls	r3, r3, #2
 801548a:	4413      	add	r3, r2
 801548c:	2200      	movs	r2, #0
 801548e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < mem->max_count; i++) {
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	3301      	adds	r3, #1
 8015494:	60fb      	str	r3, [r7, #12]
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	68fa      	ldr	r2, [r7, #12]
 801549c:	429a      	cmp	r2, r3
 801549e:	d3f0      	bcc.n	8015482 <se3_mem_reset+0x26>
	}

    // first entry is an invalid entry filling the whole buffer
    tmp = (uint16_t)mem->dat_size;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	68db      	ldr	r3, [r3, #12]
 80154a4:	b29b      	uxth	r3, r3
 80154a6:	817b      	strh	r3, [r7, #10]
    SE3_MEM_SIZE_SET(mem->dat, tmp);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	689b      	ldr	r3, [r3, #8]
 80154ac:	897a      	ldrh	r2, [r7, #10]
 80154ae:	801a      	strh	r2, [r3, #0]
    tmp = SE3_MEM_INFO_MAKE(0, 0);
 80154b0:	2300      	movs	r3, #0
 80154b2:	817b      	strh	r3, [r7, #10]
    SE3_MEM_INFO_SET(mem->dat, tmp);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	689b      	ldr	r3, [r3, #8]
 80154b8:	3302      	adds	r3, #2
 80154ba:	897a      	ldrh	r2, [r7, #10]
 80154bc:	801a      	strh	r2, [r3, #0]
}
 80154be:	bf00      	nop
 80154c0:	3710      	adds	r7, #16
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}

080154c6 <se3_mem_init>:

void se3_mem_init(se3_mem* mem, size_t index_size, uint8_t** index, size_t buf_size, uint8_t* buf)
{
 80154c6:	b580      	push	{r7, lr}
 80154c8:	b086      	sub	sp, #24
 80154ca:	af00      	add	r7, sp, #0
 80154cc:	60f8      	str	r0, [r7, #12]
 80154ce:	60b9      	str	r1, [r7, #8]
 80154d0:	607a      	str	r2, [r7, #4]
 80154d2:	603b      	str	r3, [r7, #0]
    uint16_t nblocks;
	mem->max_count = index_size;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	68ba      	ldr	r2, [r7, #8]
 80154d8:	601a      	str	r2, [r3, #0]
	mem->ptr = index;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	687a      	ldr	r2, [r7, #4]
 80154de:	605a      	str	r2, [r3, #4]

    nblocks = (uint16_t)(buf_size / SE3_MEM_BLOCK);
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	095b      	lsrs	r3, r3, #5
 80154e4:	82fb      	strh	r3, [r7, #22]
    mem->dat_size = nblocks;
 80154e6:	8afa      	ldrh	r2, [r7, #22]
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	60da      	str	r2, [r3, #12]
    mem->dat = buf;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	6a3a      	ldr	r2, [r7, #32]
 80154f0:	609a      	str	r2, [r3, #8]

    se3_mem_reset(mem);
 80154f2:	68f8      	ldr	r0, [r7, #12]
 80154f4:	f7ff ffb2 	bl	801545c <se3_mem_reset>
}
 80154f8:	bf00      	nop
 80154fa:	3718      	adds	r7, #24
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}

08015500 <se3_mem_compact>:

static void se3_mem_compact(uint8_t* p, uint8_t* end)
{
 8015500:	b480      	push	{r7}
 8015502:	b087      	sub	sp, #28
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	6039      	str	r1, [r7, #0]
	uint8_t* p2 = p;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	617b      	str	r3, [r7, #20]
	bool empty = false;
 801550e:	2300      	movs	r3, #0
 8015510:	74fb      	strb	r3, [r7, #19]
    uint16_t size;
    uint16_t info;

	while (p2 < end) {
 8015512:	e014      	b.n	801553e <se3_mem_compact+0x3e>
        SE3_MEM_INFO_GET(p2, info);
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	3302      	adds	r3, #2
 8015518:	881b      	ldrh	r3, [r3, #0]
 801551a:	b29b      	uxth	r3, r3
 801551c:	81fb      	strh	r3, [r7, #14]
        if (SE3_MEM_INFO_ISVALID(info)) {
 801551e:	89fb      	ldrh	r3, [r7, #14]
 8015520:	b21b      	sxth	r3, r3
 8015522:	2b00      	cmp	r3, #0
 8015524:	db10      	blt.n	8015548 <se3_mem_compact+0x48>
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	881b      	ldrh	r3, [r3, #0]
 801552a:	b29b      	uxth	r3, r3
            break;
        }
        SE3_MEM_SIZE_GET(p2, size);
 801552c:	823b      	strh	r3, [r7, #16]
        p2 += size*SE3_MEM_BLOCK;
 801552e:	8a3b      	ldrh	r3, [r7, #16]
 8015530:	015b      	lsls	r3, r3, #5
 8015532:	461a      	mov	r2, r3
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	4413      	add	r3, r2
 8015538:	617b      	str	r3, [r7, #20]
		empty = true;
 801553a:	2301      	movs	r3, #1
 801553c:	74fb      	strb	r3, [r7, #19]
	while (p2 < end) {
 801553e:	697a      	ldr	r2, [r7, #20]
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	429a      	cmp	r2, r3
 8015544:	d3e6      	bcc.n	8015514 <se3_mem_compact+0x14>
 8015546:	e000      	b.n	801554a <se3_mem_compact+0x4a>
            break;
 8015548:	bf00      	nop
	}
	if (empty) {
 801554a:	7cfb      	ldrb	r3, [r7, #19]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d008      	beq.n	8015562 <se3_mem_compact+0x62>
        size = (uint16_t)(((uint32_t)(p2 - p)) / SE3_MEM_BLOCK);
 8015550:	697a      	ldr	r2, [r7, #20]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	1ad3      	subs	r3, r2, r3
 8015556:	095b      	lsrs	r3, r3, #5
 8015558:	b29b      	uxth	r3, r3
 801555a:	823b      	strh	r3, [r7, #16]
 801555c:	8a3a      	ldrh	r2, [r7, #16]
		SE3_MEM_SIZE_SET(p, size);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	801a      	strh	r2, [r3, #0]
	}
}
 8015562:	bf00      	nop
 8015564:	371c      	adds	r7, #28
 8015566:	46bd      	mov	sp, r7
 8015568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556c:	4770      	bx	lr

0801556e <se3_mem_defrag>:

static uint8_t* se3_mem_defrag(se3_mem* mem)
{
 801556e:	b580      	push	{r7, lr}
 8015570:	b088      	sub	sp, #32
 8015572:	af00      	add	r7, sp, #0
 8015574:	6078      	str	r0, [r7, #4]
	uint8_t* p1, *p2;
	uint16_t p2_size;
	bool p2_valid;
	uint16_t id;
	uint8_t* end = mem->dat + mem->dat_size*SE3_MEM_BLOCK;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	689a      	ldr	r2, [r3, #8]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	68db      	ldr	r3, [r3, #12]
 801557e:	015b      	lsls	r3, r3, #5
 8015580:	4413      	add	r3, r2
 8015582:	617b      	str	r3, [r7, #20]
    uint16_t info, size;

	//find first free block
	p1 = mem->dat;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	689b      	ldr	r3, [r3, #8]
 8015588:	61fb      	str	r3, [r7, #28]
	while (p1 < end) {
 801558a:	e012      	b.n	80155b2 <se3_mem_defrag+0x44>
        SE3_MEM_INFO_GET(p1, info);
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	3302      	adds	r3, #2
 8015590:	881b      	ldrh	r3, [r3, #0]
 8015592:	b29b      	uxth	r3, r3
 8015594:	81bb      	strh	r3, [r7, #12]
		if (!SE3_MEM_INFO_ISVALID(info)) {
 8015596:	89bb      	ldrh	r3, [r7, #12]
 8015598:	b21b      	sxth	r3, r3
 801559a:	2b00      	cmp	r3, #0
 801559c:	da0e      	bge.n	80155bc <se3_mem_defrag+0x4e>
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	881b      	ldrh	r3, [r3, #0]
 80155a2:	b29b      	uxth	r3, r3
			break;
		}
        SE3_MEM_SIZE_GET(p1, size);
 80155a4:	817b      	strh	r3, [r7, #10]
        p1 += size*SE3_MEM_BLOCK;
 80155a6:	897b      	ldrh	r3, [r7, #10]
 80155a8:	015b      	lsls	r3, r3, #5
 80155aa:	461a      	mov	r2, r3
 80155ac:	69fb      	ldr	r3, [r7, #28]
 80155ae:	4413      	add	r3, r2
 80155b0:	61fb      	str	r3, [r7, #28]
	while (p1 < end) {
 80155b2:	69fa      	ldr	r2, [r7, #28]
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d3e8      	bcc.n	801558c <se3_mem_defrag+0x1e>
 80155ba:	e000      	b.n	80155be <se3_mem_defrag+0x50>
			break;
 80155bc:	bf00      	nop
	}
	if (p1 >= end) {
 80155be:	69fa      	ldr	r2, [r7, #28]
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d301      	bcc.n	80155ca <se3_mem_defrag+0x5c>
		return p1;
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	e077      	b.n	80156ba <se3_mem_defrag+0x14c>
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	881b      	ldrh	r3, [r3, #0]
 80155ce:	b29b      	uxth	r3, r3
	}

    SE3_MEM_SIZE_GET(p1, size);
 80155d0:	817b      	strh	r3, [r7, #10]
	p2 = p1 + size*SE3_MEM_BLOCK;
 80155d2:	897b      	ldrh	r3, [r7, #10]
 80155d4:	015b      	lsls	r3, r3, #5
 80155d6:	461a      	mov	r2, r3
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	4413      	add	r3, r2
 80155dc:	61bb      	str	r3, [r7, #24]
	while(p2<end) {
 80155de:	e026      	b.n	801562e <se3_mem_defrag+0xc0>
 80155e0:	69bb      	ldr	r3, [r7, #24]
 80155e2:	881b      	ldrh	r3, [r3, #0]
 80155e4:	b29b      	uxth	r3, r3
        SE3_MEM_SIZE_GET(p2, p2_size);
 80155e6:	81fb      	strh	r3, [r7, #14]
        SE3_MEM_INFO_GET(p2, info);
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	3302      	adds	r3, #2
 80155ec:	881b      	ldrh	r3, [r3, #0]
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	81bb      	strh	r3, [r7, #12]
        p2_valid = SE3_MEM_INFO_ISVALID(info);
 80155f2:	89bb      	ldrh	r3, [r7, #12]
 80155f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	bf14      	ite	ne
 80155fc:	2301      	movne	r3, #1
 80155fe:	2300      	moveq	r3, #0
 8015600:	747b      	strb	r3, [r7, #17]
		if ( p2_valid ) {
 8015602:	7c7b      	ldrb	r3, [r7, #17]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d00c      	beq.n	8015622 <se3_mem_defrag+0xb4>
			memmove(p1, p2, p2_size*SE3_MEM_BLOCK);
 8015608:	89fb      	ldrh	r3, [r7, #14]
 801560a:	015b      	lsls	r3, r3, #5
 801560c:	461a      	mov	r2, r3
 801560e:	69b9      	ldr	r1, [r7, #24]
 8015610:	69f8      	ldr	r0, [r7, #28]
 8015612:	f001 fef3 	bl	80173fc <memmove>
			p1 += p2_size*SE3_MEM_BLOCK;
 8015616:	89fb      	ldrh	r3, [r7, #14]
 8015618:	015b      	lsls	r3, r3, #5
 801561a:	461a      	mov	r2, r3
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	4413      	add	r3, r2
 8015620:	61fb      	str	r3, [r7, #28]
		}
		p2 += p2_size*SE3_MEM_BLOCK;
 8015622:	89fb      	ldrh	r3, [r7, #14]
 8015624:	015b      	lsls	r3, r3, #5
 8015626:	461a      	mov	r2, r3
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	4413      	add	r3, r2
 801562c:	61bb      	str	r3, [r7, #24]
	while(p2<end) {
 801562e:	69ba      	ldr	r2, [r7, #24]
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	429a      	cmp	r2, r3
 8015634:	d3d4      	bcc.n	80155e0 <se3_mem_defrag+0x72>
	}
	if (p1 < end) {
 8015636:	69fa      	ldr	r2, [r7, #28]
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	429a      	cmp	r2, r3
 801563c:	d216      	bcs.n	801566c <se3_mem_defrag+0xfe>
        size = (uint16_t)(((uint32_t)(end - p1))/SE3_MEM_BLOCK);
 801563e:	697a      	ldr	r2, [r7, #20]
 8015640:	69fb      	ldr	r3, [r7, #28]
 8015642:	1ad3      	subs	r3, r2, r3
 8015644:	095b      	lsrs	r3, r3, #5
 8015646:	b29b      	uxth	r3, r3
 8015648:	817b      	strh	r3, [r7, #10]
 801564a:	897a      	ldrh	r2, [r7, #10]
		SE3_MEM_SIZE_SET(p1, size);
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	801a      	strh	r2, [r3, #0]

        // clear valid
        SE3_MEM_INFO_GET(p1, info);
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	3302      	adds	r3, #2
 8015654:	881b      	ldrh	r3, [r3, #0]
 8015656:	b29b      	uxth	r3, r3
 8015658:	81bb      	strh	r3, [r7, #12]
        info = SE3_MEM_INFO_MAKE(SE3_MEM_INFO_ID(info), 0);
 801565a:	89bb      	ldrh	r3, [r7, #12]
 801565c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015660:	b29b      	uxth	r3, r3
 8015662:	81bb      	strh	r3, [r7, #12]
        SE3_MEM_INFO_SET(p1, info);
 8015664:	69fb      	ldr	r3, [r7, #28]
 8015666:	3302      	adds	r3, #2
 8015668:	89ba      	ldrh	r2, [r7, #12]
 801566a:	801a      	strh	r2, [r3, #0]
	}
	
	//rebuild ptr table
	
	p2 = mem->dat;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	689b      	ldr	r3, [r3, #8]
 8015670:	61bb      	str	r3, [r7, #24]
	while (p2 < end) {
 8015672:	e01d      	b.n	80156b0 <se3_mem_defrag+0x142>
        SE3_MEM_INFO_GET(p2, info);
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	3302      	adds	r3, #2
 8015678:	881b      	ldrh	r3, [r3, #0]
 801567a:	b29b      	uxth	r3, r3
 801567c:	81bb      	strh	r3, [r7, #12]
		if (SE3_MEM_INFO_ISVALID(info)) {
 801567e:	89bb      	ldrh	r3, [r7, #12]
 8015680:	b21b      	sxth	r3, r3
 8015682:	2b00      	cmp	r3, #0
 8015684:	da0a      	bge.n	801569c <se3_mem_defrag+0x12e>
			id = SE3_MEM_INFO_ID(info);
 8015686:	89bb      	ldrh	r3, [r7, #12]
 8015688:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801568c:	827b      	strh	r3, [r7, #18]
			mem->ptr[id] = p2;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	685a      	ldr	r2, [r3, #4]
 8015692:	8a7b      	ldrh	r3, [r7, #18]
 8015694:	009b      	lsls	r3, r3, #2
 8015696:	4413      	add	r3, r2
 8015698:	69ba      	ldr	r2, [r7, #24]
 801569a:	601a      	str	r2, [r3, #0]
 801569c:	69bb      	ldr	r3, [r7, #24]
 801569e:	881b      	ldrh	r3, [r3, #0]
 80156a0:	b29b      	uxth	r3, r3
		}
        SE3_MEM_SIZE_GET(p2, size);
 80156a2:	817b      	strh	r3, [r7, #10]
        p2 += size*SE3_MEM_BLOCK;
 80156a4:	897b      	ldrh	r3, [r7, #10]
 80156a6:	015b      	lsls	r3, r3, #5
 80156a8:	461a      	mov	r2, r3
 80156aa:	69bb      	ldr	r3, [r7, #24]
 80156ac:	4413      	add	r3, r2
 80156ae:	61bb      	str	r3, [r7, #24]
	while (p2 < end) {
 80156b0:	69ba      	ldr	r2, [r7, #24]
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d3dd      	bcc.n	8015674 <se3_mem_defrag+0x106>
	}

	//return first empty block;
	return p1;
 80156b8:	69fb      	ldr	r3, [r7, #28]
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	3720      	adds	r7, #32
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}

080156c2 <se3_mem_alloc>:

int32_t se3_mem_alloc(se3_mem* mem, size_t size)
{
 80156c2:	b580      	push	{r7, lr}
 80156c4:	b08a      	sub	sp, #40	; 0x28
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	6078      	str	r0, [r7, #4]
 80156ca:	6039      	str	r1, [r7, #0]
	uint8_t* p = mem->dat, *p2;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	689b      	ldr	r3, [r3, #8]
 80156d0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t* dat_end = mem->dat + (mem->dat_size)*SE3_MEM_BLOCK;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	689a      	ldr	r2, [r3, #8]
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	68db      	ldr	r3, [r3, #12]
 80156da:	015b      	lsls	r3, r3, #5
 80156dc:	4413      	add	r3, r2
 80156de:	61fb      	str	r3, [r7, #28]
    uint16_t u16tmp;
    uint16_t nblocks;
	bool valid;

	// header size
	size += SE3_MEM_HEADER;
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	3304      	adds	r3, #4
 80156e4:	603b      	str	r3, [r7, #0]

    // number of blocks
    nblocks = (uint16_t)(size / SE3_MEM_BLOCK);
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	095b      	lsrs	r3, r3, #5
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	81bb      	strh	r3, [r7, #12]
    if (size % SE3_MEM_BLOCK != 0) {
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	f003 031f 	and.w	r3, r3, #31
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d003      	beq.n	8015700 <se3_mem_alloc+0x3e>
        nblocks++;
 80156f8:	89bb      	ldrh	r3, [r7, #12]
 80156fa:	3301      	adds	r3, #1
 80156fc:	b29b      	uxth	r3, r3
 80156fe:	81bb      	strh	r3, [r7, #12]
    }
    
	if (mem->used + nblocks > mem->dat_size) {
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	691b      	ldr	r3, [r3, #16]
 8015704:	89ba      	ldrh	r2, [r7, #12]
 8015706:	441a      	add	r2, r3
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	429a      	cmp	r2, r3
 801570e:	d902      	bls.n	8015716 <se3_mem_alloc+0x54>
		//no more space
		return -1;
 8015710:	f04f 33ff 	mov.w	r3, #4294967295
 8015714:	e0af      	b.n	8015876 <se3_mem_alloc+0x1b4>
	}
	
	for (i = 0; i < mem->max_count; i++) {
 8015716:	2300      	movs	r3, #0
 8015718:	623b      	str	r3, [r7, #32]
 801571a:	e00a      	b.n	8015732 <se3_mem_alloc+0x70>
		if (mem->ptr[i] == NULL) {
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	685a      	ldr	r2, [r3, #4]
 8015720:	6a3b      	ldr	r3, [r7, #32]
 8015722:	009b      	lsls	r3, r3, #2
 8015724:	4413      	add	r3, r2
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d008      	beq.n	801573e <se3_mem_alloc+0x7c>
	for (i = 0; i < mem->max_count; i++) {
 801572c:	6a3b      	ldr	r3, [r7, #32]
 801572e:	3301      	adds	r3, #1
 8015730:	623b      	str	r3, [r7, #32]
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	6a3a      	ldr	r2, [r7, #32]
 8015738:	429a      	cmp	r2, r3
 801573a:	d3ef      	bcc.n	801571c <se3_mem_alloc+0x5a>
 801573c:	e000      	b.n	8015740 <se3_mem_alloc+0x7e>
			break;
 801573e:	bf00      	nop
		}
	}
	if (i >= mem->max_count) {
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	6a3a      	ldr	r2, [r7, #32]
 8015746:	429a      	cmp	r2, r3
 8015748:	d34a      	bcc.n	80157e0 <se3_mem_alloc+0x11e>
		// no more slots
		return -1;
 801574a:	f04f 33ff 	mov.w	r3, #4294967295
 801574e:	e092      	b.n	8015876 <se3_mem_alloc+0x1b4>
 8015750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015752:	881b      	ldrh	r3, [r3, #0]
 8015754:	b29b      	uxth	r3, r3
	}
	while (p < dat_end) {
        SE3_MEM_SIZE_GET(p, p_size);
 8015756:	823b      	strh	r3, [r7, #16]
        SE3_MEM_INFO_GET(p, p_info);
 8015758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801575a:	3302      	adds	r3, #2
 801575c:	881b      	ldrh	r3, [r3, #0]
 801575e:	b29b      	uxth	r3, r3
 8015760:	827b      	strh	r3, [r7, #18]
		valid = SE3_MEM_INFO_ISVALID(p_info);
 8015762:	8a7b      	ldrh	r3, [r7, #18]
 8015764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015768:	2b00      	cmp	r3, #0
 801576a:	bf14      	ite	ne
 801576c:	2301      	movne	r3, #1
 801576e:	2300      	moveq	r3, #0
 8015770:	76fb      	strb	r3, [r7, #27]
		if (p_size == 0 ) {
 8015772:	8a3b      	ldrh	r3, [r7, #16]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d102      	bne.n	801577e <se3_mem_alloc+0xbc>
			SE3_TRACE(("E mem_alloc memory corrupted, block with size=0\n"));
			return -1;
 8015778:	f04f 33ff 	mov.w	r3, #4294967295
 801577c:	e07b      	b.n	8015876 <se3_mem_alloc+0x1b4>
		}
		else if (!valid) {
 801577e:	7efb      	ldrb	r3, [r7, #27]
 8015780:	f083 0301 	eor.w	r3, r3, #1
 8015784:	b2db      	uxtb	r3, r3
 8015786:	2b00      	cmp	r3, #0
 8015788:	d024      	beq.n	80157d4 <se3_mem_alloc+0x112>
			// try to aggregate blocks ahead
            if (p_size < nblocks) {
 801578a:	8a3a      	ldrh	r2, [r7, #16]
 801578c:	89bb      	ldrh	r3, [r7, #12]
 801578e:	429a      	cmp	r2, r3
 8015790:	d203      	bcs.n	801579a <se3_mem_alloc+0xd8>
				se3_mem_compact(p, dat_end);
 8015792:	69f9      	ldr	r1, [r7, #28]
 8015794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015796:	f7ff feb3 	bl	8015500 <se3_mem_compact>
			}
            
			if (p_size == nblocks) {
 801579a:	8a3a      	ldrh	r2, [r7, #16]
 801579c:	89bb      	ldrh	r3, [r7, #12]
 801579e:	429a      	cmp	r2, r3
 80157a0:	d023      	beq.n	80157ea <se3_mem_alloc+0x128>
                // ok, no need to resize entry
				break;
			}
            else if (p_size > nblocks) {
 80157a2:	8a3a      	ldrh	r2, [r7, #16]
 80157a4:	89bb      	ldrh	r3, [r7, #12]
 80157a6:	429a      	cmp	r2, r3
 80157a8:	d914      	bls.n	80157d4 <se3_mem_alloc+0x112>
                // ok, resize entry
                p2 = p + nblocks*SE3_MEM_BLOCK;
 80157aa:	89bb      	ldrh	r3, [r7, #12]
 80157ac:	015b      	lsls	r3, r3, #5
 80157ae:	461a      	mov	r2, r3
 80157b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b2:	4413      	add	r3, r2
 80157b4:	617b      	str	r3, [r7, #20]
                u16tmp = p_size - nblocks;
 80157b6:	8a3a      	ldrh	r2, [r7, #16]
 80157b8:	89bb      	ldrh	r3, [r7, #12]
 80157ba:	1ad3      	subs	r3, r2, r3
 80157bc:	b29b      	uxth	r3, r3
 80157be:	81fb      	strh	r3, [r7, #14]
 80157c0:	89fa      	ldrh	r2, [r7, #14]
                SE3_MEM_SIZE_SET(p2, u16tmp);
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	801a      	strh	r2, [r3, #0]
                u16tmp = SE3_MEM_INFO_MAKE(0, 0);
 80157c6:	2300      	movs	r3, #0
 80157c8:	81fb      	strh	r3, [r7, #14]
                SE3_MEM_INFO_SET(p2, u16tmp);
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	3302      	adds	r3, #2
 80157ce:	89fa      	ldrh	r2, [r7, #14]
 80157d0:	801a      	strh	r2, [r3, #0]
                break;
 80157d2:	e00b      	b.n	80157ec <se3_mem_alloc+0x12a>
            }
		}
        p += p_size*SE3_MEM_BLOCK;
 80157d4:	8a3b      	ldrh	r3, [r7, #16]
 80157d6:	015b      	lsls	r3, r3, #5
 80157d8:	461a      	mov	r2, r3
 80157da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157dc:	4413      	add	r3, r2
 80157de:	627b      	str	r3, [r7, #36]	; 0x24
	while (p < dat_end) {
 80157e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d3b3      	bcc.n	8015750 <se3_mem_alloc+0x8e>
 80157e8:	e000      	b.n	80157ec <se3_mem_alloc+0x12a>
				break;
 80157ea:	bf00      	nop
	}
	if (p >= dat_end) {
 80157ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157ee:	69fb      	ldr	r3, [r7, #28]
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d323      	bcc.n	801583c <se3_mem_alloc+0x17a>
        // there enough free memory but it is fragmented
		p = se3_mem_defrag(mem);
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f7ff feba 	bl	801556e <se3_mem_defrag>
 80157fa:	6278      	str	r0, [r7, #36]	; 0x24
		SE3_TRACE(("[se3_mem_alloc] defragging session memory\n"));

		if (p < dat_end) {
 80157fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157fe:	69fb      	ldr	r3, [r7, #28]
 8015800:	429a      	cmp	r2, r3
 8015802:	d218      	bcs.n	8015836 <se3_mem_alloc+0x174>
 8015804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015806:	881b      	ldrh	r3, [r3, #0]
 8015808:	b29b      	uxth	r3, r3
			SE3_MEM_SIZE_GET(p, p_size);
 801580a:	823b      	strh	r3, [r7, #16]
			p2 = p + nblocks*SE3_MEM_BLOCK;
 801580c:	89bb      	ldrh	r3, [r7, #12]
 801580e:	015b      	lsls	r3, r3, #5
 8015810:	461a      	mov	r2, r3
 8015812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015814:	4413      	add	r3, r2
 8015816:	617b      	str	r3, [r7, #20]
			u16tmp = p_size - nblocks;
 8015818:	8a3a      	ldrh	r2, [r7, #16]
 801581a:	89bb      	ldrh	r3, [r7, #12]
 801581c:	1ad3      	subs	r3, r2, r3
 801581e:	b29b      	uxth	r3, r3
 8015820:	81fb      	strh	r3, [r7, #14]
 8015822:	89fa      	ldrh	r2, [r7, #14]
			SE3_MEM_SIZE_SET(p2, u16tmp);
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	801a      	strh	r2, [r3, #0]
			u16tmp = SE3_MEM_INFO_MAKE(0, 0);
 8015828:	2300      	movs	r3, #0
 801582a:	81fb      	strh	r3, [r7, #14]
			SE3_MEM_INFO_SET(p2, u16tmp);
 801582c:	697b      	ldr	r3, [r7, #20]
 801582e:	3302      	adds	r3, #2
 8015830:	89fa      	ldrh	r2, [r7, #14]
 8015832:	801a      	strh	r2, [r3, #0]
 8015834:	e002      	b.n	801583c <se3_mem_alloc+0x17a>
		}
		else {
			SE3_TRACE(("[se3_mem_alloc] memory corrupted, usage reports free memory while none\n"));
			return -1;
 8015836:	f04f 33ff 	mov.w	r3, #4294967295
 801583a:	e01c      	b.n	8015876 <se3_mem_alloc+0x1b4>
 801583c:	89ba      	ldrh	r2, [r7, #12]
		}
	}

    // update entry header
    SE3_MEM_SIZE_SET(p, nblocks);
 801583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015840:	801a      	strh	r2, [r3, #0]
    u16tmp = SE3_MEM_INFO_MAKE((uint16_t)i, 1);
 8015842:	6a3b      	ldr	r3, [r7, #32]
 8015844:	b29b      	uxth	r3, r3
 8015846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801584a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801584e:	b29b      	uxth	r3, r3
 8015850:	81fb      	strh	r3, [r7, #14]
    SE3_MEM_INFO_SET(p, u16tmp);
 8015852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015854:	3302      	adds	r3, #2
 8015856:	89fa      	ldrh	r2, [r7, #14]
 8015858:	801a      	strh	r2, [r3, #0]

    // update index
	mem->ptr[i] = p;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	685a      	ldr	r2, [r3, #4]
 801585e:	6a3b      	ldr	r3, [r7, #32]
 8015860:	009b      	lsls	r3, r3, #2
 8015862:	4413      	add	r3, r2
 8015864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015866:	601a      	str	r2, [r3, #0]
	(mem->used) += nblocks;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	691b      	ldr	r3, [r3, #16]
 801586c:	89ba      	ldrh	r2, [r7, #12]
 801586e:	441a      	add	r2, r3
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	611a      	str	r2, [r3, #16]

	return (int32_t)i;
 8015874:	6a3b      	ldr	r3, [r7, #32]
}
 8015876:	4618      	mov	r0, r3
 8015878:	3728      	adds	r7, #40	; 0x28
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}

0801587e <se3_mem_ptr>:

uint8_t* se3_mem_ptr(se3_mem* mem, int32_t id)
{
 801587e:	b480      	push	{r7}
 8015880:	b083      	sub	sp, #12
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
 8015886:	6039      	str	r1, [r7, #0]
    if (id < 0) {
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	2b00      	cmp	r3, #0
 801588c:	da01      	bge.n	8015892 <se3_mem_ptr+0x14>
        return NULL;
 801588e:	2300      	movs	r3, #0
 8015890:	e017      	b.n	80158c2 <se3_mem_ptr+0x44>
    }
	if ((uint32_t)id < mem->max_count) {
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681a      	ldr	r2, [r3, #0]
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	429a      	cmp	r2, r3
 801589a:	d911      	bls.n	80158c0 <se3_mem_ptr+0x42>
		if (mem->ptr[id] == NULL) {
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	685a      	ldr	r2, [r3, #4]
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	009b      	lsls	r3, r3, #2
 80158a4:	4413      	add	r3, r2
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d101      	bne.n	80158b0 <se3_mem_ptr+0x32>
			SE3_TRACE(("E mem_ptr index points to NULL\n"));
			return NULL;
 80158ac:	2300      	movs	r3, #0
 80158ae:	e008      	b.n	80158c2 <se3_mem_ptr+0x44>
		}
        return mem->ptr[id] + SE3_MEM_HEADER;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	685a      	ldr	r2, [r3, #4]
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	009b      	lsls	r3, r3, #2
 80158b8:	4413      	add	r3, r2
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	3304      	adds	r3, #4
 80158be:	e000      	b.n	80158c2 <se3_mem_ptr+0x44>
	}
	else {
		SE3_TRACE(("E mem_ptr index out of range\n"));
	}
	return NULL;
 80158c0:	2300      	movs	r3, #0
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	370c      	adds	r7, #12
 80158c6:	46bd      	mov	sp, r7
 80158c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158cc:	4770      	bx	lr

080158ce <se3_mem_free>:

void se3_mem_free(se3_mem* mem, int32_t id)
{
 80158ce:	b480      	push	{r7}
 80158d0:	b085      	sub	sp, #20
 80158d2:	af00      	add	r7, sp, #0
 80158d4:	6078      	str	r0, [r7, #4]
 80158d6:	6039      	str	r1, [r7, #0]
	uint8_t* p;
    uint16_t info;
    uint16_t size;
    if (id < 0) {
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	db2b      	blt.n	8015936 <se3_mem_free+0x68>
        return;
    }
	if ((uint32_t)id < mem->max_count) {
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	681a      	ldr	r2, [r3, #0]
 80158e2:	683b      	ldr	r3, [r7, #0]
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d927      	bls.n	8015938 <se3_mem_free+0x6a>
		p = mem->ptr[id];
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	685a      	ldr	r2, [r3, #4]
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	009b      	lsls	r3, r3, #2
 80158f0:	4413      	add	r3, r2
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	60fb      	str	r3, [r7, #12]
		mem->ptr[id] = NULL;
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	685a      	ldr	r2, [r3, #4]
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	009b      	lsls	r3, r3, #2
 80158fe:	4413      	add	r3, r2
 8015900:	2200      	movs	r2, #0
 8015902:	601a      	str	r2, [r3, #0]
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	881b      	ldrh	r3, [r3, #0]
 8015908:	b29b      	uxth	r3, r3
        SE3_MEM_SIZE_GET(p, size);
 801590a:	813b      	strh	r3, [r7, #8]
        SE3_MEM_INFO_GET(p, info);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	3302      	adds	r3, #2
 8015910:	881b      	ldrh	r3, [r3, #0]
 8015912:	b29b      	uxth	r3, r3
 8015914:	817b      	strh	r3, [r7, #10]
        info = SE3_MEM_INFO_MAKE(SE3_MEM_INFO_ID(info), 0);
 8015916:	897b      	ldrh	r3, [r7, #10]
 8015918:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801591c:	b29b      	uxth	r3, r3
 801591e:	817b      	strh	r3, [r7, #10]
        SE3_MEM_INFO_SET(p, info);
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	3302      	adds	r3, #2
 8015924:	897a      	ldrh	r2, [r7, #10]
 8015926:	801a      	strh	r2, [r3, #0]
        (mem->used) -= size;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	691b      	ldr	r3, [r3, #16]
 801592c:	893a      	ldrh	r2, [r7, #8]
 801592e:	1a9a      	subs	r2, r3, r2
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	611a      	str	r2, [r3, #16]
 8015934:	e000      	b.n	8015938 <se3_mem_free+0x6a>
        return;
 8015936:	bf00      	nop
	}
}
 8015938:	3714      	adds	r7, #20
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
	...

08015944 <se3_security_core_init>:
union {
    B5_tSha256Ctx sha;
    B5_tAesCtx aes;
} ctx;

void se3_security_core_init(){
 8015944:	b580      	push	{r7, lr}
 8015946:	af00      	add	r7, sp, #0
    memset(&ctx, 0, sizeof(ctx));
 8015948:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801594c:	2100      	movs	r1, #0
 801594e:	4805      	ldr	r0, [pc, #20]	; (8015964 <se3_security_core_init+0x20>)
 8015950:	f001 fd6e 	bl	8017430 <memset>
    memset((void*)&se3_security_info, 0, sizeof(SE3_SECURITY_INFO));
 8015954:	22e4      	movs	r2, #228	; 0xe4
 8015956:	2100      	movs	r1, #0
 8015958:	4803      	ldr	r0, [pc, #12]	; (8015968 <se3_security_core_init+0x24>)
 801595a:	f001 fd69 	bl	8017430 <memset>
}
 801595e:	bf00      	nop
 8015960:	bd80      	pop	{r7, pc}
 8015962:	bf00      	nop
 8015964:	2000d704 	.word	0x2000d704
 8015968:	2000d86c 	.word	0x2000d86c

0801596c <record_find>:

static bool record_find(uint16_t record_type, se3_flash_it* it)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	4603      	mov	r3, r0
 8015974:	6039      	str	r1, [r7, #0]
 8015976:	80fb      	strh	r3, [r7, #6]
    uint16_t it_record_type = 0;
 8015978:	2300      	movs	r3, #0
 801597a:	81fb      	strh	r3, [r7, #14]
    while (se3_flash_it_next(it)) {
 801597c:	e00e      	b.n	801599c <record_find+0x30>
        if (it->type == SE3_FLASH_TYPE_RECORD) {
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	791b      	ldrb	r3, [r3, #4]
 8015982:	2bf0      	cmp	r3, #240	; 0xf0
 8015984:	d10a      	bne.n	801599c <record_find+0x30>
            SE3_GET16(it->addr, SE3_RECORD_OFFSET_TYPE, it_record_type);
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	881b      	ldrh	r3, [r3, #0]
 801598c:	b29b      	uxth	r3, r3
 801598e:	81fb      	strh	r3, [r7, #14]
            if (it_record_type == record_type) {
 8015990:	89fb      	ldrh	r3, [r7, #14]
 8015992:	88fa      	ldrh	r2, [r7, #6]
 8015994:	429a      	cmp	r2, r3
 8015996:	d101      	bne.n	801599c <record_find+0x30>
                return true;
 8015998:	2301      	movs	r3, #1
 801599a:	e006      	b.n	80159aa <record_find+0x3e>
    while (se3_flash_it_next(it)) {
 801599c:	6838      	ldr	r0, [r7, #0]
 801599e:	f7ff fb11 	bl	8014fc4 <se3_flash_it_next>
 80159a2:	4603      	mov	r3, r0
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d1ea      	bne.n	801597e <record_find+0x12>
            }
        }
    }
    return false;
 80159a8:	2300      	movs	r3, #0
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3710      	adds	r7, #16
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}

080159b2 <record_set>:

bool record_set(uint16_t type, const uint8_t* data)
{
 80159b2:	b590      	push	{r4, r7, lr}
 80159b4:	b08d      	sub	sp, #52	; 0x34
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	4603      	mov	r3, r0
 80159ba:	6039      	str	r1, [r7, #0]
 80159bc:	80fb      	strh	r3, [r7, #6]
    se3_flash_it it;
    bool found = false;
 80159be:	2300      	movs	r3, #0
 80159c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    se3_flash_it it2;
    uint8_t tmp[2];
    if (type >= SE3_RECORD_MAX) {
 80159c4:	88fb      	ldrh	r3, [r7, #6]
 80159c6:	2b01      	cmp	r3, #1
 80159c8:	d901      	bls.n	80159ce <record_set+0x1c>
        return false;
 80159ca:	2300      	movs	r3, #0
 80159cc:	e05a      	b.n	8015a84 <record_set+0xd2>
    }
    se3_flash_it_init(&it);
 80159ce:	f107 031c 	add.w	r3, r7, #28
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7ff fae9 	bl	8014faa <se3_flash_it_init>
    if (record_find(type, &it)) {
 80159d8:	88fb      	ldrh	r3, [r7, #6]
 80159da:	f107 021c 	add.w	r2, r7, #28
 80159de:	4611      	mov	r1, r2
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7ff ffc3 	bl	801596c <record_find>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d002      	beq.n	80159f2 <record_set+0x40>
        found = true;
 80159ec:	2301      	movs	r3, #1
 80159ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // allocate new flash block
    memcpy(&it2, &it, sizeof(se3_flash_it));
 80159f2:	f107 040c 	add.w	r4, r7, #12
 80159f6:	f107 031c 	add.w	r3, r7, #28
 80159fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (!se3_flash_it_new(&it2, SE3_FLASH_TYPE_RECORD, SE3_RECORD_SIZE_TYPE + SE3_RECORD_SIZE)) {
 8015a00:	f107 030c 	add.w	r3, r7, #12
 8015a04:	2222      	movs	r2, #34	; 0x22
 8015a06:	21f0      	movs	r1, #240	; 0xf0
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7ff fb49 	bl	80150a0 <se3_flash_it_new>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	f083 0301 	eor.w	r3, r3, #1
 8015a14:	b2db      	uxtb	r3, r3
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d001      	beq.n	8015a1e <record_set+0x6c>
        return false;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	e032      	b.n	8015a84 <record_set+0xd2>
    }
    // write record type and data
    if (!se3_flash_it_write(&it2, SE3_RECORD_OFFSET_DATA, data, SE3_RECORD_SIZE)) {
 8015a1e:	f107 000c 	add.w	r0, r7, #12
 8015a22:	2320      	movs	r3, #32
 8015a24:	683a      	ldr	r2, [r7, #0]
 8015a26:	2102      	movs	r1, #2
 8015a28:	f7ff fa9c 	bl	8014f64 <se3_flash_it_write>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	f083 0301 	eor.w	r3, r3, #1
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d001      	beq.n	8015a3c <record_set+0x8a>
        return false;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	e023      	b.n	8015a84 <record_set+0xd2>
 8015a3c:	88fb      	ldrh	r3, [r7, #6]
    }
    SE3_SET16(tmp, 0, type);
 8015a3e:	813b      	strh	r3, [r7, #8]
    if (!se3_flash_it_write(&it2, SE3_RECORD_OFFSET_TYPE, tmp, SE3_RECORD_SIZE_TYPE)) {
 8015a40:	f107 0208 	add.w	r2, r7, #8
 8015a44:	f107 000c 	add.w	r0, r7, #12
 8015a48:	2302      	movs	r3, #2
 8015a4a:	2100      	movs	r1, #0
 8015a4c:	f7ff fa8a 	bl	8014f64 <se3_flash_it_write>
 8015a50:	4603      	mov	r3, r0
 8015a52:	f083 0301 	eor.w	r3, r3, #1
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d001      	beq.n	8015a60 <record_set+0xae>
        return false;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	e011      	b.n	8015a84 <record_set+0xd2>
    }

    if (found) {
 8015a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d00c      	beq.n	8015a82 <record_set+0xd0>
        // delete previously found flash block
        if (!se3_flash_it_delete(&it)) {
 8015a68:	f107 031c 	add.w	r3, r7, #28
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff fbcb 	bl	8015208 <se3_flash_it_delete>
 8015a72:	4603      	mov	r3, r0
 8015a74:	f083 0301 	eor.w	r3, r3, #1
 8015a78:	b2db      	uxtb	r3, r3
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d001      	beq.n	8015a82 <record_set+0xd0>
            return false;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	e000      	b.n	8015a84 <record_set+0xd2>
        }
    }

    return true;
 8015a82:	2301      	movs	r3, #1
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3734      	adds	r7, #52	; 0x34
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd90      	pop	{r4, r7, pc}

08015a8c <record_get>:

bool record_get(uint16_t type, uint8_t* data)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b086      	sub	sp, #24
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	4603      	mov	r3, r0
 8015a94:	6039      	str	r1, [r7, #0]
 8015a96:	80fb      	strh	r3, [r7, #6]
    se3_flash_it it;
    if (type >= SE3_RECORD_MAX) {
 8015a98:	88fb      	ldrh	r3, [r7, #6]
 8015a9a:	2b01      	cmp	r3, #1
 8015a9c:	d901      	bls.n	8015aa2 <record_get+0x16>
        return false;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	e01b      	b.n	8015ada <record_get+0x4e>
    }
    se3_flash_it_init(&it);
 8015aa2:	f107 0308 	add.w	r3, r7, #8
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7ff fa7f 	bl	8014faa <se3_flash_it_init>
    if (!record_find(type, &it)) {
 8015aac:	f107 0208 	add.w	r2, r7, #8
 8015ab0:	88fb      	ldrh	r3, [r7, #6]
 8015ab2:	4611      	mov	r1, r2
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7ff ff59 	bl	801596c <record_find>
 8015aba:	4603      	mov	r3, r0
 8015abc:	f083 0301 	eor.w	r3, r3, #1
 8015ac0:	b2db      	uxtb	r3, r3
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d001      	beq.n	8015aca <record_get+0x3e>
        return false;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	e007      	b.n	8015ada <record_get+0x4e>
    }
    memcpy(data, it.addr + SE3_RECORD_OFFSET_DATA, SE3_RECORD_SIZE);
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	3302      	adds	r3, #2
 8015ace:	2220      	movs	r2, #32
 8015ad0:	4619      	mov	r1, r3
 8015ad2:	6838      	ldr	r0, [r7, #0]
 8015ad4:	f001 fc84 	bl	80173e0 <memcpy>
    return true;
 8015ad8:	2301      	movs	r3, #1
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3718      	adds	r7, #24
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
	...

08015ae4 <crypto_init>:
/** \brief initialize a crypto context
 *
 *  crypto_init : (algo:ui16, mode:ui16, key_id:ui32) => (sid:ui32)
 */
uint16_t crypto_init(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b092      	sub	sp, #72	; 0x48
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	60b9      	str	r1, [r7, #8]
 8015aec:	607a      	str	r2, [r7, #4]
 8015aee:	603b      	str	r3, [r7, #0]
 8015af0:	4603      	mov	r3, r0
 8015af2:	81fb      	strh	r3, [r7, #14]
    } req_params;
    struct {
        uint32_t sid;
    } resp_params;
    se3_flash_key key;
    se3_flash_it it = { .addr = NULL };
 8015af4:	f107 0310 	add.w	r3, r7, #16
 8015af8:	2200      	movs	r2, #0
 8015afa:	601a      	str	r2, [r3, #0]
 8015afc:	605a      	str	r2, [r3, #4]
 8015afe:	609a      	str	r2, [r3, #8]
 8015b00:	60da      	str	r2, [r3, #12]
    se3_crypto_init_handler handler = NULL;
 8015b02:	2300      	movs	r3, #0
 8015b04:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t status;
    int sid;
    uint8_t* ctx_;
    if (req_size != SE3_CMD1_CRYPTO_INIT_REQ_SIZE) {
 8015b06:	89fb      	ldrh	r3, [r7, #14]
 8015b08:	2b08      	cmp	r3, #8
 8015b0a:	d002      	beq.n	8015b12 <crypto_init+0x2e>
        SE3_TRACE(("[crypto_init] req size mismatch\n"));
        return SE3_ERR_PARAMS;
 8015b0c:	f24f 0306 	movw	r3, #61446	; 0xf006
 8015b10:	e09a      	b.n	8015c48 <crypto_init+0x164>
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	881b      	ldrh	r3, [r3, #0]
 8015b16:	b29b      	uxth	r3, r3
    }
    SE3_GET16(req, SE3_CMD1_CRYPTO_INIT_REQ_OFF_ALGO, req_params.algo);
 8015b18:	863b      	strh	r3, [r7, #48]	; 0x30
    SE3_GET16(req, SE3_CMD1_CRYPTO_INIT_REQ_OFF_MODE, req_params.mode);
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	3302      	adds	r3, #2
 8015b1e:	881b      	ldrh	r3, [r3, #0]
 8015b20:	b29b      	uxth	r3, r3
 8015b22:	867b      	strh	r3, [r7, #50]	; 0x32
    SE3_GET32(req, SE3_CMD1_CRYPTO_INIT_REQ_OFF_KEY_ID, req_params.key_id);
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	3304      	adds	r3, #4
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	637b      	str	r3, [r7, #52]	; 0x34
    if (req_params.algo < SE3_ALGO_MAX) {
 8015b2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015b2e:	2b03      	cmp	r3, #3
 8015b30:	d808      	bhi.n	8015b44 <crypto_init+0x60>
        handler = algo_table[req_params.algo].init;
 8015b32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015b34:	4619      	mov	r1, r3
 8015b36:	4a46      	ldr	r2, [pc, #280]	; (8015c50 <crypto_init+0x16c>)
 8015b38:	2334      	movs	r3, #52	; 0x34
 8015b3a:	fb03 f301 	mul.w	r3, r3, r1
 8015b3e:	4413      	add	r3, r2
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (handler == NULL) {
 8015b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d102      	bne.n	8015b50 <crypto_init+0x6c>
        SE3_TRACE(("[crypto_init] algo not found\n"));
        return SE3_ERR_PARAMS;
 8015b4a:	f24f 0306 	movw	r3, #61446	; 0xf006
 8015b4e:	e07b      	b.n	8015c48 <crypto_init+0x164>
    }
    // use request buffer to temporarily store key data
    // !! modifying request buffer
    key.data = (uint8_t*)req + SE3_CMD1_CRYPTO_INIT_REQ_OFF_KEY_ID + SE3_FLASH_KEY_OFF_DATA;
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	330a      	adds	r3, #10
 8015b54:	62bb      	str	r3, [r7, #40]	; 0x28
    key.id = req_params.key_id;
 8015b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b58:	623b      	str	r3, [r7, #32]
    // SE3_KEY_INVALID (value 0xFFFFFFFF) must be passed to crypto_init whenever a key is NOT needed (i.e. SHA-256)
    if (key.id == SE3_KEY_INVALID) {
 8015b5a:	6a3b      	ldr	r3, [r7, #32]
 8015b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b60:	d107      	bne.n	8015b72 <crypto_init+0x8e>
        memset(key.data, 0, SE3_KEY_DATA_MAX);
 8015b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015b68:	2100      	movs	r1, #0
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f001 fc60 	bl	8017430 <memset>
 8015b70:	e020      	b.n	8015bb4 <crypto_init+0xd0>
    }
    else {
        se3_flash_it_init(&it);
 8015b72:	f107 0310 	add.w	r3, r7, #16
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7ff fa17 	bl	8014faa <se3_flash_it_init>
        if (!se3_key_find(key.id, &it)) {
 8015b7c:	6a3b      	ldr	r3, [r7, #32]
 8015b7e:	f107 0210 	add.w	r2, r7, #16
 8015b82:	4611      	mov	r1, r2
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7ff fb7f 	bl	8015288 <se3_key_find>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	f083 0301 	eor.w	r3, r3, #1
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d001      	beq.n	8015b9a <crypto_init+0xb6>
            it.addr = NULL;
 8015b96:	2300      	movs	r3, #0
 8015b98:	613b      	str	r3, [r7, #16]
        }
        if (NULL == it.addr) {
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d101      	bne.n	8015ba4 <crypto_init+0xc0>
            SE3_TRACE(("[crypto_init] key not found %d\n", key.id));
            return SE3_ERR_RESOURCE;
 8015ba0:	23c8      	movs	r3, #200	; 0xc8
 8015ba2:	e051      	b.n	8015c48 <crypto_init+0x164>

        }
        se3_key_read(&it, &key);
 8015ba4:	f107 0220 	add.w	r2, r7, #32
 8015ba8:	f107 0310 	add.w	r3, r7, #16
 8015bac:	4611      	mov	r1, r2
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7ff fbb5 	bl	801531e <se3_key_read>
    }
    resp_params.sid = SE3_SESSION_INVALID;
 8015bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8015bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sid = se3_mem_alloc(&(se3_security_info.sessions), algo_table[req_params.algo].size);
 8015bba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	4a24      	ldr	r2, [pc, #144]	; (8015c50 <crypto_init+0x16c>)
 8015bc0:	2334      	movs	r3, #52	; 0x34
 8015bc2:	fb03 f301 	mul.w	r3, r3, r1
 8015bc6:	4413      	add	r3, r2
 8015bc8:	3308      	adds	r3, #8
 8015bca:	881b      	ldrh	r3, [r3, #0]
 8015bcc:	4619      	mov	r1, r3
 8015bce:	4821      	ldr	r0, [pc, #132]	; (8015c54 <crypto_init+0x170>)
 8015bd0:	f7ff fd77 	bl	80156c2 <se3_mem_alloc>
 8015bd4:	6438      	str	r0, [r7, #64]	; 0x40
    if (sid >= 0) {
 8015bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	db01      	blt.n	8015be0 <crypto_init+0xfc>
        resp_params.sid = (uint32_t)sid;
 8015bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (resp_params.sid == SE3_SESSION_INVALID) {
 8015be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015be6:	d102      	bne.n	8015bee <crypto_init+0x10a>
        SE3_TRACE(("[crypto_init] cannot allocate session\n"));
        return SE3_ERR_MEMORY;
 8015be8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015bec:	e02c      	b.n	8015c48 <crypto_init+0x164>
    }
    ctx_ = se3_mem_ptr(&(se3_security_info.sessions), sid);
 8015bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015bf0:	4818      	ldr	r0, [pc, #96]	; (8015c54 <crypto_init+0x170>)
 8015bf2:	f7ff fe44 	bl	801587e <se3_mem_ptr>
 8015bf6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (ctx_ == NULL) {
 8015bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d102      	bne.n	8015c04 <crypto_init+0x120>
        // this should not happen
        SE3_TRACE(("[crypto_init] NULL session pointer\n"));
        return SE3_ERR_HW;
 8015bfe:	f24f 0301 	movw	r3, #61441	; 0xf001
 8015c02:	e021      	b.n	8015c48 <crypto_init+0x164>
    }
    status = handler(&key, req_params.mode, ctx_);
 8015c04:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8015c06:	f107 0020 	add.w	r0, r7, #32
 8015c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015c0e:	4798      	blx	r3
 8015c10:	4603      	mov	r3, r0
 8015c12:	63bb      	str	r3, [r7, #56]	; 0x38
    if (SE3_OK != status) {
 8015c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d007      	beq.n	8015c2a <crypto_init+0x146>
        // free the allocated session
        se3_mem_free(&(se3_security_info.sessions), (int32_t)resp_params.sid);
 8015c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1c:	4619      	mov	r1, r3
 8015c1e:	480d      	ldr	r0, [pc, #52]	; (8015c54 <crypto_init+0x170>)
 8015c20:	f7ff fe55 	bl	80158ce <se3_mem_free>

        SE3_TRACE(("[crypto_init] crypto handler failed\n"));
        return status;
 8015c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	e00e      	b.n	8015c48 <crypto_init+0x164>
    }
    // link session to algo
    se3_security_info.sessions_algo[resp_params.sid] = req_params.algo;
 8015c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2c:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8015c2e:	4a0a      	ldr	r2, [pc, #40]	; (8015c58 <crypto_init+0x174>)
 8015c30:	330c      	adds	r3, #12
 8015c32:	005b      	lsls	r3, r3, #1
 8015c34:	4413      	add	r3, r2
 8015c36:	460a      	mov	r2, r1
 8015c38:	809a      	strh	r2, [r3, #4]
 8015c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    SE3_SET32(resp, SE3_CMD1_CRYPTO_INIT_RESP_OFF_SID, resp_params.sid);
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	601a      	str	r2, [r3, #0]
    *resp_size = SE3_CMD1_CRYPTO_INIT_RESP_SIZE;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2204      	movs	r2, #4
 8015c44:	801a      	strh	r2, [r3, #0]
	return SE3_OK;
 8015c46:	2300      	movs	r3, #0
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3748      	adds	r7, #72	; 0x48
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	200001d8 	.word	0x200001d8
 8015c54:	2000d874 	.word	0x2000d874
 8015c58:	2000d86c 	.word	0x2000d86c

08015c5c <crypto_update>:
 *      sid:ui32, flags:ui16, datain1-len:ui16, datain2-len:ui16, pad-to-16[6],
 *      datain1[datain1-len], pad-to-16[...], datain2[datain2-len])
 *  => (dataout-len, pad-to-16[14], dataout[dataout-len])
 */
uint16_t crypto_update(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8015c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c5e:	b095      	sub	sp, #84	; 0x54
 8015c60:	af04      	add	r7, sp, #16
 8015c62:	60b9      	str	r1, [r7, #8]
 8015c64:	607a      	str	r2, [r7, #4]
 8015c66:	603b      	str	r3, [r7, #0]
 8015c68:	4603      	mov	r3, r0
 8015c6a:	81fb      	strh	r3, [r7, #14]
    struct {
        uint16_t dataout_len;
        uint8_t* dataout;
    } resp_params;
    uint16_t datain1_len_padded;
    se3_crypto_update_handler handler = NULL;
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t algo;
    uint8_t* ctx_;
    uint16_t status;

    if (req_size < SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATA) {
 8015c70:	89fb      	ldrh	r3, [r7, #14]
 8015c72:	2b0f      	cmp	r3, #15
 8015c74:	d802      	bhi.n	8015c7c <crypto_update+0x20>
        SE3_TRACE(("[crypto_update] req size mismatch\n"));
        return SE3_ERR_PARAMS;
 8015c76:	f24f 0306 	movw	r3, #61446	; 0xf006
 8015c7a:	e08d      	b.n	8015d98 <crypto_update+0x13c>
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	681b      	ldr	r3, [r3, #0]
    }

    SE3_GET32(req, SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_SID, req_params.sid);
 8015c80:	61bb      	str	r3, [r7, #24]
    SE3_GET16(req, SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_FLAGS, req_params.flags);
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	3304      	adds	r3, #4
 8015c86:	881b      	ldrh	r3, [r3, #0]
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	83bb      	strh	r3, [r7, #28]
    SE3_GET16(req, SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATAIN1_LEN, req_params.datain1_len);
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	3306      	adds	r3, #6
 8015c90:	881b      	ldrh	r3, [r3, #0]
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	83fb      	strh	r3, [r7, #30]
    SE3_GET16(req, SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATAIN2_LEN, req_params.datain2_len);
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	3308      	adds	r3, #8
 8015c9a:	881b      	ldrh	r3, [r3, #0]
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	843b      	strh	r3, [r7, #32]
    req_params.datain1 = req + SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATA;
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	3310      	adds	r3, #16
 8015ca4:	627b      	str	r3, [r7, #36]	; 0x24
    if (req_params.datain1_len % 16) {
 8015ca6:	8bfb      	ldrh	r3, [r7, #30]
 8015ca8:	f003 030f 	and.w	r3, r3, #15
 8015cac:	b29b      	uxth	r3, r3
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d006      	beq.n	8015cc0 <crypto_update+0x64>
        datain1_len_padded = req_params.datain1_len + (16 - (req_params.datain1_len % 16));
 8015cb2:	8bfb      	ldrh	r3, [r7, #30]
 8015cb4:	f023 030f 	bic.w	r3, r3, #15
 8015cb8:	b29b      	uxth	r3, r3
 8015cba:	3310      	adds	r3, #16
 8015cbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8015cbe:	e001      	b.n	8015cc4 <crypto_update+0x68>
    }
    else {
        datain1_len_padded = req_params.datain1_len;
 8015cc0:	8bfb      	ldrh	r3, [r7, #30]
 8015cc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }
    req_params.datain2 = req + SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATA + datain1_len_padded;
 8015cc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015cc6:	3310      	adds	r3, #16
 8015cc8:	68ba      	ldr	r2, [r7, #8]
 8015cca:	4413      	add	r3, r2
 8015ccc:	62bb      	str	r3, [r7, #40]	; 0x28

    if (SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATA + datain1_len_padded + req_params.datain2_len > SE3_REQ1_MAX_DATA) {
 8015cce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015cd0:	3310      	adds	r3, #16
 8015cd2:	8c3a      	ldrh	r2, [r7, #32]
 8015cd4:	4413      	add	r3, r2
 8015cd6:	f641 5270 	movw	r2, #7536	; 0x1d70
 8015cda:	4293      	cmp	r3, r2
 8015cdc:	dd02      	ble.n	8015ce4 <crypto_update+0x88>
        SE3_TRACE(("[crypto_update] data size exceeds packet limit\n"));
        return SE3_ERR_PARAMS;
 8015cde:	f24f 0306 	movw	r3, #61446	; 0xf006
 8015ce2:	e059      	b.n	8015d98 <crypto_update+0x13c>
    }

    if (req_params.sid >= SE3_SESSIONS_MAX) {
 8015ce4:	69bb      	ldr	r3, [r7, #24]
 8015ce6:	2b63      	cmp	r3, #99	; 0x63
 8015ce8:	d901      	bls.n	8015cee <crypto_update+0x92>
        SE3_TRACE(("[crypto_update] invalid sid\n"));
        return SE3_ERR_RESOURCE;
 8015cea:	23c8      	movs	r3, #200	; 0xc8
 8015cec:	e054      	b.n	8015d98 <crypto_update+0x13c>
    }

    algo = se3_security_info.sessions_algo[req_params.sid];
 8015cee:	69bb      	ldr	r3, [r7, #24]
 8015cf0:	4a2b      	ldr	r2, [pc, #172]	; (8015da0 <crypto_update+0x144>)
 8015cf2:	330c      	adds	r3, #12
 8015cf4:	005b      	lsls	r3, r3, #1
 8015cf6:	4413      	add	r3, r2
 8015cf8:	889b      	ldrh	r3, [r3, #4]
 8015cfa:	86fb      	strh	r3, [r7, #54]	; 0x36
    if (algo >= SE3_ALGO_MAX) {
 8015cfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015cfe:	2b03      	cmp	r3, #3
 8015d00:	d901      	bls.n	8015d06 <crypto_update+0xaa>
        SE3_TRACE(("[crypto_update] invalid algo for this sid (wrong sid?)\n"));
        return SE3_ERR_RESOURCE;
 8015d02:	23c8      	movs	r3, #200	; 0xc8
 8015d04:	e048      	b.n	8015d98 <crypto_update+0x13c>
    }

    handler = algo_table[algo].update;
 8015d06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d08:	4a26      	ldr	r2, [pc, #152]	; (8015da4 <crypto_update+0x148>)
 8015d0a:	2134      	movs	r1, #52	; 0x34
 8015d0c:	fb01 f303 	mul.w	r3, r1, r3
 8015d10:	4413      	add	r3, r2
 8015d12:	3304      	adds	r3, #4
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	63bb      	str	r3, [r7, #56]	; 0x38
    if (handler == NULL) {
 8015d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d101      	bne.n	8015d22 <crypto_update+0xc6>
        SE3_TRACE(("[crypto_update] invalid crypto handler for this algo (wrong sid?)\n"));
        return SE3_ERR_RESOURCE;
 8015d1e:	23c8      	movs	r3, #200	; 0xc8
 8015d20:	e03a      	b.n	8015d98 <crypto_update+0x13c>
    }

    ctx_ = se3_mem_ptr(&(se3_security_info.sessions), (int32_t)req_params.sid);
 8015d22:	69bb      	ldr	r3, [r7, #24]
 8015d24:	4619      	mov	r1, r3
 8015d26:	4820      	ldr	r0, [pc, #128]	; (8015da8 <crypto_update+0x14c>)
 8015d28:	f7ff fda9 	bl	801587e <se3_mem_ptr>
 8015d2c:	6338      	str	r0, [r7, #48]	; 0x30
    if (ctx_ == NULL) {
 8015d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d101      	bne.n	8015d38 <crypto_update+0xdc>
        SE3_TRACE(("[crypto_update] session not found\n"));
        return SE3_ERR_RESOURCE;
 8015d34:	23c8      	movs	r3, #200	; 0xc8
 8015d36:	e02f      	b.n	8015d98 <crypto_update+0x13c>
    }

    resp_params.dataout_len = 0;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	823b      	strh	r3, [r7, #16]
    resp_params.dataout = resp + SE3_CMD1_CRYPTO_UPDATE_RESP_OFF_DATA;
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	3310      	adds	r3, #16
 8015d40:	617b      	str	r3, [r7, #20]

    status = handler(
 8015d42:	8bb8      	ldrh	r0, [r7, #28]
 8015d44:	8bfd      	ldrh	r5, [r7, #30]
 8015d46:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8015d48:	8c3b      	ldrh	r3, [r7, #32]
 8015d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d4c:	6979      	ldr	r1, [r7, #20]
 8015d4e:	9103      	str	r1, [sp, #12]
 8015d50:	f107 0110 	add.w	r1, r7, #16
 8015d54:	9102      	str	r1, [sp, #8]
 8015d56:	9201      	str	r2, [sp, #4]
 8015d58:	9300      	str	r3, [sp, #0]
 8015d5a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8015d5c:	4633      	mov	r3, r6
 8015d5e:	462a      	mov	r2, r5
 8015d60:	4601      	mov	r1, r0
 8015d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d64:	47a0      	blx	r4
 8015d66:	4603      	mov	r3, r0
 8015d68:	85fb      	strh	r3, [r7, #46]	; 0x2e
        ctx_, req_params.flags,
        req_params.datain1_len, req_params.datain1,
        req_params.datain2_len, req_params.datain2,
        &(resp_params.dataout_len), resp_params.dataout);

    if (SE3_OK != status) {
 8015d6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d001      	beq.n	8015d74 <crypto_update+0x118>
        SE3_TRACE(("[crypto_update] crypto handler failed\n"));
        return status;
 8015d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015d72:	e011      	b.n	8015d98 <crypto_update+0x13c>
    }

    if (req_params.flags & SE3_CRYPTO_FLAG_FINIT) {
 8015d74:	8bbb      	ldrh	r3, [r7, #28]
 8015d76:	b21b      	sxth	r3, r3
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	da04      	bge.n	8015d86 <crypto_update+0x12a>
        se3_mem_free(&(se3_security_info.sessions), (int32_t)req_params.sid);
 8015d7c:	69bb      	ldr	r3, [r7, #24]
 8015d7e:	4619      	mov	r1, r3
 8015d80:	4809      	ldr	r0, [pc, #36]	; (8015da8 <crypto_update+0x14c>)
 8015d82:	f7ff fda4 	bl	80158ce <se3_mem_free>
 8015d86:	8a3a      	ldrh	r2, [r7, #16]
    }

    SE3_SET16(resp, SE3_CMD1_CRYPTO_UPDATE_RESP_OFF_DATAOUT_LEN, resp_params.dataout_len);
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	801a      	strh	r2, [r3, #0]
    *resp_size = SE3_CMD1_CRYPTO_UPDATE_RESP_OFF_DATA + resp_params.dataout_len;
 8015d8c:	8a3b      	ldrh	r3, [r7, #16]
 8015d8e:	3310      	adds	r3, #16
 8015d90:	b29a      	uxth	r2, r3
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	801a      	strh	r2, [r3, #0]

    return SE3_OK;
 8015d96:	2300      	movs	r3, #0
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3744      	adds	r7, #68	; 0x44
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015da0:	2000d86c 	.word	0x2000d86c
 8015da4:	200001d8 	.word	0x200001d8
 8015da8:	2000d874 	.word	0x2000d874

08015dac <crypto_list>:

uint16_t crypto_list(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b08a      	sub	sp, #40	; 0x28
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	60b9      	str	r1, [r7, #8]
 8015db4:	607a      	str	r2, [r7, #4]
 8015db6:	603b      	str	r3, [r7, #0]
 8015db8:	4603      	mov	r3, r0
 8015dba:	81fb      	strh	r3, [r7, #14]
    } resp_params;
    uint8_t* p;
    size_t i;
    uint16_t size;

    if (req_size != SE3_CMD1_CRYPTO_LIST_REQ_SIZE) {
 8015dbc:	89fb      	ldrh	r3, [r7, #14]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d002      	beq.n	8015dc8 <crypto_list+0x1c>
        SE3_TRACE(("[crypto_list] req size mismatch\n"));
        return SE3_ERR_PARAMS;
 8015dc2:	f24f 0306 	movw	r3, #61446	; 0xf006
 8015dc6:	e06b      	b.n	8015ea0 <crypto_list+0xf4>
    }

    resp_params.algoinfo = resp + SE3_CMD1_CRYPTO_LIST_RESP_OFF_ALGOINFO;
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	3302      	adds	r3, #2
 8015dcc:	61bb      	str	r3, [r7, #24]
    size = SE3_CMD1_CRYPTO_LIST_RESP_OFF_ALGOINFO;
 8015dce:	2302      	movs	r3, #2
 8015dd0:	83fb      	strh	r3, [r7, #30]
    resp_params.count = 0;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	82bb      	strh	r3, [r7, #20]
    p = resp_params.algoinfo;
 8015dd6:	69bb      	ldr	r3, [r7, #24]
 8015dd8:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < SE3_ALGO_MAX; i++) {
 8015dda:	2300      	movs	r3, #0
 8015ddc:	623b      	str	r3, [r7, #32]
 8015dde:	e055      	b.n	8015e8c <crypto_list+0xe0>
        if ((algo_table[i].init != NULL) && (algo_table[i].update != NULL)) {
 8015de0:	4a31      	ldr	r2, [pc, #196]	; (8015ea8 <crypto_list+0xfc>)
 8015de2:	6a3b      	ldr	r3, [r7, #32]
 8015de4:	2134      	movs	r1, #52	; 0x34
 8015de6:	fb01 f303 	mul.w	r3, r1, r3
 8015dea:	4413      	add	r3, r2
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d049      	beq.n	8015e86 <crypto_list+0xda>
 8015df2:	4a2d      	ldr	r2, [pc, #180]	; (8015ea8 <crypto_list+0xfc>)
 8015df4:	6a3b      	ldr	r3, [r7, #32]
 8015df6:	2134      	movs	r1, #52	; 0x34
 8015df8:	fb01 f303 	mul.w	r3, r1, r3
 8015dfc:	4413      	add	r3, r2
 8015dfe:	3304      	adds	r3, #4
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d03f      	beq.n	8015e86 <crypto_list+0xda>
            memcpy(p + SE3_CMD1_CRYPTO_ALGOINFO_OFF_NAME, algo_table[i].display_name, SE3_CMD1_CRYPTO_ALGOINFO_NAME_SIZE);
 8015e06:	6a3b      	ldr	r3, [r7, #32]
 8015e08:	2234      	movs	r2, #52	; 0x34
 8015e0a:	fb02 f303 	mul.w	r3, r2, r3
 8015e0e:	3308      	adds	r3, #8
 8015e10:	4a25      	ldr	r2, [pc, #148]	; (8015ea8 <crypto_list+0xfc>)
 8015e12:	4413      	add	r3, r2
 8015e14:	3302      	adds	r3, #2
 8015e16:	2210      	movs	r2, #16
 8015e18:	4619      	mov	r1, r3
 8015e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e1c:	f001 fae0 	bl	80173e0 <memcpy>
            SE3_SET16(p, SE3_CMD1_CRYPTO_ALGOINFO_OFF_TYPE, algo_table[i].display_type);
 8015e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e22:	3310      	adds	r3, #16
 8015e24:	6a3a      	ldr	r2, [r7, #32]
 8015e26:	2134      	movs	r1, #52	; 0x34
 8015e28:	fb01 f202 	mul.w	r2, r1, r2
 8015e2c:	3218      	adds	r2, #24
 8015e2e:	491e      	ldr	r1, [pc, #120]	; (8015ea8 <crypto_list+0xfc>)
 8015e30:	440a      	add	r2, r1
 8015e32:	3202      	adds	r2, #2
 8015e34:	8812      	ldrh	r2, [r2, #0]
 8015e36:	b292      	uxth	r2, r2
 8015e38:	801a      	strh	r2, [r3, #0]
            SE3_SET16(p, SE3_CMD1_CRYPTO_ALGOINFO_OFF_BLOCK_SIZE, algo_table[i].display_block_size);
 8015e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3c:	3312      	adds	r3, #18
 8015e3e:	6a3a      	ldr	r2, [r7, #32]
 8015e40:	2134      	movs	r1, #52	; 0x34
 8015e42:	fb01 f202 	mul.w	r2, r1, r2
 8015e46:	3218      	adds	r2, #24
 8015e48:	4917      	ldr	r1, [pc, #92]	; (8015ea8 <crypto_list+0xfc>)
 8015e4a:	440a      	add	r2, r1
 8015e4c:	3204      	adds	r2, #4
 8015e4e:	8812      	ldrh	r2, [r2, #0]
 8015e50:	b292      	uxth	r2, r2
 8015e52:	801a      	strh	r2, [r3, #0]
            //SE3_SET16(p, SE3_CMD1_CRYPTO_ALGOINFO_OFF_KEY_SIZE, algo_table[i].display_key_size);
            memcpy(p + SE3_CMD1_CRYPTO_ALGOINFO_OFF_KEY_SIZE, algo_table[i].display_key_size, SE3_CMD1_CRYPTO_ALGOINFO_KEY_SIZE);
 8015e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e56:	f103 0014 	add.w	r0, r3, #20
 8015e5a:	6a3b      	ldr	r3, [r7, #32]
 8015e5c:	2234      	movs	r2, #52	; 0x34
 8015e5e:	fb02 f303 	mul.w	r3, r2, r3
 8015e62:	3318      	adds	r3, #24
 8015e64:	4a10      	ldr	r2, [pc, #64]	; (8015ea8 <crypto_list+0xfc>)
 8015e66:	4413      	add	r3, r2
 8015e68:	3306      	adds	r3, #6
 8015e6a:	2214      	movs	r2, #20
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	f001 fab7 	bl	80173e0 <memcpy>
            (resp_params.count)++;
 8015e72:	8abb      	ldrh	r3, [r7, #20]
 8015e74:	3301      	adds	r3, #1
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	82bb      	strh	r3, [r7, #20]
            size += SE3_CMD1_CRYPTO_ALGOINFO_SIZE;
 8015e7a:	8bfb      	ldrh	r3, [r7, #30]
 8015e7c:	3328      	adds	r3, #40	; 0x28
 8015e7e:	83fb      	strh	r3, [r7, #30]
            p += SE3_CMD1_CRYPTO_ALGOINFO_SIZE;
 8015e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e82:	3328      	adds	r3, #40	; 0x28
 8015e84:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < SE3_ALGO_MAX; i++) {
 8015e86:	6a3b      	ldr	r3, [r7, #32]
 8015e88:	3301      	adds	r3, #1
 8015e8a:	623b      	str	r3, [r7, #32]
 8015e8c:	6a3b      	ldr	r3, [r7, #32]
 8015e8e:	2b03      	cmp	r3, #3
 8015e90:	d9a6      	bls.n	8015de0 <crypto_list+0x34>
 8015e92:	8aba      	ldrh	r2, [r7, #20]
        }
    }
    SE3_SET16(resp, SE3_CMD1_CRYPTO_LIST_RESP_OFF_COUNT, resp_params.count);
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	801a      	strh	r2, [r3, #0]
    *resp_size = size;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	8bfa      	ldrh	r2, [r7, #30]
 8015e9c:	801a      	strh	r2, [r3, #0]
    return SE3_OK;
 8015e9e:	2300      	movs	r3, #0
}
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	3728      	adds	r7, #40	; 0x28
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd80      	pop	{r7, pc}
 8015ea8:	200001d8 	.word	0x200001d8

08015eac <se3_payload_cryptoinit>:

void se3_payload_cryptoinit(se3_payload_cryptoctx* ctx_, const uint8_t* key)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b096      	sub	sp, #88	; 0x58
 8015eb0:	af04      	add	r7, sp, #16
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	6039      	str	r1, [r7, #0]
	uint8_t keys[2 * B5_AES_256];

	PBKDF2HmacSha256(key, B5_AES_256, NULL, 0, 1, keys, 2 * B5_AES_256);
 8015eb6:	2340      	movs	r3, #64	; 0x40
 8015eb8:	9302      	str	r3, [sp, #8]
 8015eba:	f107 0308 	add.w	r3, r7, #8
 8015ebe:	9301      	str	r3, [sp, #4]
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	9300      	str	r3, [sp, #0]
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	2120      	movs	r1, #32
 8015eca:	6838      	ldr	r0, [r7, #0]
 8015ecc:	f7f9 f98b 	bl	800f1e6 <PBKDF2HmacSha256>
    B5_Aes256_Init(&(ctx_->aesenc), keys, B5_AES_256, B5_AES256_CBC_ENC);
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f107 0108 	add.w	r1, r7, #8
 8015ed6:	2304      	movs	r3, #4
 8015ed8:	2220      	movs	r2, #32
 8015eda:	f7f8 fd31 	bl	800e940 <B5_Aes256_Init>
    B5_Aes256_Init(&(ctx_->aesdec), keys, B5_AES_256, B5_AES256_CBC_DEC);
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8015ee4:	f107 0108 	add.w	r1, r7, #8
 8015ee8:	2305      	movs	r3, #5
 8015eea:	2220      	movs	r2, #32
 8015eec:	f7f8 fd28 	bl	800e940 <B5_Aes256_Init>
	memcpy(ctx_->hmac_key, keys + B5_AES_256, B5_AES_256);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f503 6088 	add.w	r0, r3, #1088	; 0x440
 8015ef6:	f107 0308 	add.w	r3, r7, #8
 8015efa:	3320      	adds	r3, #32
 8015efc:	2220      	movs	r2, #32
 8015efe:	4619      	mov	r1, r3
 8015f00:	f001 fa6e 	bl	80173e0 <memcpy>
	memset(keys, 0, 2 * B5_AES_256);
 8015f04:	f107 0308 	add.w	r3, r7, #8
 8015f08:	2240      	movs	r2, #64	; 0x40
 8015f0a:	2100      	movs	r1, #0
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f001 fa8f 	bl	8017430 <memset>
}
 8015f12:	bf00      	nop
 8015f14:	3748      	adds	r7, #72	; 0x48
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}

08015f1a <se3_payload_encrypt>:

bool se3_payload_encrypt(se3_payload_cryptoctx* ctx_, uint8_t* auth, uint8_t* iv, uint8_t* data, uint16_t nblocks, uint16_t flags, uint8_t crypto_algo)
{
 8015f1a:	b580      	push	{r7, lr}
 8015f1c:	b084      	sub	sp, #16
 8015f1e:	af00      	add	r7, sp, #0
 8015f20:	60f8      	str	r0, [r7, #12]
 8015f22:	60b9      	str	r1, [r7, #8]
 8015f24:	607a      	str	r2, [r7, #4]
 8015f26:	603b      	str	r3, [r7, #0]
	switch(crypto_algo){
 8015f28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d110      	bne.n	8015f52 <se3_payload_encrypt+0x38>
		case SE3_AES256:
		    if (flags & SE3_CMDFLAG_ENCRYPT) {
 8015f30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	da0e      	bge.n	8015f56 <se3_payload_encrypt+0x3c>
		        B5_Aes256_SetIV(&(ctx_->aesenc), iv);
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	6879      	ldr	r1, [r7, #4]
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f7f8 fdc9 	bl	800ead4 <B5_Aes256_SetIV>
		        B5_Aes256_Update(&(ctx_->aesenc), data, data, nblocks);
 8015f42:	68f8      	ldr	r0, [r7, #12]
 8015f44:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8015f48:	683a      	ldr	r2, [r7, #0]
 8015f4a:	6839      	ldr	r1, [r7, #0]
 8015f4c:	f7f8 fe00 	bl	800eb50 <B5_Aes256_Update>
		    } break;
 8015f50:	e001      	b.n	8015f56 <se3_payload_encrypt+0x3c>
			//to be implemented

		case SE3_SHA256:
			//to be implemented

		default: return false; break;
 8015f52:	2300      	movs	r3, #0
 8015f54:	e039      	b.n	8015fca <se3_payload_encrypt+0xb0>
		    } break;
 8015f56:	bf00      	nop
	}

    if (flags & SE3_CMDFLAG_SIGN) {
 8015f58:	8bbb      	ldrh	r3, [r7, #28]
 8015f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d02d      	beq.n	8015fbe <se3_payload_encrypt+0xa4>
        B5_HmacSha256_Init(&(ctx_->hmac), ctx_->hmac_key, B5_AES_256);
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8015f6e:	2220      	movs	r2, #32
 8015f70:	4619      	mov	r1, r3
 8015f72:	f7fb fc4d 	bl	8011810 <B5_HmacSha256_Init>
        B5_HmacSha256_Update(&(ctx_->hmac), iv, B5_AES_IV_SIZE);
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8015f7c:	2210      	movs	r2, #16
 8015f7e:	6879      	ldr	r1, [r7, #4]
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7fb fccb 	bl	801191c <B5_HmacSha256_Update>
        B5_HmacSha256_Update(&(ctx_->hmac), data, nblocks*B5_AES_BLK_SIZE);
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8015f8c:	8b3b      	ldrh	r3, [r7, #24]
 8015f8e:	011b      	lsls	r3, r3, #4
 8015f90:	461a      	mov	r2, r3
 8015f92:	6839      	ldr	r1, [r7, #0]
 8015f94:	f7fb fcc2 	bl	801191c <B5_HmacSha256_Update>
        B5_HmacSha256_Finit(&(ctx_->hmac), ctx_->auth);
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8015fa4:	4619      	mov	r1, r3
 8015fa6:	4610      	mov	r0, r2
 8015fa8:	f7fb fcdd 	bl	8011966 <B5_HmacSha256_Finit>
        memcpy(auth, ctx_->auth, 16);
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8015fb2:	2210      	movs	r2, #16
 8015fb4:	4619      	mov	r1, r3
 8015fb6:	68b8      	ldr	r0, [r7, #8]
 8015fb8:	f001 fa12 	bl	80173e0 <memcpy>
 8015fbc:	e004      	b.n	8015fc8 <se3_payload_encrypt+0xae>
    }
    else {
        memset(auth, 0, 16);
 8015fbe:	2210      	movs	r2, #16
 8015fc0:	2100      	movs	r1, #0
 8015fc2:	68b8      	ldr	r0, [r7, #8]
 8015fc4:	f001 fa34 	bl	8017430 <memset>
    }
    return true;
 8015fc8:	2301      	movs	r3, #1
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	3710      	adds	r7, #16
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bd80      	pop	{r7, pc}

08015fd2 <se3_payload_decrypt>:

bool se3_payload_decrypt(se3_payload_cryptoctx* ctx_, const uint8_t* auth, const uint8_t* iv, uint8_t* data, uint16_t nblocks, uint16_t flags, uint8_t crypto_algo)
{
 8015fd2:	b580      	push	{r7, lr}
 8015fd4:	b084      	sub	sp, #16
 8015fd6:	af00      	add	r7, sp, #0
 8015fd8:	60f8      	str	r0, [r7, #12]
 8015fda:	60b9      	str	r1, [r7, #8]
 8015fdc:	607a      	str	r2, [r7, #4]
 8015fde:	603b      	str	r3, [r7, #0]
    if (flags & SE3_CMDFLAG_SIGN) {
 8015fe0:	8bbb      	ldrh	r3, [r7, #28]
 8015fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d031      	beq.n	801604e <se3_payload_decrypt+0x7c>
        B5_HmacSha256_Init(&(ctx_->hmac), ctx_->hmac_key, B5_AES_256);
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8015ff6:	2220      	movs	r2, #32
 8015ff8:	4619      	mov	r1, r3
 8015ffa:	f7fb fc09 	bl	8011810 <B5_HmacSha256_Init>
        B5_HmacSha256_Update(&(ctx_->hmac), iv, B5_AES_IV_SIZE);
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8016004:	2210      	movs	r2, #16
 8016006:	6879      	ldr	r1, [r7, #4]
 8016008:	4618      	mov	r0, r3
 801600a:	f7fb fc87 	bl	801191c <B5_HmacSha256_Update>
        B5_HmacSha256_Update(&(ctx_->hmac), data, nblocks*B5_AES_BLK_SIZE);
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8016014:	8b3b      	ldrh	r3, [r7, #24]
 8016016:	011b      	lsls	r3, r3, #4
 8016018:	461a      	mov	r2, r3
 801601a:	6839      	ldr	r1, [r7, #0]
 801601c:	f7fb fc7e 	bl	801191c <B5_HmacSha256_Update>
        B5_HmacSha256_Finit(&(ctx_->hmac), ctx_->auth);
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801602c:	4619      	mov	r1, r3
 801602e:	4610      	mov	r0, r2
 8016030:	f7fb fc99 	bl	8011966 <B5_HmacSha256_Finit>
        if (memcmp(auth, ctx_->auth, 16)) {
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801603a:	2210      	movs	r2, #16
 801603c:	4619      	mov	r1, r3
 801603e:	68b8      	ldr	r0, [r7, #8]
 8016040:	f001 f9c0 	bl	80173c4 <memcmp>
 8016044:	4603      	mov	r3, r0
 8016046:	2b00      	cmp	r3, #0
 8016048:	d001      	beq.n	801604e <se3_payload_decrypt+0x7c>
            return false;
 801604a:	2300      	movs	r3, #0
 801604c:	e01c      	b.n	8016088 <se3_payload_decrypt+0xb6>
        }
    }

	switch(crypto_algo){
 801604e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d114      	bne.n	8016080 <se3_payload_decrypt+0xae>
		case SE3_AES256:
		    if (flags & SE3_CMDFLAG_ENCRYPT) {
 8016056:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801605a:	2b00      	cmp	r3, #0
 801605c:	da12      	bge.n	8016084 <se3_payload_decrypt+0xb2>
		        B5_Aes256_SetIV(&(ctx_->aesdec), iv);
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8016064:	6879      	ldr	r1, [r7, #4]
 8016066:	4618      	mov	r0, r3
 8016068:	f7f8 fd34 	bl	800ead4 <B5_Aes256_SetIV>
		        B5_Aes256_Update(&(ctx_->aesdec), data, data, nblocks);
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8016072:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8016076:	683a      	ldr	r2, [r7, #0]
 8016078:	6839      	ldr	r1, [r7, #0]
 801607a:	f7f8 fd69 	bl	800eb50 <B5_Aes256_Update>
		    } break;
 801607e:	e001      	b.n	8016084 <se3_payload_decrypt+0xb2>
			//to be implemented

		case SE3_SHA256:
			//to be implemented

		default: return false; break;
 8016080:	2300      	movs	r3, #0
 8016082:	e001      	b.n	8016088 <se3_payload_decrypt+0xb6>
		    } break;
 8016084:	bf00      	nop
	}


    return true;
 8016086:	2301      	movs	r3, #1
}
 8016088:	4618      	mov	r0, r3
 801608a:	3710      	adds	r7, #16
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <sekey_get_implementation_info>:
se3_flash_it key_iterator = { .addr = NULL }; /**< Global variable required by load_key_ids() */

/*	sekey_get_implementation_info: This function would be the core of the SEkey behaviour,
 * 	it has to be implemented. The provided code is just a stub
 */
bool sekey_get_implementation_info(uint8_t* algo_implementation, uint8_t* crypto_algo, uint8_t *key){
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
	if(sekey_get_auth(key)){
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f000 f80e 	bl	80160be <sekey_get_auth>
 80160a2:	4603      	mov	r3, r0
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d005      	beq.n	80160b4 <sekey_get_implementation_info+0x24>
		*algo_implementation = SE3_SECURITY_CORE;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2200      	movs	r2, #0
 80160ac:	701a      	strb	r2, [r3, #0]
		*crypto_algo = SE3_AES256;
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	2200      	movs	r2, #0
 80160b2:	701a      	strb	r2, [r3, #0]
	}
	return true;
 80160b4:	2301      	movs	r3, #1
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	3710      	adds	r7, #16
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}

080160be <sekey_get_auth>:

bool sekey_get_auth(uint8_t *key){
 80160be:	b480      	push	{r7}
 80160c0:	b083      	sub	sp, #12
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	6078      	str	r0, [r7, #4]
	return true;
 80160c6:	2301      	movs	r3, #1
}
 80160c8:	4618      	mov	r0, r3
 80160ca:	370c      	adds	r7, #12
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <store_user_info>:

uint16_t store_user_info(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp){
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b08c      	sub	sp, #48	; 0x30
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60b9      	str	r1, [r7, #8]
 80160dc:	607a      	str	r2, [r7, #4]
 80160de:	603b      	str	r3, [r7, #0]
 80160e0:	4603      	mov	r3, r0
 80160e2:	81fb      	strh	r3, [r7, #14]
	uint8_t userid_len, username_len, offset = 0;
 80160e4:	2300      	movs	r3, #0
 80160e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	const uint8_t *userid;
	const uint8_t *username;
    se3_flash_it it = { .addr = NULL };
 80160ea:	f107 0310 	add.w	r3, r7, #16
 80160ee:	2200      	movs	r2, #0
 80160f0:	601a      	str	r2, [r3, #0]
 80160f2:	605a      	str	r2, [r3, #4]
 80160f4:	609a      	str	r2, [r3, #8]
 80160f6:	60da      	str	r2, [r3, #12]
    uint16_t size = 0;
 80160f8:	2300      	movs	r3, #0
 80160fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
    *resp_size = 0;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2200      	movs	r2, #0
 8016100:	801a      	strh	r2, [r3, #0]
	if(login_struct.access != SE3_ACCESS_ADMIN){
 8016102:	4b79      	ldr	r3, [pc, #484]	; (80162e8 <store_user_info+0x214>)
 8016104:	885b      	ldrh	r3, [r3, #2]
 8016106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801610a:	d001      	beq.n	8016110 <store_user_info+0x3c>
		return SE3_ERR_ACCESS;
 801610c:	2364      	movs	r3, #100	; 0x64
 801610e:	e0e6      	b.n	80162de <store_user_info+0x20a>
	}
	userid_len = req[offset];
 8016110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016114:	68ba      	ldr	r2, [r7, #8]
 8016116:	4413      	add	r3, r2
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	offset++;
 801611e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016122:	3301      	adds	r3, #1
 8016124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	userid = (req)+offset;
 8016128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801612c:	68ba      	ldr	r2, [r7, #8]
 801612e:	4413      	add	r3, r2
 8016130:	62bb      	str	r3, [r7, #40]	; 0x28
	offset+=userid_len;
 8016132:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8016136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801613a:	4413      	add	r3, r2
 801613c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	username_len = req[offset];
 8016140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016144:	68ba      	ldr	r2, [r7, #8]
 8016146:	4413      	add	r3, r2
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	offset++;
 801614e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016152:	3301      	adds	r3, #1
 8016154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	username = (req)+offset;
 8016158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801615c:	68ba      	ldr	r2, [r7, #8]
 801615e:	4413      	add	r3, r2
 8016160:	627b      	str	r3, [r7, #36]	; 0x24
	if((req_size-2) != (userid_len+username_len+2)){ // +2 for id len and name len, -2 for operation choice
 8016162:	89fb      	ldrh	r3, [r7, #14]
 8016164:	1e9a      	subs	r2, r3, #2
 8016166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801616a:	4619      	mov	r1, r3
 801616c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016170:	440b      	add	r3, r1
 8016172:	3302      	adds	r3, #2
 8016174:	429a      	cmp	r2, r3
 8016176:	d001      	beq.n	801617c <store_user_info+0xa8>
		return SE3_ERR_RESOURCE;
 8016178:	23c8      	movs	r3, #200	; 0xc8
 801617a:	e0b0      	b.n	80162de <store_user_info+0x20a>
	}
	// delete all nodes in the flash of type userinfo
	se3_flash_it_init(&it);
 801617c:	f107 0310 	add.w	r3, r7, #16
 8016180:	4618      	mov	r0, r3
 8016182:	f7fe ff12 	bl	8014faa <se3_flash_it_init>
	while (se3_flash_it_next(&it)){
 8016186:	e010      	b.n	80161aa <store_user_info+0xd6>
		if (it.type == SE3_TYPE_USERINFO){
 8016188:	7d3b      	ldrb	r3, [r7, #20]
 801618a:	2b75      	cmp	r3, #117	; 0x75
 801618c:	d10d      	bne.n	80161aa <store_user_info+0xd6>
			if (!se3_flash_it_delete(&it)) {
 801618e:	f107 0310 	add.w	r3, r7, #16
 8016192:	4618      	mov	r0, r3
 8016194:	f7ff f838 	bl	8015208 <se3_flash_it_delete>
 8016198:	4603      	mov	r3, r0
 801619a:	f083 0301 	eor.w	r3, r3, #1
 801619e:	b2db      	uxtb	r3, r3
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d002      	beq.n	80161aa <store_user_info+0xd6>
				return SE3_ERR_HW;
 80161a4:	f24f 0301 	movw	r3, #61441	; 0xf001
 80161a8:	e099      	b.n	80162de <store_user_info+0x20a>
	while (se3_flash_it_next(&it)){
 80161aa:	f107 0310 	add.w	r3, r7, #16
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7fe ff08 	bl	8014fc4 <se3_flash_it_next>
 80161b4:	4603      	mov	r3, r0
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d1e6      	bne.n	8016188 <store_user_info+0xb4>
			}
		}
	}
	se3_flash_it_init(&it);
 80161ba:	f107 0310 	add.w	r3, r7, #16
 80161be:	4618      	mov	r0, r3
 80161c0:	f7fe fef3 	bl	8014faa <se3_flash_it_init>
	// 1B id length, id, 1B name length, name
	size = userid_len + username_len + 2;
 80161c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80161c8:	b29a      	uxth	r2, r3
 80161ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	4413      	add	r3, r2
 80161d2:	b29b      	uxth	r3, r3
 80161d4:	3302      	adds	r3, #2
 80161d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if (size > SE3_FLASH_NODE_DATA_MAX) {
 80161d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80161da:	f640 72fe 	movw	r2, #4094	; 0xffe
 80161de:	4293      	cmp	r3, r2
 80161e0:	d902      	bls.n	80161e8 <store_user_info+0x114>
		return SE3_ERR_MEMORY;
 80161e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80161e6:	e07a      	b.n	80162de <store_user_info+0x20a>
	}

	if (!se3_flash_it_new(&it, SE3_TYPE_USERINFO, size)) {
 80161e8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80161ea:	f107 0310 	add.w	r3, r7, #16
 80161ee:	2175      	movs	r1, #117	; 0x75
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7fe ff55 	bl	80150a0 <se3_flash_it_new>
 80161f6:	4603      	mov	r3, r0
 80161f8:	f083 0301 	eor.w	r3, r3, #1
 80161fc:	b2db      	uxtb	r3, r3
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d002      	beq.n	8016208 <store_user_info+0x134>
		return SE3_ERR_MEMORY;
 8016202:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016206:	e06a      	b.n	80162de <store_user_info+0x20a>
	}
	offset = 0;
 8016208:	2300      	movs	r3, #0
 801620a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(!se3_flash_it_write(&it, offset, &userid_len, 1)) {
 801620e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016212:	b299      	uxth	r1, r3
 8016214:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8016218:	f107 0010 	add.w	r0, r7, #16
 801621c:	2301      	movs	r3, #1
 801621e:	f7fe fea1 	bl	8014f64 <se3_flash_it_write>
 8016222:	4603      	mov	r3, r0
 8016224:	f083 0301 	eor.w	r3, r3, #1
 8016228:	b2db      	uxtb	r3, r3
 801622a:	2b00      	cmp	r3, #0
 801622c:	d002      	beq.n	8016234 <store_user_info+0x160>
		return SE3_ERR_HW;
 801622e:	f24f 0301 	movw	r3, #61441	; 0xf001
 8016232:	e054      	b.n	80162de <store_user_info+0x20a>
	}
	offset++;
 8016234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016238:	3301      	adds	r3, #1
 801623a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (!se3_flash_it_write(&it, offset, userid, userid_len)) {
 801623e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016242:	b299      	uxth	r1, r3
 8016244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016248:	b29b      	uxth	r3, r3
 801624a:	f107 0010 	add.w	r0, r7, #16
 801624e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016250:	f7fe fe88 	bl	8014f64 <se3_flash_it_write>
 8016254:	4603      	mov	r3, r0
 8016256:	f083 0301 	eor.w	r3, r3, #1
 801625a:	b2db      	uxtb	r3, r3
 801625c:	2b00      	cmp	r3, #0
 801625e:	d002      	beq.n	8016266 <store_user_info+0x192>
		return SE3_ERR_HW;
 8016260:	f24f 0301 	movw	r3, #61441	; 0xf001
 8016264:	e03b      	b.n	80162de <store_user_info+0x20a>
	}
	offset+=userid_len;
 8016266:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801626a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801626e:	4413      	add	r3, r2
 8016270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(!se3_flash_it_write(&it, offset, &username_len, 1)) {
 8016274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016278:	b299      	uxth	r1, r3
 801627a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 801627e:	f107 0010 	add.w	r0, r7, #16
 8016282:	2301      	movs	r3, #1
 8016284:	f7fe fe6e 	bl	8014f64 <se3_flash_it_write>
 8016288:	4603      	mov	r3, r0
 801628a:	f083 0301 	eor.w	r3, r3, #1
 801628e:	b2db      	uxtb	r3, r3
 8016290:	2b00      	cmp	r3, #0
 8016292:	d002      	beq.n	801629a <store_user_info+0x1c6>
		return SE3_ERR_HW;
 8016294:	f24f 0301 	movw	r3, #61441	; 0xf001
 8016298:	e021      	b.n	80162de <store_user_info+0x20a>
	}
	offset++;
 801629a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801629e:	3301      	adds	r3, #1
 80162a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (!se3_flash_it_write(&it, offset, username, username_len)) {
 80162a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80162a8:	b299      	uxth	r1, r3
 80162aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	f107 0010 	add.w	r0, r7, #16
 80162b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162b6:	f7fe fe55 	bl	8014f64 <se3_flash_it_write>
 80162ba:	4603      	mov	r3, r0
 80162bc:	f083 0301 	eor.w	r3, r3, #1
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d002      	beq.n	80162cc <store_user_info+0x1f8>
		return SE3_ERR_HW;
 80162c6:	f24f 0301 	movw	r3, #61441	; 0xf001
 80162ca:	e008      	b.n	80162de <store_user_info+0x20a>
	}
	*resp_size = 8;
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	2208      	movs	r2, #8
 80162d0:	801a      	strh	r2, [r3, #0]
	memcpy(resp, "SEKEY_OK", 8);
 80162d2:	2208      	movs	r2, #8
 80162d4:	4905      	ldr	r1, [pc, #20]	; (80162ec <store_user_info+0x218>)
 80162d6:	6838      	ldr	r0, [r7, #0]
 80162d8:	f001 f882 	bl	80173e0 <memcpy>
	return SE3_OK;
 80162dc:	2300      	movs	r3, #0
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3730      	adds	r7, #48	; 0x30
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	2000d218 	.word	0x2000d218
 80162ec:	0801765c 	.word	0x0801765c

080162f0 <load_user_info>:

uint16_t load_user_info(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp){
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b08c      	sub	sp, #48	; 0x30
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	60b9      	str	r1, [r7, #8]
 80162f8:	607a      	str	r2, [r7, #4]
 80162fa:	603b      	str	r3, [r7, #0]
 80162fc:	4603      	mov	r3, r0
 80162fe:	81fb      	strh	r3, [r7, #14]
	uint8_t userid_len, username_len, offset, counter = 0, total = 0;
 8016300:	2300      	movs	r3, #0
 8016302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016306:	2300      	movs	r3, #0
 8016308:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	se3_flash_it it = { .addr = NULL };
 801630c:	f107 0314 	add.w	r3, r7, #20
 8016310:	2200      	movs	r2, #0
 8016312:	601a      	str	r2, [r3, #0]
 8016314:	605a      	str	r2, [r3, #4]
 8016316:	609a      	str	r2, [r3, #8]
 8016318:	60da      	str	r2, [r3, #12]
	uint8_t *tmp = NULL;
 801631a:	2300      	movs	r3, #0
 801631c:	62bb      	str	r3, [r7, #40]	; 0x28
	se3_flash_it_init(&it);
 801631e:	f107 0314 	add.w	r3, r7, #20
 8016322:	4618      	mov	r0, r3
 8016324:	f7fe fe41 	bl	8014faa <se3_flash_it_init>
	*resp_size = 0;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2200      	movs	r2, #0
 801632c:	801a      	strh	r2, [r3, #0]
	while(se3_flash_it_next(&it)){
 801632e:	e055      	b.n	80163dc <load_user_info+0xec>
		if(it.type == SE3_TYPE_USERINFO){
 8016330:	7e3b      	ldrb	r3, [r7, #24]
 8016332:	2b75      	cmp	r3, #117	; 0x75
 8016334:	d152      	bne.n	80163dc <load_user_info+0xec>
			if(counter != 0){
 8016336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801633a:	2b00      	cmp	r3, #0
 801633c:	d007      	beq.n	801634e <load_user_info+0x5e>
				if(tmp != NULL){
 801633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016340:	2b00      	cmp	r3, #0
 8016342:	d002      	beq.n	801634a <load_user_info+0x5a>
					free(tmp);
 8016344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016346:	f001 f835 	bl	80173b4 <free>
				}
				return SE3_ERR_RESOURCE;
 801634a:	23c8      	movs	r3, #200	; 0xc8
 801634c:	e06f      	b.n	801642e <load_user_info+0x13e>
			}
			counter++;
 801634e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016352:	3301      	adds	r3, #1
 8016354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			offset = 0;
 8016358:	2300      	movs	r3, #0
 801635a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			memcpy(&userid_len, it.addr+offset, 1);
 801635e:	697a      	ldr	r2, [r7, #20]
 8016360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016364:	4413      	add	r3, r2
 8016366:	781b      	ldrb	r3, [r3, #0]
 8016368:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			offset++;
 801636c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016370:	3301      	adds	r3, #1
 8016372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			offset+=userid_len;
 8016376:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801637a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801637e:	4413      	add	r3, r2
 8016380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			memcpy(&username_len, it.addr+offset, 1);
 8016384:	697a      	ldr	r2, [r7, #20]
 8016386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801638a:	4413      	add	r3, r2
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			total = userid_len + username_len + 2;
 8016392:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016396:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801639a:	4413      	add	r3, r2
 801639c:	b2db      	uxtb	r3, r3
 801639e:	3302      	adds	r3, #2
 80163a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if(tmp != NULL){
 80163a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d004      	beq.n	80163b4 <load_user_info+0xc4>
				free(tmp);
 80163aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163ac:	f001 f802 	bl	80173b4 <free>
				tmp = NULL;
 80163b0:	2300      	movs	r3, #0
 80163b2:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			tmp = (uint8_t*)malloc(total*sizeof(uint8_t));
 80163b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80163b8:	4618      	mov	r0, r3
 80163ba:	f000 fff3 	bl	80173a4 <malloc>
 80163be:	4603      	mov	r3, r0
 80163c0:	62bb      	str	r3, [r7, #40]	; 0x28
			if(tmp == NULL){ return SE3_ERR_MEMORY;	}
 80163c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d102      	bne.n	80163ce <load_user_info+0xde>
 80163c8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80163cc:	e02f      	b.n	801642e <load_user_info+0x13e>
			memcpy(tmp, it.addr, total);
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80163d4:	4619      	mov	r1, r3
 80163d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163d8:	f001 f802 	bl	80173e0 <memcpy>
	while(se3_flash_it_next(&it)){
 80163dc:	f107 0314 	add.w	r3, r7, #20
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7fe fdef 	bl	8014fc4 <se3_flash_it_next>
 80163e6:	4603      	mov	r3, r0
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d1a1      	bne.n	8016330 <load_user_info+0x40>
		}
	}
	if(counter != 1){
 80163ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80163f0:	2b01      	cmp	r3, #1
 80163f2:	d007      	beq.n	8016404 <load_user_info+0x114>
		if(tmp != NULL){
 80163f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d002      	beq.n	8016400 <load_user_info+0x110>
			free(tmp);
 80163fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163fc:	f000 ffda 	bl	80173b4 <free>
		}
		return SE3_ERR_RESOURCE;
 8016400:	23c8      	movs	r3, #200	; 0xc8
 8016402:	e014      	b.n	801642e <load_user_info+0x13e>
	} else {
		if(tmp != NULL){
 8016404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016406:	2b00      	cmp	r3, #0
 8016408:	d010      	beq.n	801642c <load_user_info+0x13c>
			memcpy(resp, tmp, total);
 801640a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801640e:	461a      	mov	r2, r3
 8016410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016412:	6838      	ldr	r0, [r7, #0]
 8016414:	f000 ffe4 	bl	80173e0 <memcpy>
			*resp_size = total;
 8016418:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801641c:	b29a      	uxth	r2, r3
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	801a      	strh	r2, [r3, #0]
			free(tmp);
 8016422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016424:	f000 ffc6 	bl	80173b4 <free>
			return SE3_OK;
 8016428:	2300      	movs	r3, #0
 801642a:	e000      	b.n	801642e <load_user_info+0x13e>
		} else {
			return SE3_ERR_RESOURCE;
 801642c:	23c8      	movs	r3, #200	; 0xc8
		}
	}
}
 801642e:	4618      	mov	r0, r3
 8016430:	3730      	adds	r7, #48	; 0x30
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
	...

08016438 <load_encrypted_key_data>:

uint16_t load_encrypted_key_data(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp){
 8016438:	b5b0      	push	{r4, r5, r7, lr}
 801643a:	f6ad 0d78 	subw	sp, sp, #2168	; 0x878
 801643e:	af00      	add	r7, sp, #0
 8016440:	4604      	mov	r4, r0
 8016442:	f107 0008 	add.w	r0, r7, #8
 8016446:	6001      	str	r1, [r0, #0]
 8016448:	1d39      	adds	r1, r7, #4
 801644a:	600a      	str	r2, [r1, #0]
 801644c:	463a      	mov	r2, r7
 801644e:	6013      	str	r3, [r2, #0]
 8016450:	f107 030e 	add.w	r3, r7, #14
 8016454:	4622      	mov	r2, r4
 8016456:	801a      	strh	r2, [r3, #0]
	uint32_t wrapped_key_id = 0, curr_key_id = 0, wrapping_key_id = 0;
 8016458:	2300      	movs	r3, #0
 801645a:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 801645e:	2300      	movs	r3, #0
 8016460:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8016464:	2300      	movs	r3, #0
 8016466:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
	uint16_t key_len = 0; // length of wrapped key
 801646a:	2300      	movs	r3, #0
 801646c:	f8a7 384e 	strh.w	r3, [r7, #2126]	; 0x84e
	uint8_t *wrapped_key_data = NULL;
 8016470:	2300      	movs	r3, #0
 8016472:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
	int counter = 0;
 8016476:	2300      	movs	r3, #0
 8016478:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
	se3_flash_it it = { .addr = NULL };
 801647c:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8016480:	2200      	movs	r2, #0
 8016482:	601a      	str	r2, [r3, #0]
 8016484:	605a      	str	r2, [r3, #4]
 8016486:	609a      	str	r2, [r3, #8]
 8016488:	60da      	str	r2, [r3, #12]
	*resp_size = 0;
 801648a:	1d3b      	adds	r3, r7, #4
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	2200      	movs	r2, #0
 8016490:	801a      	strh	r2, [r3, #0]

	// preliminary check
	if(login_struct.access != SE3_ACCESS_ADMIN){
 8016492:	4bce      	ldr	r3, [pc, #824]	; (80167cc <load_encrypted_key_data+0x394>)
 8016494:	885b      	ldrh	r3, [r3, #2]
 8016496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801649a:	d001      	beq.n	80164a0 <load_encrypted_key_data+0x68>
		return SE3_ERR_ACCESS; // admin privilege level required
 801649c:	2364      	movs	r3, #100	; 0x64
 801649e:	e2d5      	b.n	8016a4c <load_encrypted_key_data+0x614>
	}
	if((req_size - 2) != 8){
 80164a0:	f107 030e 	add.w	r3, r7, #14
 80164a4:	881b      	ldrh	r3, [r3, #0]
 80164a6:	2b0a      	cmp	r3, #10
 80164a8:	d002      	beq.n	80164b0 <load_encrypted_key_data+0x78>
		return SE3_ERR_PARAMS; // check if the request has the right size (do not consider OP code)
 80164aa:	f24f 0306 	movw	r3, #61446	; 0xf006
 80164ae:	e2cd      	b.n	8016a4c <load_encrypted_key_data+0x614>
 80164b0:	f107 0308 	add.w	r3, r7, #8
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	681b      	ldr	r3, [r3, #0]
	}

	// get key IDs
	memcpy(&wrapped_key_id, req, 4); // ID of key to be wrapped
 80164b8:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
	memcpy(&wrapping_key_id, req+4, 4); // ID of key wrapping key
 80164bc:	f107 0308 	add.w	r3, r7, #8
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	3304      	adds	r3, #4
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
	if(wrapping_key_id == ZERO_ID || wrapping_key_id == NULL_ID || wrapped_key_id == ZERO_ID || wrapped_key_id == NULL_ID){
 80164ca:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d00d      	beq.n	80164ee <load_encrypted_key_data+0xb6>
 80164d2:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80164d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164da:	d008      	beq.n	80164ee <load_encrypted_key_data+0xb6>
 80164dc:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d004      	beq.n	80164ee <load_encrypted_key_data+0xb6>
 80164e4:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 80164e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164ec:	d102      	bne.n	80164f4 <load_encrypted_key_data+0xbc>
		return SE3_ERR_PARAMS;
 80164ee:	f24f 0306 	movw	r3, #61446	; 0xf006
 80164f2:	e2ab      	b.n	8016a4c <load_encrypted_key_data+0x614>
	}

	// scan flash searching for wrapped key
	se3_flash_it_init(&it);
 80164f4:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 80164f8:	4618      	mov	r0, r3
 80164fa:	f7fe fd56 	bl	8014faa <se3_flash_it_init>
	while (se3_flash_it_next(&it)) {
 80164fe:	e04c      	b.n	801659a <load_encrypted_key_data+0x162>
		/* this implementation scans the entire flash memory searching for the key, therefore it is sub-optimal.
		 * in order to enhance the performance this can be modified returning as soon as the key is found; but
		 * this would not detect any duplicated key ID. */
		if (it.type == SE3_TYPE_KEY) {
 8016500:	f897 3840 	ldrb.w	r3, [r7, #2112]	; 0x840
 8016504:	2b64      	cmp	r3, #100	; 0x64
 8016506:	d148      	bne.n	801659a <load_encrypted_key_data+0x162>
			SE3_GET32(it.addr, SE3_FLASH_KEY_OFF_ID, curr_key_id);
 8016508:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
			if (curr_key_id == wrapped_key_id) {
 8016512:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8016516:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 801651a:	429a      	cmp	r2, r3
 801651c:	d13d      	bne.n	801659a <load_encrypted_key_data+0x162>
				if(counter != 0){ // found duplicated key ID...error
 801651e:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8016522:	2b00      	cmp	r3, #0
 8016524:	d009      	beq.n	801653a <load_encrypted_key_data+0x102>
					if(wrapped_key_data != NULL){
 8016526:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 801652a:	2b00      	cmp	r3, #0
 801652c:	d003      	beq.n	8016536 <load_encrypted_key_data+0xfe>
						free(wrapped_key_data);
 801652e:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 8016532:	f000 ff3f 	bl	80173b4 <free>
					}
					return SE3_ERR_RESOURCE;
 8016536:	23c8      	movs	r3, #200	; 0xc8
 8016538:	e288      	b.n	8016a4c <load_encrypted_key_data+0x614>
				}
				counter++; // counter of keys with the ID we are looking for
 801653a:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 801653e:	3301      	adds	r3, #1
 8016540:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
				SE3_GET16(it.addr, SE3_FLASH_KEY_OFF_DATA_LEN, key_len);
 8016544:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8016548:	3304      	adds	r3, #4
 801654a:	881b      	ldrh	r3, [r3, #0]
 801654c:	b29b      	uxth	r3, r3
 801654e:	f8a7 384e 	strh.w	r3, [r7, #2126]	; 0x84e
				if(wrapped_key_data != NULL){ // before malloc, free keycontent if, for any reason, it is not NULL
 8016552:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8016556:	2b00      	cmp	r3, #0
 8016558:	d006      	beq.n	8016568 <load_encrypted_key_data+0x130>
					free(wrapped_key_data);
 801655a:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 801655e:	f000 ff29 	bl	80173b4 <free>
					wrapped_key_data = NULL;
 8016562:	2300      	movs	r3, #0
 8016564:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
				}
				wrapped_key_data = (uint8_t*)malloc(key_len);
 8016568:	f8b7 384e 	ldrh.w	r3, [r7, #2126]	; 0x84e
 801656c:	4618      	mov	r0, r3
 801656e:	f000 ff19 	bl	80173a4 <malloc>
 8016572:	4603      	mov	r3, r0
 8016574:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
				if(wrapped_key_data == NULL){
 8016578:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 801657c:	2b00      	cmp	r3, #0
 801657e:	d102      	bne.n	8016586 <load_encrypted_key_data+0x14e>
					return SE3_ERR_MEMORY;
 8016580:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016584:	e262      	b.n	8016a4c <load_encrypted_key_data+0x614>
				}
				memcpy(wrapped_key_data, it.addr+SE3_FLASH_KEY_OFF_DATA, key_len);
 8016586:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 801658a:	3306      	adds	r3, #6
 801658c:	f8b7 284e 	ldrh.w	r2, [r7, #2126]	; 0x84e
 8016590:	4619      	mov	r1, r3
 8016592:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 8016596:	f000 ff23 	bl	80173e0 <memcpy>
	while (se3_flash_it_next(&it)) {
 801659a:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801659e:	4618      	mov	r0, r3
 80165a0:	f7fe fd10 	bl	8014fc4 <se3_flash_it_next>
 80165a4:	4603      	mov	r3, r0
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d1aa      	bne.n	8016500 <load_encrypted_key_data+0xc8>
			}
		}
	}
	if(counter != 1){ // check if key (only 1) was found
 80165aa:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 80165ae:	2b01      	cmp	r3, #1
 80165b0:	d009      	beq.n	80165c6 <load_encrypted_key_data+0x18e>
		if(wrapped_key_data != NULL){
 80165b2:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d003      	beq.n	80165c2 <load_encrypted_key_data+0x18a>
			free(wrapped_key_data);
 80165ba:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 80165be:	f000 fef9 	bl	80173b4 <free>
		}
		return SE3_ERR_RESOURCE;
 80165c2:	23c8      	movs	r3, #200	; 0xc8
 80165c4:	e242      	b.n	8016a4c <load_encrypted_key_data+0x614>
	}

	/* encrypt the value of keycontent with the wrapping key */
	uint8_t request[BUFSIZE], response[BUFSIZE];
	memset(request, 0, BUFSIZE); // request buffer for crypto_init() and crypto_update()
 80165c6:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80165ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80165ce:	2100      	movs	r1, #0
 80165d0:	4618      	mov	r0, r3
 80165d2:	f000 ff2d 	bl	8017430 <memset>
	memset(response, 0, BUFSIZE); // response buffer for crypto_init() and crypto_update()
 80165d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80165da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80165de:	2100      	movs	r1, #0
 80165e0:	4618      	mov	r0, r3
 80165e2:	f000 ff25 	bl	8017430 <memset>
	uint16_t response_size = 0; // response for crypto_init() and crypto_update()
 80165e6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80165ea:	2200      	movs	r2, #0
 80165ec:	801a      	strh	r2, [r3, #0]
	uint16_t algo = SE3_ALGO_AES; // key is wrapped using AES-CBC
 80165ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80165f2:	2200      	movs	r2, #0
 80165f4:	801a      	strh	r2, [r3, #0]
	uint16_t mode = SE3_FEEDBACK_CBC | SE3_DIR_ENCRYPT;
 80165f6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80165fa:	f44f 7281 	mov.w	r2, #258	; 0x102
 80165fe:	801a      	strh	r2, [r3, #0]
	uint32_t sessionId = SE3_SESSION_INVALID; // session returned by crypto_init()
 8016600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016604:	f04f 32ff 	mov.w	r2, #4294967295
 8016608:	601a      	str	r2, [r3, #0]
 801660a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801660e:	881a      	ldrh	r2, [r3, #0]
	// write crypto_init() parameters to request buffer
	memcpy(request + SE3_CMD1_CRYPTO_INIT_REQ_OFF_ALGO, &algo, 2);
 8016610:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8016614:	801a      	strh	r2, [r3, #0]
	memcpy(request + SE3_CMD1_CRYPTO_INIT_REQ_OFF_MODE, &mode, 2);
 8016616:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 801661a:	3302      	adds	r3, #2
 801661c:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8016620:	8812      	ldrh	r2, [r2, #0]
 8016622:	801a      	strh	r2, [r3, #0]
	memcpy(request + SE3_CMD1_CRYPTO_INIT_REQ_OFF_KEY_ID, &wrapping_key_id, 4);
 8016624:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8016628:	3304      	adds	r3, #4
 801662a:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 801662e:	601a      	str	r2, [r3, #0]
	// initialise crypto context
	uint16_t rc = crypto_init(SE3_CMD1_CRYPTO_INIT_REQ_SIZE, request, &response_size, response);
 8016630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016634:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8016638:	f207 413c 	addw	r1, r7, #1084	; 0x43c
 801663c:	2008      	movs	r0, #8
 801663e:	f7ff fa51 	bl	8015ae4 <crypto_init>
 8016642:	4603      	mov	r3, r0
 8016644:	f8a7 386e 	strh.w	r3, [r7, #2158]	; 0x86e
	if((rc != SE3_OK) || (response_size != SE3_CMD1_CRYPTO_INIT_RESP_SIZE)){
 8016648:	f8b7 386e 	ldrh.w	r3, [r7, #2158]	; 0x86e
 801664c:	2b00      	cmp	r3, #0
 801664e:	d104      	bne.n	801665a <load_encrypted_key_data+0x222>
 8016650:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8016654:	881b      	ldrh	r3, [r3, #0]
 8016656:	2b04      	cmp	r3, #4
 8016658:	d009      	beq.n	801666e <load_encrypted_key_data+0x236>
		if(wrapped_key_data != NULL){
 801665a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 801665e:	2b00      	cmp	r3, #0
 8016660:	d003      	beq.n	801666a <load_encrypted_key_data+0x232>
			free(wrapped_key_data);
 8016662:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 8016666:	f000 fea5 	bl	80173b4 <free>
		}
		return SE3_ERR_RESOURCE;
 801666a:	23c8      	movs	r3, #200	; 0xc8
 801666c:	e1ee      	b.n	8016a4c <load_encrypted_key_data+0x614>
	}

	memcpy(&sessionId, response+SE3_CMD1_CRYPTO_INIT_RESP_OFF_SID, response_size); // get session id from crypto_init()
 801666e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8016672:	881b      	ldrh	r3, [r3, #0]
 8016674:	461a      	mov	r2, r3
 8016676:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801667a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801667e:	4618      	mov	r0, r3
 8016680:	f000 feae 	bl	80173e0 <memcpy>
	uint8_t padding = (B5_AES_BLK_SIZE - (key_len % B5_AES_BLK_SIZE)); // compute how much padding we need for encryption according to PKCS#7
 8016684:	f8b7 384e 	ldrh.w	r3, [r7, #2126]	; 0x84e
 8016688:	b2db      	uxtb	r3, r3
 801668a:	f003 030f 	and.w	r3, r3, #15
 801668e:	b2db      	uxtb	r3, r3
 8016690:	f1c3 0310 	rsb	r3, r3, #16
 8016694:	f887 386d 	strb.w	r3, [r7, #2157]	; 0x86d
	size_t plaintext_size = key_len + padding; // total size of buffer to be encrypted, including padding
 8016698:	f8b7 384e 	ldrh.w	r3, [r7, #2126]	; 0x84e
 801669c:	461a      	mov	r2, r3
 801669e:	f897 386d 	ldrb.w	r3, [r7, #2157]	; 0x86d
 80166a2:	4413      	add	r3, r2
 80166a4:	461a      	mov	r2, r3
 80166a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80166aa:	601a      	str	r2, [r3, #0]

	// allocate buffer to store wrapped key and padding
	uint8_t *plaintext_data = NULL;
 80166ac:	2300      	movs	r3, #0
 80166ae:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
	plaintext_data = malloc(plaintext_size);
 80166b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	4618      	mov	r0, r3
 80166ba:	f000 fe73 	bl	80173a4 <malloc>
 80166be:	4603      	mov	r3, r0
 80166c0:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
	if(plaintext_data == NULL){
 80166c4:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d109      	bne.n	80166e0 <load_encrypted_key_data+0x2a8>
		if(wrapped_key_data != NULL){ free(wrapped_key_data); }
 80166cc:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d003      	beq.n	80166dc <load_encrypted_key_data+0x2a4>
 80166d4:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 80166d8:	f000 fe6c 	bl	80173b4 <free>
		return SE3_ERR_RESOURCE;
 80166dc:	23c8      	movs	r3, #200	; 0xc8
 80166de:	e1b5      	b.n	8016a4c <load_encrypted_key_data+0x614>
	} else {
		memset(plaintext_data, 0, plaintext_size);
 80166e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	461a      	mov	r2, r3
 80166e8:	2100      	movs	r1, #0
 80166ea:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 80166ee:	f000 fe9f 	bl	8017430 <memset>
		memcpy(plaintext_data, wrapped_key_data, key_len); // copy value of wrapped key
 80166f2:	f8b7 384e 	ldrh.w	r3, [r7, #2126]	; 0x84e
 80166f6:	461a      	mov	r2, r3
 80166f8:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 80166fc:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016700:	f000 fe6e 	bl	80173e0 <memcpy>
		memset(plaintext_data+key_len, padding, padding); // set padding according to PKCS#7
 8016704:	f8b7 384e 	ldrh.w	r3, [r7, #2126]	; 0x84e
 8016708:	461a      	mov	r2, r3
 801670a:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 801670e:	4413      	add	r3, r2
 8016710:	f897 186d 	ldrb.w	r1, [r7, #2157]	; 0x86d
 8016714:	f897 286d 	ldrb.w	r2, [r7, #2157]	; 0x86d
 8016718:	4618      	mov	r0, r3
 801671a:	f000 fe89 	bl	8017430 <memset>
	}

	// allocate buffer to store encrypted value of wrapped key
	uint8_t *ciphertext_data = NULL;
 801671e:	2300      	movs	r3, #0
 8016720:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
	size_t ciphertext_size = plaintext_size + B5_AES_BLK_SIZE; // consider ciphertext + initialisation vector
 8016724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	3310      	adds	r3, #16
 801672c:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
	ciphertext_data = malloc(ciphertext_size);
 8016730:	f8d7 0860 	ldr.w	r0, [r7, #2144]	; 0x860
 8016734:	f000 fe36 	bl	80173a4 <malloc>
 8016738:	4603      	mov	r3, r0
 801673a:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
	if(ciphertext_data == NULL){
 801673e:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8016742:	2b00      	cmp	r3, #0
 8016744:	d111      	bne.n	801676a <load_encrypted_key_data+0x332>
		if(wrapped_key_data != NULL){ free(wrapped_key_data); }
 8016746:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 801674a:	2b00      	cmp	r3, #0
 801674c:	d003      	beq.n	8016756 <load_encrypted_key_data+0x31e>
 801674e:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 8016752:	f000 fe2f 	bl	80173b4 <free>
		if(plaintext_data != NULL){ free(plaintext_data); }
 8016756:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 801675a:	2b00      	cmp	r3, #0
 801675c:	d003      	beq.n	8016766 <load_encrypted_key_data+0x32e>
 801675e:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016762:	f000 fe27 	bl	80173b4 <free>
		return SE3_ERR_RESOURCE;
 8016766:	23c8      	movs	r3, #200	; 0xc8
 8016768:	e170      	b.n	8016a4c <load_encrypted_key_data+0x614>
	} else {
		memset(ciphertext_data, 0, ciphertext_size);
 801676a:	f8d7 2860 	ldr.w	r2, [r7, #2144]	; 0x860
 801676e:	2100      	movs	r1, #0
 8016770:	f8d7 0864 	ldr.w	r0, [r7, #2148]	; 0x864
 8016774:	f000 fe5c 	bl	8017430 <memset>
	}

	// generate random initialisation vector for AES-CBC
	uint8_t iv[B5_AES_BLK_SIZE];
	memset(iv, 0, B5_AES_BLK_SIZE);
 8016778:	f107 031c 	add.w	r3, r7, #28
 801677c:	2210      	movs	r2, #16
 801677e:	2100      	movs	r1, #0
 8016780:	4618      	mov	r0, r3
 8016782:	f000 fe55 	bl	8017430 <memset>
	if(se3_rand(B5_AES_BLK_SIZE, iv) != B5_AES_BLK_SIZE){
 8016786:	f107 031c 	add.w	r3, r7, #28
 801678a:	4619      	mov	r1, r3
 801678c:	2010      	movs	r0, #16
 801678e:	f7f4 f91d 	bl	800a9cc <se3_rand>
 8016792:	4603      	mov	r3, r0
 8016794:	2b10      	cmp	r3, #16
 8016796:	d01b      	beq.n	80167d0 <load_encrypted_key_data+0x398>
		if(wrapped_key_data != NULL){ free(wrapped_key_data); }
 8016798:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 801679c:	2b00      	cmp	r3, #0
 801679e:	d003      	beq.n	80167a8 <load_encrypted_key_data+0x370>
 80167a0:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 80167a4:	f000 fe06 	bl	80173b4 <free>
		if(plaintext_data != NULL){ free(plaintext_data); }
 80167a8:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d003      	beq.n	80167b8 <load_encrypted_key_data+0x380>
 80167b0:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 80167b4:	f000 fdfe 	bl	80173b4 <free>
		if(ciphertext_data != NULL){ free(ciphertext_data); }
 80167b8:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d003      	beq.n	80167c8 <load_encrypted_key_data+0x390>
 80167c0:	f8d7 0864 	ldr.w	r0, [r7, #2148]	; 0x864
 80167c4:	f000 fdf6 	bl	80173b4 <free>
		return SE3_ERR_RESOURCE;
 80167c8:	23c8      	movs	r3, #200	; 0xc8
 80167ca:	e13f      	b.n	8016a4c <load_encrypted_key_data+0x614>
 80167cc:	2000d218 	.word	0x2000d218
	}

	// setup initialisation vector
	uint16_t flags = SE3_CRYPTO_FLAG_SETIV;
 80167d0:	f107 031a 	add.w	r3, r7, #26
 80167d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80167d8:	801a      	strh	r2, [r3, #0]
	uint16_t iv_len = B5_AES_BLK_SIZE;
 80167da:	f107 0318 	add.w	r3, r7, #24
 80167de:	2210      	movs	r2, #16
 80167e0:	801a      	strh	r2, [r3, #0]
	memset(request, 0, BUFSIZE);
 80167e2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80167e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80167ea:	2100      	movs	r1, #0
 80167ec:	4618      	mov	r0, r3
 80167ee:	f000 fe1f 	bl	8017430 <memset>
	memset(response, 0, BUFSIZE);
 80167f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80167f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80167fa:	2100      	movs	r1, #0
 80167fc:	4618      	mov	r0, r3
 80167fe:	f000 fe17 	bl	8017430 <memset>
 8016802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016806:	681a      	ldr	r2, [r3, #0]
	memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_SID, &sessionId, 4); // first 4 byte for session id
 8016808:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 801680c:	601a      	str	r2, [r3, #0]
	memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_FLAGS, &flags, 2); // 2 bytes for flags
 801680e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8016812:	3304      	adds	r3, #4
 8016814:	f107 021a 	add.w	r2, r7, #26
 8016818:	8812      	ldrh	r2, [r2, #0]
 801681a:	801a      	strh	r2, [r3, #0]
	memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATAIN1_LEN, &iv_len, 2); // 2 bytes for datain1_len
 801681c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8016820:	3306      	adds	r3, #6
 8016822:	f107 0218 	add.w	r2, r7, #24
 8016826:	8812      	ldrh	r2, [r2, #0]
 8016828:	801a      	strh	r2, [r3, #0]
	memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATA, iv, iv_len); // copy initialisation vector
 801682a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 801682e:	3310      	adds	r3, #16
 8016830:	f107 0218 	add.w	r2, r7, #24
 8016834:	8812      	ldrh	r2, [r2, #0]
 8016836:	f107 011c 	add.w	r1, r7, #28
 801683a:	4618      	mov	r0, r3
 801683c:	f000 fdd0 	bl	80173e0 <memcpy>
	uint16_t this_req_size = 0;
 8016840:	2300      	movs	r3, #0
 8016842:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e
	this_req_size = 4 + 2 + 2 + iv_len;
 8016846:	f107 0318 	add.w	r3, r7, #24
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	3308      	adds	r3, #8
 801684e:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e
	/* request is only partially filled because we set only the bytes we need, everything else has already been set to 0,
	   therefore it will be ignored by crypto_update (). */
	rc = crypto_update(this_req_size, request, &response_size, response);
 8016852:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016856:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801685a:	f207 413c 	addw	r1, r7, #1084	; 0x43c
 801685e:	f8b7 085e 	ldrh.w	r0, [r7, #2142]	; 0x85e
 8016862:	f7ff f9fb 	bl	8015c5c <crypto_update>
 8016866:	4603      	mov	r3, r0
 8016868:	f8a7 386e 	strh.w	r3, [r7, #2158]	; 0x86e
	if(rc != SE3_OK){
 801686c:	f8b7 386e 	ldrh.w	r3, [r7, #2158]	; 0x86e
 8016870:	2b00      	cmp	r3, #0
 8016872:	d019      	beq.n	80168a8 <load_encrypted_key_data+0x470>
		if(wrapped_key_data != NULL){ free(wrapped_key_data); }
 8016874:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8016878:	2b00      	cmp	r3, #0
 801687a:	d003      	beq.n	8016884 <load_encrypted_key_data+0x44c>
 801687c:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 8016880:	f000 fd98 	bl	80173b4 <free>
		if(plaintext_data != NULL){ free(plaintext_data); }
 8016884:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8016888:	2b00      	cmp	r3, #0
 801688a:	d003      	beq.n	8016894 <load_encrypted_key_data+0x45c>
 801688c:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016890:	f000 fd90 	bl	80173b4 <free>
		if(ciphertext_data != NULL){ free(ciphertext_data); }
 8016894:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8016898:	2b00      	cmp	r3, #0
 801689a:	d003      	beq.n	80168a4 <load_encrypted_key_data+0x46c>
 801689c:	f8d7 0864 	ldr.w	r0, [r7, #2148]	; 0x864
 80168a0:	f000 fd88 	bl	80173b4 <free>
		return SE3_ERR_RESOURCE;
 80168a4:	23c8      	movs	r3, #200	; 0xc8
 80168a6:	e0d1      	b.n	8016a4c <load_encrypted_key_data+0x614>
	}

	// copy initialisation vector to first part of our encrypted data (iv must be visible in clear)
	memcpy(ciphertext_data, iv, B5_AES_BLK_SIZE);
 80168a8:	f8d7 2864 	ldr.w	r2, [r7, #2148]	; 0x864
 80168ac:	f107 031c 	add.w	r3, r7, #28
 80168b0:	4614      	mov	r4, r2
 80168b2:	461d      	mov	r5, r3
 80168b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168b6:	6020      	str	r0, [r4, #0]
 80168b8:	6061      	str	r1, [r4, #4]
 80168ba:	60a2      	str	r2, [r4, #8]
 80168bc:	60e3      	str	r3, [r4, #12]

	// do actual AES-CBC encryption
	flags = SE3_CRYPTO_FLAG_FINIT;
 80168be:	f107 031a 	add.w	r3, r7, #26
 80168c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80168c6:	801a      	strh	r2, [r3, #0]
	memset(request, 0, BUFSIZE);
 80168c8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80168cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80168d0:	2100      	movs	r1, #0
 80168d2:	4618      	mov	r0, r3
 80168d4:	f000 fdac 	bl	8017430 <memset>
	memset(response, 0, BUFSIZE);
 80168d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80168dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80168e0:	2100      	movs	r1, #0
 80168e2:	4618      	mov	r0, r3
 80168e4:	f000 fda4 	bl	8017430 <memset>
 80168e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80168ec:	681a      	ldr	r2, [r3, #0]
	/* request is only partially filled because we set only the bytes we need, everything else has already been set to 0,
	   therefore it will be ignored by crypto_update (). */
	memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_SID, &sessionId, 4);
 80168ee:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80168f2:	601a      	str	r2, [r3, #0]
	memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_FLAGS, &flags, 2);
 80168f4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80168f8:	3304      	adds	r3, #4
 80168fa:	f107 021a 	add.w	r2, r7, #26
 80168fe:	8812      	ldrh	r2, [r2, #0]
 8016900:	801a      	strh	r2, [r3, #0]
	memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATAIN2_LEN, &plaintext_size, 2);
 8016902:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8016906:	3308      	adds	r3, #8
 8016908:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801690c:	8812      	ldrh	r2, [r2, #0]
 801690e:	801a      	strh	r2, [r3, #0]
	memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATA, plaintext_data, plaintext_size);
 8016910:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8016914:	3310      	adds	r3, #16
 8016916:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801691a:	6812      	ldr	r2, [r2, #0]
 801691c:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 8016920:	4618      	mov	r0, r3
 8016922:	f000 fd5d 	bl	80173e0 <memcpy>
	this_req_size = 4 + 2 + 2 + plaintext_size;
 8016926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	b29b      	uxth	r3, r3
 801692e:	3308      	adds	r3, #8
 8016930:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e
	rc = crypto_update(this_req_size, request, &response_size, response);
 8016934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016938:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801693c:	f207 413c 	addw	r1, r7, #1084	; 0x43c
 8016940:	f8b7 085e 	ldrh.w	r0, [r7, #2142]	; 0x85e
 8016944:	f7ff f98a 	bl	8015c5c <crypto_update>
 8016948:	4603      	mov	r3, r0
 801694a:	f8a7 386e 	strh.w	r3, [r7, #2158]	; 0x86e
	if(rc != SE3_OK){
 801694e:	f8b7 386e 	ldrh.w	r3, [r7, #2158]	; 0x86e
 8016952:	2b00      	cmp	r3, #0
 8016954:	d019      	beq.n	801698a <load_encrypted_key_data+0x552>
		if(wrapped_key_data != NULL){ free(wrapped_key_data); }
 8016956:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 801695a:	2b00      	cmp	r3, #0
 801695c:	d003      	beq.n	8016966 <load_encrypted_key_data+0x52e>
 801695e:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 8016962:	f000 fd27 	bl	80173b4 <free>
		if(plaintext_data != NULL){ free(plaintext_data); }
 8016966:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 801696a:	2b00      	cmp	r3, #0
 801696c:	d003      	beq.n	8016976 <load_encrypted_key_data+0x53e>
 801696e:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016972:	f000 fd1f 	bl	80173b4 <free>
		if(ciphertext_data != NULL){ free(ciphertext_data); }
 8016976:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 801697a:	2b00      	cmp	r3, #0
 801697c:	d003      	beq.n	8016986 <load_encrypted_key_data+0x54e>
 801697e:	f8d7 0864 	ldr.w	r0, [r7, #2148]	; 0x864
 8016982:	f000 fd17 	bl	80173b4 <free>
		return SE3_ERR_RESOURCE;
 8016986:	23c8      	movs	r3, #200	; 0xc8
 8016988:	e060      	b.n	8016a4c <load_encrypted_key_data+0x614>
	}

	// parse response buffer after crypto_update()
	uint16_t encrypted_size = 0;
 801698a:	f107 0316 	add.w	r3, r7, #22
 801698e:	2200      	movs	r2, #0
 8016990:	801a      	strh	r2, [r3, #0]
 8016992:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016996:	881a      	ldrh	r2, [r3, #0]
	memcpy(&encrypted_size, response+SE3_CMD1_CRYPTO_UPDATE_RESP_OFF_DATAOUT_LEN, 2);
 8016998:	f107 0316 	add.w	r3, r7, #22
 801699c:	801a      	strh	r2, [r3, #0]
	if(encrypted_size != (ciphertext_size - B5_AES_BLK_SIZE)){ // do not consider length of iv in ciphertext_size
 801699e:	f107 0316 	add.w	r3, r7, #22
 80169a2:	881b      	ldrh	r3, [r3, #0]
 80169a4:	461a      	mov	r2, r3
 80169a6:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 80169aa:	3b10      	subs	r3, #16
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d019      	beq.n	80169e4 <load_encrypted_key_data+0x5ac>
		if(wrapped_key_data != NULL){ free(wrapped_key_data); }
 80169b0:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d003      	beq.n	80169c0 <load_encrypted_key_data+0x588>
 80169b8:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 80169bc:	f000 fcfa 	bl	80173b4 <free>
		if(plaintext_data != NULL){ free(plaintext_data); }
 80169c0:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d003      	beq.n	80169d0 <load_encrypted_key_data+0x598>
 80169c8:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 80169cc:	f000 fcf2 	bl	80173b4 <free>
		if(ciphertext_data != NULL){ free(ciphertext_data); }
 80169d0:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d003      	beq.n	80169e0 <load_encrypted_key_data+0x5a8>
 80169d8:	f8d7 0864 	ldr.w	r0, [r7, #2148]	; 0x864
 80169dc:	f000 fcea 	bl	80173b4 <free>
		return SE3_ERR_RESOURCE;
 80169e0:	23c8      	movs	r3, #200	; 0xc8
 80169e2:	e033      	b.n	8016a4c <load_encrypted_key_data+0x614>
	}
	memcpy(ciphertext_data+B5_AES_BLK_SIZE, response+SE3_CMD1_CRYPTO_UPDATE_RESP_OFF_DATA, encrypted_size);
 80169e4:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 80169e8:	f103 0010 	add.w	r0, r3, #16
 80169ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80169f0:	3310      	adds	r3, #16
 80169f2:	f107 0216 	add.w	r2, r7, #22
 80169f6:	8812      	ldrh	r2, [r2, #0]
 80169f8:	4619      	mov	r1, r3
 80169fa:	f000 fcf1 	bl	80173e0 <memcpy>

	// write data to resp buffer
	memcpy(resp, ciphertext_data, ciphertext_size);
 80169fe:	463b      	mov	r3, r7
 8016a00:	f8d7 2860 	ldr.w	r2, [r7, #2144]	; 0x860
 8016a04:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 8016a08:	6818      	ldr	r0, [r3, #0]
 8016a0a:	f000 fce9 	bl	80173e0 <memcpy>
	*resp_size = ciphertext_size;
 8016a0e:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8016a12:	b29a      	uxth	r2, r3
 8016a14:	1d3b      	adds	r3, r7, #4
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	801a      	strh	r2, [r3, #0]

	// free memory and return
	if(wrapped_key_data != NULL){ free(wrapped_key_data); }
 8016a1a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d003      	beq.n	8016a2a <load_encrypted_key_data+0x5f2>
 8016a22:	f8d7 0874 	ldr.w	r0, [r7, #2164]	; 0x874
 8016a26:	f000 fcc5 	bl	80173b4 <free>
	if(plaintext_data != NULL){ free(plaintext_data); }
 8016a2a:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d003      	beq.n	8016a3a <load_encrypted_key_data+0x602>
 8016a32:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016a36:	f000 fcbd 	bl	80173b4 <free>
	if(ciphertext_data != NULL){ free(ciphertext_data); }
 8016a3a:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d003      	beq.n	8016a4a <load_encrypted_key_data+0x612>
 8016a42:	f8d7 0864 	ldr.w	r0, [r7, #2148]	; 0x864
 8016a46:	f000 fcb5 	bl	80173b4 <free>
	return SE3_OK;
 8016a4a:	2300      	movs	r3, #0
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f607 0778 	addw	r7, r7, #2168	; 0x878
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bdb0      	pop	{r4, r5, r7, pc}
 8016a56:	bf00      	nop

08016a58 <load_key_ids>:

uint16_t load_key_ids(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp){
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b088      	sub	sp, #32
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60b9      	str	r1, [r7, #8]
 8016a60:	607a      	str	r2, [r7, #4]
 8016a62:	603b      	str	r3, [r7, #0]
 8016a64:	4603      	mov	r3, r0
 8016a66:	81fb      	strh	r3, [r7, #14]
	uint32_t key_id = 0;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	61bb      	str	r3, [r7, #24]
	uint16_t offset = 0, keylen = 0;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	83fb      	strh	r3, [r7, #30]
 8016a70:	2300      	movs	r3, #0
 8016a72:	82fb      	strh	r3, [r7, #22]
	*resp_size = 0;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	2200      	movs	r2, #0
 8016a78:	801a      	strh	r2, [r3, #0]
	bool filter = false; // activate filter to return only the key IDs that can be managed manually
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	777b      	strb	r3, [r7, #29]
	if(req_size != 3){
 8016a7e:	89fb      	ldrh	r3, [r7, #14]
 8016a80:	2b03      	cmp	r3, #3
 8016a82:	d002      	beq.n	8016a8a <load_key_ids+0x32>
		return SE3_ERR_PARAMS;
 8016a84:	f24f 0306 	movw	r3, #61446	; 0xf006
 8016a88:	e05e      	b.n	8016b48 <load_key_ids+0xf0>
	}
	if(req[2] == 1){
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	3302      	adds	r3, #2
 8016a8e:	781b      	ldrb	r3, [r3, #0]
 8016a90:	2b01      	cmp	r3, #1
 8016a92:	d101      	bne.n	8016a98 <load_key_ids+0x40>
		filter = true;
 8016a94:	2301      	movs	r3, #1
 8016a96:	777b      	strb	r3, [r7, #29]
	}
	do {
		/* 7536 is the limit of data we can write in requests and responses to/from the SEcube */
		if(*resp_size >= 7532){ // max is 7536 but we must keep 4 bytes available for ID=0 sent in case we reach the end of the flash (see below at the end of the function)
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	881b      	ldrh	r3, [r3, #0]
 8016a9c:	f641 526b 	movw	r2, #7531	; 0x1d6b
 8016aa0:	4293      	cmp	r3, r2
 8016aa2:	d901      	bls.n	8016aa8 <load_key_ids+0x50>
			return SE3_OK; // still in the middle of the flash...not all IDs returned (but return here because we can't go past 7536 bytes, next time we will start from next flash sector)
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	e04f      	b.n	8016b48 <load_key_ids+0xf0>
		}
		if (key_iterator.addr != NULL && key_iterator.type == SE3_TYPE_KEY) {
 8016aa8:	4b29      	ldr	r3, [pc, #164]	; (8016b50 <load_key_ids+0xf8>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d033      	beq.n	8016b18 <load_key_ids+0xc0>
 8016ab0:	4b27      	ldr	r3, [pc, #156]	; (8016b50 <load_key_ids+0xf8>)
 8016ab2:	791b      	ldrb	r3, [r3, #4]
 8016ab4:	2b64      	cmp	r3, #100	; 0x64
 8016ab6:	d12f      	bne.n	8016b18 <load_key_ids+0xc0>
			SE3_GET32(key_iterator.addr, SE3_FLASH_KEY_OFF_ID, key_id); // get key ID and copy it to the response buffer
 8016ab8:	4b25      	ldr	r3, [pc, #148]	; (8016b50 <load_key_ids+0xf8>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	61bb      	str	r3, [r7, #24]
			SE3_GET16(key_iterator.addr, SE3_FLASH_KEY_OFF_DATA_LEN, keylen); // get key length
 8016ac0:	4b23      	ldr	r3, [pc, #140]	; (8016b50 <load_key_ids+0xf8>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	3304      	adds	r3, #4
 8016ac6:	881b      	ldrh	r3, [r3, #0]
 8016ac8:	b29b      	uxth	r3, r3
 8016aca:	82fb      	strh	r3, [r7, #22]
			if((filter == false) || ((filter == true) && key_id >= MANUAL_ID_BEGIN && key_id <= MANUAL_ID_END)){
 8016acc:	7f7b      	ldrb	r3, [r7, #29]
 8016ace:	f083 0301 	eor.w	r3, r3, #1
 8016ad2:	b2db      	uxtb	r3, r3
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d109      	bne.n	8016aec <load_key_ids+0x94>
 8016ad8:	7f7b      	ldrb	r3, [r7, #29]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d01c      	beq.n	8016b18 <load_key_ids+0xc0>
 8016ade:	69bb      	ldr	r3, [r7, #24]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d019      	beq.n	8016b18 <load_key_ids+0xc0>
 8016ae4:	69bb      	ldr	r3, [r7, #24]
 8016ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016aea:	d215      	bcs.n	8016b18 <load_key_ids+0xc0>
				memcpy(resp + offset, &key_id, 4);
 8016aec:	8bfb      	ldrh	r3, [r7, #30]
 8016aee:	683a      	ldr	r2, [r7, #0]
 8016af0:	4413      	add	r3, r2
 8016af2:	69ba      	ldr	r2, [r7, #24]
 8016af4:	601a      	str	r2, [r3, #0]
				offset += 4;
 8016af6:	8bfb      	ldrh	r3, [r7, #30]
 8016af8:	3304      	adds	r3, #4
 8016afa:	83fb      	strh	r3, [r7, #30]
				memcpy(resp + offset, &keylen, 2);
 8016afc:	8bfb      	ldrh	r3, [r7, #30]
 8016afe:	683a      	ldr	r2, [r7, #0]
 8016b00:	4413      	add	r3, r2
 8016b02:	8afa      	ldrh	r2, [r7, #22]
 8016b04:	801a      	strh	r2, [r3, #0]
				offset += 2;
 8016b06:	8bfb      	ldrh	r3, [r7, #30]
 8016b08:	3302      	adds	r3, #2
 8016b0a:	83fb      	strh	r3, [r7, #30]
				*resp_size = (*resp_size) + 6;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	881b      	ldrh	r3, [r3, #0]
 8016b10:	3306      	adds	r3, #6
 8016b12:	b29a      	uxth	r2, r3
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	801a      	strh	r2, [r3, #0]
			}
		}
	} while (se3_flash_it_next(&key_iterator));
 8016b18:	480d      	ldr	r0, [pc, #52]	; (8016b50 <load_key_ids+0xf8>)
 8016b1a:	f7fe fa53 	bl	8014fc4 <se3_flash_it_next>
 8016b1e:	4603      	mov	r3, r0
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d1b9      	bne.n	8016a98 <load_key_ids+0x40>
	/* reset the iterator to the beginning of the flash (required for next call of load_key_ids).
	 * notice that this is done only if we reach the end of the flash (we scanned all IDs)...if we still
	 * haven't scanned all IDs, we won't execute the next line because we will return with the instruction
	 * few lines above. */
	se3_flash_it_init(&key_iterator);
 8016b24:	480a      	ldr	r0, [pc, #40]	; (8016b50 <load_key_ids+0xf8>)
 8016b26:	f7fe fa40 	bl	8014faa <se3_flash_it_init>
	memset(resp + offset, 0, 6); // put all zeroes as the last id (id = 0 is not valid so the host side will understand that we reached the end of the flash)
 8016b2a:	8bfb      	ldrh	r3, [r7, #30]
 8016b2c:	683a      	ldr	r2, [r7, #0]
 8016b2e:	4413      	add	r3, r2
 8016b30:	2206      	movs	r2, #6
 8016b32:	2100      	movs	r1, #0
 8016b34:	4618      	mov	r0, r3
 8016b36:	f000 fc7b 	bl	8017430 <memset>
	*resp_size = (*resp_size) + 6;
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	881b      	ldrh	r3, [r3, #0]
 8016b3e:	3306      	adds	r3, #6
 8016b40:	b29a      	uxth	r2, r3
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	801a      	strh	r2, [r3, #0]
	return SE3_OK;
 8016b46:	2300      	movs	r3, #0
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3720      	adds	r7, #32
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	2000041c 	.word	0x2000041c

08016b54 <delete_all_keys>:

uint16_t delete_all_keys(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp){
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b08e      	sub	sp, #56	; 0x38
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	60b9      	str	r1, [r7, #8]
 8016b5c:	607a      	str	r2, [r7, #4]
 8016b5e:	603b      	str	r3, [r7, #0]
 8016b60:	4603      	mov	r3, r0
 8016b62:	81fb      	strh	r3, [r7, #14]
	uint32_t key_id = 0;
 8016b64:	2300      	movs	r3, #0
 8016b66:	623b      	str	r3, [r7, #32]
	bool error_ = false, skip = false;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016b6e:	2300      	movs	r3, #0
 8016b70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	se3_flash_it it = { .addr = NULL };
 8016b74:	f107 0310 	add.w	r3, r7, #16
 8016b78:	2200      	movs	r2, #0
 8016b7a:	601a      	str	r2, [r3, #0]
 8016b7c:	605a      	str	r2, [r3, #4]
 8016b7e:	609a      	str	r2, [r3, #8]
 8016b80:	60da      	str	r2, [r3, #12]
	uint32_t tokeep = (req_size-2) / 4; // condition: each key ID is stored on 4 bytes
 8016b82:	89fb      	ldrh	r3, [r7, #14]
 8016b84:	3b02      	subs	r3, #2
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	da00      	bge.n	8016b8c <delete_all_keys+0x38>
 8016b8a:	3303      	adds	r3, #3
 8016b8c:	109b      	asrs	r3, r3, #2
 8016b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t *keep = NULL;
 8016b90:	2300      	movs	r3, #0
 8016b92:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t offset = 0;
 8016b94:	2300      	movs	r3, #0
 8016b96:	86bb      	strh	r3, [r7, #52]	; 0x34
	*resp_size = 0;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	801a      	strh	r2, [r3, #0]
	if(((req_size-2) % 4) != 0){
 8016b9e:	89fb      	ldrh	r3, [r7, #14]
 8016ba0:	3b02      	subs	r3, #2
 8016ba2:	f003 0303 	and.w	r3, r3, #3
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d002      	beq.n	8016bb0 <delete_all_keys+0x5c>
		return SE3_ERR_PARAMS;
 8016baa:	f24f 0306 	movw	r3, #61446	; 0xf006
 8016bae:	e077      	b.n	8016ca0 <delete_all_keys+0x14c>
	}
	keep = (uint32_t*)malloc(tokeep * sizeof(uint32_t));
 8016bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bb2:	009b      	lsls	r3, r3, #2
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f000 fbf5 	bl	80173a4 <malloc>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	627b      	str	r3, [r7, #36]	; 0x24
	if(keep == NULL){
 8016bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d102      	bne.n	8016bca <delete_all_keys+0x76>
		return SE3_ERR_MEMORY;
 8016bc4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016bc8:	e06a      	b.n	8016ca0 <delete_all_keys+0x14c>
	}
	for(int i=0; i<tokeep; i++){
 8016bca:	2300      	movs	r3, #0
 8016bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8016bce:	e00e      	b.n	8016bee <delete_all_keys+0x9a>
		memcpy(&keep[i], req+offset, 4);
 8016bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd2:	009b      	lsls	r3, r3, #2
 8016bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bd6:	4413      	add	r3, r2
 8016bd8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016bda:	68b9      	ldr	r1, [r7, #8]
 8016bdc:	440a      	add	r2, r1
 8016bde:	6812      	ldr	r2, [r2, #0]
 8016be0:	601a      	str	r2, [r3, #0]
		offset+=4;
 8016be2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016be4:	3304      	adds	r3, #4
 8016be6:	86bb      	strh	r3, [r7, #52]	; 0x34
	for(int i=0; i<tokeep; i++){
 8016be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bea:	3301      	adds	r3, #1
 8016bec:	633b      	str	r3, [r7, #48]	; 0x30
 8016bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d8ec      	bhi.n	8016bd0 <delete_all_keys+0x7c>
	}
	se3_flash_it_init(&it);
 8016bf6:	f107 0310 	add.w	r3, r7, #16
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7fe f9d5 	bl	8014faa <se3_flash_it_init>
	while (se3_flash_it_next(&it)){
 8016c00:	e031      	b.n	8016c66 <delete_all_keys+0x112>
		if (it.type == SE3_TYPE_KEY){
 8016c02:	7d3b      	ldrb	r3, [r7, #20]
 8016c04:	2b64      	cmp	r3, #100	; 0x64
 8016c06:	d12e      	bne.n	8016c66 <delete_all_keys+0x112>
			SE3_GET32(it.addr, SE3_FLASH_KEY_OFF_ID, key_id);
 8016c08:	693b      	ldr	r3, [r7, #16]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	623b      	str	r3, [r7, #32]
			/* delete all keys except keys specified by the host */
			for(int i=0; i<tokeep; i++){
 8016c0e:	2300      	movs	r3, #0
 8016c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c12:	e00e      	b.n	8016c32 <delete_all_keys+0xde>
				if(keep[i] == key_id){
 8016c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c16:	009b      	lsls	r3, r3, #2
 8016c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c1a:	4413      	add	r3, r2
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	6a3b      	ldr	r3, [r7, #32]
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d103      	bne.n	8016c2c <delete_all_keys+0xd8>
					skip = true;
 8016c24:	2301      	movs	r3, #1
 8016c26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8016c2a:	e006      	b.n	8016c3a <delete_all_keys+0xe6>
			for(int i=0; i<tokeep; i++){
 8016c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c2e:	3301      	adds	r3, #1
 8016c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c36:	429a      	cmp	r2, r3
 8016c38:	d8ec      	bhi.n	8016c14 <delete_all_keys+0xc0>
				}
			}
			if(skip){
 8016c3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d003      	beq.n	8016c4a <delete_all_keys+0xf6>
				skip = false;
 8016c42:	2300      	movs	r3, #0
 8016c44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				continue;
 8016c48:	e00d      	b.n	8016c66 <delete_all_keys+0x112>
			}
			if (!se3_flash_it_delete(&it)) {
 8016c4a:	f107 0310 	add.w	r3, r7, #16
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7fe fada 	bl	8015208 <se3_flash_it_delete>
 8016c54:	4603      	mov	r3, r0
 8016c56:	f083 0301 	eor.w	r3, r3, #1
 8016c5a:	b2db      	uxtb	r3, r3
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d002      	beq.n	8016c66 <delete_all_keys+0x112>
				error_ = true;
 8016c60:	2301      	movs	r3, #1
 8016c62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (se3_flash_it_next(&it)){
 8016c66:	f107 0310 	add.w	r3, r7, #16
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7fe f9aa 	bl	8014fc4 <se3_flash_it_next>
 8016c70:	4603      	mov	r3, r0
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d1c5      	bne.n	8016c02 <delete_all_keys+0xae>
			}
		}
	}
	if(keep != NULL){
 8016c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d002      	beq.n	8016c82 <delete_all_keys+0x12e>
		free(keep);
 8016c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c7e:	f000 fb99 	bl	80173b4 <free>
	}
	if(error_){
 8016c82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d001      	beq.n	8016c8e <delete_all_keys+0x13a>
		return SE3_ERR_RESOURCE;
 8016c8a:	23c8      	movs	r3, #200	; 0xc8
 8016c8c:	e008      	b.n	8016ca0 <delete_all_keys+0x14c>
	} else {
		memcpy(resp, "OK", 2);
 8016c8e:	2202      	movs	r2, #2
 8016c90:	4905      	ldr	r1, [pc, #20]	; (8016ca8 <delete_all_keys+0x154>)
 8016c92:	6838      	ldr	r0, [r7, #0]
 8016c94:	f000 fba4 	bl	80173e0 <memcpy>
		*resp_size = 2;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	2202      	movs	r2, #2
 8016c9c:	801a      	strh	r2, [r3, #0]
		return SE3_OK;
 8016c9e:	2300      	movs	r3, #0
	}
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3738      	adds	r7, #56	; 0x38
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}
 8016ca8:	08017668 	.word	0x08017668

08016cac <delete_key>:

uint16_t delete_key(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp){
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b08c      	sub	sp, #48	; 0x30
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	60b9      	str	r1, [r7, #8]
 8016cb4:	607a      	str	r2, [r7, #4]
 8016cb6:	603b      	str	r3, [r7, #0]
 8016cb8:	4603      	mov	r3, r0
 8016cba:	81fb      	strh	r3, [r7, #14]
	uint32_t key_id = 0, kid = 0;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	627b      	str	r3, [r7, #36]	; 0x24
	bool error_ = false;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	se3_flash_it it = { .addr = NULL };
 8016cca:	f107 0314 	add.w	r3, r7, #20
 8016cce:	2200      	movs	r2, #0
 8016cd0:	601a      	str	r2, [r3, #0]
 8016cd2:	605a      	str	r2, [r3, #4]
 8016cd4:	609a      	str	r2, [r3, #8]
 8016cd6:	60da      	str	r2, [r3, #12]
	*resp_size = 0;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2200      	movs	r2, #0
 8016cdc:	801a      	strh	r2, [r3, #0]
	if((req_size - 2) != 4){
 8016cde:	89fb      	ldrh	r3, [r7, #14]
 8016ce0:	2b06      	cmp	r3, #6
 8016ce2:	d002      	beq.n	8016cea <delete_key+0x3e>
		return SE3_ERR_PARAMS;
 8016ce4:	f24f 0306 	movw	r3, #61446	; 0xf006
 8016ce8:	e037      	b.n	8016d5a <delete_key+0xae>
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	681b      	ldr	r3, [r3, #0]
	}
	memcpy(&kid, req, 4); // retrieve the key id from the input buffer
 8016cee:	627b      	str	r3, [r7, #36]	; 0x24
	se3_flash_it_init(&it);
 8016cf0:	f107 0314 	add.w	r3, r7, #20
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7fe f958 	bl	8014faa <se3_flash_it_init>
	while (se3_flash_it_next(&it)){
 8016cfa:	e017      	b.n	8016d2c <delete_key+0x80>
		if (it.type == SE3_TYPE_KEY){
 8016cfc:	7e3b      	ldrb	r3, [r7, #24]
 8016cfe:	2b64      	cmp	r3, #100	; 0x64
 8016d00:	d114      	bne.n	8016d2c <delete_key+0x80>
			SE3_GET32(it.addr, SE3_FLASH_KEY_OFF_ID, key_id);
 8016d02:	697b      	ldr	r3, [r7, #20]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	62bb      	str	r3, [r7, #40]	; 0x28
			if(key_id == kid){
 8016d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d10d      	bne.n	8016d2c <delete_key+0x80>
				if (!se3_flash_it_delete(&it)) {
 8016d10:	f107 0314 	add.w	r3, r7, #20
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7fe fa77 	bl	8015208 <se3_flash_it_delete>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	f083 0301 	eor.w	r3, r3, #1
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d002      	beq.n	8016d2c <delete_key+0x80>
					error_ = true;
 8016d26:	2301      	movs	r3, #1
 8016d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while (se3_flash_it_next(&it)){
 8016d2c:	f107 0314 	add.w	r3, r7, #20
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7fe f947 	bl	8014fc4 <se3_flash_it_next>
 8016d36:	4603      	mov	r3, r0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d1df      	bne.n	8016cfc <delete_key+0x50>
				}
			}
		}
	}
	if(error_){
 8016d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d001      	beq.n	8016d48 <delete_key+0x9c>
		return SE3_ERR_RESOURCE;
 8016d44:	23c8      	movs	r3, #200	; 0xc8
 8016d46:	e008      	b.n	8016d5a <delete_key+0xae>
	} else {
		memcpy(resp, "OK", 2);
 8016d48:	2202      	movs	r2, #2
 8016d4a:	4906      	ldr	r1, [pc, #24]	; (8016d64 <delete_key+0xb8>)
 8016d4c:	6838      	ldr	r0, [r7, #0]
 8016d4e:	f000 fb47 	bl	80173e0 <memcpy>
		*resp_size = 2;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2202      	movs	r2, #2
 8016d56:	801a      	strh	r2, [r3, #0]
		return SE3_OK;
 8016d58:	2300      	movs	r3, #0
	}
	/* notice that if the key specified by the host is not found in the SEcube flash we simply return ok because
	 * in the end the goal is already reached, in fact we don't even have that key. */
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3730      	adds	r7, #48	; 0x30
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	08017668 	.word	0x08017668

08016d68 <is_ready>:

uint16_t is_ready(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp){
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b08a      	sub	sp, #40	; 0x28
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	60b9      	str	r1, [r7, #8]
 8016d70:	607a      	str	r2, [r7, #4]
 8016d72:	603b      	str	r3, [r7, #0]
 8016d74:	4603      	mov	r3, r0
 8016d76:	81fb      	strh	r3, [r7, #14]
	uint32_t k = 0;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	623b      	str	r3, [r7, #32]
	*resp_size = 0;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	801a      	strh	r2, [r3, #0]
	bool dbkey = false;
 8016d82:	2300      	movs	r3, #0
 8016d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool wckey = false;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	se3_flash_it it = { .addr = NULL };
 8016d8e:	f107 0310 	add.w	r3, r7, #16
 8016d92:	2200      	movs	r2, #0
 8016d94:	601a      	str	r2, [r3, #0]
 8016d96:	605a      	str	r2, [r3, #4]
 8016d98:	609a      	str	r2, [r3, #8]
 8016d9a:	60da      	str	r2, [r3, #12]
	se3_flash_it_init(&it);
 8016d9c:	f107 0310 	add.w	r3, r7, #16
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7fe f902 	bl	8014faa <se3_flash_it_init>
	while (se3_flash_it_next(&it)){
 8016da6:	e015      	b.n	8016dd4 <is_ready+0x6c>
		if (it.type == SE3_TYPE_KEY){
 8016da8:	7d3b      	ldrb	r3, [r7, #20]
 8016daa:	2b64      	cmp	r3, #100	; 0x64
 8016dac:	d112      	bne.n	8016dd4 <is_ready+0x6c>
			SE3_GET32(it.addr, SE3_FLASH_KEY_OFF_ID, k);
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	623b      	str	r3, [r7, #32]
			if(k == RESERVED_ID_SEKEY_SECUREDB){
 8016db4:	6a3b      	ldr	r3, [r7, #32]
 8016db6:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8016dba:	4293      	cmp	r3, r2
 8016dbc:	d102      	bne.n	8016dc4 <is_ready+0x5c>
				dbkey = true; // there is the key for the encrypted metadata db
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			if(k == RESERVED_ID_SEKEY_WILDCARD){
 8016dc4:	6a3b      	ldr	r3, [r7, #32]
 8016dc6:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8016dca:	4293      	cmp	r3, r2
 8016dcc:	d102      	bne.n	8016dd4 <is_ready+0x6c>
				wckey = true; // there is the wildcard key for the updates
 8016dce:	2301      	movs	r3, #1
 8016dd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (se3_flash_it_next(&it)){
 8016dd4:	f107 0310 	add.w	r3, r7, #16
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f7fe f8f3 	bl	8014fc4 <se3_flash_it_next>
 8016dde:	4603      	mov	r3, r0
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d1e1      	bne.n	8016da8 <is_ready+0x40>
			}
		}
	}
	if(dbkey && wckey){
 8016de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d00b      	beq.n	8016e04 <is_ready+0x9c>
 8016dec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d007      	beq.n	8016e04 <is_ready+0x9c>
		memcpy(resp, "OK", 2);
 8016df4:	2202      	movs	r2, #2
 8016df6:	4906      	ldr	r1, [pc, #24]	; (8016e10 <is_ready+0xa8>)
 8016df8:	6838      	ldr	r0, [r7, #0]
 8016dfa:	f000 faf1 	bl	80173e0 <memcpy>
		*resp_size = 2;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2202      	movs	r2, #2
 8016e02:	801a      	strh	r2, [r3, #0]
	}
	return SE3_OK;
 8016e04:	2300      	movs	r3, #0
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	3728      	adds	r7, #40	; 0x28
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd80      	pop	{r7, pc}
 8016e0e:	bf00      	nop
 8016e10:	08017668 	.word	0x08017668

08016e14 <insert_key>:

uint16_t insert_key(uint16_t req_size, const uint8_t* req, uint16_t* resp_size, uint8_t* resp){
 8016e14:	b590      	push	{r4, r7, lr}
 8016e16:	f6ad 0d74 	subw	sp, sp, #2164	; 0x874
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	f107 0008 	add.w	r0, r7, #8
 8016e22:	6001      	str	r1, [r0, #0]
 8016e24:	1d39      	adds	r1, r7, #4
 8016e26:	600a      	str	r2, [r1, #0]
 8016e28:	463a      	mov	r2, r7
 8016e2a:	6013      	str	r3, [r2, #0]
 8016e2c:	f107 030e 	add.w	r3, r7, #14
 8016e30:	4622      	mov	r2, r4
 8016e32:	801a      	strh	r2, [r3, #0]
	uint32_t key_id = 0; // id of the key to be stored on the device
 8016e34:	2300      	movs	r3, #0
 8016e36:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
	uint32_t wrapping_key_id = 0; // id of key used to encrypt the key provided by the caller (if any)
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
	uint16_t key_data_len = 0; // length of key provided by the caller (this may be encrypted)
 8016e40:	2300      	movs	r3, #0
 8016e42:	f8a7 3852 	strh.w	r3, [r7, #2130]	; 0x852
	uint8_t *key_data = NULL;
 8016e46:	2300      	movs	r3, #0
 8016e48:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
	const uint8_t *keyptr;
    se3_flash_key key;
    bool equal = false;
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
	se3_flash_it it = { .addr = NULL };
 8016e52:	f607 0334 	addw	r3, r7, #2100	; 0x834
 8016e56:	2200      	movs	r2, #0
 8016e58:	601a      	str	r2, [r3, #0]
 8016e5a:	605a      	str	r2, [r3, #4]
 8016e5c:	609a      	str	r2, [r3, #8]
 8016e5e:	60da      	str	r2, [r3, #12]
	*resp_size = 0;
 8016e60:	1d3b      	adds	r3, r7, #4
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	2200      	movs	r2, #0
 8016e66:	801a      	strh	r2, [r3, #0]

	// preliminary check
	if((req_size-2) < 6){ // minimum size is 4B for ID and 2B for key length
 8016e68:	f107 030e 	add.w	r3, r7, #14
 8016e6c:	881b      	ldrh	r3, [r3, #0]
 8016e6e:	2b07      	cmp	r3, #7
 8016e70:	d802      	bhi.n	8016e78 <insert_key+0x64>
		return SE3_ERR_PARAMS;
 8016e72:	f24f 0306 	movw	r3, #61446	; 0xf006
 8016e76:	e23f      	b.n	80172f8 <insert_key+0x4e4>
 8016e78:	f107 0308 	add.w	r3, r7, #8
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	681b      	ldr	r3, [r3, #0]
	}

	// parse request
	memcpy(&key_id, req, 4); // key id
 8016e80:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
	memcpy(&key_data_len, req+4, 2); // key length
 8016e84:	f107 0308 	add.w	r3, r7, #8
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	3304      	adds	r3, #4
 8016e8c:	881b      	ldrh	r3, [r3, #0]
 8016e8e:	b29b      	uxth	r3, r3
 8016e90:	f8a7 3852 	strh.w	r3, [r7, #2130]	; 0x852
	key_data = (uint8_t*)malloc(key_data_len); // allocate space for the key content
 8016e94:	f8b7 3852 	ldrh.w	r3, [r7, #2130]	; 0x852
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f000 fa83 	bl	80173a4 <malloc>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
	if(key_data == NULL){
 8016ea4:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d102      	bne.n	8016eb2 <insert_key+0x9e>
		return SE3_ERR_MEMORY;
 8016eac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016eb0:	e222      	b.n	80172f8 <insert_key+0x4e4>
	} else {
		memset(key_data, 0, key_data_len);
 8016eb2:	f8b7 3852 	ldrh.w	r3, [r7, #2130]	; 0x852
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	2100      	movs	r1, #0
 8016eba:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016ebe:	f000 fab7 	bl	8017430 <memset>
	}

	// depending on request size, store the provided key in the SEcube
	if((req_size-2) == 6){ // only ID and size provided, key generation happens internally with TRNG
 8016ec2:	f107 030e 	add.w	r3, r7, #14
 8016ec6:	881b      	ldrh	r3, [r3, #0]
 8016ec8:	2b08      	cmp	r3, #8
 8016eca:	d118      	bne.n	8016efe <insert_key+0xea>

		/* The internal computation of the key is performed with the TRNG of the SEcube. This is sufficient to ensure a high enough entropy to the key value.
		 * For more informations about key generation details look at the NIST SP 800-13 Rev.1 (https://csrc.nist.gov/publications/detail/sp/800-133/rev-1/final),
		 * in particular Section 4 (option 1 from section 4 is used here). */

		if(se3_rand(key_data_len, key_data) != key_data_len){
 8016ecc:	f8b7 3852 	ldrh.w	r3, [r7, #2130]	; 0x852
 8016ed0:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7f3 fd79 	bl	800a9cc <se3_rand>
 8016eda:	4603      	mov	r3, r0
 8016edc:	461a      	mov	r2, r3
 8016ede:	f8b7 3852 	ldrh.w	r3, [r7, #2130]	; 0x852
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	f000 8184 	beq.w	80171f0 <insert_key+0x3dc>
			if(key_data != NULL){ free(key_data);	}
 8016ee8:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d003      	beq.n	8016ef8 <insert_key+0xe4>
 8016ef0:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016ef4:	f000 fa5e 	bl	80173b4 <free>
			return SE3_ERR_HW;
 8016ef8:	f24f 0301 	movw	r3, #61441	; 0xf001
 8016efc:	e1fc      	b.n	80172f8 <insert_key+0x4e4>
		}		
	} else {

		// the caller provided ID, key size and key data (+ id of wrapping key if key data is encrypted. wrapping key = 0 if key data in clear, != 0 if encrypted).

		if((req_size-2) != (4+2+4+key_data_len)){ // 4B for key ID, 2B for key data len, 4 bytes for ID of wrapping key
 8016efe:	f107 030e 	add.w	r3, r7, #14
 8016f02:	881b      	ldrh	r3, [r3, #0]
 8016f04:	1e9a      	subs	r2, r3, #2
 8016f06:	f8b7 3852 	ldrh.w	r3, [r7, #2130]	; 0x852
 8016f0a:	330a      	adds	r3, #10
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	d00a      	beq.n	8016f26 <insert_key+0x112>
			if(key_data != NULL){ free(key_data);	}
 8016f10:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d003      	beq.n	8016f20 <insert_key+0x10c>
 8016f18:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016f1c:	f000 fa4a 	bl	80173b4 <free>
			return SE3_ERR_PARAMS;
 8016f20:	f24f 0306 	movw	r3, #61446	; 0xf006
 8016f24:	e1e8      	b.n	80172f8 <insert_key+0x4e4>
		}
		memcpy(&wrapping_key_id, req+6, 4); // get id of wrapping key from request buffer
 8016f26:	f107 0308 	add.w	r3, r7, #8
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	3306      	adds	r3, #6
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
		keyptr = req + 10; // memory address of key data passed in input
 8016f34:	f107 0308 	add.w	r3, r7, #8
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	330a      	adds	r3, #10
 8016f3c:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864

		if(wrapping_key_id == 0){ // key was sent as plaintext
 8016f40:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d109      	bne.n	8016f5c <insert_key+0x148>
			memcpy(key_data, keyptr, key_data_len);
 8016f48:	f8b7 3852 	ldrh.w	r3, [r7, #2130]	; 0x852
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 8016f52:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016f56:	f000 fa43 	bl	80173e0 <memcpy>
 8016f5a:	e149      	b.n	80171f0 <insert_key+0x3dc>
		} else {

			/* key was sent in encrypted form. same as load_encrypted_key_data() but opposite direction */

			uint8_t request[BUFSIZE], response[BUFSIZE];
			memset(request, 0, BUFSIZE);
 8016f5c:	f107 0310 	add.w	r3, r7, #16
 8016f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016f64:	2100      	movs	r1, #0
 8016f66:	4618      	mov	r0, r3
 8016f68:	f000 fa62 	bl	8017430 <memset>
			memset(response, 0, BUFSIZE);
 8016f6c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8016f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016f74:	2100      	movs	r1, #0
 8016f76:	4618      	mov	r0, r3
 8016f78:	f000 fa5a 	bl	8017430 <memset>
			uint16_t response_size = 0; // size of response by crypto_init() and crypto_update()
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	f8a7 3832 	strh.w	r3, [r7, #2098]	; 0x832
			uint16_t algo = SE3_ALGO_AES; // decrypt using AES-CBC
 8016f82:	2300      	movs	r3, #0
 8016f84:	f8a7 3830 	strh.w	r3, [r7, #2096]	; 0x830
			uint16_t mode = SE3_FEEDBACK_CBC | SE3_DIR_DECRYPT;
 8016f88:	f240 2302 	movw	r3, #514	; 0x202
 8016f8c:	f8a7 382e 	strh.w	r3, [r7, #2094]	; 0x82e
			//uint16_t d1len = 0, d2len = newLen, dec_len = 0;
			uint32_t sessionId = SE3_SESSION_INVALID; // crypto session set by crypto_init()
 8016f90:	f04f 33ff 	mov.w	r3, #4294967295
 8016f94:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8016f98:	f8b7 2830 	ldrh.w	r2, [r7, #2096]	; 0x830

			// initialise crypto context
			memcpy(request + SE3_CMD1_CRYPTO_INIT_REQ_OFF_ALGO, &algo, 2);
 8016f9c:	f107 0310 	add.w	r3, r7, #16
 8016fa0:	801a      	strh	r2, [r3, #0]
			memcpy(request + SE3_CMD1_CRYPTO_INIT_REQ_OFF_MODE, &mode, 2);
 8016fa2:	f107 0310 	add.w	r3, r7, #16
 8016fa6:	3302      	adds	r3, #2
 8016fa8:	f8b7 282e 	ldrh.w	r2, [r7, #2094]	; 0x82e
 8016fac:	801a      	strh	r2, [r3, #0]
			memcpy(request + SE3_CMD1_CRYPTO_INIT_REQ_OFF_KEY_ID, &wrapping_key_id, 4);
 8016fae:	f107 0310 	add.w	r3, r7, #16
 8016fb2:	3304      	adds	r3, #4
 8016fb4:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8016fb8:	601a      	str	r2, [r3, #0]
			uint16_t rc = crypto_init(SE3_CMD1_CRYPTO_INIT_REQ_SIZE, request, &response_size, response);
 8016fba:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8016fbe:	f607 0232 	addw	r2, r7, #2098	; 0x832
 8016fc2:	f107 0110 	add.w	r1, r7, #16
 8016fc6:	2008      	movs	r0, #8
 8016fc8:	f7fe fd8c 	bl	8015ae4 <crypto_init>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	f8a7 3862 	strh.w	r3, [r7, #2146]	; 0x862
			if((rc != SE3_OK) || (response_size != SE3_CMD1_CRYPTO_INIT_RESP_SIZE)){
 8016fd2:	f8b7 3862 	ldrh.w	r3, [r7, #2146]	; 0x862
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d103      	bne.n	8016fe2 <insert_key+0x1ce>
 8016fda:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	; 0x832
 8016fde:	2b04      	cmp	r3, #4
 8016fe0:	d009      	beq.n	8016ff6 <insert_key+0x1e2>
				if(key_data != NULL){ free(key_data); }
 8016fe2:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d003      	beq.n	8016ff2 <insert_key+0x1de>
 8016fea:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8016fee:	f000 f9e1 	bl	80173b4 <free>
				return SE3_ERR_RESOURCE;
 8016ff2:	23c8      	movs	r3, #200	; 0xc8
 8016ff4:	e180      	b.n	80172f8 <insert_key+0x4e4>
			}
			memcpy(&sessionId, response+SE3_CMD1_CRYPTO_INIT_RESP_OFF_SID, response_size); // get session id from crypto_init()
 8016ff6:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	; 0x832
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8017000:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8017004:	4618      	mov	r0, r3
 8017006:	f000 f9eb 	bl	80173e0 <memcpy>

			// get initialisation vector from input data, set iv for AES-CBC
			uint8_t iv[B5_AES_BLK_SIZE];
			memset(iv, 0, B5_AES_BLK_SIZE);
 801700a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801700e:	2210      	movs	r2, #16
 8017010:	2100      	movs	r1, #0
 8017012:	4618      	mov	r0, r3
 8017014:	f000 fa0c 	bl	8017430 <memset>
			memcpy(iv, keyptr, B5_AES_BLK_SIZE); // input data: IV (16B) + encrypted key
 8017018:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 801701c:	f607 0418 	addw	r4, r7, #2072	; 0x818
 8017020:	6818      	ldr	r0, [r3, #0]
 8017022:	6859      	ldr	r1, [r3, #4]
 8017024:	689a      	ldr	r2, [r3, #8]
 8017026:	68db      	ldr	r3, [r3, #12]
 8017028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			uint16_t flags = SE3_CRYPTO_FLAG_SETIV;
 801702a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801702e:	f8a7 3816 	strh.w	r3, [r7, #2070]	; 0x816
			uint16_t iv_len = B5_AES_BLK_SIZE;
 8017032:	2310      	movs	r3, #16
 8017034:	f8a7 3814 	strh.w	r3, [r7, #2068]	; 0x814
			memset(request, 0, BUFSIZE);
 8017038:	f107 0310 	add.w	r3, r7, #16
 801703c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017040:	2100      	movs	r1, #0
 8017042:	4618      	mov	r0, r3
 8017044:	f000 f9f4 	bl	8017430 <memset>
			memset(response, 0, BUFSIZE);
 8017048:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801704c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017050:	2100      	movs	r1, #0
 8017052:	4618      	mov	r0, r3
 8017054:	f000 f9ec 	bl	8017430 <memset>
			uint16_t this_req_size = 0;
 8017058:	2300      	movs	r3, #0
 801705a:	f8a7 3860 	strh.w	r3, [r7, #2144]	; 0x860
 801705e:	f8d7 2828 	ldr.w	r2, [r7, #2088]	; 0x828
			memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_SID, &sessionId, 4); // first 4 byte for session id
 8017062:	f107 0310 	add.w	r3, r7, #16
 8017066:	601a      	str	r2, [r3, #0]
			memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_FLAGS, &flags, 2); // 2 bytes for flags
 8017068:	f107 0310 	add.w	r3, r7, #16
 801706c:	3304      	adds	r3, #4
 801706e:	f8b7 2816 	ldrh.w	r2, [r7, #2070]	; 0x816
 8017072:	801a      	strh	r2, [r3, #0]
			memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATAIN1_LEN, &iv_len, 2); // 2 bytes for datain1_len
 8017074:	f107 0310 	add.w	r3, r7, #16
 8017078:	3306      	adds	r3, #6
 801707a:	f8b7 2814 	ldrh.w	r2, [r7, #2068]	; 0x814
 801707e:	801a      	strh	r2, [r3, #0]
			memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATA, iv, iv_len); // copy initialisation vector
 8017080:	f107 0310 	add.w	r3, r7, #16
 8017084:	3310      	adds	r3, #16
 8017086:	f8b7 2814 	ldrh.w	r2, [r7, #2068]	; 0x814
 801708a:	f607 0118 	addw	r1, r7, #2072	; 0x818
 801708e:	4618      	mov	r0, r3
 8017090:	f000 f9a6 	bl	80173e0 <memcpy>
			this_req_size = 4 + 2 + 2 + iv_len;
 8017094:	f8b7 3814 	ldrh.w	r3, [r7, #2068]	; 0x814
 8017098:	3308      	adds	r3, #8
 801709a:	f8a7 3860 	strh.w	r3, [r7, #2144]	; 0x860
			rc = crypto_update(this_req_size, request, &response_size, response);
 801709e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80170a2:	f607 0232 	addw	r2, r7, #2098	; 0x832
 80170a6:	f107 0110 	add.w	r1, r7, #16
 80170aa:	f8b7 0860 	ldrh.w	r0, [r7, #2144]	; 0x860
 80170ae:	f7fe fdd5 	bl	8015c5c <crypto_update>
 80170b2:	4603      	mov	r3, r0
 80170b4:	f8a7 3862 	strh.w	r3, [r7, #2146]	; 0x862
			if(rc != SE3_OK){
 80170b8:	f8b7 3862 	ldrh.w	r3, [r7, #2146]	; 0x862
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d009      	beq.n	80170d4 <insert_key+0x2c0>
				if(key_data != NULL){ free(key_data); }
 80170c0:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d003      	beq.n	80170d0 <insert_key+0x2bc>
 80170c8:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 80170cc:	f000 f972 	bl	80173b4 <free>
				return SE3_ERR_RESOURCE;
 80170d0:	23c8      	movs	r3, #200	; 0xc8
 80170d2:	e111      	b.n	80172f8 <insert_key+0x4e4>
			}

			// do actual AES-CBC decryption
			uint16_t wrapped_len = key_data_len - B5_AES_BLK_SIZE; // do not consider iv
 80170d4:	f8b7 3852 	ldrh.w	r3, [r7, #2130]	; 0x852
 80170d8:	3b10      	subs	r3, #16
 80170da:	b29b      	uxth	r3, r3
 80170dc:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
			flags = SE3_CRYPTO_FLAG_FINIT;
 80170e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80170e4:	f8a7 3816 	strh.w	r3, [r7, #2070]	; 0x816
			memset(request, 0, BUFSIZE);
 80170e8:	f107 0310 	add.w	r3, r7, #16
 80170ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80170f0:	2100      	movs	r1, #0
 80170f2:	4618      	mov	r0, r3
 80170f4:	f000 f99c 	bl	8017430 <memset>
			memset(response, 0, BUFSIZE);
 80170f8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80170fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017100:	2100      	movs	r1, #0
 8017102:	4618      	mov	r0, r3
 8017104:	f000 f994 	bl	8017430 <memset>
 8017108:	f8d7 2828 	ldr.w	r2, [r7, #2088]	; 0x828
			memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_SID, &sessionId, 4);
 801710c:	f107 0310 	add.w	r3, r7, #16
 8017110:	601a      	str	r2, [r3, #0]
			memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_FLAGS, &flags, 2);
 8017112:	f107 0310 	add.w	r3, r7, #16
 8017116:	3304      	adds	r3, #4
 8017118:	f8b7 2816 	ldrh.w	r2, [r7, #2070]	; 0x816
 801711c:	801a      	strh	r2, [r3, #0]
			memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATAIN2_LEN, &wrapped_len, 2);
 801711e:	f107 0310 	add.w	r3, r7, #16
 8017122:	3308      	adds	r3, #8
 8017124:	f8b7 2812 	ldrh.w	r2, [r7, #2066]	; 0x812
 8017128:	801a      	strh	r2, [r3, #0]
			memcpy(request+SE3_CMD1_CRYPTO_UPDATE_REQ_OFF_DATA, keyptr+B5_AES_BLK_SIZE, wrapped_len); // go past parameters iv
 801712a:	f107 0310 	add.w	r3, r7, #16
 801712e:	3310      	adds	r3, #16
 8017130:	f8d7 2864 	ldr.w	r2, [r7, #2148]	; 0x864
 8017134:	f102 0110 	add.w	r1, r2, #16
 8017138:	f8b7 2812 	ldrh.w	r2, [r7, #2066]	; 0x812
 801713c:	4618      	mov	r0, r3
 801713e:	f000 f94f 	bl	80173e0 <memcpy>
			this_req_size = 4 + 2 + 2 + wrapped_len;
 8017142:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8017146:	3308      	adds	r3, #8
 8017148:	f8a7 3860 	strh.w	r3, [r7, #2144]	; 0x860
			rc = crypto_update(this_req_size, request, &response_size, response);
 801714c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8017150:	f607 0232 	addw	r2, r7, #2098	; 0x832
 8017154:	f107 0110 	add.w	r1, r7, #16
 8017158:	f8b7 0860 	ldrh.w	r0, [r7, #2144]	; 0x860
 801715c:	f7fe fd7e 	bl	8015c5c <crypto_update>
 8017160:	4603      	mov	r3, r0
 8017162:	f8a7 3862 	strh.w	r3, [r7, #2146]	; 0x862
			if(rc != SE3_OK){
 8017166:	f8b7 3862 	ldrh.w	r3, [r7, #2146]	; 0x862
 801716a:	2b00      	cmp	r3, #0
 801716c:	d009      	beq.n	8017182 <insert_key+0x36e>
				if(key_data != NULL){ free(key_data); }
 801716e:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8017172:	2b00      	cmp	r3, #0
 8017174:	d003      	beq.n	801717e <insert_key+0x36a>
 8017176:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 801717a:	f000 f91b 	bl	80173b4 <free>
				return SE3_ERR_RESOURCE;
 801717e:	23c8      	movs	r3, #200	; 0xc8
 8017180:	e0ba      	b.n	80172f8 <insert_key+0x4e4>
			}

			// parse response buffer after crypto_update()
			uint16_t decrypted_size = 0;
 8017182:	2300      	movs	r3, #0
 8017184:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8017188:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801718c:	881b      	ldrh	r3, [r3, #0]
			memcpy(&decrypted_size, response+SE3_CMD1_CRYPTO_UPDATE_RESP_OFF_DATAOUT_LEN, 2);
 801718e:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
			if(decrypted_size != wrapped_len){
 8017192:	f8b7 2810 	ldrh.w	r2, [r7, #2064]	; 0x810
 8017196:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 801719a:	429a      	cmp	r2, r3
 801719c:	d009      	beq.n	80171b2 <insert_key+0x39e>
				if(key_data != NULL){ free(key_data); }
 801719e:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d003      	beq.n	80171ae <insert_key+0x39a>
 80171a6:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 80171aa:	f000 f903 	bl	80173b4 <free>
				return SE3_ERR_RESOURCE;
 80171ae:	23c8      	movs	r3, #200	; 0xc8
 80171b0:	e0a2      	b.n	80172f8 <insert_key+0x4e4>
			}
			uint8_t padding = response[SE3_CMD1_CRYPTO_UPDATE_RESP_OFF_DATA+decrypted_size-1]; // read how much padding (PKCS#7, last byte)
 80171b2:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 80171b6:	330f      	adds	r3, #15
 80171b8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80171bc:	5cd3      	ldrb	r3, [r2, r3]
 80171be:	f887 385f 	strb.w	r3, [r7, #2143]	; 0x85f

			// save decrypted key content into key_data
			memcpy(key_data, response+SE3_CMD1_CRYPTO_UPDATE_RESP_OFF_DATA, decrypted_size-padding);
 80171c2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80171c6:	3310      	adds	r3, #16
 80171c8:	f8b7 2810 	ldrh.w	r2, [r7, #2064]	; 0x810
 80171cc:	4611      	mov	r1, r2
 80171ce:	f897 285f 	ldrb.w	r2, [r7, #2143]	; 0x85f
 80171d2:	1a8a      	subs	r2, r1, r2
 80171d4:	4619      	mov	r1, r3
 80171d6:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 80171da:	f000 f901 	bl	80173e0 <memcpy>
			key_data_len = decrypted_size-padding; // update real length of key
 80171de:	f8b7 2810 	ldrh.w	r2, [r7, #2064]	; 0x810
 80171e2:	f897 385f 	ldrb.w	r3, [r7, #2143]	; 0x85f
 80171e6:	b29b      	uxth	r3, r3
 80171e8:	1ad3      	subs	r3, r2, r3
 80171ea:	b29b      	uxth	r3, r3
 80171ec:	f8a7 3852 	strh.w	r3, [r7, #2130]	; 0x852
		}
	}

	// now everything is ready to store the key in the SEcube
	key.id = key_id;
 80171f0:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 80171f4:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
	key.data_size = key_data_len;
 80171f8:	f8b7 3852 	ldrh.w	r3, [r7, #2130]	; 0x852
 80171fc:	f8a7 3848 	strh.w	r3, [r7, #2120]	; 0x848
	key.data = key_data;
 8017200:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8017204:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
	 * a key with the same id and the same content, if the key is already there (same id, same length, same key value...)
	 * do nothing and return ok. if the key is already there (same id) but is not exactly equal or if the key is not there
	 * (key with that id not found in flash) then delete the flash block (if key id is equal but key content is not the same)
	 * and create the new key, finally return ok. */

	se3_flash_it_init(&it);
 8017208:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801720c:	4618      	mov	r0, r3
 801720e:	f7fd fecc 	bl	8014faa <se3_flash_it_init>
	if (!se3_key_find(key.id, &it)) { // search in the flash memory if a key with the same ID is already present
 8017212:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8017216:	f607 0234 	addw	r2, r7, #2100	; 0x834
 801721a:	4611      	mov	r1, r2
 801721c:	4618      	mov	r0, r3
 801721e:	f7fe f833 	bl	8015288 <se3_key_find>
 8017222:	4603      	mov	r3, r0
 8017224:	f083 0301 	eor.w	r3, r3, #1
 8017228:	b2db      	uxtb	r3, r3
 801722a:	2b00      	cmp	r3, #0
 801722c:	d002      	beq.n	8017234 <insert_key+0x420>
		it.addr = NULL;
 801722e:	2300      	movs	r3, #0
 8017230:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
	}
	if (NULL != it.addr) { // enter if there's another key with same ID
 8017234:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8017238:	2b00      	cmp	r3, #0
 801723a:	d027      	beq.n	801728c <insert_key+0x478>
		equal = se3_key_equal(&it, &key);  // do not replace if equal
 801723c:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8017240:	f607 0334 	addw	r3, r7, #2100	; 0x834
 8017244:	4611      	mov	r1, r2
 8017246:	4618      	mov	r0, r3
 8017248:	f7fe f88e 	bl	8015368 <se3_key_equal>
 801724c:	4603      	mov	r3, r0
 801724e:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
		if (!equal) { // if not equal delete current key
 8017252:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8017256:	f083 0301 	eor.w	r3, r3, #1
 801725a:	b2db      	uxtb	r3, r3
 801725c:	2b00      	cmp	r3, #0
 801725e:	d015      	beq.n	801728c <insert_key+0x478>
			if (!se3_flash_it_delete(&it)) {
 8017260:	f607 0334 	addw	r3, r7, #2100	; 0x834
 8017264:	4618      	mov	r0, r3
 8017266:	f7fd ffcf 	bl	8015208 <se3_flash_it_delete>
 801726a:	4603      	mov	r3, r0
 801726c:	f083 0301 	eor.w	r3, r3, #1
 8017270:	b2db      	uxtb	r3, r3
 8017272:	2b00      	cmp	r3, #0
 8017274:	d00a      	beq.n	801728c <insert_key+0x478>
				if(key_data != NULL){
 8017276:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 801727a:	2b00      	cmp	r3, #0
 801727c:	d003      	beq.n	8017286 <insert_key+0x472>
					free(key_data);
 801727e:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 8017282:	f000 f897 	bl	80173b4 <free>
				}
				return SE3_ERR_HW;
 8017286:	f24f 0301 	movw	r3, #61441	; 0xf001
 801728a:	e035      	b.n	80172f8 <insert_key+0x4e4>
			}
		}
	}
	it.addr = NULL;
 801728c:	2300      	movs	r3, #0
 801728e:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
	if (!equal) { // if not equal create new key
 8017292:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8017296:	f083 0301 	eor.w	r3, r3, #1
 801729a:	b2db      	uxtb	r3, r3
 801729c:	2b00      	cmp	r3, #0
 801729e:	d018      	beq.n	80172d2 <insert_key+0x4be>
		if (!se3_key_new(&it, &key)) {
 80172a0:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80172a4:	f607 0334 	addw	r3, r7, #2100	; 0x834
 80172a8:	4611      	mov	r1, r2
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7fe f810 	bl	80152d0 <se3_key_new>
 80172b0:	4603      	mov	r3, r0
 80172b2:	f083 0301 	eor.w	r3, r3, #1
 80172b6:	b2db      	uxtb	r3, r3
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d00a      	beq.n	80172d2 <insert_key+0x4be>
			if(key_data != NULL){
 80172bc:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d003      	beq.n	80172cc <insert_key+0x4b8>
				free(key_data);
 80172c4:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 80172c8:	f000 f874 	bl	80173b4 <free>
			}
			return SE3_ERR_MEMORY;
 80172cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80172d0:	e012      	b.n	80172f8 <insert_key+0x4e4>
		}
	}
	if(key_data != NULL){
 80172d2:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d003      	beq.n	80172e2 <insert_key+0x4ce>
		free(key_data);
 80172da:	f8d7 0868 	ldr.w	r0, [r7, #2152]	; 0x868
 80172de:	f000 f869 	bl	80173b4 <free>
	}
	*resp_size = 2;
 80172e2:	1d3b      	adds	r3, r7, #4
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	2202      	movs	r2, #2
 80172e8:	801a      	strh	r2, [r3, #0]
	memcpy(resp, "OK", 2);
 80172ea:	463b      	mov	r3, r7
 80172ec:	2202      	movs	r2, #2
 80172ee:	4905      	ldr	r1, [pc, #20]	; (8017304 <insert_key+0x4f0>)
 80172f0:	6818      	ldr	r0, [r3, #0]
 80172f2:	f000 f875 	bl	80173e0 <memcpy>
	return SE3_OK;
 80172f6:	2300      	movs	r3, #0
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	f607 0774 	addw	r7, r7, #2164	; 0x874
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd90      	pop	{r4, r7, pc}
 8017302:	bf00      	nop
 8017304:	08017668 	.word	0x08017668

08017308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8017308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 801730c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801730e:	e003      	b.n	8017318 <LoopCopyDataInit>

08017310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8017310:	4b0c      	ldr	r3, [pc, #48]	; (8017344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8017312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8017314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8017316:	3104      	adds	r1, #4

08017318 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8017318:	480b      	ldr	r0, [pc, #44]	; (8017348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801731a:	4b0c      	ldr	r3, [pc, #48]	; (801734c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801731c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801731e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8017320:	d3f6      	bcc.n	8017310 <CopyDataInit>
  ldr  r2, =_sbss
 8017322:	4a0b      	ldr	r2, [pc, #44]	; (8017350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8017324:	e002      	b.n	801732c <LoopFillZerobss>

08017326 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8017326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8017328:	f842 3b04 	str.w	r3, [r2], #4

0801732c <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 801732c:	4b09      	ldr	r3, [pc, #36]	; (8017354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801732e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8017330:	d3f9      	bcc.n	8017326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8017332:	f7f3 fdb9 	bl	800aea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017336:	f000 f811 	bl	801735c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801733a:	f7f3 f903 	bl	800a544 <main>
  bx  lr
 801733e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8017340:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8017344:	08068698 	.word	0x08068698
  ldr  r0, =_sdata
 8017348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801734c:	2000030c 	.word	0x2000030c
  ldr  r2, =_sbss
 8017350:	20000310 	.word	0x20000310
  ldr  r3, = _ebss
 8017354:	2000d960 	.word	0x2000d960

08017358 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017358:	e7fe      	b.n	8017358 <ADC_IRQHandler>
	...

0801735c <__libc_init_array>:
 801735c:	b570      	push	{r4, r5, r6, lr}
 801735e:	4d0d      	ldr	r5, [pc, #52]	; (8017394 <__libc_init_array+0x38>)
 8017360:	4c0d      	ldr	r4, [pc, #52]	; (8017398 <__libc_init_array+0x3c>)
 8017362:	1b64      	subs	r4, r4, r5
 8017364:	10a4      	asrs	r4, r4, #2
 8017366:	2600      	movs	r6, #0
 8017368:	42a6      	cmp	r6, r4
 801736a:	d109      	bne.n	8017380 <__libc_init_array+0x24>
 801736c:	4d0b      	ldr	r5, [pc, #44]	; (801739c <__libc_init_array+0x40>)
 801736e:	4c0c      	ldr	r4, [pc, #48]	; (80173a0 <__libc_init_array+0x44>)
 8017370:	f000 f93c 	bl	80175ec <_init>
 8017374:	1b64      	subs	r4, r4, r5
 8017376:	10a4      	asrs	r4, r4, #2
 8017378:	2600      	movs	r6, #0
 801737a:	42a6      	cmp	r6, r4
 801737c:	d105      	bne.n	801738a <__libc_init_array+0x2e>
 801737e:	bd70      	pop	{r4, r5, r6, pc}
 8017380:	f855 3b04 	ldr.w	r3, [r5], #4
 8017384:	4798      	blx	r3
 8017386:	3601      	adds	r6, #1
 8017388:	e7ee      	b.n	8017368 <__libc_init_array+0xc>
 801738a:	f855 3b04 	ldr.w	r3, [r5], #4
 801738e:	4798      	blx	r3
 8017390:	3601      	adds	r6, #1
 8017392:	e7f2      	b.n	801737a <__libc_init_array+0x1e>
 8017394:	08068690 	.word	0x08068690
 8017398:	08068690 	.word	0x08068690
 801739c:	08068690 	.word	0x08068690
 80173a0:	08068694 	.word	0x08068694

080173a4 <malloc>:
 80173a4:	4b02      	ldr	r3, [pc, #8]	; (80173b0 <malloc+0xc>)
 80173a6:	4601      	mov	r1, r0
 80173a8:	6818      	ldr	r0, [r3, #0]
 80173aa:	f000 b899 	b.w	80174e0 <_malloc_r>
 80173ae:	bf00      	nop
 80173b0:	200002a8 	.word	0x200002a8

080173b4 <free>:
 80173b4:	4b02      	ldr	r3, [pc, #8]	; (80173c0 <free+0xc>)
 80173b6:	4601      	mov	r1, r0
 80173b8:	6818      	ldr	r0, [r3, #0]
 80173ba:	f000 b841 	b.w	8017440 <_free_r>
 80173be:	bf00      	nop
 80173c0:	200002a8 	.word	0x200002a8

080173c4 <memcmp>:
 80173c4:	b530      	push	{r4, r5, lr}
 80173c6:	3901      	subs	r1, #1
 80173c8:	2400      	movs	r4, #0
 80173ca:	42a2      	cmp	r2, r4
 80173cc:	d101      	bne.n	80173d2 <memcmp+0xe>
 80173ce:	2000      	movs	r0, #0
 80173d0:	e005      	b.n	80173de <memcmp+0x1a>
 80173d2:	5d03      	ldrb	r3, [r0, r4]
 80173d4:	3401      	adds	r4, #1
 80173d6:	5d0d      	ldrb	r5, [r1, r4]
 80173d8:	42ab      	cmp	r3, r5
 80173da:	d0f6      	beq.n	80173ca <memcmp+0x6>
 80173dc:	1b58      	subs	r0, r3, r5
 80173de:	bd30      	pop	{r4, r5, pc}

080173e0 <memcpy>:
 80173e0:	440a      	add	r2, r1
 80173e2:	4291      	cmp	r1, r2
 80173e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80173e8:	d100      	bne.n	80173ec <memcpy+0xc>
 80173ea:	4770      	bx	lr
 80173ec:	b510      	push	{r4, lr}
 80173ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80173f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80173f6:	4291      	cmp	r1, r2
 80173f8:	d1f9      	bne.n	80173ee <memcpy+0xe>
 80173fa:	bd10      	pop	{r4, pc}

080173fc <memmove>:
 80173fc:	4288      	cmp	r0, r1
 80173fe:	b510      	push	{r4, lr}
 8017400:	eb01 0402 	add.w	r4, r1, r2
 8017404:	d902      	bls.n	801740c <memmove+0x10>
 8017406:	4284      	cmp	r4, r0
 8017408:	4623      	mov	r3, r4
 801740a:	d807      	bhi.n	801741c <memmove+0x20>
 801740c:	1e43      	subs	r3, r0, #1
 801740e:	42a1      	cmp	r1, r4
 8017410:	d008      	beq.n	8017424 <memmove+0x28>
 8017412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017416:	f803 2f01 	strb.w	r2, [r3, #1]!
 801741a:	e7f8      	b.n	801740e <memmove+0x12>
 801741c:	4402      	add	r2, r0
 801741e:	4601      	mov	r1, r0
 8017420:	428a      	cmp	r2, r1
 8017422:	d100      	bne.n	8017426 <memmove+0x2a>
 8017424:	bd10      	pop	{r4, pc}
 8017426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801742a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801742e:	e7f7      	b.n	8017420 <memmove+0x24>

08017430 <memset>:
 8017430:	4402      	add	r2, r0
 8017432:	4603      	mov	r3, r0
 8017434:	4293      	cmp	r3, r2
 8017436:	d100      	bne.n	801743a <memset+0xa>
 8017438:	4770      	bx	lr
 801743a:	f803 1b01 	strb.w	r1, [r3], #1
 801743e:	e7f9      	b.n	8017434 <memset+0x4>

08017440 <_free_r>:
 8017440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017442:	2900      	cmp	r1, #0
 8017444:	d048      	beq.n	80174d8 <_free_r+0x98>
 8017446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801744a:	9001      	str	r0, [sp, #4]
 801744c:	2b00      	cmp	r3, #0
 801744e:	f1a1 0404 	sub.w	r4, r1, #4
 8017452:	bfb8      	it	lt
 8017454:	18e4      	addlt	r4, r4, r3
 8017456:	f000 f8ad 	bl	80175b4 <__malloc_lock>
 801745a:	4a20      	ldr	r2, [pc, #128]	; (80174dc <_free_r+0x9c>)
 801745c:	9801      	ldr	r0, [sp, #4]
 801745e:	6813      	ldr	r3, [r2, #0]
 8017460:	4615      	mov	r5, r2
 8017462:	b933      	cbnz	r3, 8017472 <_free_r+0x32>
 8017464:	6063      	str	r3, [r4, #4]
 8017466:	6014      	str	r4, [r2, #0]
 8017468:	b003      	add	sp, #12
 801746a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801746e:	f000 b8a7 	b.w	80175c0 <__malloc_unlock>
 8017472:	42a3      	cmp	r3, r4
 8017474:	d90b      	bls.n	801748e <_free_r+0x4e>
 8017476:	6821      	ldr	r1, [r4, #0]
 8017478:	1862      	adds	r2, r4, r1
 801747a:	4293      	cmp	r3, r2
 801747c:	bf04      	itt	eq
 801747e:	681a      	ldreq	r2, [r3, #0]
 8017480:	685b      	ldreq	r3, [r3, #4]
 8017482:	6063      	str	r3, [r4, #4]
 8017484:	bf04      	itt	eq
 8017486:	1852      	addeq	r2, r2, r1
 8017488:	6022      	streq	r2, [r4, #0]
 801748a:	602c      	str	r4, [r5, #0]
 801748c:	e7ec      	b.n	8017468 <_free_r+0x28>
 801748e:	461a      	mov	r2, r3
 8017490:	685b      	ldr	r3, [r3, #4]
 8017492:	b10b      	cbz	r3, 8017498 <_free_r+0x58>
 8017494:	42a3      	cmp	r3, r4
 8017496:	d9fa      	bls.n	801748e <_free_r+0x4e>
 8017498:	6811      	ldr	r1, [r2, #0]
 801749a:	1855      	adds	r5, r2, r1
 801749c:	42a5      	cmp	r5, r4
 801749e:	d10b      	bne.n	80174b8 <_free_r+0x78>
 80174a0:	6824      	ldr	r4, [r4, #0]
 80174a2:	4421      	add	r1, r4
 80174a4:	1854      	adds	r4, r2, r1
 80174a6:	42a3      	cmp	r3, r4
 80174a8:	6011      	str	r1, [r2, #0]
 80174aa:	d1dd      	bne.n	8017468 <_free_r+0x28>
 80174ac:	681c      	ldr	r4, [r3, #0]
 80174ae:	685b      	ldr	r3, [r3, #4]
 80174b0:	6053      	str	r3, [r2, #4]
 80174b2:	4421      	add	r1, r4
 80174b4:	6011      	str	r1, [r2, #0]
 80174b6:	e7d7      	b.n	8017468 <_free_r+0x28>
 80174b8:	d902      	bls.n	80174c0 <_free_r+0x80>
 80174ba:	230c      	movs	r3, #12
 80174bc:	6003      	str	r3, [r0, #0]
 80174be:	e7d3      	b.n	8017468 <_free_r+0x28>
 80174c0:	6825      	ldr	r5, [r4, #0]
 80174c2:	1961      	adds	r1, r4, r5
 80174c4:	428b      	cmp	r3, r1
 80174c6:	bf04      	itt	eq
 80174c8:	6819      	ldreq	r1, [r3, #0]
 80174ca:	685b      	ldreq	r3, [r3, #4]
 80174cc:	6063      	str	r3, [r4, #4]
 80174ce:	bf04      	itt	eq
 80174d0:	1949      	addeq	r1, r1, r5
 80174d2:	6021      	streq	r1, [r4, #0]
 80174d4:	6054      	str	r4, [r2, #4]
 80174d6:	e7c7      	b.n	8017468 <_free_r+0x28>
 80174d8:	b003      	add	sp, #12
 80174da:	bd30      	pop	{r4, r5, pc}
 80174dc:	2000042c 	.word	0x2000042c

080174e0 <_malloc_r>:
 80174e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174e2:	1ccd      	adds	r5, r1, #3
 80174e4:	f025 0503 	bic.w	r5, r5, #3
 80174e8:	3508      	adds	r5, #8
 80174ea:	2d0c      	cmp	r5, #12
 80174ec:	bf38      	it	cc
 80174ee:	250c      	movcc	r5, #12
 80174f0:	2d00      	cmp	r5, #0
 80174f2:	4606      	mov	r6, r0
 80174f4:	db01      	blt.n	80174fa <_malloc_r+0x1a>
 80174f6:	42a9      	cmp	r1, r5
 80174f8:	d903      	bls.n	8017502 <_malloc_r+0x22>
 80174fa:	230c      	movs	r3, #12
 80174fc:	6033      	str	r3, [r6, #0]
 80174fe:	2000      	movs	r0, #0
 8017500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017502:	f000 f857 	bl	80175b4 <__malloc_lock>
 8017506:	4921      	ldr	r1, [pc, #132]	; (801758c <_malloc_r+0xac>)
 8017508:	680a      	ldr	r2, [r1, #0]
 801750a:	4614      	mov	r4, r2
 801750c:	b99c      	cbnz	r4, 8017536 <_malloc_r+0x56>
 801750e:	4f20      	ldr	r7, [pc, #128]	; (8017590 <_malloc_r+0xb0>)
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	b923      	cbnz	r3, 801751e <_malloc_r+0x3e>
 8017514:	4621      	mov	r1, r4
 8017516:	4630      	mov	r0, r6
 8017518:	f000 f83c 	bl	8017594 <_sbrk_r>
 801751c:	6038      	str	r0, [r7, #0]
 801751e:	4629      	mov	r1, r5
 8017520:	4630      	mov	r0, r6
 8017522:	f000 f837 	bl	8017594 <_sbrk_r>
 8017526:	1c43      	adds	r3, r0, #1
 8017528:	d123      	bne.n	8017572 <_malloc_r+0x92>
 801752a:	230c      	movs	r3, #12
 801752c:	6033      	str	r3, [r6, #0]
 801752e:	4630      	mov	r0, r6
 8017530:	f000 f846 	bl	80175c0 <__malloc_unlock>
 8017534:	e7e3      	b.n	80174fe <_malloc_r+0x1e>
 8017536:	6823      	ldr	r3, [r4, #0]
 8017538:	1b5b      	subs	r3, r3, r5
 801753a:	d417      	bmi.n	801756c <_malloc_r+0x8c>
 801753c:	2b0b      	cmp	r3, #11
 801753e:	d903      	bls.n	8017548 <_malloc_r+0x68>
 8017540:	6023      	str	r3, [r4, #0]
 8017542:	441c      	add	r4, r3
 8017544:	6025      	str	r5, [r4, #0]
 8017546:	e004      	b.n	8017552 <_malloc_r+0x72>
 8017548:	6863      	ldr	r3, [r4, #4]
 801754a:	42a2      	cmp	r2, r4
 801754c:	bf0c      	ite	eq
 801754e:	600b      	streq	r3, [r1, #0]
 8017550:	6053      	strne	r3, [r2, #4]
 8017552:	4630      	mov	r0, r6
 8017554:	f000 f834 	bl	80175c0 <__malloc_unlock>
 8017558:	f104 000b 	add.w	r0, r4, #11
 801755c:	1d23      	adds	r3, r4, #4
 801755e:	f020 0007 	bic.w	r0, r0, #7
 8017562:	1ac2      	subs	r2, r0, r3
 8017564:	d0cc      	beq.n	8017500 <_malloc_r+0x20>
 8017566:	1a1b      	subs	r3, r3, r0
 8017568:	50a3      	str	r3, [r4, r2]
 801756a:	e7c9      	b.n	8017500 <_malloc_r+0x20>
 801756c:	4622      	mov	r2, r4
 801756e:	6864      	ldr	r4, [r4, #4]
 8017570:	e7cc      	b.n	801750c <_malloc_r+0x2c>
 8017572:	1cc4      	adds	r4, r0, #3
 8017574:	f024 0403 	bic.w	r4, r4, #3
 8017578:	42a0      	cmp	r0, r4
 801757a:	d0e3      	beq.n	8017544 <_malloc_r+0x64>
 801757c:	1a21      	subs	r1, r4, r0
 801757e:	4630      	mov	r0, r6
 8017580:	f000 f808 	bl	8017594 <_sbrk_r>
 8017584:	3001      	adds	r0, #1
 8017586:	d1dd      	bne.n	8017544 <_malloc_r+0x64>
 8017588:	e7cf      	b.n	801752a <_malloc_r+0x4a>
 801758a:	bf00      	nop
 801758c:	2000042c 	.word	0x2000042c
 8017590:	20000430 	.word	0x20000430

08017594 <_sbrk_r>:
 8017594:	b538      	push	{r3, r4, r5, lr}
 8017596:	4d06      	ldr	r5, [pc, #24]	; (80175b0 <_sbrk_r+0x1c>)
 8017598:	2300      	movs	r3, #0
 801759a:	4604      	mov	r4, r0
 801759c:	4608      	mov	r0, r1
 801759e:	602b      	str	r3, [r5, #0]
 80175a0:	f000 f816 	bl	80175d0 <_sbrk>
 80175a4:	1c43      	adds	r3, r0, #1
 80175a6:	d102      	bne.n	80175ae <_sbrk_r+0x1a>
 80175a8:	682b      	ldr	r3, [r5, #0]
 80175aa:	b103      	cbz	r3, 80175ae <_sbrk_r+0x1a>
 80175ac:	6023      	str	r3, [r4, #0]
 80175ae:	bd38      	pop	{r3, r4, r5, pc}
 80175b0:	2000d950 	.word	0x2000d950

080175b4 <__malloc_lock>:
 80175b4:	4801      	ldr	r0, [pc, #4]	; (80175bc <__malloc_lock+0x8>)
 80175b6:	f000 b809 	b.w	80175cc <__retarget_lock_acquire_recursive>
 80175ba:	bf00      	nop
 80175bc:	2000d958 	.word	0x2000d958

080175c0 <__malloc_unlock>:
 80175c0:	4801      	ldr	r0, [pc, #4]	; (80175c8 <__malloc_unlock+0x8>)
 80175c2:	f000 b804 	b.w	80175ce <__retarget_lock_release_recursive>
 80175c6:	bf00      	nop
 80175c8:	2000d958 	.word	0x2000d958

080175cc <__retarget_lock_acquire_recursive>:
 80175cc:	4770      	bx	lr

080175ce <__retarget_lock_release_recursive>:
 80175ce:	4770      	bx	lr

080175d0 <_sbrk>:
 80175d0:	4b04      	ldr	r3, [pc, #16]	; (80175e4 <_sbrk+0x14>)
 80175d2:	6819      	ldr	r1, [r3, #0]
 80175d4:	4602      	mov	r2, r0
 80175d6:	b909      	cbnz	r1, 80175dc <_sbrk+0xc>
 80175d8:	4903      	ldr	r1, [pc, #12]	; (80175e8 <_sbrk+0x18>)
 80175da:	6019      	str	r1, [r3, #0]
 80175dc:	6818      	ldr	r0, [r3, #0]
 80175de:	4402      	add	r2, r0
 80175e0:	601a      	str	r2, [r3, #0]
 80175e2:	4770      	bx	lr
 80175e4:	20000434 	.word	0x20000434
 80175e8:	2000d960 	.word	0x2000d960

080175ec <_init>:
 80175ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ee:	bf00      	nop
 80175f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175f2:	bc08      	pop	{r3}
 80175f4:	469e      	mov	lr, r3
 80175f6:	4770      	bx	lr

080175f8 <_fini>:
 80175f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175fa:	bf00      	nop
 80175fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175fe:	bc08      	pop	{r3}
 8017600:	469e      	mov	lr, r3
 8017602:	4770      	bx	lr
